/* tslint:disable */
/* eslint-disable */
/**
 * FOS - Parental Leaves API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    EstimatedPaymentPlan,
    EstimatedPaymentPlanFromJSON,
    EstimatedPaymentPlanToJSON,
    ParentalLeave,
    ParentalLeaveFromJSON,
    ParentalLeaveToJSON,
    ParentalLeavesResponse,
    ParentalLeavesResponseFromJSON,
    ParentalLeavesResponseToJSON,
    PaymentPlansResponse,
    PaymentPlansResponseFromJSON,
    PaymentPlansResponseToJSON,
    Period,
    PeriodFromJSON,
    PeriodToJSON,
    PeriodEndDateResponse,
    PeriodEndDateResponseFromJSON,
    PeriodEndDateResponseToJSON,
    PeriodLengthResponse,
    PeriodLengthResponseFromJSON,
    PeriodLengthResponseToJSON,
    PostParentalLeaveResponse,
    PostParentalLeaveResponseFromJSON,
    PostParentalLeaveResponseToJSON,
    Right,
    RightFromJSON,
    RightToJSON,
} from '../models';

export interface ParentalLeaveGetEstimatedPaymentPlanRequest {
    nationalRegistryId: string | null;
    dateOfBirth?: Date | null;
}

export interface ParentalLeaveGetParentalLeavesRequest {
    nationalRegistryId: string | null;
    dateOfBirth?: Date | null;
}

export interface ParentalLeaveGetPaymentPlanRequest {
    nationalRegistryId: string | null;
    applicationId: string | null;
}

export interface ParentalLeaveGetPeriodEndDateRequest {
    nationalRegistryId: string | null;
    startDate?: Date;
    length?: string | null;
    percentage?: string | null;
}

export interface ParentalLeaveGetPeriodLengthRequest {
    nationalRegistryId: string | null;
    startDate?: Date;
    endDate?: Date;
    percentage?: string | null;
}

export interface ParentalLeaveGetRightsRequest {
    nationalRegistryId: string | null;
    dateOfBirth?: Date | null;
}

export interface ParentalLeaveSetParentalLeaveRequest {
    nationalRegistryId: string | null;
    parentalLeave: ParentalLeave;
}

export interface ParentalLeaveUpdatePeriodsRequest {
    nationalRegistryId: string | null;
    applicationId: string;
    period: Array<Period>;
}

/**
 * 
 */
export class ParentalLeaveApi extends runtime.BaseAPI {

    /**
     */
    async parentalLeaveGetEstimatedPaymentPlanRaw(requestParameters: ParentalLeaveGetEstimatedPaymentPlanRequest): Promise<runtime.ApiResponse<EstimatedPaymentPlan>> {
        if (requestParameters.nationalRegistryId === null || requestParameters.nationalRegistryId === undefined) {
            throw new runtime.RequiredError('nationalRegistryId','Required parameter requestParameters.nationalRegistryId was null or undefined when calling parentalLeaveGetEstimatedPaymentPlan.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.dateOfBirth !== undefined) {
            queryParameters['dateOfBirth'] = (requestParameters.dateOfBirth as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{nationalRegistryId}/parental-leaves/estimated-payment-plan`.replace(`{${"nationalRegistryId"}}`, encodeURIComponent(String(requestParameters.nationalRegistryId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EstimatedPaymentPlanFromJSON(jsonValue));
    }

    /**
     */
    async parentalLeaveGetEstimatedPaymentPlan(requestParameters: ParentalLeaveGetEstimatedPaymentPlanRequest): Promise<EstimatedPaymentPlan> {
        const response = await this.parentalLeaveGetEstimatedPaymentPlanRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async parentalLeaveGetParentalLeavesRaw(requestParameters: ParentalLeaveGetParentalLeavesRequest): Promise<runtime.ApiResponse<ParentalLeavesResponse>> {
        if (requestParameters.nationalRegistryId === null || requestParameters.nationalRegistryId === undefined) {
            throw new runtime.RequiredError('nationalRegistryId','Required parameter requestParameters.nationalRegistryId was null or undefined when calling parentalLeaveGetParentalLeaves.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.dateOfBirth !== undefined) {
            queryParameters['dateOfBirth'] = (requestParameters.dateOfBirth as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{nationalRegistryId}/parental-leaves`.replace(`{${"nationalRegistryId"}}`, encodeURIComponent(String(requestParameters.nationalRegistryId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ParentalLeavesResponseFromJSON(jsonValue));
    }

    /**
     */
    async parentalLeaveGetParentalLeaves(requestParameters: ParentalLeaveGetParentalLeavesRequest): Promise<ParentalLeavesResponse> {
        const response = await this.parentalLeaveGetParentalLeavesRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async parentalLeaveGetPaymentPlanRaw(requestParameters: ParentalLeaveGetPaymentPlanRequest): Promise<runtime.ApiResponse<PaymentPlansResponse>> {
        if (requestParameters.nationalRegistryId === null || requestParameters.nationalRegistryId === undefined) {
            throw new runtime.RequiredError('nationalRegistryId','Required parameter requestParameters.nationalRegistryId was null or undefined when calling parentalLeaveGetPaymentPlan.');
        }

        if (requestParameters.applicationId === null || requestParameters.applicationId === undefined) {
            throw new runtime.RequiredError('applicationId','Required parameter requestParameters.applicationId was null or undefined when calling parentalLeaveGetPaymentPlan.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{nationalRegistryId}/parental-leaves/{applicationId}/payment-plan`.replace(`{${"nationalRegistryId"}}`, encodeURIComponent(String(requestParameters.nationalRegistryId))).replace(`{${"applicationId"}}`, encodeURIComponent(String(requestParameters.applicationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PaymentPlansResponseFromJSON(jsonValue));
    }

    /**
     */
    async parentalLeaveGetPaymentPlan(requestParameters: ParentalLeaveGetPaymentPlanRequest): Promise<PaymentPlansResponse> {
        const response = await this.parentalLeaveGetPaymentPlanRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async parentalLeaveGetPeriodEndDateRaw(requestParameters: ParentalLeaveGetPeriodEndDateRequest): Promise<runtime.ApiResponse<PeriodEndDateResponse>> {
        if (requestParameters.nationalRegistryId === null || requestParameters.nationalRegistryId === undefined) {
            throw new runtime.RequiredError('nationalRegistryId','Required parameter requestParameters.nationalRegistryId was null or undefined when calling parentalLeaveGetPeriodEndDate.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString();
        }

        if (requestParameters.length !== undefined) {
            queryParameters['length'] = requestParameters.length;
        }

        if (requestParameters.percentage !== undefined) {
            queryParameters['percentage'] = requestParameters.percentage;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{nationalRegistryId}/parental-leaves/periods/end-date`.replace(`{${"nationalRegistryId"}}`, encodeURIComponent(String(requestParameters.nationalRegistryId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PeriodEndDateResponseFromJSON(jsonValue));
    }

    /**
     */
    async parentalLeaveGetPeriodEndDate(requestParameters: ParentalLeaveGetPeriodEndDateRequest): Promise<PeriodEndDateResponse> {
        const response = await this.parentalLeaveGetPeriodEndDateRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async parentalLeaveGetPeriodLengthRaw(requestParameters: ParentalLeaveGetPeriodLengthRequest): Promise<runtime.ApiResponse<PeriodLengthResponse>> {
        if (requestParameters.nationalRegistryId === null || requestParameters.nationalRegistryId === undefined) {
            throw new runtime.RequiredError('nationalRegistryId','Required parameter requestParameters.nationalRegistryId was null or undefined when calling parentalLeaveGetPeriodLength.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = (requestParameters.startDate as any).toISOString();
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = (requestParameters.endDate as any).toISOString();
        }

        if (requestParameters.percentage !== undefined) {
            queryParameters['percentage'] = requestParameters.percentage;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{nationalRegistryId}/parental-leaves/periods/length`.replace(`{${"nationalRegistryId"}}`, encodeURIComponent(String(requestParameters.nationalRegistryId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PeriodLengthResponseFromJSON(jsonValue));
    }

    /**
     */
    async parentalLeaveGetPeriodLength(requestParameters: ParentalLeaveGetPeriodLengthRequest): Promise<PeriodLengthResponse> {
        const response = await this.parentalLeaveGetPeriodLengthRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async parentalLeaveGetRightsRaw(requestParameters: ParentalLeaveGetRightsRequest): Promise<runtime.ApiResponse<Right>> {
        if (requestParameters.nationalRegistryId === null || requestParameters.nationalRegistryId === undefined) {
            throw new runtime.RequiredError('nationalRegistryId','Required parameter requestParameters.nationalRegistryId was null or undefined when calling parentalLeaveGetRights.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.dateOfBirth !== undefined) {
            queryParameters['dateOfBirth'] = (requestParameters.dateOfBirth as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{nationalRegistryId}/parental-leaves/rights`.replace(`{${"nationalRegistryId"}}`, encodeURIComponent(String(requestParameters.nationalRegistryId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RightFromJSON(jsonValue));
    }

    /**
     */
    async parentalLeaveGetRights(requestParameters: ParentalLeaveGetRightsRequest): Promise<Right> {
        const response = await this.parentalLeaveGetRightsRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async parentalLeaveSetParentalLeaveRaw(requestParameters: ParentalLeaveSetParentalLeaveRequest): Promise<runtime.ApiResponse<PostParentalLeaveResponse>> {
        if (requestParameters.nationalRegistryId === null || requestParameters.nationalRegistryId === undefined) {
            throw new runtime.RequiredError('nationalRegistryId','Required parameter requestParameters.nationalRegistryId was null or undefined when calling parentalLeaveSetParentalLeave.');
        }

        if (requestParameters.parentalLeave === null || requestParameters.parentalLeave === undefined) {
            throw new runtime.RequiredError('parentalLeave','Required parameter requestParameters.parentalLeave was null or undefined when calling parentalLeaveSetParentalLeave.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/{nationalRegistryId}/parental-leaves`.replace(`{${"nationalRegistryId"}}`, encodeURIComponent(String(requestParameters.nationalRegistryId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ParentalLeaveToJSON(requestParameters.parentalLeave),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PostParentalLeaveResponseFromJSON(jsonValue));
    }

    /**
     */
    async parentalLeaveSetParentalLeave(requestParameters: ParentalLeaveSetParentalLeaveRequest): Promise<PostParentalLeaveResponse> {
        const response = await this.parentalLeaveSetParentalLeaveRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async parentalLeaveUpdatePeriodsRaw(requestParameters: ParentalLeaveUpdatePeriodsRequest): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters.nationalRegistryId === null || requestParameters.nationalRegistryId === undefined) {
            throw new runtime.RequiredError('nationalRegistryId','Required parameter requestParameters.nationalRegistryId was null or undefined when calling parentalLeaveUpdatePeriods.');
        }

        if (requestParameters.applicationId === null || requestParameters.applicationId === undefined) {
            throw new runtime.RequiredError('applicationId','Required parameter requestParameters.applicationId was null or undefined when calling parentalLeaveUpdatePeriods.');
        }

        if (requestParameters.period === null || requestParameters.period === undefined) {
            throw new runtime.RequiredError('period','Required parameter requestParameters.period was null or undefined when calling parentalLeaveUpdatePeriods.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/{nationalRegistryId}/parental-leaves/{applicationId}/periods`.replace(`{${"nationalRegistryId"}}`, encodeURIComponent(String(requestParameters.nationalRegistryId))).replace(`{${"applicationId"}}`, encodeURIComponent(String(requestParameters.applicationId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.period.map(PeriodToJSON),
        });

        return new runtime.BlobApiResponse(response);
    }

    /**
     */
    async parentalLeaveUpdatePeriods(requestParameters: ParentalLeaveUpdatePeriodsRequest): Promise<Blob> {
        const response = await this.parentalLeaveUpdatePeriodsRaw(requestParameters);
        return await response.value();
    }

}
