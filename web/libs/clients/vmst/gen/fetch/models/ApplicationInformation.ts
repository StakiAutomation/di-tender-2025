/* tslint:disable */
/* eslint-disable */
/**
 * FOS - Parental Leaves API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ApplicationEmployer,
    ApplicationEmployerFromJSON,
    ApplicationEmployerFromJSONTyped,
    ApplicationEmployerToJSON,
    ApplicationPeriod,
    ApplicationPeriodFromJSON,
    ApplicationPeriodFromJSONTyped,
    ApplicationPeriodToJSON,
    ApplicationRights,
    ApplicationRightsFromJSON,
    ApplicationRightsFromJSONTyped,
    ApplicationRightsToJSON,
    Children,
    ChildrenFromJSON,
    ChildrenFromJSONTyped,
    ChildrenToJSON,
    PaymentInfo,
    PaymentInfoFromJSON,
    PaymentInfoFromJSONTyped,
    PaymentInfoToJSON,
} from './';

/**
 * 
 * @export
 * @interface ApplicationInformation
 */
export interface ApplicationInformation {
    /**
     * 
     * @type {string}
     * @memberof ApplicationInformation
     */
    adoptionDate?: string;
    /**
     * 
     * @type {string}
     * @memberof ApplicationInformation
     */
    result: string;
    /**
     * 
     * @type {string}
     * @memberof ApplicationInformation
     */
    applicationId: string;
    /**
     * 
     * @type {string}
     * @memberof ApplicationInformation
     */
    applicationFundId: string;
    /**
     * 
     * @type {string}
     * @memberof ApplicationInformation
     */
    nationalRegisteryId: string;
    /**
     * 
     * @type {string}
     * @memberof ApplicationInformation
     */
    dateOfBirth: string;
    /**
     * 
     * @type {Date}
     * @memberof ApplicationInformation
     */
    expectedDateOfBirth: Date;
    /**
     * 
     * @type {string}
     * @memberof ApplicationInformation
     */
    applicantId: string;
    /**
     * 
     * @type {string}
     * @memberof ApplicationInformation
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof ApplicationInformation
     */
    phoneNumber: string;
    /**
     * 
     * @type {PaymentInfo}
     * @memberof ApplicationInformation
     */
    paymentInfo: PaymentInfo;
    /**
     * 
     * @type {Array<Children>}
     * @memberof ApplicationInformation
     */
    children: Array<Children>;
    /**
     * 
     * @type {string}
     * @memberof ApplicationInformation
     */
    otherParentName: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApplicationInformation
     */
    otherParentId: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApplicationInformation
     */
    status: string;
    /**
     * 
     * @type {Array<ApplicationPeriod>}
     * @memberof ApplicationInformation
     */
    periods: Array<ApplicationPeriod>;
    /**
     * 
     * @type {Array<ApplicationRights>}
     * @memberof ApplicationInformation
     */
    applicationRights: Array<ApplicationRights>;
    /**
     * 
     * @type {Array<ApplicationEmployer>}
     * @memberof ApplicationInformation
     */
    employers: Array<ApplicationEmployer>;
    /**
     * 
     * @type {string}
     * @memberof ApplicationInformation
     */
    testData: string | null;
}

export function ApplicationInformationFromJSON(json: any): ApplicationInformation {
    return ApplicationInformationFromJSONTyped(json, false);
}

export function ApplicationInformationFromJSONTyped(json: any, ignoreDiscriminator: boolean): ApplicationInformation {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'adoptionDate': !exists(json, 'adoptionDate') ? undefined : json['adoptionDate'],
        'result': json['result'],
        'applicationId': json['applicationId'],
        'applicationFundId': json['applicationFundId'],
        'nationalRegisteryId': json['nationalRegisteryId'],
        'dateOfBirth': json['dateOfBirth'],
        'expectedDateOfBirth': (new Date(json['expectedDateOfBirth'])),
        'applicantId': json['applicantId'],
        'email': json['email'],
        'phoneNumber': json['phoneNumber'],
        'paymentInfo': PaymentInfoFromJSON(json['paymentInfo']),
        'children': ((json['children'] as Array<any>).map(ChildrenFromJSON)),
        'otherParentName': json['otherParentName'],
        'otherParentId': json['otherParentId'],
        'status': json['status'],
        'periods': ((json['periods'] as Array<any>).map(ApplicationPeriodFromJSON)),
        'applicationRights': ((json['applicationRights'] as Array<any>).map(ApplicationRightsFromJSON)),
        'employers': ((json['employers'] as Array<any>).map(ApplicationEmployerFromJSON)),
        'testData': json['testData'],
    };
}

export function ApplicationInformationToJSON(value?: ApplicationInformation | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'adoptionDate': value.adoptionDate,
        'result': value.result,
        'applicationId': value.applicationId,
        'applicationFundId': value.applicationFundId,
        'nationalRegisteryId': value.nationalRegisteryId,
        'dateOfBirth': value.dateOfBirth,
        'expectedDateOfBirth': (value.expectedDateOfBirth.toISOString()),
        'applicantId': value.applicantId,
        'email': value.email,
        'phoneNumber': value.phoneNumber,
        'paymentInfo': PaymentInfoToJSON(value.paymentInfo),
        'children': ((value.children as Array<any>).map(ChildrenToJSON)),
        'otherParentName': value.otherParentName,
        'otherParentId': value.otherParentId,
        'status': value.status,
        'periods': ((value.periods as Array<any>).map(ApplicationPeriodToJSON)),
        'applicationRights': ((value.applicationRights as Array<any>).map(ApplicationRightsToJSON)),
        'employers': ((value.employers as Array<any>).map(ApplicationEmployerToJSON)),
        'testData': value.testData,
    };
}


