/* tslint:disable */
/* eslint-disable */
/**
 * License API
 * This is the API for the License system.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateLicensesBody,
    CreateLicensesBodyFromJSON,
    CreateLicensesBodyToJSON,
    License,
    LicenseFromJSON,
    LicenseToJSON,
} from '../models';

export interface PublicLicenseControllerCreateLicensesRequest {
    createLicensesBody: CreateLicensesBody;
}

export interface PublicLicenseControllerGetPDFLicenseRequest {
    licenseId: string;
    nationalId: string;
}

export interface PublicLicenseControllerGetUserLicensesRequest {
    nationalId: string;
}

/**
 * 
 */
export class LicensesApi extends runtime.BaseAPI {

    /**
     */
    async publicLicenseControllerCreateLicensesRaw(requestParameters: PublicLicenseControllerCreateLicensesRequest): Promise<runtime.ApiResponse<Array<License>>> {
        if (requestParameters.createLicensesBody === null || requestParameters.createLicensesBody === undefined) {
            throw new runtime.RequiredError('createLicensesBody','Required parameter requestParameters.createLicensesBody was null or undefined when calling publicLicenseControllerCreateLicenses.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/public/licenses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateLicensesBodyToJSON(requestParameters.createLicensesBody),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LicenseFromJSON));
    }

    /**
     */
    async publicLicenseControllerCreateLicenses(requestParameters: PublicLicenseControllerCreateLicensesRequest): Promise<Array<License>> {
        const response = await this.publicLicenseControllerCreateLicensesRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async publicLicenseControllerGetAvailableTypesRaw(): Promise<runtime.ApiResponse<License>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/public/licenses/types`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => LicenseFromJSON(jsonValue));
    }

    /**
     */
    async publicLicenseControllerGetAvailableTypes(): Promise<License> {
        const response = await this.publicLicenseControllerGetAvailableTypesRaw();
        return await response.value();
    }

    /**
     */
    async publicLicenseControllerGetPDFLicenseRaw(requestParameters: PublicLicenseControllerGetPDFLicenseRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.licenseId === null || requestParameters.licenseId === undefined) {
            throw new runtime.RequiredError('licenseId','Required parameter requestParameters.licenseId was null or undefined when calling publicLicenseControllerGetPDFLicense.');
        }

        if (requestParameters.nationalId === null || requestParameters.nationalId === undefined) {
            throw new runtime.RequiredError('nationalId','Required parameter requestParameters.nationalId was null or undefined when calling publicLicenseControllerGetPDFLicense.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/public/users/{nationalId}/licenses/{licenseId}/pdf`.replace(`{${"licenseId"}}`, encodeURIComponent(String(requestParameters.licenseId))).replace(`{${"nationalId"}}`, encodeURIComponent(String(requestParameters.nationalId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async publicLicenseControllerGetPDFLicense(requestParameters: PublicLicenseControllerGetPDFLicenseRequest): Promise<void> {
        await this.publicLicenseControllerGetPDFLicenseRaw(requestParameters);
    }

    /**
     */
    async publicLicenseControllerGetUserLicensesRaw(requestParameters: PublicLicenseControllerGetUserLicensesRequest): Promise<runtime.ApiResponse<Array<License>>> {
        if (requestParameters.nationalId === null || requestParameters.nationalId === undefined) {
            throw new runtime.RequiredError('nationalId','Required parameter requestParameters.nationalId was null or undefined when calling publicLicenseControllerGetUserLicenses.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/public/users/{nationalId}/licenses`.replace(`{${"nationalId"}}`, encodeURIComponent(String(requestParameters.nationalId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LicenseFromJSON));
    }

    /**
     */
    async publicLicenseControllerGetUserLicenses(requestParameters: PublicLicenseControllerGetUserLicensesRequest): Promise<Array<License>> {
        const response = await this.publicLicenseControllerGetUserLicensesRaw(requestParameters);
        return await response.value();
    }

}
