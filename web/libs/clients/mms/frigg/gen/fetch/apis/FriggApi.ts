/* tslint:disable */
/* eslint-disable */
/**
 * MMS FORM SERVICE API
 * Frigg - student information system
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    FormDto,
    FormDtoFromJSON,
    FormDtoToJSON,
    FormSubmitSuccessModel,
    FormSubmitSuccessModelFromJSON,
    FormSubmitSuccessModelToJSON,
    KeyOption,
    KeyOptionFromJSON,
    KeyOptionToJSON,
    OrganizationModel,
    OrganizationModelFromJSON,
    OrganizationModelToJSON,
    UserModel,
    UserModelFromJSON,
    UserModelToJSON,
} from '../models';

export interface GetAllKeyOptionsRequest {
    type?: string;
}

export interface GetAllSchoolsByMunicipalityRequest {
    sort?: string;
    orderBy?: GetAllSchoolsByMunicipalityOrderByEnum;
    limit?: number;
    offset?: number;
}

export interface GetUserBySourcedIdRequest {
    nationalId: string;
}

export interface SubmitFormRequest {
    formDto: FormDto;
}

/**
 * 
 */
export class FriggApi extends runtime.BaseAPI {

    /**
     * Get all key options, can be filtered by type. If type input is not valid, all key options will be returned.
     * Get all key options.
     */
    async getAllKeyOptionsRaw(requestParameters: GetAllKeyOptionsRequest): Promise<runtime.ApiResponse<Array<KeyOption>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/key-options`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(KeyOptionFromJSON));
    }

    /**
     * Get all key options, can be filtered by type. If type input is not valid, all key options will be returned.
     * Get all key options.
     */
    async getAllKeyOptions(requestParameters: GetAllKeyOptionsRequest): Promise<Array<KeyOption>> {
        const response = await this.getAllKeyOptionsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns a paginated collection of schools.
     * Get all schools.
     */
    async getAllSchoolsByMunicipalityRaw(requestParameters: GetAllSchoolsByMunicipalityRequest): Promise<runtime.ApiResponse<Array<OrganizationModel>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.sort !== undefined) {
            queryParameters['sort'] = requestParameters.sort;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/schools`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OrganizationModelFromJSON));
    }

    /**
     * Returns a paginated collection of schools.
     * Get all schools.
     */
    async getAllSchoolsByMunicipality(requestParameters: GetAllSchoolsByMunicipalityRequest): Promise<Array<OrganizationModel>> {
        const response = await this.getAllSchoolsByMunicipalityRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get types.
     * Get list of types of forms
     */
    async getFormTypesRaw(): Promise<runtime.ApiResponse<Array<string>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/forms/types`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get types.
     * Get list of types of forms
     */
    async getFormTypes(): Promise<Array<string>> {
        const response = await this.getFormTypesRaw();
        return await response.value();
    }

    /**
     * Get types.
     * Get list of types of key options
     */
    async getKeyOptionsTypesRaw(): Promise<runtime.ApiResponse<Array<string>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/key-options/types`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get types.
     * Get list of types of key options
     */
    async getKeyOptionsTypes(): Promise<Array<string>> {
        const response = await this.getKeyOptionsTypesRaw();
        return await response.value();
    }

    /**
     * Get user by Id.
     * Get user by nationalId
     */
    async getUserBySourcedIdRaw(requestParameters: GetUserBySourcedIdRequest): Promise<runtime.ApiResponse<UserModel>> {
        if (requestParameters.nationalId === null || requestParameters.nationalId === undefined) {
            throw new runtime.RequiredError('nationalId','Required parameter requestParameters.nationalId was null or undefined when calling getUserBySourcedId.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/students/{nationalId}`.replace(`{${"nationalId"}}`, encodeURIComponent(String(requestParameters.nationalId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserModelFromJSON(jsonValue));
    }

    /**
     * Get user by Id.
     * Get user by nationalId
     */
    async getUserBySourcedId(requestParameters: GetUserBySourcedIdRequest): Promise<UserModel> {
        const response = await this.getUserBySourcedIdRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async submitFormRaw(requestParameters: SubmitFormRequest): Promise<runtime.ApiResponse<FormSubmitSuccessModel>> {
        if (requestParameters.formDto === null || requestParameters.formDto === undefined) {
            throw new runtime.RequiredError('formDto','Required parameter requestParameters.formDto was null or undefined when calling submitForm.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/forms`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FormDtoToJSON(requestParameters.formDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => FormSubmitSuccessModelFromJSON(jsonValue));
    }

    /**
     */
    async submitForm(requestParameters: SubmitFormRequest): Promise<FormSubmitSuccessModel> {
        const response = await this.submitFormRaw(requestParameters);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum GetAllSchoolsByMunicipalityOrderByEnum {
    Asc = 'asc',
    Desc = 'desc'
}
