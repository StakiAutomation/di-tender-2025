/* tslint:disable */
/* eslint-disable */
/**
 * TR Portal API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface TrWebCommonsExternalPortalsApiModelsDocumentsDocument
 */
export interface TrWebCommonsExternalPortalsApiModelsDocumentsDocument {
    /**
     * The name of the document
     * @type {string}
     * @memberof TrWebCommonsExternalPortalsApiModelsDocumentsDocument
     */
    name?: string | null;
    /**
     * The type of the document
     * @type {string}
     * @memberof TrWebCommonsExternalPortalsApiModelsDocumentsDocument
     */
    type?: string | null;
    /**
     * The actual file (base64 encoded) of the document
     * @type {string}
     * @memberof TrWebCommonsExternalPortalsApiModelsDocumentsDocument
     */
    file?: string | null;
}

export function TrWebCommonsExternalPortalsApiModelsDocumentsDocumentFromJSON(json: any): TrWebCommonsExternalPortalsApiModelsDocumentsDocument {
    return TrWebCommonsExternalPortalsApiModelsDocumentsDocumentFromJSONTyped(json, false);
}

export function TrWebCommonsExternalPortalsApiModelsDocumentsDocumentFromJSONTyped(json: any, ignoreDiscriminator: boolean): TrWebCommonsExternalPortalsApiModelsDocumentsDocument {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': !exists(json, 'name') ? undefined : json['name'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'file': !exists(json, 'file') ? undefined : json['file'],
    };
}

export function TrWebCommonsExternalPortalsApiModelsDocumentsDocumentToJSON(value?: TrWebCommonsExternalPortalsApiModelsDocumentsDocument | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'type': value.type,
        'file': value.file,
    };
}


