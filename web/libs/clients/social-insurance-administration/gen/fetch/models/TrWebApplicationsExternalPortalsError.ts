/* tslint:disable */
/* eslint-disable */
/**
 * TR Portal API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    TrWebApplicationsExternalPortalsErrorDetails,
    TrWebApplicationsExternalPortalsErrorDetailsFromJSON,
    TrWebApplicationsExternalPortalsErrorDetailsFromJSONTyped,
    TrWebApplicationsExternalPortalsErrorDetailsToJSON,
} from './';

/**
 * 
 * @export
 * @interface TrWebApplicationsExternalPortalsError
 */
export interface TrWebApplicationsExternalPortalsError {
    /**
     * HTTP status code
     * @type {number}
     * @memberof TrWebApplicationsExternalPortalsError
     */
    code?: number;
    /**
     * Message describing the error
     * @type {string}
     * @memberof TrWebApplicationsExternalPortalsError
     */
    message: string;
    /**
     * Detailed information of errors
     * @type {Array<TrWebApplicationsExternalPortalsErrorDetails>}
     * @memberof TrWebApplicationsExternalPortalsError
     */
    errors?: Array<TrWebApplicationsExternalPortalsErrorDetails> | null;
}

export function TrWebApplicationsExternalPortalsErrorFromJSON(json: any): TrWebApplicationsExternalPortalsError {
    return TrWebApplicationsExternalPortalsErrorFromJSONTyped(json, false);
}

export function TrWebApplicationsExternalPortalsErrorFromJSONTyped(json: any, ignoreDiscriminator: boolean): TrWebApplicationsExternalPortalsError {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'code': !exists(json, 'code') ? undefined : json['code'],
        'message': json['message'],
        'errors': !exists(json, 'errors') ? undefined : (json['errors'] === null ? null : (json['errors'] as Array<any>).map(TrWebApplicationsExternalPortalsErrorDetailsFromJSON)),
    };
}

export function TrWebApplicationsExternalPortalsErrorToJSON(value?: TrWebApplicationsExternalPortalsError | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'code': value.code,
        'message': value.message,
        'errors': value.errors === undefined ? undefined : (value.errors === null ? null : (value.errors as Array<any>).map(TrWebApplicationsExternalPortalsErrorDetailsToJSON)),
    };
}


