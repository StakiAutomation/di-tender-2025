/* tslint:disable */
/* eslint-disable */
/**
 * TR Portal API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    TrWebApiServicesDomainDigitalMailboxModelsDocument,
    TrWebApiServicesDomainDigitalMailboxModelsDocumentFromJSON,
    TrWebApiServicesDomainDigitalMailboxModelsDocumentToJSON,
    TrWebApplicationsExternalPortalsError,
    TrWebApplicationsExternalPortalsErrorFromJSON,
    TrWebApplicationsExternalPortalsErrorToJSON,
} from '../models';

export interface ApiProtectedV1DocumentsDocumentsDocumentIdGetRequest {
    documentId: string;
    authenticationType?: string;
}

/**
 * 
 */
export class DocumentsApi extends runtime.BaseAPI {

    /**
     */
    async apiProtectedV1DocumentsDocumentsDocumentIdGetRaw(requestParameters: ApiProtectedV1DocumentsDocumentsDocumentIdGetRequest): Promise<runtime.ApiResponse<TrWebApiServicesDomainDigitalMailboxModelsDocument>> {
        if (requestParameters.documentId === null || requestParameters.documentId === undefined) {
            throw new runtime.RequiredError('documentId','Required parameter requestParameters.documentId was null or undefined when calling apiProtectedV1DocumentsDocumentsDocumentIdGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.authenticationType !== undefined) {
            queryParameters['authenticationType'] = requestParameters.authenticationType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("Bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/protected/v1/Documents/documents/{documentId}`.replace(`{${"documentId"}}`, encodeURIComponent(String(requestParameters.documentId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TrWebApiServicesDomainDigitalMailboxModelsDocumentFromJSON(jsonValue));
    }

    /**
     */
    async apiProtectedV1DocumentsDocumentsDocumentIdGet(requestParameters: ApiProtectedV1DocumentsDocumentsDocumentIdGetRequest): Promise<TrWebApiServicesDomainDigitalMailboxModelsDocument> {
        const response = await this.apiProtectedV1DocumentsDocumentsDocumentIdGetRaw(requestParameters);
        return await response.value();
    }

}
