/* tslint:disable */
/* eslint-disable */
/**
 * TR Portal API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    TrWebApiServicesDomainFinanceModelsIslandIsIncomePlanDto,
    TrWebApiServicesDomainFinanceModelsIslandIsIncomePlanDtoFromJSON,
    TrWebApiServicesDomainFinanceModelsIslandIsIncomePlanDtoToJSON,
    TrWebApplicationsExternalPortalsError,
    TrWebApplicationsExternalPortalsErrorFromJSON,
    TrWebApplicationsExternalPortalsErrorToJSON,
    TrWebCommonsExternalPortalsApiModelsIncomePlanExternalIncomeTypeDto,
    TrWebCommonsExternalPortalsApiModelsIncomePlanExternalIncomeTypeDtoFromJSON,
    TrWebCommonsExternalPortalsApiModelsIncomePlanExternalIncomeTypeDtoToJSON,
    TrWebCommonsExternalPortalsApiModelsIncomePlanIncomePlanConditionsDto,
    TrWebCommonsExternalPortalsApiModelsIncomePlanIncomePlanConditionsDtoFromJSON,
    TrWebCommonsExternalPortalsApiModelsIncomePlanIncomePlanConditionsDtoToJSON,
    TrWebCommonsExternalPortalsApiModelsIncomePlanIncomePlanDto,
    TrWebCommonsExternalPortalsApiModelsIncomePlanIncomePlanDtoFromJSON,
    TrWebCommonsExternalPortalsApiModelsIncomePlanIncomePlanDtoToJSON,
    TrWebCommonsExternalPortalsApiModelsIncomePlanWithholdingTaxDto,
    TrWebCommonsExternalPortalsApiModelsIncomePlanWithholdingTaxDtoFromJSON,
    TrWebCommonsExternalPortalsApiModelsIncomePlanWithholdingTaxDtoToJSON,
    TrWebCommonsExternalPortalsApiModelsPaymentPlanPaymentPlanDto,
    TrWebCommonsExternalPortalsApiModelsPaymentPlanPaymentPlanDtoFromJSON,
    TrWebCommonsExternalPortalsApiModelsPaymentPlanPaymentPlanDtoToJSON,
} from '../models';

export interface ApiProtectedV1IncomePlanTemporaryCalculationsPostRequest {
    trWebApiServicesDomainFinanceModelsIslandIsIncomePlanDto?: TrWebApiServicesDomainFinanceModelsIslandIsIncomePlanDto;
}

export interface ApiProtectedV1IncomePlanWithholdingTaxGetRequest {
    year?: number;
}

/**
 * 
 */
export class IncomePlanApi extends runtime.BaseAPI {

    /**
     * Returns a list of all available income types with their associated income categories
     */
    async apiProtectedV1IncomePlanCategorizedIncomeTypesGetRaw(): Promise<runtime.ApiResponse<Array<TrWebCommonsExternalPortalsApiModelsIncomePlanExternalIncomeTypeDto>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("Bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/protected/v1/IncomePlan/CategorizedIncomeTypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TrWebCommonsExternalPortalsApiModelsIncomePlanExternalIncomeTypeDtoFromJSON));
    }

    /**
     * Returns a list of all available income types with their associated income categories
     */
    async apiProtectedV1IncomePlanCategorizedIncomeTypesGet(): Promise<Array<TrWebCommonsExternalPortalsApiModelsIncomePlanExternalIncomeTypeDto>> {
        const response = await this.apiProtectedV1IncomePlanCategorizedIncomeTypesGetRaw();
        return await response.value();
    }

    /**
     * Returns a list of income plans for the logged-in user
     */
    async apiProtectedV1IncomePlanGetRaw(): Promise<runtime.ApiResponse<Array<TrWebCommonsExternalPortalsApiModelsIncomePlanIncomePlanDto>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("Bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/protected/v1/IncomePlan`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TrWebCommonsExternalPortalsApiModelsIncomePlanIncomePlanDtoFromJSON));
    }

    /**
     * Returns a list of income plans for the logged-in user
     */
    async apiProtectedV1IncomePlanGet(): Promise<Array<TrWebCommonsExternalPortalsApiModelsIncomePlanIncomePlanDto>> {
        const response = await this.apiProtectedV1IncomePlanGetRaw();
        return await response.value();
    }

    /**
     * Returns information about various income plan conditions, such as for which year income plans are currently being accepted, whether or not to show temporary calculations etc.
     */
    async apiProtectedV1IncomePlanIncomePlanConditionsGetRaw(): Promise<runtime.ApiResponse<TrWebCommonsExternalPortalsApiModelsIncomePlanIncomePlanConditionsDto>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("Bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/protected/v1/IncomePlan/IncomePlanConditions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TrWebCommonsExternalPortalsApiModelsIncomePlanIncomePlanConditionsDtoFromJSON(jsonValue));
    }

    /**
     * Returns information about various income plan conditions, such as for which year income plans are currently being accepted, whether or not to show temporary calculations etc.
     */
    async apiProtectedV1IncomePlanIncomePlanConditionsGet(): Promise<TrWebCommonsExternalPortalsApiModelsIncomePlanIncomePlanConditionsDto> {
        const response = await this.apiProtectedV1IncomePlanIncomePlanConditionsGetRaw();
        return await response.value();
    }

    /**
     * Returns the latest accepted income plan for the logged-in user
     */
    async apiProtectedV1IncomePlanLatestIncomePlanGetRaw(): Promise<runtime.ApiResponse<TrWebCommonsExternalPortalsApiModelsIncomePlanIncomePlanDto>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("Bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/protected/v1/IncomePlan/LatestIncomePlan`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TrWebCommonsExternalPortalsApiModelsIncomePlanIncomePlanDtoFromJSON(jsonValue));
    }

    /**
     * Returns the latest accepted income plan for the logged-in user
     */
    async apiProtectedV1IncomePlanLatestIncomePlanGet(): Promise<TrWebCommonsExternalPortalsApiModelsIncomePlanIncomePlanDto> {
        const response = await this.apiProtectedV1IncomePlanLatestIncomePlanGetRaw();
        return await response.value();
    }

    /**
     * Returns temporary calculations (bráðabirgðaútreikningur) based on the submitted income plan
     */
    async apiProtectedV1IncomePlanTemporaryCalculationsPostRaw(requestParameters: ApiProtectedV1IncomePlanTemporaryCalculationsPostRequest): Promise<runtime.ApiResponse<TrWebCommonsExternalPortalsApiModelsPaymentPlanPaymentPlanDto>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("Bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/protected/v1/IncomePlan/TemporaryCalculations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TrWebApiServicesDomainFinanceModelsIslandIsIncomePlanDtoToJSON(requestParameters.trWebApiServicesDomainFinanceModelsIslandIsIncomePlanDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TrWebCommonsExternalPortalsApiModelsPaymentPlanPaymentPlanDtoFromJSON(jsonValue));
    }

    /**
     * Returns temporary calculations (bráðabirgðaútreikningur) based on the submitted income plan
     */
    async apiProtectedV1IncomePlanTemporaryCalculationsPost(requestParameters: ApiProtectedV1IncomePlanTemporaryCalculationsPostRequest): Promise<TrWebCommonsExternalPortalsApiModelsPaymentPlanPaymentPlanDto> {
        const response = await this.apiProtectedV1IncomePlanTemporaryCalculationsPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns withholding tax (staðgreiðsluskrá) for the logged-in user. Used for new TR customers that have no previous income plan as reference to prepopulate with.
     */
    async apiProtectedV1IncomePlanWithholdingTaxGetRaw(requestParameters: ApiProtectedV1IncomePlanWithholdingTaxGetRequest): Promise<runtime.ApiResponse<TrWebCommonsExternalPortalsApiModelsIncomePlanWithholdingTaxDto>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.year !== undefined) {
            queryParameters['year'] = requestParameters.year;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("Bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/protected/v1/IncomePlan/WithholdingTax`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TrWebCommonsExternalPortalsApiModelsIncomePlanWithholdingTaxDtoFromJSON(jsonValue));
    }

    /**
     * Returns withholding tax (staðgreiðsluskrá) for the logged-in user. Used for new TR customers that have no previous income plan as reference to prepopulate with.
     */
    async apiProtectedV1IncomePlanWithholdingTaxGet(requestParameters: ApiProtectedV1IncomePlanWithholdingTaxGetRequest): Promise<TrWebCommonsExternalPortalsApiModelsIncomePlanWithholdingTaxDto> {
        const response = await this.apiProtectedV1IncomePlanWithholdingTaxGetRaw(requestParameters);
        return await response.value();
    }

}
