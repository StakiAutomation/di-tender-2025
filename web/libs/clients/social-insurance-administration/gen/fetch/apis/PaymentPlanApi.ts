/* tslint:disable */
/* eslint-disable */
/**
 * TR Portal API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    TrWebApplicationsExternalPortalsError,
    TrWebApplicationsExternalPortalsErrorFromJSON,
    TrWebApplicationsExternalPortalsErrorToJSON,
    TrWebCommonsExternalPortalsApiModelsPaymentPlanLegitimatePayments,
    TrWebCommonsExternalPortalsApiModelsPaymentPlanLegitimatePaymentsFromJSON,
    TrWebCommonsExternalPortalsApiModelsPaymentPlanLegitimatePaymentsToJSON,
    TrWebCommonsExternalPortalsApiModelsPaymentPlanPaymentPlanDto,
    TrWebCommonsExternalPortalsApiModelsPaymentPlanPaymentPlanDtoFromJSON,
    TrWebCommonsExternalPortalsApiModelsPaymentPlanPaymentPlanDtoToJSON,
} from '../models';

export interface ApiProtectedV1PaymentPlanGetRequest {
    year?: string;
}

/**
 * 
 */
export class PaymentPlanApi extends runtime.BaseAPI {

    /**
     * Endpoint to get paymentplan for a given nationalId
     */
    async apiProtectedV1PaymentPlanGetRaw(requestParameters: ApiProtectedV1PaymentPlanGetRequest): Promise<runtime.ApiResponse<TrWebCommonsExternalPortalsApiModelsPaymentPlanPaymentPlanDto>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.year !== undefined) {
            queryParameters['year'] = requestParameters.year;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("Bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/protected/v1/PaymentPlan`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TrWebCommonsExternalPortalsApiModelsPaymentPlanPaymentPlanDtoFromJSON(jsonValue));
    }

    /**
     * Endpoint to get paymentplan for a given nationalId
     */
    async apiProtectedV1PaymentPlanGet(requestParameters: ApiProtectedV1PaymentPlanGetRequest): Promise<TrWebCommonsExternalPortalsApiModelsPaymentPlanPaymentPlanDto> {
        const response = await this.apiProtectedV1PaymentPlanGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Endpoint to get the next/previous payments for a given nationalId
     */
    async apiProtectedV1PaymentPlanLegitimatepaymentsGetRaw(): Promise<runtime.ApiResponse<TrWebCommonsExternalPortalsApiModelsPaymentPlanLegitimatePayments>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("Bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/protected/v1/PaymentPlan/legitimatepayments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TrWebCommonsExternalPortalsApiModelsPaymentPlanLegitimatePaymentsFromJSON(jsonValue));
    }

    /**
     * Endpoint to get the next/previous payments for a given nationalId
     */
    async apiProtectedV1PaymentPlanLegitimatepaymentsGet(): Promise<TrWebCommonsExternalPortalsApiModelsPaymentPlanLegitimatePayments> {
        const response = await this.apiProtectedV1PaymentPlanLegitimatepaymentsGetRaw();
        return await response.value();
    }

    /**
     * Returns a list of years for which the client has valid payment plans
     */
    async apiProtectedV1PaymentPlanValidyearsGetRaw(): Promise<runtime.ApiResponse<Array<number>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("Bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/protected/v1/PaymentPlan/validyears`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Returns a list of years for which the client has valid payment plans
     */
    async apiProtectedV1PaymentPlanValidyearsGet(): Promise<Array<number>> {
        const response = await this.apiProtectedV1PaymentPlanValidyearsGetRaw();
        return await response.value();
    }

}
