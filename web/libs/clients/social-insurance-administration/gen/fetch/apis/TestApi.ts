/* tslint:disable */
/* eslint-disable */
/**
 * TR Portal API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    TrWebApplicationsExternalPortalsError,
    TrWebApplicationsExternalPortalsErrorFromJSON,
    TrWebApplicationsExternalPortalsErrorToJSON,
    TrWebCommonsExternalPortalsApiModelsFormBuilderResultSetsApplicationResultSet,
    TrWebCommonsExternalPortalsApiModelsFormBuilderResultSetsApplicationResultSetFromJSON,
    TrWebCommonsExternalPortalsApiModelsFormBuilderResultSetsApplicationResultSetToJSON,
} from '../models';

/**
 * 
 */
export class TestApi extends runtime.BaseAPI {

    /**
     * This is an unauthorized ping endpoint. It is only used for organization to organization testing of communications.
     */
    async apiProtectedV1TestGetRaw(): Promise<runtime.ApiResponse<string>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("Bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/protected/v1/Test`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * This is an unauthorized ping endpoint. It is only used for organization to organization testing of communications.
     */
    async apiProtectedV1TestGet(): Promise<string> {
        const response = await this.apiProtectedV1TestGetRaw();
        return await response.value();
    }

    /**
     */
    async apiProtectedV1TestHelloFormbuilderGetRaw(): Promise<runtime.ApiResponse<TrWebCommonsExternalPortalsApiModelsFormBuilderResultSetsApplicationResultSet>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("Bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/protected/v1/Test/hello/formbuilder`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TrWebCommonsExternalPortalsApiModelsFormBuilderResultSetsApplicationResultSetFromJSON(jsonValue));
    }

    /**
     */
    async apiProtectedV1TestHelloFormbuilderGet(): Promise<TrWebCommonsExternalPortalsApiModelsFormBuilderResultSetsApplicationResultSet> {
        const response = await this.apiProtectedV1TestHelloFormbuilderGetRaw();
        return await response.value();
    }

    /**
     * Dummy service for testing X-Road connectivity
     */
    async apiProtectedV1TestHelloGetRaw(): Promise<runtime.ApiResponse<string>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("Bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/protected/v1/Test/hello`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Dummy service for testing X-Road connectivity
     */
    async apiProtectedV1TestHelloGet(): Promise<string> {
        const response = await this.apiProtectedV1TestHelloGetRaw();
        return await response.value();
    }

}
