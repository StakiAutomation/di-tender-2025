/* tslint:disable */
/* eslint-disable */
/**
 * TR Portal API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    TrWebApiServicesDomainApplicationsModelsCreateApplicationFromPaperReturn,
    TrWebApiServicesDomainApplicationsModelsCreateApplicationFromPaperReturnFromJSON,
    TrWebApiServicesDomainApplicationsModelsCreateApplicationFromPaperReturnToJSON,
    TrWebApplicationsExternalPortalsError,
    TrWebApplicationsExternalPortalsErrorFromJSON,
    TrWebApplicationsExternalPortalsErrorToJSON,
    TrWebCommonsExternalPortalsApiModelsDocumentsDocument,
    TrWebCommonsExternalPortalsApiModelsDocumentsDocumentFromJSON,
    TrWebCommonsExternalPortalsApiModelsDocumentsDocumentToJSON,
} from '../models';

export interface ApiProtectedV1ApplicationApplicationGuidDocumentsPostRequest {
    applicationGuid: string;
    trWebCommonsExternalPortalsApiModelsDocumentsDocument: Array<TrWebCommonsExternalPortalsApiModelsDocumentsDocument>;
}

export interface ApiProtectedV1ApplicationApplicationTypePostRequest {
    applicationType: string;
    body?: object;
}

/**
 * 
 */
export class ApplicationApi extends runtime.BaseAPI {

    /**
     * Adds a list of documents to an application in Island.is
     */
    async apiProtectedV1ApplicationApplicationGuidDocumentsPostRaw(requestParameters: ApiProtectedV1ApplicationApplicationGuidDocumentsPostRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.applicationGuid === null || requestParameters.applicationGuid === undefined) {
            throw new runtime.RequiredError('applicationGuid','Required parameter requestParameters.applicationGuid was null or undefined when calling apiProtectedV1ApplicationApplicationGuidDocumentsPost.');
        }

        if (requestParameters.trWebCommonsExternalPortalsApiModelsDocumentsDocument === null || requestParameters.trWebCommonsExternalPortalsApiModelsDocumentsDocument === undefined) {
            throw new runtime.RequiredError('trWebCommonsExternalPortalsApiModelsDocumentsDocument','Required parameter requestParameters.trWebCommonsExternalPortalsApiModelsDocumentsDocument was null or undefined when calling apiProtectedV1ApplicationApplicationGuidDocumentsPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("Bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/protected/v1/Application/{applicationGuid}/documents`.replace(`{${"applicationGuid"}}`, encodeURIComponent(String(requestParameters.applicationGuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.trWebCommonsExternalPortalsApiModelsDocumentsDocument.map(TrWebCommonsExternalPortalsApiModelsDocumentsDocumentToJSON),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Adds a list of documents to an application in Island.is
     */
    async apiProtectedV1ApplicationApplicationGuidDocumentsPost(requestParameters: ApiProtectedV1ApplicationApplicationGuidDocumentsPostRequest): Promise<void> {
        await this.apiProtectedV1ApplicationApplicationGuidDocumentsPostRaw(requestParameters);
    }

    /**
     * Creates applications of various types, depending on the input.applicationType parameter
     */
    async apiProtectedV1ApplicationApplicationTypePostRaw(requestParameters: ApiProtectedV1ApplicationApplicationTypePostRequest): Promise<runtime.ApiResponse<TrWebApiServicesDomainApplicationsModelsCreateApplicationFromPaperReturn>> {
        if (requestParameters.applicationType === null || requestParameters.applicationType === undefined) {
            throw new runtime.RequiredError('applicationType','Required parameter requestParameters.applicationType was null or undefined when calling apiProtectedV1ApplicationApplicationTypePost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("Bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/protected/v1/Application/{applicationType}`.replace(`{${"applicationType"}}`, encodeURIComponent(String(requestParameters.applicationType))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TrWebApiServicesDomainApplicationsModelsCreateApplicationFromPaperReturnFromJSON(jsonValue));
    }

    /**
     * Creates applications of various types, depending on the input.applicationType parameter
     */
    async apiProtectedV1ApplicationApplicationTypePost(requestParameters: ApiProtectedV1ApplicationApplicationTypePostRequest): Promise<TrWebApiServicesDomainApplicationsModelsCreateApplicationFromPaperReturn> {
        const response = await this.apiProtectedV1ApplicationApplicationTypePostRaw(requestParameters);
        return await response.value();
    }

}
