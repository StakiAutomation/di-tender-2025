/* tslint:disable */
/* eslint-disable */
/**
 * FJS Charge v2
 * FJS Charge service
 *
 * The version of the OpenAPI document: 2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CatalogperformingOrgperformingOrgIDGETResponse,
    CatalogperformingOrgperformingOrgIDGETResponseFromJSON,
    CatalogperformingOrgperformingOrgIDGETResponseToJSON,
    ChargePOSTResponse,
    ChargePOSTResponseFromJSON,
    ChargePOSTResponseToJSON,
    ChargeStatusByRequestIDrequestIDGETResponse,
    ChargeStatusByRequestIDrequestIDGETResponseFromJSON,
    ChargeStatusByRequestIDrequestIDGETResponseToJSON,
    ChargerequestIDDELETEResponse,
    ChargerequestIDDELETEResponseFromJSON,
    ChargerequestIDDELETEResponseToJSON,
    Input,
    InputFromJSON,
    InputToJSON,
    Input1,
    Input1FromJSON,
    Input1ToJSON,
    ValidatePOSTResponse,
    ValidatePOSTResponseFromJSON,
    ValidatePOSTResponseToJSON,
} from '../models';

export interface CatalogperformingOrgperformingOrgIDGET3Request {
    performingOrgID: string;
}

export interface ChargePOST1Request {
    input: Input;
}

export interface ChargeStatusByRequestIDrequestIDGET4Request {
    requestID: string;
}

export interface ChargerequestIDDELETE2Request {
    requestID: string;
}

export interface ValidatePOST5Request {
    input: Input1;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     */
    async catalogperformingOrgperformingOrgIDGET3Raw(requestParameters: CatalogperformingOrgperformingOrgIDGET3Request): Promise<runtime.ApiResponse<CatalogperformingOrgperformingOrgIDGETResponse>> {
        if (requestParameters.performingOrgID === null || requestParameters.performingOrgID === undefined) {
            throw new runtime.RequiredError('performingOrgID','Required parameter requestParameters.performingOrgID was null or undefined when calling catalogperformingOrgperformingOrgIDGET3.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/catalog/performingOrg/{performingOrgID}`.replace(`{${"performingOrgID"}}`, encodeURIComponent(String(requestParameters.performingOrgID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CatalogperformingOrgperformingOrgIDGETResponseFromJSON(jsonValue));
    }

    /**
     */
    async catalogperformingOrgperformingOrgIDGET3(requestParameters: CatalogperformingOrgperformingOrgIDGET3Request): Promise<CatalogperformingOrgperformingOrgIDGETResponse> {
        const response = await this.catalogperformingOrgperformingOrgIDGET3Raw(requestParameters);
        return await response.value();
    }

    /**
     */
    async chargePOST1Raw(requestParameters: ChargePOST1Request): Promise<runtime.ApiResponse<ChargePOSTResponse>> {
        if (requestParameters.input === null || requestParameters.input === undefined) {
            throw new runtime.RequiredError('input','Required parameter requestParameters.input was null or undefined when calling chargePOST1.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/charge`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InputToJSON(requestParameters.input),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ChargePOSTResponseFromJSON(jsonValue));
    }

    /**
     */
    async chargePOST1(requestParameters: ChargePOST1Request): Promise<ChargePOSTResponse> {
        const response = await this.chargePOST1Raw(requestParameters);
        return await response.value();
    }

    /**
     */
    async chargeStatusByRequestIDrequestIDGET4Raw(requestParameters: ChargeStatusByRequestIDrequestIDGET4Request): Promise<runtime.ApiResponse<ChargeStatusByRequestIDrequestIDGETResponse>> {
        if (requestParameters.requestID === null || requestParameters.requestID === undefined) {
            throw new runtime.RequiredError('requestID','Required parameter requestParameters.requestID was null or undefined when calling chargeStatusByRequestIDrequestIDGET4.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/chargeStatusByRequestID/{requestID}`.replace(`{${"requestID"}}`, encodeURIComponent(String(requestParameters.requestID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ChargeStatusByRequestIDrequestIDGETResponseFromJSON(jsonValue));
    }

    /**
     */
    async chargeStatusByRequestIDrequestIDGET4(requestParameters: ChargeStatusByRequestIDrequestIDGET4Request): Promise<ChargeStatusByRequestIDrequestIDGETResponse> {
        const response = await this.chargeStatusByRequestIDrequestIDGET4Raw(requestParameters);
        return await response.value();
    }

    /**
     */
    async chargerequestIDDELETE2Raw(requestParameters: ChargerequestIDDELETE2Request): Promise<runtime.ApiResponse<ChargerequestIDDELETEResponse>> {
        if (requestParameters.requestID === null || requestParameters.requestID === undefined) {
            throw new runtime.RequiredError('requestID','Required parameter requestParameters.requestID was null or undefined when calling chargerequestIDDELETE2.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/charge/{requestID}`.replace(`{${"requestID"}}`, encodeURIComponent(String(requestParameters.requestID))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ChargerequestIDDELETEResponseFromJSON(jsonValue));
    }

    /**
     */
    async chargerequestIDDELETE2(requestParameters: ChargerequestIDDELETE2Request): Promise<ChargerequestIDDELETEResponse> {
        const response = await this.chargerequestIDDELETE2Raw(requestParameters);
        return await response.value();
    }

    /**
     */
    async validatePOST5Raw(requestParameters: ValidatePOST5Request): Promise<runtime.ApiResponse<ValidatePOSTResponse>> {
        if (requestParameters.input === null || requestParameters.input === undefined) {
            throw new runtime.RequiredError('input','Required parameter requestParameters.input was null or undefined when calling validatePOST5.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/validate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: Input1ToJSON(requestParameters.input),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ValidatePOSTResponseFromJSON(jsonValue));
    }

    /**
     */
    async validatePOST5(requestParameters: ValidatePOST5Request): Promise<ValidatePOSTResponse> {
        const response = await this.validatePOST5Raw(requestParameters);
        return await response.value();
    }

}
