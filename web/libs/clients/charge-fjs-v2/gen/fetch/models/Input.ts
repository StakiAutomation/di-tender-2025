/* tslint:disable */
/* eslint-disable */
/**
 * FJS Charge v2
 * FJS Charge service
 *
 * The version of the OpenAPI document: 2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Charge,
    ChargeFromJSON,
    ChargeFromJSONTyped,
    ChargeToJSON,
    ExtraDataDT,
    ExtraDataDTFromJSON,
    ExtraDataDTFromJSONTyped,
    ExtraDataDTToJSON,
    PayInfo,
    PayInfoFromJSON,
    PayInfoFromJSONTyped,
    PayInfoToJSON,
} from './';

/**
 * 
 * @export
 * @interface Input
 */
export interface Input {
    /**
     * System ID for sender 3 letter
     * @type {string}
     * @memberof Input
     */
    systemID: string;
    /**
     * Performing Organization id/nationalID, 
     * @type {string}
     * @memberof Input
     */
    performingOrgID: string;
    /**
     * unique national identification number used by the Icelandic
     * @type {string}
     * @memberof Input
     */
    payeeNationalID: string;
    /**
     * charge group  exp  GG1
     * @type {string}
     * @memberof Input
     */
    chargeType: string;
    /**
     * unique for Claim
     * @type {string}
     * @memberof Input
     */
    chargeItemSubject: string;
    /**
     * NatianalID for employee or office
     * @type {string}
     * @memberof Input
     */
    performerNationalID: string;
    /**
     * process immediately and return user4
     * @type {boolean}
     * @memberof Input
     */
    immediateProcess: boolean;
    /**
     * Callback url
     * @type {string}
     * @memberof Input
     */
    returnUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof Input
     */
    returnType?: string;
    /**
     * guid for Reqeust from sender
     * @type {string}
     * @memberof Input
     */
    requestID: string;
    /**
     * Effictive data format yyyy-mm-dd
     * @type {string}
     * @memberof Input
     */
    effictiveDate?: string;
    /**
     * comment
     * @type {string}
     * @memberof Input
     */
    comment?: string;
    /**
     * 
     * @type {Array<Charge>}
     * @memberof Input
     */
    charges: Array<Charge>;
    /**
     * 
     * @type {PayInfo}
     * @memberof Input
     */
    payInfo?: PayInfo;
    /**
     * 
     * @type {Array<ExtraDataDT>}
     * @memberof Input
     */
    extraData?: Array<ExtraDataDT>;
}

export function InputFromJSON(json: any): Input {
    return InputFromJSONTyped(json, false);
}

export function InputFromJSONTyped(json: any, ignoreDiscriminator: boolean): Input {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'systemID': json['systemID'],
        'performingOrgID': json['performingOrgID'],
        'payeeNationalID': json['payeeNationalID'],
        'chargeType': json['chargeType'],
        'chargeItemSubject': json['chargeItemSubject'],
        'performerNationalID': json['performerNationalID'],
        'immediateProcess': json['immediateProcess'],
        'returnUrl': !exists(json, 'returnUrl') ? undefined : json['returnUrl'],
        'returnType': !exists(json, 'returnType') ? undefined : json['returnType'],
        'requestID': json['requestID'],
        'effictiveDate': !exists(json, 'effictiveDate') ? undefined : json['effictiveDate'],
        'comment': !exists(json, 'comment') ? undefined : json['comment'],
        'charges': ((json['charges'] as Array<any>).map(ChargeFromJSON)),
        'payInfo': !exists(json, 'payInfo') ? undefined : PayInfoFromJSON(json['payInfo']),
        'extraData': !exists(json, 'extraData') ? undefined : ((json['extraData'] as Array<any>).map(ExtraDataDTFromJSON)),
    };
}

export function InputToJSON(value?: Input | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'systemID': value.systemID,
        'performingOrgID': value.performingOrgID,
        'payeeNationalID': value.payeeNationalID,
        'chargeType': value.chargeType,
        'chargeItemSubject': value.chargeItemSubject,
        'performerNationalID': value.performerNationalID,
        'immediateProcess': value.immediateProcess,
        'returnUrl': value.returnUrl,
        'returnType': value.returnType,
        'requestID': value.requestID,
        'effictiveDate': value.effictiveDate,
        'comment': value.comment,
        'charges': ((value.charges as Array<any>).map(ChargeToJSON)),
        'payInfo': PayInfoToJSON(value.payInfo),
        'extraData': value.extraData === undefined ? undefined : ((value.extraData as Array<any>).map(ExtraDataDTToJSON)),
    };
}


