/* tslint:disable */
/* eslint-disable */
/**
 * ORDS generated API for API Namsferlaveita
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    InlineResponse200,
    InlineResponse200FromJSON,
    InlineResponse200ToJSON,
    InlineResponse2001,
    InlineResponse2001FromJSON,
    InlineResponse2001ToJSON,
} from '../models';

export interface DiplomaDiplomaIdGetRequest {
    diplomaId: string;
}

export interface DiplomainfolistGetRequest {
    locale: string;
}

export interface PeriodsGetRequest {
    locale?: string;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Þjónusta sem sækir pdf af skírteini nemanda. EKKI VIRKT EINS OG ER
     */
    async diplomaDiplomaIdGetRaw(requestParameters: DiplomaDiplomaIdGetRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.diplomaId === null || requestParameters.diplomaId === undefined) {
            throw new runtime.RequiredError('diplomaId','Required parameter requestParameters.diplomaId was null or undefined when calling diplomaDiplomaIdGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/diploma/{diploma_id}`.replace(`{${"diploma_id"}}`, encodeURIComponent(String(requestParameters.diplomaId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Þjónusta sem sækir pdf af skírteini nemanda. EKKI VIRKT EINS OG ER
     */
    async diplomaDiplomaIdGet(requestParameters: DiplomaDiplomaIdGetRequest): Promise<object> {
        const response = await this.diplomaDiplomaIdGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve records from API Namsferlaveita
     */
    async diplomainfolistGetRaw(requestParameters: DiplomainfolistGetRequest): Promise<runtime.ApiResponse<InlineResponse200>> {
        if (requestParameters.locale === null || requestParameters.locale === undefined) {
            throw new runtime.RequiredError('locale','Required parameter requestParameters.locale was null or undefined when calling diplomainfolistGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.locale !== undefined && requestParameters.locale !== null) {
            headerParameters['locale'] = String(requestParameters.locale);
        }

        const response = await this.request({
            path: `/diplomainfolist`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse200FromJSON(jsonValue));
    }

    /**
     * Retrieve records from API Namsferlaveita
     */
    async diplomainfolistGet(requestParameters: DiplomainfolistGetRequest): Promise<InlineResponse200> {
        const response = await this.diplomainfolistGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve records from API Namsferlaveita
     */
    async periodsGetRaw(requestParameters: PeriodsGetRequest): Promise<runtime.ApiResponse<InlineResponse2001>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.locale !== undefined && requestParameters.locale !== null) {
            headerParameters['locale'] = String(requestParameters.locale);
        }

        const response = await this.request({
            path: `/periods`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2001FromJSON(jsonValue));
    }

    /**
     * Retrieve records from API Namsferlaveita
     */
    async periodsGet(requestParameters: PeriodsGetRequest): Promise<InlineResponse2001> {
        const response = await this.periodsGetRaw(requestParameters);
        return await response.value();
    }

}
