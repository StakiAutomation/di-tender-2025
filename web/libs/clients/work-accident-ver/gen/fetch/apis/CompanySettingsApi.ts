/* tslint:disable */
/* eslint-disable */
/**
 * Tilkynna vinnuslys
 * Vefþjónusta til þess að senda inn tilkynningar um vinnuslys.
 *
 * The version of the OpenAPI document: v1
 * Contact: ut@vinnueftirlit.is
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CompanySettingsDto,
    CompanySettingsDtoFromJSON,
    CompanySettingsDtoToJSON,
    ProblemDetails,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    UpdateCompanySettingsRequestDto,
    UpdateCompanySettingsRequestDtoFromJSON,
    UpdateCompanySettingsRequestDtoToJSON,
} from '../models';

export interface GetCompanySettingsRequest {
    companyssn?: string;
    xCorrelationID?: string;
}

export interface GetCompanySettingsOptionsRequest {
    xCorrelationID?: string;
}

export interface UpdateCompanySettingsRequest {
    xCorrelationID?: string;
    updateCompanySettingsRequestDto?: UpdateCompanySettingsRequestDto;
}

/**
 * 
 */
export class CompanySettingsApi extends runtime.BaseAPI {

    /**
     */
    async getCompanySettingsRaw(requestParameters: GetCompanySettingsRequest): Promise<runtime.ApiResponse<CompanySettingsDto>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.companyssn !== undefined) {
            queryParameters['companyssn'] = requestParameters.companyssn;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xCorrelationID !== undefined && requestParameters.xCorrelationID !== null) {
            headerParameters['X-Correlation-ID'] = String(requestParameters.xCorrelationID);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/CompanySettings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CompanySettingsDtoFromJSON(jsonValue));
    }

    /**
     */
    async getCompanySettings(requestParameters: GetCompanySettingsRequest): Promise<CompanySettingsDto> {
        const response = await this.getCompanySettingsRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getCompanySettingsOptionsRaw(requestParameters: GetCompanySettingsOptionsRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xCorrelationID !== undefined && requestParameters.xCorrelationID !== null) {
            headerParameters['X-Correlation-ID'] = String(requestParameters.xCorrelationID);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/CompanySettings`,
            method: 'OPTIONS',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async getCompanySettingsOptions(requestParameters: GetCompanySettingsOptionsRequest): Promise<void> {
        await this.getCompanySettingsOptionsRaw(requestParameters);
    }

    /**
     */
    async updateCompanySettingsRaw(requestParameters: UpdateCompanySettingsRequest): Promise<runtime.ApiResponse<CompanySettingsDto>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xCorrelationID !== undefined && requestParameters.xCorrelationID !== null) {
            headerParameters['X-Correlation-ID'] = String(requestParameters.xCorrelationID);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/CompanySettings`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateCompanySettingsRequestDtoToJSON(requestParameters.updateCompanySettingsRequestDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CompanySettingsDtoFromJSON(jsonValue));
    }

    /**
     */
    async updateCompanySettings(requestParameters: UpdateCompanySettingsRequest): Promise<CompanySettingsDto> {
        const response = await this.updateCompanySettingsRaw(requestParameters);
        return await response.value();
    }

}
