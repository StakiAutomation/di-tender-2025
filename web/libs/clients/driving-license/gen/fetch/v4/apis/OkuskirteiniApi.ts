/* tslint:disable */
/* eslint-disable */
/**
 * RLS driver licence Rest API
 * RESTFul services for driver licences. Programmed in ASP.NET Core 3 API 
 *
 * The version of the OpenAPI document: 4.0
 * Contact: tmd@tmd.is
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CategoryValidDto,
    CategoryValidDtoFromJSON,
    CategoryValidDtoToJSON,
    DeprivationDto,
    DeprivationDtoFromJSON,
    DeprivationDtoToJSON,
    DriverLicenseDto,
    DriverLicenseDtoFromJSON,
    DriverLicenseDtoToJSON,
    DriverLicenseWithoutImagesDto,
    DriverLicenseWithoutImagesDtoFromJSON,
    DriverLicenseWithoutImagesDtoToJSON,
    DrivingAssessmentDto,
    DrivingAssessmentDtoFromJSON,
    DrivingAssessmentDtoToJSON,
    DrivingAssessmentStatisticsDetailedDto,
    DrivingAssessmentStatisticsDetailedDtoFromJSON,
    DrivingAssessmentStatisticsDetailedDtoToJSON,
    DrivingAssessmentStatisticsGroupedDto,
    DrivingAssessmentStatisticsGroupedDtoFromJSON,
    DrivingAssessmentStatisticsGroupedDtoToJSON,
    FullLicenseStatisticsDetailedDto,
    FullLicenseStatisticsDetailedDtoFromJSON,
    FullLicenseStatisticsDetailedDtoToJSON,
    FullLicenseStatisticsGroupedDto,
    FullLicenseStatisticsGroupedDtoFromJSON,
    FullLicenseStatisticsGroupedDtoToJSON,
    HasFinishedDrivingSchool3Dto,
    HasFinishedDrivingSchool3DtoFromJSON,
    HasFinishedDrivingSchool3DtoToJSON,
    InstructorDto,
    InstructorDtoFromJSON,
    InstructorDtoToJSON,
    LatestUnfinishedLicenseDto,
    LatestUnfinishedLicenseDtoFromJSON,
    LatestUnfinishedLicenseDtoToJSON,
    LicenseStatusDto,
    LicenseStatusDtoFromJSON,
    LicenseStatusDtoToJSON,
    MayApplyForLicenseDto,
    MayApplyForLicenseDtoFromJSON,
    MayApplyForLicenseDtoToJSON,
    MayApplyForTemporaryLicenseDto,
    MayApplyForTemporaryLicenseDtoFromJSON,
    MayApplyForTemporaryLicenseDtoToJSON,
    MedferdDto,
    MedferdDtoFromJSON,
    MedferdDtoToJSON,
    NewTemporaryLicsenseDto,
    NewTemporaryLicsenseDtoFromJSON,
    NewTemporaryLicsenseDtoToJSON,
    OrderTemporaryLicenseDto,
    OrderTemporaryLicenseDtoFromJSON,
    OrderTemporaryLicenseDtoToJSON,
    PenaltyPointsDto,
    PenaltyPointsDtoFromJSON,
    PenaltyPointsDtoToJSON,
    PostNewCollaborative,
    PostNewCollaborativeFromJSON,
    PostNewCollaborativeToJSON,
    PostNewDrivingAssessment,
    PostNewDrivingAssessmentFromJSON,
    PostNewDrivingAssessmentToJSON,
    PostNewFinalLicense,
    PostNewFinalLicenseFromJSON,
    PostNewFinalLicenseToJSON,
    PostPracticePermit,
    PostPracticePermitFromJSON,
    PostPracticePermitToJSON,
    PostRenewal65AndOver,
    PostRenewal65AndOverFromJSON,
    PostRenewal65AndOverToJSON,
    PostTeachingDoneForTempLicense,
    PostTeachingDoneForTempLicenseFromJSON,
    PostTeachingDoneForTempLicenseToJSON,
    PostTemporaryLicense,
    PostTemporaryLicenseFromJSON,
    PostTemporaryLicenseToJSON,
    PostTemporaryLicenseWithHealthDeclaration,
    PostTemporaryLicenseWithHealthDeclarationFromJSON,
    PostTemporaryLicenseWithHealthDeclarationToJSON,
    PracticePermitDto,
    PracticePermitDtoFromJSON,
    PracticePermitDtoToJSON,
    ProblemDetails,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    Renewal65AndOver,
    Renewal65AndOverFromJSON,
    Renewal65AndOverToJSON,
    TemporaryLicenseStatisticsDetailedDto,
    TemporaryLicenseStatisticsDetailedDtoFromJSON,
    TemporaryLicenseStatisticsDetailedDtoToJSON,
    TemporaryLicenseStatisticsGroupedDto,
    TemporaryLicenseStatisticsGroupedDtoFromJSON,
    TemporaryLicenseStatisticsGroupedDtoToJSON,
} from '../models';

export interface ApiDrivinglicenseV4ApplicationsNewCategoryPostRequest {
    category: string;
    apiVersion: string;
    apiVersion2: string;
    postNewFinalLicense?: PostNewFinalLicense;
}

export interface ApiDrivinglicenseV4ApplicationsNewCollaborativePostRequest {
    apiVersion: string;
    apiVersion2: string;
    postNewCollaborative?: PostNewCollaborative;
}

export interface ApiDrivinglicenseV4ApplicationsNewTemporaryPostRequest {
    apiVersion: string;
    apiVersion2: string;
    postTemporaryLicense?: PostTemporaryLicense;
}

export interface ApiDrivinglicenseV4ApplicationsNewTemporarywithhealthdeclarationPostRequest {
    apiVersion: string;
    apiVersion2: string;
    postTemporaryLicenseWithHealthDeclaration?: PostTemporaryLicenseWithHealthDeclaration;
}

export interface ApiDrivinglicenseV4ApplicationsSSNPracticepermitPostRequest {
    sSN: string;
    apiVersion: string;
    apiVersion2: string;
    postPracticePermit?: PostPracticePermit;
}

export interface ApiDrivinglicenseV4ApplicationsSSNRenewal65PostRequest {
    sSN: string;
    apiVersion: string;
    apiVersion2: string;
    postRenewal65AndOver?: PostRenewal65AndOver;
}

export interface ApiDrivinglicenseV4ApplicationsSSNUnfinishedCategoryidGetRequest {
    sSN: string;
    categoryid: string;
    apiVersion: string;
    apiVersion2: string;
}

export interface ApiDrivinglicenseV4ApplicationsTemporarytestfinishedPostRequest {
    apiVersion: string;
    apiVersion2: string;
    postTeachingDoneForTempLicense?: PostTeachingDoneForTempLicense;
}

export interface ApiDrivinglicenseV4DrivingassessmentPostRequest {
    apiVersion: string;
    apiVersion2: string;
    postNewDrivingAssessment?: PostNewDrivingAssessment;
}

export interface ApiDrivinglicenseV4DrivinginstructorsGetRequest {
    apiVersion: string;
    apiVersion2: string;
}

export interface ApiDrivinglicenseV4LicenseidStatusGetRequest {
    licenseid: string;
    apiVersion: string;
    apiVersion2: string;
}

export interface ApiDrivinglicenseV4SSNAllGetRequest {
    sSN: string;
    apiVersion: string;
    apiVersion2: string;
}

export interface ApiDrivinglicenseV4SSNCanapplyforCategoryFullGetRequest {
    sSN: string;
    category: string;
    apiVersion: string;
    apiVersion2: string;
}

export interface ApiDrivinglicenseV4SSNCanapplyforPracticepermitPostRequest {
    sSN: string;
    apiVersion: string;
    apiVersion2: string;
    postPracticePermit?: PostPracticePermit;
}

export interface ApiDrivinglicenseV4SSNCanapplyforTemporaryGetRequest {
    sSN: string;
    apiVersion: string;
    apiVersion2: string;
}

export interface ApiDrivinglicenseV4SSNCategoryvalidCategoryDrivinglicenseidGetRequest {
    sSN: string;
    category: string;
    drivinglicenseid: number;
    apiVersion: string;
    apiVersion2: string;
}

export interface ApiDrivinglicenseV4SSNDeprivationGetRequest {
    sSN: string;
    apiVersion: string;
    apiVersion2: string;
}

export interface ApiDrivinglicenseV4SSNDrivingassessmentGetRequest {
    sSN: string;
    apiVersion: string;
    apiVersion2: string;
}

export interface ApiDrivinglicenseV4SSNDrivingschool3finishedLicenseIdPostRequest {
    sSN: string;
    licenseId: number;
    apiVersion: string;
    apiVersion2: string;
}

export interface ApiDrivinglicenseV4SSNGetqualityphotoGetRequest {
    sSN: string;
    apiVersion: string;
    apiVersion2: string;
}

export interface ApiDrivinglicenseV4SSNGetqualitysignatureGetRequest {
    sSN: string;
    apiVersion: string;
    apiVersion2: string;
}

export interface ApiDrivinglicenseV4SSNHasfinisheddrivingschool3GetRequest {
    sSN: string;
    apiVersion: string;
    apiVersion2: string;
}

export interface ApiDrivinglicenseV4SSNHasqualityphotoGetRequest {
    sSN: string;
    apiVersion: string;
    apiVersion2: string;
}

export interface ApiDrivinglicenseV4SSNHasqualitysignatureGetRequest {
    sSN: string;
    apiVersion: string;
    apiVersion2: string;
}

export interface ApiDrivinglicenseV4SSNHasteachingrightsGetRequest {
    sSN: string;
    apiVersion: string;
    apiVersion2: string;
}

export interface ApiDrivinglicenseV4SSNLicenseactionsLicenseidGetRequest {
    sSN: string;
    licenseid: number;
    apiVersion: string;
    apiVersion2: string;
}

export interface ApiDrivinglicenseV4SSNPenaltypointsGetRequest {
    sSN: string;
    apiVersion: string;
    apiVersion2: string;
}

export interface ApiDrivinglicenseV4SSNPostRequest {
    sSN: string;
    apiVersion: string;
    apiVersion2: string;
}

export interface ApiDrivinglicenseV4StatisticsDrivingassessmentsCreatedDetailedYearfromMonthfromGetRequest {
    yearfrom: number;
    monthfrom: number;
    apiVersion: string;
    apiVersion2: string;
}

export interface ApiDrivinglicenseV4StatisticsDrivingassessmentsCreatedGroupedYearfromMonthfromGetRequest {
    yearfrom: number;
    monthfrom: number;
    apiVersion: string;
    apiVersion2: string;
}

export interface ApiDrivinglicenseV4StatisticsLicensesCreatedDetailedYearfromMonthfromGetRequest {
    yearfrom: number;
    monthfrom: number;
    apiVersion: string;
    apiVersion2: string;
}

export interface ApiDrivinglicenseV4StatisticsLicensesCreatedGroupedYearfromMonthfromGetRequest {
    yearfrom: number;
    monthfrom: number;
    apiVersion: string;
    apiVersion2: string;
}

export interface ApiDrivinglicenseV4StatisticsTemporarylicensesCreatedDetailedYearfromMonthfromGetRequest {
    yearfrom: number;
    monthfrom: number;
    apiVersion: string;
    apiVersion2: string;
}

export interface ApiDrivinglicenseV4StatisticsTemporarylicensesCreatedGroupedYearfromMonthfromGetRequest {
    yearfrom: number;
    monthfrom: number;
    apiVersion: string;
    apiVersion2: string;
}

export interface GetCurrentLicenseV4Request {
    sSN: string;
    apiVersion: string;
    apiVersion2: string;
}

/**
 * 
 */
export class OkuskirteiniApi extends runtime.BaseAPI {

    /**
     * Apply for drivers license for a category
     */
    async apiDrivinglicenseV4ApplicationsNewCategoryPostRaw(requestParameters: ApiDrivinglicenseV4ApplicationsNewCategoryPostRequest): Promise<runtime.ApiResponse<number>> {
        if (requestParameters.category === null || requestParameters.category === undefined) {
            throw new runtime.RequiredError('category','Required parameter requestParameters.category was null or undefined when calling apiDrivinglicenseV4ApplicationsNewCategoryPost.');
        }

        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiDrivinglicenseV4ApplicationsNewCategoryPost.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiDrivinglicenseV4ApplicationsNewCategoryPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/drivinglicense/v4/applications/new/{category}`.replace(`{${"category"}}`, encodeURIComponent(String(requestParameters.category))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostNewFinalLicenseToJSON(requestParameters.postNewFinalLicense),
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Apply for drivers license for a category
     */
    async apiDrivinglicenseV4ApplicationsNewCategoryPost(requestParameters: ApiDrivinglicenseV4ApplicationsNewCategoryPostRequest): Promise<number> {
        const response = await this.apiDrivinglicenseV4ApplicationsNewCategoryPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Apply for new collaborative of old license (Samrit)
     */
    async apiDrivinglicenseV4ApplicationsNewCollaborativePostRaw(requestParameters: ApiDrivinglicenseV4ApplicationsNewCollaborativePostRequest): Promise<runtime.ApiResponse<number>> {
        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiDrivinglicenseV4ApplicationsNewCollaborativePost.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiDrivinglicenseV4ApplicationsNewCollaborativePost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/drivinglicense/v4/applications/new/collaborative`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostNewCollaborativeToJSON(requestParameters.postNewCollaborative),
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Apply for new collaborative of old license (Samrit)
     */
    async apiDrivinglicenseV4ApplicationsNewCollaborativePost(requestParameters: ApiDrivinglicenseV4ApplicationsNewCollaborativePostRequest): Promise<number> {
        const response = await this.apiDrivinglicenseV4ApplicationsNewCollaborativePostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Apply for drivers license for a category
     */
    async apiDrivinglicenseV4ApplicationsNewTemporaryPostRaw(requestParameters: ApiDrivinglicenseV4ApplicationsNewTemporaryPostRequest): Promise<runtime.ApiResponse<NewTemporaryLicsenseDto>> {
        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiDrivinglicenseV4ApplicationsNewTemporaryPost.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiDrivinglicenseV4ApplicationsNewTemporaryPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/drivinglicense/v4/applications/new/temporary`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostTemporaryLicenseToJSON(requestParameters.postTemporaryLicense),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => NewTemporaryLicsenseDtoFromJSON(jsonValue));
    }

    /**
     * Apply for drivers license for a category
     */
    async apiDrivinglicenseV4ApplicationsNewTemporaryPost(requestParameters: ApiDrivinglicenseV4ApplicationsNewTemporaryPostRequest): Promise<NewTemporaryLicsenseDto> {
        const response = await this.apiDrivinglicenseV4ApplicationsNewTemporaryPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Apply for drivers license for a category
     */
    async apiDrivinglicenseV4ApplicationsNewTemporarywithhealthdeclarationPostRaw(requestParameters: ApiDrivinglicenseV4ApplicationsNewTemporarywithhealthdeclarationPostRequest): Promise<runtime.ApiResponse<NewTemporaryLicsenseDto>> {
        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiDrivinglicenseV4ApplicationsNewTemporarywithhealthdeclarationPost.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiDrivinglicenseV4ApplicationsNewTemporarywithhealthdeclarationPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/drivinglicense/v4/applications/new/temporarywithhealthdeclaration`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostTemporaryLicenseWithHealthDeclarationToJSON(requestParameters.postTemporaryLicenseWithHealthDeclaration),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => NewTemporaryLicsenseDtoFromJSON(jsonValue));
    }

    /**
     * Apply for drivers license for a category
     */
    async apiDrivinglicenseV4ApplicationsNewTemporarywithhealthdeclarationPost(requestParameters: ApiDrivinglicenseV4ApplicationsNewTemporarywithhealthdeclarationPostRequest): Promise<NewTemporaryLicsenseDto> {
        const response = await this.apiDrivinglicenseV4ApplicationsNewTemporarywithhealthdeclarationPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Post practice permit
     */
    async apiDrivinglicenseV4ApplicationsSSNPracticepermitPostRaw(requestParameters: ApiDrivinglicenseV4ApplicationsSSNPracticepermitPostRequest): Promise<runtime.ApiResponse<PracticePermitDto>> {
        if (requestParameters.sSN === null || requestParameters.sSN === undefined) {
            throw new runtime.RequiredError('sSN','Required parameter requestParameters.sSN was null or undefined when calling apiDrivinglicenseV4ApplicationsSSNPracticepermitPost.');
        }

        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiDrivinglicenseV4ApplicationsSSNPracticepermitPost.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiDrivinglicenseV4ApplicationsSSNPracticepermitPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/drivinglicense/v4/applications/{SSN}/practicepermit`.replace(`{${"SSN"}}`, encodeURIComponent(String(requestParameters.sSN))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostPracticePermitToJSON(requestParameters.postPracticePermit),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PracticePermitDtoFromJSON(jsonValue));
    }

    /**
     * Post practice permit
     */
    async apiDrivinglicenseV4ApplicationsSSNPracticepermitPost(requestParameters: ApiDrivinglicenseV4ApplicationsSSNPracticepermitPostRequest): Promise<PracticePermitDto> {
        const response = await this.apiDrivinglicenseV4ApplicationsSSNPracticepermitPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Post renewal request for people 65 year old or older
     */
    async apiDrivinglicenseV4ApplicationsSSNRenewal65PostRaw(requestParameters: ApiDrivinglicenseV4ApplicationsSSNRenewal65PostRequest): Promise<runtime.ApiResponse<Renewal65AndOver>> {
        if (requestParameters.sSN === null || requestParameters.sSN === undefined) {
            throw new runtime.RequiredError('sSN','Required parameter requestParameters.sSN was null or undefined when calling apiDrivinglicenseV4ApplicationsSSNRenewal65Post.');
        }

        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiDrivinglicenseV4ApplicationsSSNRenewal65Post.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiDrivinglicenseV4ApplicationsSSNRenewal65Post.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/drivinglicense/v4/applications/{SSN}/renewal65`.replace(`{${"SSN"}}`, encodeURIComponent(String(requestParameters.sSN))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostRenewal65AndOverToJSON(requestParameters.postRenewal65AndOver),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => Renewal65AndOverFromJSON(jsonValue));
    }

    /**
     * Post renewal request for people 65 year old or older
     */
    async apiDrivinglicenseV4ApplicationsSSNRenewal65Post(requestParameters: ApiDrivinglicenseV4ApplicationsSSNRenewal65PostRequest): Promise<Renewal65AndOver> {
        const response = await this.apiDrivinglicenseV4ApplicationsSSNRenewal65PostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get latest unfinished/unpublished license with requested categorie and person id
     */
    async apiDrivinglicenseV4ApplicationsSSNUnfinishedCategoryidGetRaw(requestParameters: ApiDrivinglicenseV4ApplicationsSSNUnfinishedCategoryidGetRequest): Promise<runtime.ApiResponse<LatestUnfinishedLicenseDto>> {
        if (requestParameters.sSN === null || requestParameters.sSN === undefined) {
            throw new runtime.RequiredError('sSN','Required parameter requestParameters.sSN was null or undefined when calling apiDrivinglicenseV4ApplicationsSSNUnfinishedCategoryidGet.');
        }

        if (requestParameters.categoryid === null || requestParameters.categoryid === undefined) {
            throw new runtime.RequiredError('categoryid','Required parameter requestParameters.categoryid was null or undefined when calling apiDrivinglicenseV4ApplicationsSSNUnfinishedCategoryidGet.');
        }

        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiDrivinglicenseV4ApplicationsSSNUnfinishedCategoryidGet.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiDrivinglicenseV4ApplicationsSSNUnfinishedCategoryidGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/drivinglicense/v4/applications/{SSN}/unfinished/{categoryid}`.replace(`{${"SSN"}}`, encodeURIComponent(String(requestParameters.sSN))).replace(`{${"categoryid"}}`, encodeURIComponent(String(requestParameters.categoryid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => LatestUnfinishedLicenseDtoFromJSON(jsonValue));
    }

    /**
     * Get latest unfinished/unpublished license with requested categorie and person id
     */
    async apiDrivinglicenseV4ApplicationsSSNUnfinishedCategoryidGet(requestParameters: ApiDrivinglicenseV4ApplicationsSSNUnfinishedCategoryidGetRequest): Promise<LatestUnfinishedLicenseDto> {
        const response = await this.apiDrivinglicenseV4ApplicationsSSNUnfinishedCategoryidGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Checks  - Does person exist in national registry  - Is the liecense that has not been ordered  - Is person at least 17 years old  - Does he have a deprivation  - Does he have a quality marked picture  - Does he have a quality marked signature
     * Endpoint to tell system that person has finished learning for temporary license and license can be ordered
     */
    async apiDrivinglicenseV4ApplicationsTemporarytestfinishedPostRaw(requestParameters: ApiDrivinglicenseV4ApplicationsTemporarytestfinishedPostRequest): Promise<runtime.ApiResponse<OrderTemporaryLicenseDto>> {
        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiDrivinglicenseV4ApplicationsTemporarytestfinishedPost.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiDrivinglicenseV4ApplicationsTemporarytestfinishedPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/drivinglicense/v4/applications/temporarytestfinished`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostTeachingDoneForTempLicenseToJSON(requestParameters.postTeachingDoneForTempLicense),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderTemporaryLicenseDtoFromJSON(jsonValue));
    }

    /**
     * Checks  - Does person exist in national registry  - Is the liecense that has not been ordered  - Is person at least 17 years old  - Does he have a deprivation  - Does he have a quality marked picture  - Does he have a quality marked signature
     * Endpoint to tell system that person has finished learning for temporary license and license can be ordered
     */
    async apiDrivinglicenseV4ApplicationsTemporarytestfinishedPost(requestParameters: ApiDrivinglicenseV4ApplicationsTemporarytestfinishedPostRequest): Promise<OrderTemporaryLicenseDto> {
        const response = await this.apiDrivinglicenseV4ApplicationsTemporarytestfinishedPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create a new driver assessment
     */
    async apiDrivinglicenseV4DrivingassessmentPostRaw(requestParameters: ApiDrivinglicenseV4DrivingassessmentPostRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiDrivinglicenseV4DrivingassessmentPost.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiDrivinglicenseV4DrivingassessmentPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/drivinglicense/v4/drivingassessment`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostNewDrivingAssessmentToJSON(requestParameters.postNewDrivingAssessment),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a new driver assessment
     */
    async apiDrivinglicenseV4DrivingassessmentPost(requestParameters: ApiDrivinglicenseV4DrivingassessmentPostRequest): Promise<void> {
        await this.apiDrivinglicenseV4DrivingassessmentPostRaw(requestParameters);
    }

    /**
     * Get driving teacherse
     */
    async apiDrivinglicenseV4DrivinginstructorsGetRaw(requestParameters: ApiDrivinglicenseV4DrivinginstructorsGetRequest): Promise<runtime.ApiResponse<Array<InstructorDto>>> {
        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiDrivinglicenseV4DrivinginstructorsGet.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiDrivinglicenseV4DrivinginstructorsGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/drivinglicense/v4/drivinginstructors`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InstructorDtoFromJSON));
    }

    /**
     * Get driving teacherse
     */
    async apiDrivinglicenseV4DrivinginstructorsGet(requestParameters: ApiDrivinglicenseV4DrivinginstructorsGetRequest): Promise<Array<InstructorDto>> {
        const response = await this.apiDrivinglicenseV4DrivinginstructorsGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Check current license status
     */
    async apiDrivinglicenseV4LicenseidStatusGetRaw(requestParameters: ApiDrivinglicenseV4LicenseidStatusGetRequest): Promise<runtime.ApiResponse<LicenseStatusDto>> {
        if (requestParameters.licenseid === null || requestParameters.licenseid === undefined) {
            throw new runtime.RequiredError('licenseid','Required parameter requestParameters.licenseid was null or undefined when calling apiDrivinglicenseV4LicenseidStatusGet.');
        }

        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiDrivinglicenseV4LicenseidStatusGet.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiDrivinglicenseV4LicenseidStatusGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/drivinglicense/v4/{licenseid}/status`.replace(`{${"licenseid"}}`, encodeURIComponent(String(requestParameters.licenseid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => LicenseStatusDtoFromJSON(jsonValue));
    }

    /**
     * Check current license status
     */
    async apiDrivinglicenseV4LicenseidStatusGet(requestParameters: ApiDrivinglicenseV4LicenseidStatusGetRequest): Promise<LicenseStatusDto> {
        const response = await this.apiDrivinglicenseV4LicenseidStatusGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get for all persons driver licences
     */
    async apiDrivinglicenseV4SSNAllGetRaw(requestParameters: ApiDrivinglicenseV4SSNAllGetRequest): Promise<runtime.ApiResponse<Array<DriverLicenseWithoutImagesDto>>> {
        if (requestParameters.sSN === null || requestParameters.sSN === undefined) {
            throw new runtime.RequiredError('sSN','Required parameter requestParameters.sSN was null or undefined when calling apiDrivinglicenseV4SSNAllGet.');
        }

        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiDrivinglicenseV4SSNAllGet.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiDrivinglicenseV4SSNAllGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/drivinglicense/v4/{SSN}/all`.replace(`{${"SSN"}}`, encodeURIComponent(String(requestParameters.sSN))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DriverLicenseWithoutImagesDtoFromJSON));
    }

    /**
     * Get for all persons driver licences
     */
    async apiDrivinglicenseV4SSNAllGet(requestParameters: ApiDrivinglicenseV4SSNAllGetRequest): Promise<Array<DriverLicenseWithoutImagesDto>> {
        const response = await this.apiDrivinglicenseV4SSNAllGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Check if person can apply for full drivers license for a specific category
     */
    async apiDrivinglicenseV4SSNCanapplyforCategoryFullGetRaw(requestParameters: ApiDrivinglicenseV4SSNCanapplyforCategoryFullGetRequest): Promise<runtime.ApiResponse<MayApplyForLicenseDto>> {
        if (requestParameters.sSN === null || requestParameters.sSN === undefined) {
            throw new runtime.RequiredError('sSN','Required parameter requestParameters.sSN was null or undefined when calling apiDrivinglicenseV4SSNCanapplyforCategoryFullGet.');
        }

        if (requestParameters.category === null || requestParameters.category === undefined) {
            throw new runtime.RequiredError('category','Required parameter requestParameters.category was null or undefined when calling apiDrivinglicenseV4SSNCanapplyforCategoryFullGet.');
        }

        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiDrivinglicenseV4SSNCanapplyforCategoryFullGet.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiDrivinglicenseV4SSNCanapplyforCategoryFullGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/drivinglicense/v4/{SSN}/canapplyfor/{category}/full`.replace(`{${"SSN"}}`, encodeURIComponent(String(requestParameters.sSN))).replace(`{${"category"}}`, encodeURIComponent(String(requestParameters.category))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MayApplyForLicenseDtoFromJSON(jsonValue));
    }

    /**
     * Check if person can apply for full drivers license for a specific category
     */
    async apiDrivinglicenseV4SSNCanapplyforCategoryFullGet(requestParameters: ApiDrivinglicenseV4SSNCanapplyforCategoryFullGetRequest): Promise<MayApplyForLicenseDto> {
        const response = await this.apiDrivinglicenseV4SSNCanapplyforCategoryFullGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Post practice permit
     */
    async apiDrivinglicenseV4SSNCanapplyforPracticepermitPostRaw(requestParameters: ApiDrivinglicenseV4SSNCanapplyforPracticepermitPostRequest): Promise<runtime.ApiResponse<PracticePermitDto>> {
        if (requestParameters.sSN === null || requestParameters.sSN === undefined) {
            throw new runtime.RequiredError('sSN','Required parameter requestParameters.sSN was null or undefined when calling apiDrivinglicenseV4SSNCanapplyforPracticepermitPost.');
        }

        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiDrivinglicenseV4SSNCanapplyforPracticepermitPost.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiDrivinglicenseV4SSNCanapplyforPracticepermitPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/drivinglicense/v4/{SSN}/canapplyfor/practicepermit`.replace(`{${"SSN"}}`, encodeURIComponent(String(requestParameters.sSN))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostPracticePermitToJSON(requestParameters.postPracticePermit),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PracticePermitDtoFromJSON(jsonValue));
    }

    /**
     * Post practice permit
     */
    async apiDrivinglicenseV4SSNCanapplyforPracticepermitPost(requestParameters: ApiDrivinglicenseV4SSNCanapplyforPracticepermitPostRequest): Promise<PracticePermitDto> {
        const response = await this.apiDrivinglicenseV4SSNCanapplyforPracticepermitPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Checks :   - Is in national registry   - Does not have B category license already   - Has a deprivation exeeding next 30 days   - Is at least 16 years of age
     * Check if person can apply for temporary B drivers license
     */
    async apiDrivinglicenseV4SSNCanapplyforTemporaryGetRaw(requestParameters: ApiDrivinglicenseV4SSNCanapplyforTemporaryGetRequest): Promise<runtime.ApiResponse<MayApplyForTemporaryLicenseDto>> {
        if (requestParameters.sSN === null || requestParameters.sSN === undefined) {
            throw new runtime.RequiredError('sSN','Required parameter requestParameters.sSN was null or undefined when calling apiDrivinglicenseV4SSNCanapplyforTemporaryGet.');
        }

        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiDrivinglicenseV4SSNCanapplyforTemporaryGet.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiDrivinglicenseV4SSNCanapplyforTemporaryGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/drivinglicense/v4/{SSN}/canapplyfor/temporary`.replace(`{${"SSN"}}`, encodeURIComponent(String(requestParameters.sSN))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MayApplyForTemporaryLicenseDtoFromJSON(jsonValue));
    }

    /**
     * Checks :   - Is in national registry   - Does not have B category license already   - Has a deprivation exeeding next 30 days   - Is at least 16 years of age
     * Check if person can apply for temporary B drivers license
     */
    async apiDrivinglicenseV4SSNCanapplyforTemporaryGet(requestParameters: ApiDrivinglicenseV4SSNCanapplyforTemporaryGetRequest): Promise<MayApplyForTemporaryLicenseDto> {
        const response = await this.apiDrivinglicenseV4SSNCanapplyforTemporaryGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Check status of license and category
     */
    async apiDrivinglicenseV4SSNCategoryvalidCategoryDrivinglicenseidGetRaw(requestParameters: ApiDrivinglicenseV4SSNCategoryvalidCategoryDrivinglicenseidGetRequest): Promise<runtime.ApiResponse<CategoryValidDto>> {
        if (requestParameters.sSN === null || requestParameters.sSN === undefined) {
            throw new runtime.RequiredError('sSN','Required parameter requestParameters.sSN was null or undefined when calling apiDrivinglicenseV4SSNCategoryvalidCategoryDrivinglicenseidGet.');
        }

        if (requestParameters.category === null || requestParameters.category === undefined) {
            throw new runtime.RequiredError('category','Required parameter requestParameters.category was null or undefined when calling apiDrivinglicenseV4SSNCategoryvalidCategoryDrivinglicenseidGet.');
        }

        if (requestParameters.drivinglicenseid === null || requestParameters.drivinglicenseid === undefined) {
            throw new runtime.RequiredError('drivinglicenseid','Required parameter requestParameters.drivinglicenseid was null or undefined when calling apiDrivinglicenseV4SSNCategoryvalidCategoryDrivinglicenseidGet.');
        }

        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiDrivinglicenseV4SSNCategoryvalidCategoryDrivinglicenseidGet.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiDrivinglicenseV4SSNCategoryvalidCategoryDrivinglicenseidGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/drivinglicense/v4/{SSN}/categoryvalid/{category}/{drivinglicenseid}`.replace(`{${"SSN"}}`, encodeURIComponent(String(requestParameters.sSN))).replace(`{${"category"}}`, encodeURIComponent(String(requestParameters.category))).replace(`{${"drivinglicenseid"}}`, encodeURIComponent(String(requestParameters.drivinglicenseid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CategoryValidDtoFromJSON(jsonValue));
    }

    /**
     * Check status of license and category
     */
    async apiDrivinglicenseV4SSNCategoryvalidCategoryDrivinglicenseidGet(requestParameters: ApiDrivinglicenseV4SSNCategoryvalidCategoryDrivinglicenseidGetRequest): Promise<CategoryValidDto> {
        const response = await this.apiDrivinglicenseV4SSNCategoryvalidCategoryDrivinglicenseidGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get for current deprivation
     */
    async apiDrivinglicenseV4SSNDeprivationGetRaw(requestParameters: ApiDrivinglicenseV4SSNDeprivationGetRequest): Promise<runtime.ApiResponse<DeprivationDto>> {
        if (requestParameters.sSN === null || requestParameters.sSN === undefined) {
            throw new runtime.RequiredError('sSN','Required parameter requestParameters.sSN was null or undefined when calling apiDrivinglicenseV4SSNDeprivationGet.');
        }

        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiDrivinglicenseV4SSNDeprivationGet.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiDrivinglicenseV4SSNDeprivationGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/drivinglicense/v4/{SSN}/deprivation`.replace(`{${"SSN"}}`, encodeURIComponent(String(requestParameters.sSN))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DeprivationDtoFromJSON(jsonValue));
    }

    /**
     * Get for current deprivation
     */
    async apiDrivinglicenseV4SSNDeprivationGet(requestParameters: ApiDrivinglicenseV4SSNDeprivationGetRequest): Promise<DeprivationDto> {
        const response = await this.apiDrivinglicenseV4SSNDeprivationGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Check if person has driving assessment
     */
    async apiDrivinglicenseV4SSNDrivingassessmentGetRaw(requestParameters: ApiDrivinglicenseV4SSNDrivingassessmentGetRequest): Promise<runtime.ApiResponse<DrivingAssessmentDto>> {
        if (requestParameters.sSN === null || requestParameters.sSN === undefined) {
            throw new runtime.RequiredError('sSN','Required parameter requestParameters.sSN was null or undefined when calling apiDrivinglicenseV4SSNDrivingassessmentGet.');
        }

        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiDrivinglicenseV4SSNDrivingassessmentGet.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiDrivinglicenseV4SSNDrivingassessmentGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/drivinglicense/v4/{SSN}/drivingassessment`.replace(`{${"SSN"}}`, encodeURIComponent(String(requestParameters.sSN))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DrivingAssessmentDtoFromJSON(jsonValue));
    }

    /**
     * Check if person has driving assessment
     */
    async apiDrivinglicenseV4SSNDrivingassessmentGet(requestParameters: ApiDrivinglicenseV4SSNDrivingassessmentGetRequest): Promise<DrivingAssessmentDto> {
        const response = await this.apiDrivinglicenseV4SSNDrivingassessmentGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update person license, has finished driving school 3
     */
    async apiDrivinglicenseV4SSNDrivingschool3finishedLicenseIdPostRaw(requestParameters: ApiDrivinglicenseV4SSNDrivingschool3finishedLicenseIdPostRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.sSN === null || requestParameters.sSN === undefined) {
            throw new runtime.RequiredError('sSN','Required parameter requestParameters.sSN was null or undefined when calling apiDrivinglicenseV4SSNDrivingschool3finishedLicenseIdPost.');
        }

        if (requestParameters.licenseId === null || requestParameters.licenseId === undefined) {
            throw new runtime.RequiredError('licenseId','Required parameter requestParameters.licenseId was null or undefined when calling apiDrivinglicenseV4SSNDrivingschool3finishedLicenseIdPost.');
        }

        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiDrivinglicenseV4SSNDrivingschool3finishedLicenseIdPost.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiDrivinglicenseV4SSNDrivingschool3finishedLicenseIdPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/drivinglicense/v4/{SSN}/drivingschool3finished/{licenseId}`.replace(`{${"SSN"}}`, encodeURIComponent(String(requestParameters.sSN))).replace(`{${"licenseId"}}`, encodeURIComponent(String(requestParameters.licenseId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update person license, has finished driving school 3
     */
    async apiDrivinglicenseV4SSNDrivingschool3finishedLicenseIdPost(requestParameters: ApiDrivinglicenseV4SSNDrivingschool3finishedLicenseIdPostRequest): Promise<void> {
        await this.apiDrivinglicenseV4SSNDrivingschool3finishedLicenseIdPostRaw(requestParameters);
    }

    /**
     * Get quality marked photo for person
     */
    async apiDrivinglicenseV4SSNGetqualityphotoGetRaw(requestParameters: ApiDrivinglicenseV4SSNGetqualityphotoGetRequest): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.sSN === null || requestParameters.sSN === undefined) {
            throw new runtime.RequiredError('sSN','Required parameter requestParameters.sSN was null or undefined when calling apiDrivinglicenseV4SSNGetqualityphotoGet.');
        }

        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiDrivinglicenseV4SSNGetqualityphotoGet.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiDrivinglicenseV4SSNGetqualityphotoGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/drivinglicense/v4/{SSN}/getqualityphoto`.replace(`{${"SSN"}}`, encodeURIComponent(String(requestParameters.sSN))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Get quality marked photo for person
     */
    async apiDrivinglicenseV4SSNGetqualityphotoGet(requestParameters: ApiDrivinglicenseV4SSNGetqualityphotoGetRequest): Promise<string> {
        const response = await this.apiDrivinglicenseV4SSNGetqualityphotoGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get quality marked photo for person
     */
    async apiDrivinglicenseV4SSNGetqualitysignatureGetRaw(requestParameters: ApiDrivinglicenseV4SSNGetqualitysignatureGetRequest): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.sSN === null || requestParameters.sSN === undefined) {
            throw new runtime.RequiredError('sSN','Required parameter requestParameters.sSN was null or undefined when calling apiDrivinglicenseV4SSNGetqualitysignatureGet.');
        }

        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiDrivinglicenseV4SSNGetqualitysignatureGet.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiDrivinglicenseV4SSNGetqualitysignatureGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/drivinglicense/v4/{SSN}/getqualitysignature`.replace(`{${"SSN"}}`, encodeURIComponent(String(requestParameters.sSN))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Get quality marked photo for person
     */
    async apiDrivinglicenseV4SSNGetqualitysignatureGet(requestParameters: ApiDrivinglicenseV4SSNGetqualitysignatureGetRequest): Promise<string> {
        const response = await this.apiDrivinglicenseV4SSNGetqualitysignatureGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Has person finised driving school 3
     */
    async apiDrivinglicenseV4SSNHasfinisheddrivingschool3GetRaw(requestParameters: ApiDrivinglicenseV4SSNHasfinisheddrivingschool3GetRequest): Promise<runtime.ApiResponse<HasFinishedDrivingSchool3Dto>> {
        if (requestParameters.sSN === null || requestParameters.sSN === undefined) {
            throw new runtime.RequiredError('sSN','Required parameter requestParameters.sSN was null or undefined when calling apiDrivinglicenseV4SSNHasfinisheddrivingschool3Get.');
        }

        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiDrivinglicenseV4SSNHasfinisheddrivingschool3Get.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiDrivinglicenseV4SSNHasfinisheddrivingschool3Get.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/drivinglicense/v4/{SSN}/hasfinisheddrivingschool3`.replace(`{${"SSN"}}`, encodeURIComponent(String(requestParameters.sSN))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => HasFinishedDrivingSchool3DtoFromJSON(jsonValue));
    }

    /**
     * Has person finised driving school 3
     */
    async apiDrivinglicenseV4SSNHasfinisheddrivingschool3Get(requestParameters: ApiDrivinglicenseV4SSNHasfinisheddrivingschool3GetRequest): Promise<HasFinishedDrivingSchool3Dto> {
        const response = await this.apiDrivinglicenseV4SSNHasfinisheddrivingschool3GetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Check if person has quality marked photo
     */
    async apiDrivinglicenseV4SSNHasqualityphotoGetRaw(requestParameters: ApiDrivinglicenseV4SSNHasqualityphotoGetRequest): Promise<runtime.ApiResponse<number>> {
        if (requestParameters.sSN === null || requestParameters.sSN === undefined) {
            throw new runtime.RequiredError('sSN','Required parameter requestParameters.sSN was null or undefined when calling apiDrivinglicenseV4SSNHasqualityphotoGet.');
        }

        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiDrivinglicenseV4SSNHasqualityphotoGet.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiDrivinglicenseV4SSNHasqualityphotoGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/drivinglicense/v4/{SSN}/hasqualityphoto`.replace(`{${"SSN"}}`, encodeURIComponent(String(requestParameters.sSN))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Check if person has quality marked photo
     */
    async apiDrivinglicenseV4SSNHasqualityphotoGet(requestParameters: ApiDrivinglicenseV4SSNHasqualityphotoGetRequest): Promise<number> {
        const response = await this.apiDrivinglicenseV4SSNHasqualityphotoGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Check if person has quality marked photo
     */
    async apiDrivinglicenseV4SSNHasqualitysignatureGetRaw(requestParameters: ApiDrivinglicenseV4SSNHasqualitysignatureGetRequest): Promise<runtime.ApiResponse<number>> {
        if (requestParameters.sSN === null || requestParameters.sSN === undefined) {
            throw new runtime.RequiredError('sSN','Required parameter requestParameters.sSN was null or undefined when calling apiDrivinglicenseV4SSNHasqualitysignatureGet.');
        }

        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiDrivinglicenseV4SSNHasqualitysignatureGet.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiDrivinglicenseV4SSNHasqualitysignatureGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/drivinglicense/v4/{SSN}/hasqualitysignature`.replace(`{${"SSN"}}`, encodeURIComponent(String(requestParameters.sSN))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Check if person has quality marked photo
     */
    async apiDrivinglicenseV4SSNHasqualitysignatureGet(requestParameters: ApiDrivinglicenseV4SSNHasqualitysignatureGetRequest): Promise<number> {
        const response = await this.apiDrivinglicenseV4SSNHasqualitysignatureGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Check if person has rights to be a driving instructor
     */
    async apiDrivinglicenseV4SSNHasteachingrightsGetRaw(requestParameters: ApiDrivinglicenseV4SSNHasteachingrightsGetRequest): Promise<runtime.ApiResponse<number>> {
        if (requestParameters.sSN === null || requestParameters.sSN === undefined) {
            throw new runtime.RequiredError('sSN','Required parameter requestParameters.sSN was null or undefined when calling apiDrivinglicenseV4SSNHasteachingrightsGet.');
        }

        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiDrivinglicenseV4SSNHasteachingrightsGet.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiDrivinglicenseV4SSNHasteachingrightsGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/drivinglicense/v4/{SSN}/hasteachingrights`.replace(`{${"SSN"}}`, encodeURIComponent(String(requestParameters.sSN))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Check if person has rights to be a driving instructor
     */
    async apiDrivinglicenseV4SSNHasteachingrightsGet(requestParameters: ApiDrivinglicenseV4SSNHasteachingrightsGetRequest): Promise<number> {
        const response = await this.apiDrivinglicenseV4SSNHasteachingrightsGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get all license actions
     */
    async apiDrivinglicenseV4SSNLicenseactionsLicenseidGetRaw(requestParameters: ApiDrivinglicenseV4SSNLicenseactionsLicenseidGetRequest): Promise<runtime.ApiResponse<Array<MedferdDto>>> {
        if (requestParameters.sSN === null || requestParameters.sSN === undefined) {
            throw new runtime.RequiredError('sSN','Required parameter requestParameters.sSN was null or undefined when calling apiDrivinglicenseV4SSNLicenseactionsLicenseidGet.');
        }

        if (requestParameters.licenseid === null || requestParameters.licenseid === undefined) {
            throw new runtime.RequiredError('licenseid','Required parameter requestParameters.licenseid was null or undefined when calling apiDrivinglicenseV4SSNLicenseactionsLicenseidGet.');
        }

        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiDrivinglicenseV4SSNLicenseactionsLicenseidGet.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiDrivinglicenseV4SSNLicenseactionsLicenseidGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/drivinglicense/v4/{SSN}/licenseactions/{licenseid}`.replace(`{${"SSN"}}`, encodeURIComponent(String(requestParameters.sSN))).replace(`{${"licenseid"}}`, encodeURIComponent(String(requestParameters.licenseid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MedferdDtoFromJSON));
    }

    /**
     * Get all license actions
     */
    async apiDrivinglicenseV4SSNLicenseactionsLicenseidGet(requestParameters: ApiDrivinglicenseV4SSNLicenseactionsLicenseidGetRequest): Promise<Array<MedferdDto>> {
        const response = await this.apiDrivinglicenseV4SSNLicenseactionsLicenseidGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get traffic violation points for person
     */
    async apiDrivinglicenseV4SSNPenaltypointsGetRaw(requestParameters: ApiDrivinglicenseV4SSNPenaltypointsGetRequest): Promise<runtime.ApiResponse<PenaltyPointsDto>> {
        if (requestParameters.sSN === null || requestParameters.sSN === undefined) {
            throw new runtime.RequiredError('sSN','Required parameter requestParameters.sSN was null or undefined when calling apiDrivinglicenseV4SSNPenaltypointsGet.');
        }

        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiDrivinglicenseV4SSNPenaltypointsGet.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiDrivinglicenseV4SSNPenaltypointsGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/drivinglicense/v4/{SSN}/penaltypoints`.replace(`{${"SSN"}}`, encodeURIComponent(String(requestParameters.sSN))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PenaltyPointsDtoFromJSON(jsonValue));
    }

    /**
     * Get traffic violation points for person
     */
    async apiDrivinglicenseV4SSNPenaltypointsGet(requestParameters: ApiDrivinglicenseV4SSNPenaltypointsGetRequest): Promise<PenaltyPointsDto> {
        const response = await this.apiDrivinglicenseV4SSNPenaltypointsGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create record of digital licence created
     */
    async apiDrivinglicenseV4SSNPostRaw(requestParameters: ApiDrivinglicenseV4SSNPostRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.sSN === null || requestParameters.sSN === undefined) {
            throw new runtime.RequiredError('sSN','Required parameter requestParameters.sSN was null or undefined when calling apiDrivinglicenseV4SSNPost.');
        }

        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiDrivinglicenseV4SSNPost.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiDrivinglicenseV4SSNPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/drivinglicense/v4/{SSN}`.replace(`{${"SSN"}}`, encodeURIComponent(String(requestParameters.sSN))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create record of digital licence created
     */
    async apiDrivinglicenseV4SSNPost(requestParameters: ApiDrivinglicenseV4SSNPostRequest): Promise<void> {
        await this.apiDrivinglicenseV4SSNPostRaw(requestParameters);
    }

    /**
     * Get a list of driving assessments created
     */
    async apiDrivinglicenseV4StatisticsDrivingassessmentsCreatedDetailedYearfromMonthfromGetRaw(requestParameters: ApiDrivinglicenseV4StatisticsDrivingassessmentsCreatedDetailedYearfromMonthfromGetRequest): Promise<runtime.ApiResponse<Array<DrivingAssessmentStatisticsDetailedDto>>> {
        if (requestParameters.yearfrom === null || requestParameters.yearfrom === undefined) {
            throw new runtime.RequiredError('yearfrom','Required parameter requestParameters.yearfrom was null or undefined when calling apiDrivinglicenseV4StatisticsDrivingassessmentsCreatedDetailedYearfromMonthfromGet.');
        }

        if (requestParameters.monthfrom === null || requestParameters.monthfrom === undefined) {
            throw new runtime.RequiredError('monthfrom','Required parameter requestParameters.monthfrom was null or undefined when calling apiDrivinglicenseV4StatisticsDrivingassessmentsCreatedDetailedYearfromMonthfromGet.');
        }

        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiDrivinglicenseV4StatisticsDrivingassessmentsCreatedDetailedYearfromMonthfromGet.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiDrivinglicenseV4StatisticsDrivingassessmentsCreatedDetailedYearfromMonthfromGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/drivinglicense/v4/statistics/drivingassessments/created/detailed/{yearfrom}/{monthfrom}`.replace(`{${"yearfrom"}}`, encodeURIComponent(String(requestParameters.yearfrom))).replace(`{${"monthfrom"}}`, encodeURIComponent(String(requestParameters.monthfrom))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DrivingAssessmentStatisticsDetailedDtoFromJSON));
    }

    /**
     * Get a list of driving assessments created
     */
    async apiDrivinglicenseV4StatisticsDrivingassessmentsCreatedDetailedYearfromMonthfromGet(requestParameters: ApiDrivinglicenseV4StatisticsDrivingassessmentsCreatedDetailedYearfromMonthfromGetRequest): Promise<Array<DrivingAssessmentStatisticsDetailedDto>> {
        const response = await this.apiDrivinglicenseV4StatisticsDrivingassessmentsCreatedDetailedYearfromMonthfromGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get a grouped list (year/month/count) of driving ass licenses created
     */
    async apiDrivinglicenseV4StatisticsDrivingassessmentsCreatedGroupedYearfromMonthfromGetRaw(requestParameters: ApiDrivinglicenseV4StatisticsDrivingassessmentsCreatedGroupedYearfromMonthfromGetRequest): Promise<runtime.ApiResponse<Array<DrivingAssessmentStatisticsGroupedDto>>> {
        if (requestParameters.yearfrom === null || requestParameters.yearfrom === undefined) {
            throw new runtime.RequiredError('yearfrom','Required parameter requestParameters.yearfrom was null or undefined when calling apiDrivinglicenseV4StatisticsDrivingassessmentsCreatedGroupedYearfromMonthfromGet.');
        }

        if (requestParameters.monthfrom === null || requestParameters.monthfrom === undefined) {
            throw new runtime.RequiredError('monthfrom','Required parameter requestParameters.monthfrom was null or undefined when calling apiDrivinglicenseV4StatisticsDrivingassessmentsCreatedGroupedYearfromMonthfromGet.');
        }

        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiDrivinglicenseV4StatisticsDrivingassessmentsCreatedGroupedYearfromMonthfromGet.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiDrivinglicenseV4StatisticsDrivingassessmentsCreatedGroupedYearfromMonthfromGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/drivinglicense/v4/statistics/drivingassessments/created/grouped/{yearfrom}/{monthfrom}`.replace(`{${"yearfrom"}}`, encodeURIComponent(String(requestParameters.yearfrom))).replace(`{${"monthfrom"}}`, encodeURIComponent(String(requestParameters.monthfrom))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DrivingAssessmentStatisticsGroupedDtoFromJSON));
    }

    /**
     * Get a grouped list (year/month/count) of driving ass licenses created
     */
    async apiDrivinglicenseV4StatisticsDrivingassessmentsCreatedGroupedYearfromMonthfromGet(requestParameters: ApiDrivinglicenseV4StatisticsDrivingassessmentsCreatedGroupedYearfromMonthfromGetRequest): Promise<Array<DrivingAssessmentStatisticsGroupedDto>> {
        const response = await this.apiDrivinglicenseV4StatisticsDrivingassessmentsCreatedGroupedYearfromMonthfromGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get a list of full licenses created from year/month
     */
    async apiDrivinglicenseV4StatisticsLicensesCreatedDetailedYearfromMonthfromGetRaw(requestParameters: ApiDrivinglicenseV4StatisticsLicensesCreatedDetailedYearfromMonthfromGetRequest): Promise<runtime.ApiResponse<Array<FullLicenseStatisticsDetailedDto>>> {
        if (requestParameters.yearfrom === null || requestParameters.yearfrom === undefined) {
            throw new runtime.RequiredError('yearfrom','Required parameter requestParameters.yearfrom was null or undefined when calling apiDrivinglicenseV4StatisticsLicensesCreatedDetailedYearfromMonthfromGet.');
        }

        if (requestParameters.monthfrom === null || requestParameters.monthfrom === undefined) {
            throw new runtime.RequiredError('monthfrom','Required parameter requestParameters.monthfrom was null or undefined when calling apiDrivinglicenseV4StatisticsLicensesCreatedDetailedYearfromMonthfromGet.');
        }

        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiDrivinglicenseV4StatisticsLicensesCreatedDetailedYearfromMonthfromGet.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiDrivinglicenseV4StatisticsLicensesCreatedDetailedYearfromMonthfromGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/drivinglicense/v4/statistics/licenses/created/detailed/{yearfrom}/{monthfrom}`.replace(`{${"yearfrom"}}`, encodeURIComponent(String(requestParameters.yearfrom))).replace(`{${"monthfrom"}}`, encodeURIComponent(String(requestParameters.monthfrom))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FullLicenseStatisticsDetailedDtoFromJSON));
    }

    /**
     * Get a list of full licenses created from year/month
     */
    async apiDrivinglicenseV4StatisticsLicensesCreatedDetailedYearfromMonthfromGet(requestParameters: ApiDrivinglicenseV4StatisticsLicensesCreatedDetailedYearfromMonthfromGetRequest): Promise<Array<FullLicenseStatisticsDetailedDto>> {
        const response = await this.apiDrivinglicenseV4StatisticsLicensesCreatedDetailedYearfromMonthfromGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get a grouped list (year/month/count) of full licenses created
     */
    async apiDrivinglicenseV4StatisticsLicensesCreatedGroupedYearfromMonthfromGetRaw(requestParameters: ApiDrivinglicenseV4StatisticsLicensesCreatedGroupedYearfromMonthfromGetRequest): Promise<runtime.ApiResponse<Array<FullLicenseStatisticsGroupedDto>>> {
        if (requestParameters.yearfrom === null || requestParameters.yearfrom === undefined) {
            throw new runtime.RequiredError('yearfrom','Required parameter requestParameters.yearfrom was null or undefined when calling apiDrivinglicenseV4StatisticsLicensesCreatedGroupedYearfromMonthfromGet.');
        }

        if (requestParameters.monthfrom === null || requestParameters.monthfrom === undefined) {
            throw new runtime.RequiredError('monthfrom','Required parameter requestParameters.monthfrom was null or undefined when calling apiDrivinglicenseV4StatisticsLicensesCreatedGroupedYearfromMonthfromGet.');
        }

        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiDrivinglicenseV4StatisticsLicensesCreatedGroupedYearfromMonthfromGet.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiDrivinglicenseV4StatisticsLicensesCreatedGroupedYearfromMonthfromGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/drivinglicense/v4/statistics/licenses/created/grouped/{yearfrom}/{monthfrom}`.replace(`{${"yearfrom"}}`, encodeURIComponent(String(requestParameters.yearfrom))).replace(`{${"monthfrom"}}`, encodeURIComponent(String(requestParameters.monthfrom))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FullLicenseStatisticsGroupedDtoFromJSON));
    }

    /**
     * Get a grouped list (year/month/count) of full licenses created
     */
    async apiDrivinglicenseV4StatisticsLicensesCreatedGroupedYearfromMonthfromGet(requestParameters: ApiDrivinglicenseV4StatisticsLicensesCreatedGroupedYearfromMonthfromGetRequest): Promise<Array<FullLicenseStatisticsGroupedDto>> {
        const response = await this.apiDrivinglicenseV4StatisticsLicensesCreatedGroupedYearfromMonthfromGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get a list of temporary licenses created from year/month
     */
    async apiDrivinglicenseV4StatisticsTemporarylicensesCreatedDetailedYearfromMonthfromGetRaw(requestParameters: ApiDrivinglicenseV4StatisticsTemporarylicensesCreatedDetailedYearfromMonthfromGetRequest): Promise<runtime.ApiResponse<Array<TemporaryLicenseStatisticsDetailedDto>>> {
        if (requestParameters.yearfrom === null || requestParameters.yearfrom === undefined) {
            throw new runtime.RequiredError('yearfrom','Required parameter requestParameters.yearfrom was null or undefined when calling apiDrivinglicenseV4StatisticsTemporarylicensesCreatedDetailedYearfromMonthfromGet.');
        }

        if (requestParameters.monthfrom === null || requestParameters.monthfrom === undefined) {
            throw new runtime.RequiredError('monthfrom','Required parameter requestParameters.monthfrom was null or undefined when calling apiDrivinglicenseV4StatisticsTemporarylicensesCreatedDetailedYearfromMonthfromGet.');
        }

        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiDrivinglicenseV4StatisticsTemporarylicensesCreatedDetailedYearfromMonthfromGet.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiDrivinglicenseV4StatisticsTemporarylicensesCreatedDetailedYearfromMonthfromGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/drivinglicense/v4/statistics/temporarylicenses/created/detailed/{yearfrom}/{monthfrom}`.replace(`{${"yearfrom"}}`, encodeURIComponent(String(requestParameters.yearfrom))).replace(`{${"monthfrom"}}`, encodeURIComponent(String(requestParameters.monthfrom))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TemporaryLicenseStatisticsDetailedDtoFromJSON));
    }

    /**
     * Get a list of temporary licenses created from year/month
     */
    async apiDrivinglicenseV4StatisticsTemporarylicensesCreatedDetailedYearfromMonthfromGet(requestParameters: ApiDrivinglicenseV4StatisticsTemporarylicensesCreatedDetailedYearfromMonthfromGetRequest): Promise<Array<TemporaryLicenseStatisticsDetailedDto>> {
        const response = await this.apiDrivinglicenseV4StatisticsTemporarylicensesCreatedDetailedYearfromMonthfromGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get a grouped list (year/month/count) of temporary licenses created
     */
    async apiDrivinglicenseV4StatisticsTemporarylicensesCreatedGroupedYearfromMonthfromGetRaw(requestParameters: ApiDrivinglicenseV4StatisticsTemporarylicensesCreatedGroupedYearfromMonthfromGetRequest): Promise<runtime.ApiResponse<Array<TemporaryLicenseStatisticsGroupedDto>>> {
        if (requestParameters.yearfrom === null || requestParameters.yearfrom === undefined) {
            throw new runtime.RequiredError('yearfrom','Required parameter requestParameters.yearfrom was null or undefined when calling apiDrivinglicenseV4StatisticsTemporarylicensesCreatedGroupedYearfromMonthfromGet.');
        }

        if (requestParameters.monthfrom === null || requestParameters.monthfrom === undefined) {
            throw new runtime.RequiredError('monthfrom','Required parameter requestParameters.monthfrom was null or undefined when calling apiDrivinglicenseV4StatisticsTemporarylicensesCreatedGroupedYearfromMonthfromGet.');
        }

        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiDrivinglicenseV4StatisticsTemporarylicensesCreatedGroupedYearfromMonthfromGet.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiDrivinglicenseV4StatisticsTemporarylicensesCreatedGroupedYearfromMonthfromGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/drivinglicense/v4/statistics/temporarylicenses/created/grouped/{yearfrom}/{monthfrom}`.replace(`{${"yearfrom"}}`, encodeURIComponent(String(requestParameters.yearfrom))).replace(`{${"monthfrom"}}`, encodeURIComponent(String(requestParameters.monthfrom))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TemporaryLicenseStatisticsGroupedDtoFromJSON));
    }

    /**
     * Get a grouped list (year/month/count) of temporary licenses created
     */
    async apiDrivinglicenseV4StatisticsTemporarylicensesCreatedGroupedYearfromMonthfromGet(requestParameters: ApiDrivinglicenseV4StatisticsTemporarylicensesCreatedGroupedYearfromMonthfromGetRequest): Promise<Array<TemporaryLicenseStatisticsGroupedDto>> {
        const response = await this.apiDrivinglicenseV4StatisticsTemporarylicensesCreatedGroupedYearfromMonthfromGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get for person driver licence
     */
    async getCurrentLicenseV4Raw(requestParameters: GetCurrentLicenseV4Request): Promise<runtime.ApiResponse<DriverLicenseDto>> {
        if (requestParameters.sSN === null || requestParameters.sSN === undefined) {
            throw new runtime.RequiredError('sSN','Required parameter requestParameters.sSN was null or undefined when calling getCurrentLicenseV4.');
        }

        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling getCurrentLicenseV4.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling getCurrentLicenseV4.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/drivinglicense/v4/{SSN}`.replace(`{${"SSN"}}`, encodeURIComponent(String(requestParameters.sSN))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DriverLicenseDtoFromJSON(jsonValue));
    }

    /**
     * Get for person driver licence
     */
    async getCurrentLicenseV4(requestParameters: GetCurrentLicenseV4Request): Promise<DriverLicenseDto> {
        const response = await this.getCurrentLicenseV4Raw(requestParameters);
        return await response.value();
    }

}
