/* tslint:disable */
/* eslint-disable */
/**
 * RLS driver licence Rest API
 * RESTFul services for driver licences. Programmed in ASP.NET Core 3 API 
 *
 * The version of the OpenAPI document: 4.0
 * Contact: tmd@tmd.is
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    DriverLicenseDto,
    DriverLicenseDtoFromJSON,
    DriverLicenseDtoToJSON,
    ProblemDetails,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
} from '../models';

export interface ApiLicenseserviceV4IdGetRequest {
    id: number;
    apiVersion: string;
    apiVersion2: string;
}

export interface ApiLicenseserviceV4SSNGetlicenseGetRequest {
    sSN: string;
    apiVersion: string;
    apiVersion2: string;
}

export interface ApiLicenseserviceV4SSNIslicensevalidGetRequest {
    sSN: string;
    apiVersion: string;
    apiVersion2: string;
}

/**
 * 
 */
export class LicenseServiceApi extends runtime.BaseAPI {

    /**
     * Get person license by license id
     */
    async apiLicenseserviceV4IdGetRaw(requestParameters: ApiLicenseserviceV4IdGetRequest): Promise<runtime.ApiResponse<DriverLicenseDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiLicenseserviceV4IdGet.');
        }

        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiLicenseserviceV4IdGet.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiLicenseserviceV4IdGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/licenseservice/v4/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DriverLicenseDtoFromJSON(jsonValue));
    }

    /**
     * Get person license by license id
     */
    async apiLicenseserviceV4IdGet(requestParameters: ApiLicenseserviceV4IdGetRequest): Promise<DriverLicenseDto> {
        const response = await this.apiLicenseserviceV4IdGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get person license by person social security number
     */
    async apiLicenseserviceV4SSNGetlicenseGetRaw(requestParameters: ApiLicenseserviceV4SSNGetlicenseGetRequest): Promise<runtime.ApiResponse<DriverLicenseDto>> {
        if (requestParameters.sSN === null || requestParameters.sSN === undefined) {
            throw new runtime.RequiredError('sSN','Required parameter requestParameters.sSN was null or undefined when calling apiLicenseserviceV4SSNGetlicenseGet.');
        }

        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiLicenseserviceV4SSNGetlicenseGet.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiLicenseserviceV4SSNGetlicenseGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/licenseservice/v4/{SSN}/getlicense`.replace(`{${"SSN"}}`, encodeURIComponent(String(requestParameters.sSN))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DriverLicenseDtoFromJSON(jsonValue));
    }

    /**
     * Get person license by person social security number
     */
    async apiLicenseserviceV4SSNGetlicenseGet(requestParameters: ApiLicenseserviceV4SSNGetlicenseGetRequest): Promise<DriverLicenseDto> {
        const response = await this.apiLicenseserviceV4SSNGetlicenseGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Check if ssn has a valid license
     */
    async apiLicenseserviceV4SSNIslicensevalidGetRaw(requestParameters: ApiLicenseserviceV4SSNIslicensevalidGetRequest): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.sSN === null || requestParameters.sSN === undefined) {
            throw new runtime.RequiredError('sSN','Required parameter requestParameters.sSN was null or undefined when calling apiLicenseserviceV4SSNIslicensevalidGet.');
        }

        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiLicenseserviceV4SSNIslicensevalidGet.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiLicenseserviceV4SSNIslicensevalidGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/licenseservice/v4/{SSN}/islicensevalid`.replace(`{${"SSN"}}`, encodeURIComponent(String(requestParameters.sSN))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Check if ssn has a valid license
     */
    async apiLicenseserviceV4SSNIslicensevalidGet(requestParameters: ApiLicenseserviceV4SSNIslicensevalidGetRequest): Promise<boolean> {
        const response = await this.apiLicenseserviceV4SSNIslicensevalidGetRaw(requestParameters);
        return await response.value();
    }

}
