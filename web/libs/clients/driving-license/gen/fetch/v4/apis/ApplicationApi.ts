/* tslint:disable */
/* eslint-disable */
/**
 * RLS driver licence Rest API
 * RESTFul services for driver licences. Programmed in ASP.NET Core 3 API 
 *
 * The version of the OpenAPI document: 4.0
 * Contact: tmd@tmd.is
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ApplicationFinishedDto,
    ApplicationFinishedDtoFromJSON,
    ApplicationFinishedDtoToJSON,
    ApplicationForCategoryDto,
    ApplicationForCategoryDtoFromJSON,
    ApplicationForCategoryDtoToJSON,
    PostApplicationForBEModel,
    PostApplicationForBEModelFromJSON,
    PostApplicationForBEModelToJSON,
    ProblemDetails,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
} from '../models';

export interface ApiApplicationsV4ApplyforBePostRequest {
    apiVersion: string;
    apiVersion2: string;
    postApplicationForBEModel?: PostApplicationForBEModel;
}

export interface ApiApplicationsV4TestfinishedApplicationIdPostRequest {
    applicationId: string;
    apiVersion: string;
    apiVersion2: string;
}

/**
 * 
 */
export class ApplicationApi extends runtime.BaseAPI {

    /**
     * Apply for BE category
     */
    async apiApplicationsV4ApplyforBePostRaw(requestParameters: ApiApplicationsV4ApplyforBePostRequest): Promise<runtime.ApiResponse<ApplicationForCategoryDto>> {
        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiApplicationsV4ApplyforBePost.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiApplicationsV4ApplyforBePost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/applications/v4/applyfor/be`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostApplicationForBEModelToJSON(requestParameters.postApplicationForBEModel),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationForCategoryDtoFromJSON(jsonValue));
    }

    /**
     * Apply for BE category
     */
    async apiApplicationsV4ApplyforBePost(requestParameters: ApiApplicationsV4ApplyforBePostRequest): Promise<ApplicationForCategoryDto> {
        const response = await this.apiApplicationsV4ApplyforBePostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Confirm application as done, test finished
     */
    async apiApplicationsV4TestfinishedApplicationIdPostRaw(requestParameters: ApiApplicationsV4TestfinishedApplicationIdPostRequest): Promise<runtime.ApiResponse<ApplicationFinishedDto>> {
        if (requestParameters.applicationId === null || requestParameters.applicationId === undefined) {
            throw new runtime.RequiredError('applicationId','Required parameter requestParameters.applicationId was null or undefined when calling apiApplicationsV4TestfinishedApplicationIdPost.');
        }

        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiApplicationsV4TestfinishedApplicationIdPost.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiApplicationsV4TestfinishedApplicationIdPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/applications/v4/testfinished/{applicationId}`.replace(`{${"applicationId"}}`, encodeURIComponent(String(requestParameters.applicationId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationFinishedDtoFromJSON(jsonValue));
    }

    /**
     * Confirm application as done, test finished
     */
    async apiApplicationsV4TestfinishedApplicationIdPost(requestParameters: ApiApplicationsV4TestfinishedApplicationIdPostRequest): Promise<ApplicationFinishedDto> {
        const response = await this.apiApplicationsV4TestfinishedApplicationIdPostRaw(requestParameters);
        return await response.value();
    }

}
