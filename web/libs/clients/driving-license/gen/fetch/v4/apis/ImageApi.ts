/* tslint:disable */
/* eslint-disable */
/**
 * RLS driver licence Rest API
 * RESTFul services for driver licences. Programmed in ASP.NET Core 3 API 
 *
 * The version of the OpenAPI document: 4.0
 * Contact: tmd@tmd.is
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ImagesFromThjodskraDto,
    ImagesFromThjodskraDtoFromJSON,
    ImagesFromThjodskraDtoToJSON,
} from '../models';

export interface ApiImagecontrollerSSNFromnationalregistryGetRequest {
    sSN: string;
    apiVersion: string;
    apiVersion2: string;
}

export interface ApiImagecontrollerSSNGetqualityphotoGetRequest {
    sSN: string;
    apiVersion: string;
    apiVersion2: string;
}

export interface ApiImagecontrollerSSNGetqualitysignatureGetRequest {
    sSN: string;
    apiVersion: string;
    apiVersion2: string;
}

export interface ApiImagecontrollerSSNHasqualityphotoGetRequest {
    sSN: string;
    apiVersion: string;
    apiVersion2: string;
}

export interface ApiImagecontrollerSSNHasqualitysignatureGetRequest {
    sSN: string;
    apiVersion: string;
    apiVersion2: string;
}

/**
 * 
 */
export class ImageApi extends runtime.BaseAPI {

    /**
     * Get for all images from thjodskra
     */
    async apiImagecontrollerSSNFromnationalregistryGetRaw(requestParameters: ApiImagecontrollerSSNFromnationalregistryGetRequest): Promise<runtime.ApiResponse<ImagesFromThjodskraDto>> {
        if (requestParameters.sSN === null || requestParameters.sSN === undefined) {
            throw new runtime.RequiredError('sSN','Required parameter requestParameters.sSN was null or undefined when calling apiImagecontrollerSSNFromnationalregistryGet.');
        }

        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiImagecontrollerSSNFromnationalregistryGet.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiImagecontrollerSSNFromnationalregistryGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/imagecontroller/{SSN}/fromnationalregistry`.replace(`{${"SSN"}}`, encodeURIComponent(String(requestParameters.sSN))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ImagesFromThjodskraDtoFromJSON(jsonValue));
    }

    /**
     * Get for all images from thjodskra
     */
    async apiImagecontrollerSSNFromnationalregistryGet(requestParameters: ApiImagecontrollerSSNFromnationalregistryGetRequest): Promise<ImagesFromThjodskraDto> {
        const response = await this.apiImagecontrollerSSNFromnationalregistryGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get quality marked photo for person
     */
    async apiImagecontrollerSSNGetqualityphotoGetRaw(requestParameters: ApiImagecontrollerSSNGetqualityphotoGetRequest): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.sSN === null || requestParameters.sSN === undefined) {
            throw new runtime.RequiredError('sSN','Required parameter requestParameters.sSN was null or undefined when calling apiImagecontrollerSSNGetqualityphotoGet.');
        }

        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiImagecontrollerSSNGetqualityphotoGet.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiImagecontrollerSSNGetqualityphotoGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/imagecontroller/{SSN}/getqualityphoto`.replace(`{${"SSN"}}`, encodeURIComponent(String(requestParameters.sSN))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Get quality marked photo for person
     */
    async apiImagecontrollerSSNGetqualityphotoGet(requestParameters: ApiImagecontrollerSSNGetqualityphotoGetRequest): Promise<string> {
        const response = await this.apiImagecontrollerSSNGetqualityphotoGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get quality marked photo for person
     */
    async apiImagecontrollerSSNGetqualitysignatureGetRaw(requestParameters: ApiImagecontrollerSSNGetqualitysignatureGetRequest): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.sSN === null || requestParameters.sSN === undefined) {
            throw new runtime.RequiredError('sSN','Required parameter requestParameters.sSN was null or undefined when calling apiImagecontrollerSSNGetqualitysignatureGet.');
        }

        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiImagecontrollerSSNGetqualitysignatureGet.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiImagecontrollerSSNGetqualitysignatureGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/imagecontroller/{SSN}/getqualitysignature`.replace(`{${"SSN"}}`, encodeURIComponent(String(requestParameters.sSN))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Get quality marked photo for person
     */
    async apiImagecontrollerSSNGetqualitysignatureGet(requestParameters: ApiImagecontrollerSSNGetqualitysignatureGetRequest): Promise<string> {
        const response = await this.apiImagecontrollerSSNGetqualitysignatureGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Check if person has quality marked photo
     */
    async apiImagecontrollerSSNHasqualityphotoGetRaw(requestParameters: ApiImagecontrollerSSNHasqualityphotoGetRequest): Promise<runtime.ApiResponse<number>> {
        if (requestParameters.sSN === null || requestParameters.sSN === undefined) {
            throw new runtime.RequiredError('sSN','Required parameter requestParameters.sSN was null or undefined when calling apiImagecontrollerSSNHasqualityphotoGet.');
        }

        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiImagecontrollerSSNHasqualityphotoGet.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiImagecontrollerSSNHasqualityphotoGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/imagecontroller/{SSN}/hasqualityphoto`.replace(`{${"SSN"}}`, encodeURIComponent(String(requestParameters.sSN))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Check if person has quality marked photo
     */
    async apiImagecontrollerSSNHasqualityphotoGet(requestParameters: ApiImagecontrollerSSNHasqualityphotoGetRequest): Promise<number> {
        const response = await this.apiImagecontrollerSSNHasqualityphotoGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Check if person has quality marked photo
     */
    async apiImagecontrollerSSNHasqualitysignatureGetRaw(requestParameters: ApiImagecontrollerSSNHasqualitysignatureGetRequest): Promise<runtime.ApiResponse<number>> {
        if (requestParameters.sSN === null || requestParameters.sSN === undefined) {
            throw new runtime.RequiredError('sSN','Required parameter requestParameters.sSN was null or undefined when calling apiImagecontrollerSSNHasqualitysignatureGet.');
        }

        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiImagecontrollerSSNHasqualitysignatureGet.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiImagecontrollerSSNHasqualitysignatureGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/imagecontroller/{SSN}/hasqualitysignature`.replace(`{${"SSN"}}`, encodeURIComponent(String(requestParameters.sSN))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Check if person has quality marked photo
     */
    async apiImagecontrollerSSNHasqualitysignatureGet(requestParameters: ApiImagecontrollerSSNHasqualitysignatureGetRequest): Promise<number> {
        const response = await this.apiImagecontrollerSSNHasqualitysignatureGetRaw(requestParameters);
        return await response.value();
    }

}
