/* tslint:disable */
/* eslint-disable */
/**
 * RLS driver licence Rest API
 * RESTFul services for driver licences. Programmed in .NET 8
 *
 * The version of the OpenAPI document: 5.0
 * Contact: tmd@tmd.is
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ImagesFromThjodskraDto,
    ImagesFromThjodskraDtoFromJSON,
    ImagesFromThjodskraDtoToJSON,
} from '../models';

export interface ApiImagecontrollerV5GetqualityphotoGetRequest {
    apiVersion: string;
    apiVersion2: string;
    jwttoken?: string;
}

export interface ApiImagecontrollerV5GetqualitysignatureGetRequest {
    apiVersion: string;
    apiVersion2: string;
    jwttoken?: string;
}

export interface ApiImagecontrollerV5HasqualityphotoGetRequest {
    apiVersion: string;
    apiVersion2: string;
    jwttoken?: string;
}

export interface ApiImagecontrollerV5HasqualitysignatureGetRequest {
    apiVersion: string;
    apiVersion2: string;
    jwttoken?: string;
}

export interface ApiImagecontrollerV5SSNFromnationalregistryGetRequest {
    sSN: string;
    apiVersion: string;
    apiVersion2: string;
}

export interface ApiImagecontrollerV5SSNGetqualityscannedphotoGetRequest {
    sSN: string;
    apiVersion: string;
    apiVersion2: string;
}

export interface ApiImagecontrollerV5SSNGetqualityscannedsignatureGetRequest {
    sSN: string;
    apiVersion: string;
    apiVersion2: string;
}

export interface ApiImagecontrollerV5SSNHasqualityscannedphotoGetRequest {
    sSN: string;
    apiVersion: string;
    apiVersion2: string;
}

export interface ApiImagecontrollerV5SSNHasqualityscannedsignatureGetRequest {
    sSN: string;
    apiVersion: string;
    apiVersion2: string;
}

/**
 * 
 */
export class ImageApi extends runtime.BaseAPI {

    /**
     * Get quality marked photo for person
     */
    async apiImagecontrollerV5GetqualityphotoGetRaw(requestParameters: ApiImagecontrollerV5GetqualityphotoGetRequest): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiImagecontrollerV5GetqualityphotoGet.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiImagecontrollerV5GetqualityphotoGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.jwttoken !== undefined && requestParameters.jwttoken !== null) {
            headerParameters['jwttoken'] = String(requestParameters.jwttoken);
        }

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/imagecontroller/v5/getqualityphoto`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Get quality marked photo for person
     */
    async apiImagecontrollerV5GetqualityphotoGet(requestParameters: ApiImagecontrollerV5GetqualityphotoGetRequest): Promise<string> {
        const response = await this.apiImagecontrollerV5GetqualityphotoGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get quality marked photo for person
     */
    async apiImagecontrollerV5GetqualitysignatureGetRaw(requestParameters: ApiImagecontrollerV5GetqualitysignatureGetRequest): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiImagecontrollerV5GetqualitysignatureGet.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiImagecontrollerV5GetqualitysignatureGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.jwttoken !== undefined && requestParameters.jwttoken !== null) {
            headerParameters['jwttoken'] = String(requestParameters.jwttoken);
        }

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/imagecontroller/v5/getqualitysignature`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Get quality marked photo for person
     */
    async apiImagecontrollerV5GetqualitysignatureGet(requestParameters: ApiImagecontrollerV5GetqualitysignatureGetRequest): Promise<string> {
        const response = await this.apiImagecontrollerV5GetqualitysignatureGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Check if person has quality marked photo
     */
    async apiImagecontrollerV5HasqualityphotoGetRaw(requestParameters: ApiImagecontrollerV5HasqualityphotoGetRequest): Promise<runtime.ApiResponse<number>> {
        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiImagecontrollerV5HasqualityphotoGet.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiImagecontrollerV5HasqualityphotoGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.jwttoken !== undefined && requestParameters.jwttoken !== null) {
            headerParameters['jwttoken'] = String(requestParameters.jwttoken);
        }

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/imagecontroller/v5/hasqualityphoto`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Check if person has quality marked photo
     */
    async apiImagecontrollerV5HasqualityphotoGet(requestParameters: ApiImagecontrollerV5HasqualityphotoGetRequest): Promise<number> {
        const response = await this.apiImagecontrollerV5HasqualityphotoGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Check if person has quality marked photo
     */
    async apiImagecontrollerV5HasqualitysignatureGetRaw(requestParameters: ApiImagecontrollerV5HasqualitysignatureGetRequest): Promise<runtime.ApiResponse<number>> {
        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiImagecontrollerV5HasqualitysignatureGet.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiImagecontrollerV5HasqualitysignatureGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.jwttoken !== undefined && requestParameters.jwttoken !== null) {
            headerParameters['jwttoken'] = String(requestParameters.jwttoken);
        }

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/imagecontroller/v5/hasqualitysignature`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Check if person has quality marked photo
     */
    async apiImagecontrollerV5HasqualitysignatureGet(requestParameters: ApiImagecontrollerV5HasqualitysignatureGetRequest): Promise<number> {
        const response = await this.apiImagecontrollerV5HasqualitysignatureGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get for all images from thjodskra
     */
    async apiImagecontrollerV5SSNFromnationalregistryGetRaw(requestParameters: ApiImagecontrollerV5SSNFromnationalregistryGetRequest): Promise<runtime.ApiResponse<ImagesFromThjodskraDto>> {
        if (requestParameters.sSN === null || requestParameters.sSN === undefined) {
            throw new runtime.RequiredError('sSN','Required parameter requestParameters.sSN was null or undefined when calling apiImagecontrollerV5SSNFromnationalregistryGet.');
        }

        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiImagecontrollerV5SSNFromnationalregistryGet.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiImagecontrollerV5SSNFromnationalregistryGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/imagecontroller/v5/{SSN}/fromnationalregistry`.replace(`{${"SSN"}}`, encodeURIComponent(String(requestParameters.sSN))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ImagesFromThjodskraDtoFromJSON(jsonValue));
    }

    /**
     * Get for all images from thjodskra
     */
    async apiImagecontrollerV5SSNFromnationalregistryGet(requestParameters: ApiImagecontrollerV5SSNFromnationalregistryGetRequest): Promise<ImagesFromThjodskraDto> {
        const response = await this.apiImagecontrollerV5SSNFromnationalregistryGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get quality marked scanned photo for person
     */
    async apiImagecontrollerV5SSNGetqualityscannedphotoGetRaw(requestParameters: ApiImagecontrollerV5SSNGetqualityscannedphotoGetRequest): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.sSN === null || requestParameters.sSN === undefined) {
            throw new runtime.RequiredError('sSN','Required parameter requestParameters.sSN was null or undefined when calling apiImagecontrollerV5SSNGetqualityscannedphotoGet.');
        }

        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiImagecontrollerV5SSNGetqualityscannedphotoGet.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiImagecontrollerV5SSNGetqualityscannedphotoGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/imagecontroller/v5/{SSN}/getqualityscannedphoto`.replace(`{${"SSN"}}`, encodeURIComponent(String(requestParameters.sSN))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Get quality marked scanned photo for person
     */
    async apiImagecontrollerV5SSNGetqualityscannedphotoGet(requestParameters: ApiImagecontrollerV5SSNGetqualityscannedphotoGetRequest): Promise<string> {
        const response = await this.apiImagecontrollerV5SSNGetqualityscannedphotoGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get quality marked scanned signature for person
     */
    async apiImagecontrollerV5SSNGetqualityscannedsignatureGetRaw(requestParameters: ApiImagecontrollerV5SSNGetqualityscannedsignatureGetRequest): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.sSN === null || requestParameters.sSN === undefined) {
            throw new runtime.RequiredError('sSN','Required parameter requestParameters.sSN was null or undefined when calling apiImagecontrollerV5SSNGetqualityscannedsignatureGet.');
        }

        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiImagecontrollerV5SSNGetqualityscannedsignatureGet.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiImagecontrollerV5SSNGetqualityscannedsignatureGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/imagecontroller/v5/{SSN}/getqualityscannedsignature`.replace(`{${"SSN"}}`, encodeURIComponent(String(requestParameters.sSN))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Get quality marked scanned signature for person
     */
    async apiImagecontrollerV5SSNGetqualityscannedsignatureGet(requestParameters: ApiImagecontrollerV5SSNGetqualityscannedsignatureGetRequest): Promise<string> {
        const response = await this.apiImagecontrollerV5SSNGetqualityscannedsignatureGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Check if person has quality marked scanned photo
     */
    async apiImagecontrollerV5SSNHasqualityscannedphotoGetRaw(requestParameters: ApiImagecontrollerV5SSNHasqualityscannedphotoGetRequest): Promise<runtime.ApiResponse<number>> {
        if (requestParameters.sSN === null || requestParameters.sSN === undefined) {
            throw new runtime.RequiredError('sSN','Required parameter requestParameters.sSN was null or undefined when calling apiImagecontrollerV5SSNHasqualityscannedphotoGet.');
        }

        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiImagecontrollerV5SSNHasqualityscannedphotoGet.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiImagecontrollerV5SSNHasqualityscannedphotoGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/imagecontroller/v5/{SSN}/hasqualityscannedphoto`.replace(`{${"SSN"}}`, encodeURIComponent(String(requestParameters.sSN))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Check if person has quality marked scanned photo
     */
    async apiImagecontrollerV5SSNHasqualityscannedphotoGet(requestParameters: ApiImagecontrollerV5SSNHasqualityscannedphotoGetRequest): Promise<number> {
        const response = await this.apiImagecontrollerV5SSNHasqualityscannedphotoGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Check if person has quality marked scanned photo
     */
    async apiImagecontrollerV5SSNHasqualityscannedsignatureGetRaw(requestParameters: ApiImagecontrollerV5SSNHasqualityscannedsignatureGetRequest): Promise<runtime.ApiResponse<number>> {
        if (requestParameters.sSN === null || requestParameters.sSN === undefined) {
            throw new runtime.RequiredError('sSN','Required parameter requestParameters.sSN was null or undefined when calling apiImagecontrollerV5SSNHasqualityscannedsignatureGet.');
        }

        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiImagecontrollerV5SSNHasqualityscannedsignatureGet.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiImagecontrollerV5SSNHasqualityscannedsignatureGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/imagecontroller/v5/{SSN}/hasqualityscannedsignature`.replace(`{${"SSN"}}`, encodeURIComponent(String(requestParameters.sSN))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Check if person has quality marked scanned photo
     */
    async apiImagecontrollerV5SSNHasqualityscannedsignatureGet(requestParameters: ApiImagecontrollerV5SSNHasqualityscannedsignatureGetRequest): Promise<number> {
        const response = await this.apiImagecontrollerV5SSNHasqualityscannedsignatureGetRaw(requestParameters);
        return await response.value();
    }

}
