/* tslint:disable */
/* eslint-disable */
/**
 * RLS driver licence Rest API
 * RESTFul services for driver licences. Programmed in .NET 8
 *
 * The version of the OpenAPI document: 5.0
 * Contact: tmd@tmd.is
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CategoryValidDto,
    CategoryValidDtoFromJSON,
    CategoryValidDtoToJSON,
    DeprivationDto,
    DeprivationDtoFromJSON,
    DeprivationDtoToJSON,
    DriverLicenseDto,
    DriverLicenseDtoFromJSON,
    DriverLicenseDtoToJSON,
    DriverLicenseWithoutImagesDto,
    DriverLicenseWithoutImagesDtoFromJSON,
    DriverLicenseWithoutImagesDtoToJSON,
    DrivingAssessmentDto,
    DrivingAssessmentDtoFromJSON,
    DrivingAssessmentDtoToJSON,
    DrivingAssessmentStatisticsDetailedDto,
    DrivingAssessmentStatisticsDetailedDtoFromJSON,
    DrivingAssessmentStatisticsDetailedDtoToJSON,
    DrivingAssessmentStatisticsGroupedDto,
    DrivingAssessmentStatisticsGroupedDtoFromJSON,
    DrivingAssessmentStatisticsGroupedDtoToJSON,
    FullLicenseStatisticsDetailedDto,
    FullLicenseStatisticsDetailedDtoFromJSON,
    FullLicenseStatisticsDetailedDtoToJSON,
    FullLicenseStatisticsGroupedDto,
    FullLicenseStatisticsGroupedDtoFromJSON,
    FullLicenseStatisticsGroupedDtoToJSON,
    HasFinishedDrivingSchool3Dto,
    HasFinishedDrivingSchool3DtoFromJSON,
    HasFinishedDrivingSchool3DtoToJSON,
    InstructorDto,
    InstructorDtoFromJSON,
    InstructorDtoToJSON,
    LatestUnfinishedLicenseDto,
    LatestUnfinishedLicenseDtoFromJSON,
    LatestUnfinishedLicenseDtoToJSON,
    LicenseProductionErrorMsgModel,
    LicenseProductionErrorMsgModelFromJSON,
    LicenseProductionErrorMsgModelToJSON,
    LicenseStatusDto,
    LicenseStatusDtoFromJSON,
    LicenseStatusDtoToJSON,
    MayApplyForLicenseDto,
    MayApplyForLicenseDtoFromJSON,
    MayApplyForLicenseDtoToJSON,
    MayApplyForRenewal65Dto,
    MayApplyForRenewal65DtoFromJSON,
    MayApplyForRenewal65DtoToJSON,
    MayApplyForTemporaryLicenseDto,
    MayApplyForTemporaryLicenseDtoFromJSON,
    MayApplyForTemporaryLicenseDtoToJSON,
    MedferdDto,
    MedferdDtoFromJSON,
    MedferdDtoToJSON,
    NewTemporaryLicsenseDto,
    NewTemporaryLicsenseDtoFromJSON,
    NewTemporaryLicsenseDtoToJSON,
    OrderTemporaryLicenseDto,
    OrderTemporaryLicenseDtoFromJSON,
    OrderTemporaryLicenseDtoToJSON,
    PenaltyPointsDto,
    PenaltyPointsDtoFromJSON,
    PenaltyPointsDtoToJSON,
    PostNewCollaborative,
    PostNewCollaborativeFromJSON,
    PostNewCollaborativeToJSON,
    PostNewDrivingAssessment,
    PostNewDrivingAssessmentFromJSON,
    PostNewDrivingAssessmentToJSON,
    PostNewFinalLicense,
    PostNewFinalLicenseFromJSON,
    PostNewFinalLicenseToJSON,
    PostPracticePermit,
    PostPracticePermitFromJSON,
    PostPracticePermitToJSON,
    PostRenewal65AndOver,
    PostRenewal65AndOverFromJSON,
    PostRenewal65AndOverToJSON,
    PostTeachingDoneForTempLicense,
    PostTeachingDoneForTempLicenseFromJSON,
    PostTeachingDoneForTempLicenseToJSON,
    PostTemporaryLicense,
    PostTemporaryLicenseFromJSON,
    PostTemporaryLicenseToJSON,
    PostTemporaryLicenseWithHealthDeclaration,
    PostTemporaryLicenseWithHealthDeclarationFromJSON,
    PostTemporaryLicenseWithHealthDeclarationToJSON,
    PracticePermitDto,
    PracticePermitDtoFromJSON,
    PracticePermitDtoToJSON,
    ProblemDetails,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    Renewal65AndOver,
    Renewal65AndOverFromJSON,
    Renewal65AndOverToJSON,
    TemporaryLicenseStatisticsDetailedDto,
    TemporaryLicenseStatisticsDetailedDtoFromJSON,
    TemporaryLicenseStatisticsDetailedDtoToJSON,
    TemporaryLicenseStatisticsGroupedDto,
    TemporaryLicenseStatisticsGroupedDtoFromJSON,
    TemporaryLicenseStatisticsGroupedDtoToJSON,
} from '../models';

export interface ApiDrivinglicenseV5AllGetRequest {
    apiVersion: string;
    apiVersion2: string;
    jwttoken?: string;
}

export interface ApiDrivinglicenseV5ApplicationsNewCategoryPostRequest {
    category: string;
    apiVersion: string;
    apiVersion2: string;
    postNewFinalLicense?: PostNewFinalLicense;
}

export interface ApiDrivinglicenseV5ApplicationsNewCollaborativePostRequest {
    apiVersion: string;
    apiVersion2: string;
    jwttoken?: string;
    postNewCollaborative?: PostNewCollaborative;
}

export interface ApiDrivinglicenseV5ApplicationsNewTemporaryPostRequest {
    apiVersion: string;
    apiVersion2: string;
    postTemporaryLicense?: PostTemporaryLicense;
}

export interface ApiDrivinglicenseV5ApplicationsNewTemporarywithhealthdeclarationPostRequest {
    apiVersion: string;
    apiVersion2: string;
    jwttoken?: string;
    postTemporaryLicenseWithHealthDeclaration?: PostTemporaryLicenseWithHealthDeclaration;
}

export interface ApiDrivinglicenseV5ApplicationsPracticepermitPostRequest {
    apiVersion: string;
    apiVersion2: string;
    jwttoken?: string;
    postPracticePermit?: PostPracticePermit;
}

export interface ApiDrivinglicenseV5ApplicationsRenewal65PostRequest {
    apiVersion: string;
    apiVersion2: string;
    jwttoken?: string;
    postRenewal65AndOver?: PostRenewal65AndOver;
}

export interface ApiDrivinglicenseV5ApplicationsTemporarytestfinishedPostRequest {
    apiVersion: string;
    apiVersion2: string;
    postTeachingDoneForTempLicense?: PostTeachingDoneForTempLicense;
}

export interface ApiDrivinglicenseV5ApplicationsUnfinishedCategoryidGetRequest {
    categoryid: string;
    apiVersion: string;
    apiVersion2: string;
    jwttoken?: string;
}

export interface ApiDrivinglicenseV5CanapplyforCategoryFullGetRequest {
    category: string;
    apiVersion: string;
    apiVersion2: string;
    jwttoken?: string;
}

export interface ApiDrivinglicenseV5CanapplyforPracticepermitPostRequest {
    apiVersion: string;
    apiVersion2: string;
    jwttoken?: string;
    postPracticePermit?: PostPracticePermit;
}

export interface ApiDrivinglicenseV5CanapplyforRenewal65GetRequest {
    apiVersion: string;
    apiVersion2: string;
    jwttoken?: string;
}

export interface ApiDrivinglicenseV5CanapplyforTemporaryGetRequest {
    apiVersion: string;
    apiVersion2: string;
    jwttoken?: string;
}

export interface ApiDrivinglicenseV5CategoryvalidCategoryDrivinglicenseidGetRequest {
    category: string;
    drivinglicenseid: number;
    apiVersion: string;
    apiVersion2: string;
    jwttoken?: string;
}

export interface ApiDrivinglicenseV5DeprivationGetRequest {
    apiVersion: string;
    apiVersion2: string;
    jwttoken?: string;
}

export interface ApiDrivinglicenseV5DigitallicensecreatedPostRequest {
    apiVersion: string;
    apiVersion2: string;
    jwttoken?: string;
}

export interface ApiDrivinglicenseV5DrivingassessmentGetRequest {
    apiVersion: string;
    apiVersion2: string;
    jwttoken?: string;
}

export interface ApiDrivinglicenseV5DrivingassessmentPostRequest {
    apiVersion: string;
    apiVersion2: string;
    postNewDrivingAssessment?: PostNewDrivingAssessment;
}

export interface ApiDrivinglicenseV5DrivinginstructorsGetRequest {
    apiVersion: string;
    apiVersion2: string;
}

export interface ApiDrivinglicenseV5GetqualityphotoGetRequest {
    apiVersion: string;
    apiVersion2: string;
    jwttoken?: string;
}

export interface ApiDrivinglicenseV5GetqualitysignatureGetRequest {
    apiVersion: string;
    apiVersion2: string;
    jwttoken?: string;
}

export interface ApiDrivinglicenseV5Hasfinisheddrivingschool3GetRequest {
    apiVersion: string;
    apiVersion2: string;
    jwttoken?: string;
}

export interface ApiDrivinglicenseV5HasqualityphotoGetRequest {
    apiVersion: string;
    apiVersion2: string;
    jwttoken?: string;
}

export interface ApiDrivinglicenseV5HasqualitysignatureGetRequest {
    apiVersion: string;
    apiVersion2: string;
    jwttoken?: string;
}

export interface ApiDrivinglicenseV5HasteachingrightsGetRequest {
    apiVersion: string;
    apiVersion2: string;
    jwttoken?: string;
}

export interface ApiDrivinglicenseV5LicenseactionsLicenseidGetRequest {
    licenseid: number;
    apiVersion: string;
    apiVersion2: string;
    jwttoken?: string;
}

export interface ApiDrivinglicenseV5LicenseactionsProducedbyskraLicenseIdPostRequest {
    licenseId: number;
    apiVersion: string;
    apiVersion2: string;
}

export interface ApiDrivinglicenseV5LicenseactionsProducedbyskraandsenthomeLicenseIdPostRequest {
    licenseId: number;
    apiVersion: string;
    apiVersion2: string;
}

export interface ApiDrivinglicenseV5LicenseactionsProducedbyskraandsenttodistrictLicenseIdPostRequest {
    licenseId: number;
    apiVersion: string;
    apiVersion2: string;
}

export interface ApiDrivinglicenseV5LicenseactionsProductionerrorLicenseIdPostRequest {
    licenseId: number;
    apiVersion: string;
    apiVersion2: string;
}

export interface ApiDrivinglicenseV5LicenseactionsProductionerrorwithmsgLicenseIdPostRequest {
    licenseId: number;
    apiVersion: string;
    apiVersion2: string;
    licenseProductionErrorMsgModel?: LicenseProductionErrorMsgModel;
}

export interface ApiDrivinglicenseV5PenaltypointsGetRequest {
    apiVersion: string;
    apiVersion2: string;
    jwttoken?: string;
}

export interface ApiDrivinglicenseV5StatisticsDrivingassessmentsCreatedDetailedYearfromMonthfromGetRequest {
    yearfrom: number;
    monthfrom: number;
    apiVersion: string;
    apiVersion2: string;
}

export interface ApiDrivinglicenseV5StatisticsDrivingassessmentsCreatedGroupedYearfromMonthfromGetRequest {
    yearfrom: number;
    monthfrom: number;
    apiVersion: string;
    apiVersion2: string;
}

export interface ApiDrivinglicenseV5StatisticsLicensesCreatedDetailedYearfromMonthfromGetRequest {
    yearfrom: number;
    monthfrom: number;
    apiVersion: string;
    apiVersion2: string;
}

export interface ApiDrivinglicenseV5StatisticsLicensesCreatedGroupedYearfromMonthfromGetRequest {
    yearfrom: number;
    monthfrom: number;
    apiVersion: string;
    apiVersion2: string;
}

export interface ApiDrivinglicenseV5StatisticsTemporarylicensesCreatedDetailedYearfromMonthfromGetRequest {
    yearfrom: number;
    monthfrom: number;
    apiVersion: string;
    apiVersion2: string;
}

export interface ApiDrivinglicenseV5StatisticsTemporarylicensesCreatedGroupedYearfromMonthfromGetRequest {
    yearfrom: number;
    monthfrom: number;
    apiVersion: string;
    apiVersion2: string;
}

export interface GetCurrentLicenseV5Request {
    apiVersion: string;
    apiVersion2: string;
    jwttoken?: string;
}

export interface GetLicenseByIdRequest {
    licenseid: string;
    apiVersion: string;
    apiVersion2: string;
}

/**
 * 
 */
export class OkuskirteiniApi extends runtime.BaseAPI {

    /**
     * Get for all persons driver licences
     */
    async apiDrivinglicenseV5AllGetRaw(requestParameters: ApiDrivinglicenseV5AllGetRequest): Promise<runtime.ApiResponse<Array<DriverLicenseWithoutImagesDto>>> {
        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiDrivinglicenseV5AllGet.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiDrivinglicenseV5AllGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.jwttoken !== undefined && requestParameters.jwttoken !== null) {
            headerParameters['jwttoken'] = String(requestParameters.jwttoken);
        }

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/drivinglicense/v5/all`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DriverLicenseWithoutImagesDtoFromJSON));
    }

    /**
     * Get for all persons driver licences
     */
    async apiDrivinglicenseV5AllGet(requestParameters: ApiDrivinglicenseV5AllGetRequest): Promise<Array<DriverLicenseWithoutImagesDto>> {
        const response = await this.apiDrivinglicenseV5AllGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Apply for drivers license for a category
     */
    async apiDrivinglicenseV5ApplicationsNewCategoryPostRaw(requestParameters: ApiDrivinglicenseV5ApplicationsNewCategoryPostRequest): Promise<runtime.ApiResponse<number>> {
        if (requestParameters.category === null || requestParameters.category === undefined) {
            throw new runtime.RequiredError('category','Required parameter requestParameters.category was null or undefined when calling apiDrivinglicenseV5ApplicationsNewCategoryPost.');
        }

        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiDrivinglicenseV5ApplicationsNewCategoryPost.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiDrivinglicenseV5ApplicationsNewCategoryPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/drivinglicense/v5/applications/new/{category}`.replace(`{${"category"}}`, encodeURIComponent(String(requestParameters.category))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostNewFinalLicenseToJSON(requestParameters.postNewFinalLicense),
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Apply for drivers license for a category
     */
    async apiDrivinglicenseV5ApplicationsNewCategoryPost(requestParameters: ApiDrivinglicenseV5ApplicationsNewCategoryPostRequest): Promise<number> {
        const response = await this.apiDrivinglicenseV5ApplicationsNewCategoryPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Apply for new collaborative of old license (Samrit)
     */
    async apiDrivinglicenseV5ApplicationsNewCollaborativePostRaw(requestParameters: ApiDrivinglicenseV5ApplicationsNewCollaborativePostRequest): Promise<runtime.ApiResponse<number>> {
        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiDrivinglicenseV5ApplicationsNewCollaborativePost.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiDrivinglicenseV5ApplicationsNewCollaborativePost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.jwttoken !== undefined && requestParameters.jwttoken !== null) {
            headerParameters['jwttoken'] = String(requestParameters.jwttoken);
        }

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/drivinglicense/v5/applications/new/collaborative`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostNewCollaborativeToJSON(requestParameters.postNewCollaborative),
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Apply for new collaborative of old license (Samrit)
     */
    async apiDrivinglicenseV5ApplicationsNewCollaborativePost(requestParameters: ApiDrivinglicenseV5ApplicationsNewCollaborativePostRequest): Promise<number> {
        const response = await this.apiDrivinglicenseV5ApplicationsNewCollaborativePostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Apply for drivers license for a category
     */
    async apiDrivinglicenseV5ApplicationsNewTemporaryPostRaw(requestParameters: ApiDrivinglicenseV5ApplicationsNewTemporaryPostRequest): Promise<runtime.ApiResponse<NewTemporaryLicsenseDto>> {
        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiDrivinglicenseV5ApplicationsNewTemporaryPost.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiDrivinglicenseV5ApplicationsNewTemporaryPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/drivinglicense/v5/applications/new/temporary`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostTemporaryLicenseToJSON(requestParameters.postTemporaryLicense),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => NewTemporaryLicsenseDtoFromJSON(jsonValue));
    }

    /**
     * Apply for drivers license for a category
     */
    async apiDrivinglicenseV5ApplicationsNewTemporaryPost(requestParameters: ApiDrivinglicenseV5ApplicationsNewTemporaryPostRequest): Promise<NewTemporaryLicsenseDto> {
        const response = await this.apiDrivinglicenseV5ApplicationsNewTemporaryPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Apply for drivers license for a category
     */
    async apiDrivinglicenseV5ApplicationsNewTemporarywithhealthdeclarationPostRaw(requestParameters: ApiDrivinglicenseV5ApplicationsNewTemporarywithhealthdeclarationPostRequest): Promise<runtime.ApiResponse<NewTemporaryLicsenseDto>> {
        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiDrivinglicenseV5ApplicationsNewTemporarywithhealthdeclarationPost.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiDrivinglicenseV5ApplicationsNewTemporarywithhealthdeclarationPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.jwttoken !== undefined && requestParameters.jwttoken !== null) {
            headerParameters['jwttoken'] = String(requestParameters.jwttoken);
        }

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/drivinglicense/v5/applications/new/temporarywithhealthdeclaration`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostTemporaryLicenseWithHealthDeclarationToJSON(requestParameters.postTemporaryLicenseWithHealthDeclaration),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => NewTemporaryLicsenseDtoFromJSON(jsonValue));
    }

    /**
     * Apply for drivers license for a category
     */
    async apiDrivinglicenseV5ApplicationsNewTemporarywithhealthdeclarationPost(requestParameters: ApiDrivinglicenseV5ApplicationsNewTemporarywithhealthdeclarationPostRequest): Promise<NewTemporaryLicsenseDto> {
        const response = await this.apiDrivinglicenseV5ApplicationsNewTemporarywithhealthdeclarationPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Post practice permit
     */
    async apiDrivinglicenseV5ApplicationsPracticepermitPostRaw(requestParameters: ApiDrivinglicenseV5ApplicationsPracticepermitPostRequest): Promise<runtime.ApiResponse<PracticePermitDto>> {
        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiDrivinglicenseV5ApplicationsPracticepermitPost.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiDrivinglicenseV5ApplicationsPracticepermitPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.jwttoken !== undefined && requestParameters.jwttoken !== null) {
            headerParameters['jwttoken'] = String(requestParameters.jwttoken);
        }

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/drivinglicense/v5/applications/practicepermit`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostPracticePermitToJSON(requestParameters.postPracticePermit),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PracticePermitDtoFromJSON(jsonValue));
    }

    /**
     * Post practice permit
     */
    async apiDrivinglicenseV5ApplicationsPracticepermitPost(requestParameters: ApiDrivinglicenseV5ApplicationsPracticepermitPostRequest): Promise<PracticePermitDto> {
        const response = await this.apiDrivinglicenseV5ApplicationsPracticepermitPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Post renewal request for people 65 year old or older
     */
    async apiDrivinglicenseV5ApplicationsRenewal65PostRaw(requestParameters: ApiDrivinglicenseV5ApplicationsRenewal65PostRequest): Promise<runtime.ApiResponse<Renewal65AndOver>> {
        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiDrivinglicenseV5ApplicationsRenewal65Post.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiDrivinglicenseV5ApplicationsRenewal65Post.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.jwttoken !== undefined && requestParameters.jwttoken !== null) {
            headerParameters['jwttoken'] = String(requestParameters.jwttoken);
        }

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/drivinglicense/v5/applications/renewal65`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostRenewal65AndOverToJSON(requestParameters.postRenewal65AndOver),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => Renewal65AndOverFromJSON(jsonValue));
    }

    /**
     * Post renewal request for people 65 year old or older
     */
    async apiDrivinglicenseV5ApplicationsRenewal65Post(requestParameters: ApiDrivinglicenseV5ApplicationsRenewal65PostRequest): Promise<Renewal65AndOver> {
        const response = await this.apiDrivinglicenseV5ApplicationsRenewal65PostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Checks  - Does person exist in national registry  - Is the liecense that has not been ordered  - Is person at least 17 years old  - Does he have a deprivation  - Does he have a quality marked picture  - Does he have a quality marked signature
     * Endpoint to tell system that person has finished learning for temporary license and license can be ordered
     */
    async apiDrivinglicenseV5ApplicationsTemporarytestfinishedPostRaw(requestParameters: ApiDrivinglicenseV5ApplicationsTemporarytestfinishedPostRequest): Promise<runtime.ApiResponse<OrderTemporaryLicenseDto>> {
        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiDrivinglicenseV5ApplicationsTemporarytestfinishedPost.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiDrivinglicenseV5ApplicationsTemporarytestfinishedPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/drivinglicense/v5/applications/temporarytestfinished`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostTeachingDoneForTempLicenseToJSON(requestParameters.postTeachingDoneForTempLicense),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrderTemporaryLicenseDtoFromJSON(jsonValue));
    }

    /**
     * Checks  - Does person exist in national registry  - Is the liecense that has not been ordered  - Is person at least 17 years old  - Does he have a deprivation  - Does he have a quality marked picture  - Does he have a quality marked signature
     * Endpoint to tell system that person has finished learning for temporary license and license can be ordered
     */
    async apiDrivinglicenseV5ApplicationsTemporarytestfinishedPost(requestParameters: ApiDrivinglicenseV5ApplicationsTemporarytestfinishedPostRequest): Promise<OrderTemporaryLicenseDto> {
        const response = await this.apiDrivinglicenseV5ApplicationsTemporarytestfinishedPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get latest unfinished/unpublished license with requested categorie and person id
     */
    async apiDrivinglicenseV5ApplicationsUnfinishedCategoryidGetRaw(requestParameters: ApiDrivinglicenseV5ApplicationsUnfinishedCategoryidGetRequest): Promise<runtime.ApiResponse<LatestUnfinishedLicenseDto>> {
        if (requestParameters.categoryid === null || requestParameters.categoryid === undefined) {
            throw new runtime.RequiredError('categoryid','Required parameter requestParameters.categoryid was null or undefined when calling apiDrivinglicenseV5ApplicationsUnfinishedCategoryidGet.');
        }

        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiDrivinglicenseV5ApplicationsUnfinishedCategoryidGet.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiDrivinglicenseV5ApplicationsUnfinishedCategoryidGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.jwttoken !== undefined && requestParameters.jwttoken !== null) {
            headerParameters['jwttoken'] = String(requestParameters.jwttoken);
        }

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/drivinglicense/v5/applications/unfinished/{categoryid}`.replace(`{${"categoryid"}}`, encodeURIComponent(String(requestParameters.categoryid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => LatestUnfinishedLicenseDtoFromJSON(jsonValue));
    }

    /**
     * Get latest unfinished/unpublished license with requested categorie and person id
     */
    async apiDrivinglicenseV5ApplicationsUnfinishedCategoryidGet(requestParameters: ApiDrivinglicenseV5ApplicationsUnfinishedCategoryidGetRequest): Promise<LatestUnfinishedLicenseDto> {
        const response = await this.apiDrivinglicenseV5ApplicationsUnfinishedCategoryidGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Check if person can apply for full drivers license for a specific category
     */
    async apiDrivinglicenseV5CanapplyforCategoryFullGetRaw(requestParameters: ApiDrivinglicenseV5CanapplyforCategoryFullGetRequest): Promise<runtime.ApiResponse<MayApplyForLicenseDto>> {
        if (requestParameters.category === null || requestParameters.category === undefined) {
            throw new runtime.RequiredError('category','Required parameter requestParameters.category was null or undefined when calling apiDrivinglicenseV5CanapplyforCategoryFullGet.');
        }

        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiDrivinglicenseV5CanapplyforCategoryFullGet.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiDrivinglicenseV5CanapplyforCategoryFullGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.jwttoken !== undefined && requestParameters.jwttoken !== null) {
            headerParameters['jwttoken'] = String(requestParameters.jwttoken);
        }

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/drivinglicense/v5/canapplyfor/{category}/full`.replace(`{${"category"}}`, encodeURIComponent(String(requestParameters.category))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MayApplyForLicenseDtoFromJSON(jsonValue));
    }

    /**
     * Check if person can apply for full drivers license for a specific category
     */
    async apiDrivinglicenseV5CanapplyforCategoryFullGet(requestParameters: ApiDrivinglicenseV5CanapplyforCategoryFullGetRequest): Promise<MayApplyForLicenseDto> {
        const response = await this.apiDrivinglicenseV5CanapplyforCategoryFullGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Post practice permit
     */
    async apiDrivinglicenseV5CanapplyforPracticepermitPostRaw(requestParameters: ApiDrivinglicenseV5CanapplyforPracticepermitPostRequest): Promise<runtime.ApiResponse<PracticePermitDto>> {
        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiDrivinglicenseV5CanapplyforPracticepermitPost.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiDrivinglicenseV5CanapplyforPracticepermitPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.jwttoken !== undefined && requestParameters.jwttoken !== null) {
            headerParameters['jwttoken'] = String(requestParameters.jwttoken);
        }

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/drivinglicense/v5/canapplyfor/practicepermit`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostPracticePermitToJSON(requestParameters.postPracticePermit),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PracticePermitDtoFromJSON(jsonValue));
    }

    /**
     * Post practice permit
     */
    async apiDrivinglicenseV5CanapplyforPracticepermitPost(requestParameters: ApiDrivinglicenseV5CanapplyforPracticepermitPostRequest): Promise<PracticePermitDto> {
        const response = await this.apiDrivinglicenseV5CanapplyforPracticepermitPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Check if person over 65 years old can apply for renewal of drivers license
     */
    async apiDrivinglicenseV5CanapplyforRenewal65GetRaw(requestParameters: ApiDrivinglicenseV5CanapplyforRenewal65GetRequest): Promise<runtime.ApiResponse<MayApplyForRenewal65Dto>> {
        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiDrivinglicenseV5CanapplyforRenewal65Get.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiDrivinglicenseV5CanapplyforRenewal65Get.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.jwttoken !== undefined && requestParameters.jwttoken !== null) {
            headerParameters['jwttoken'] = String(requestParameters.jwttoken);
        }

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/drivinglicense/v5/canapplyfor/renewal65`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MayApplyForRenewal65DtoFromJSON(jsonValue));
    }

    /**
     * Check if person over 65 years old can apply for renewal of drivers license
     */
    async apiDrivinglicenseV5CanapplyforRenewal65Get(requestParameters: ApiDrivinglicenseV5CanapplyforRenewal65GetRequest): Promise<MayApplyForRenewal65Dto> {
        const response = await this.apiDrivinglicenseV5CanapplyforRenewal65GetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Checks :   - Is in national registry   - Does not have B category license already   - Has a deprivation exeeding next 30 days   - Is at least 16 years of age
     * Check if person can apply for temporary B drivers license
     */
    async apiDrivinglicenseV5CanapplyforTemporaryGetRaw(requestParameters: ApiDrivinglicenseV5CanapplyforTemporaryGetRequest): Promise<runtime.ApiResponse<MayApplyForTemporaryLicenseDto>> {
        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiDrivinglicenseV5CanapplyforTemporaryGet.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiDrivinglicenseV5CanapplyforTemporaryGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.jwttoken !== undefined && requestParameters.jwttoken !== null) {
            headerParameters['jwttoken'] = String(requestParameters.jwttoken);
        }

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/drivinglicense/v5/canapplyfor/temporary`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MayApplyForTemporaryLicenseDtoFromJSON(jsonValue));
    }

    /**
     * Checks :   - Is in national registry   - Does not have B category license already   - Has a deprivation exeeding next 30 days   - Is at least 16 years of age
     * Check if person can apply for temporary B drivers license
     */
    async apiDrivinglicenseV5CanapplyforTemporaryGet(requestParameters: ApiDrivinglicenseV5CanapplyforTemporaryGetRequest): Promise<MayApplyForTemporaryLicenseDto> {
        const response = await this.apiDrivinglicenseV5CanapplyforTemporaryGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Check status of license and category
     */
    async apiDrivinglicenseV5CategoryvalidCategoryDrivinglicenseidGetRaw(requestParameters: ApiDrivinglicenseV5CategoryvalidCategoryDrivinglicenseidGetRequest): Promise<runtime.ApiResponse<CategoryValidDto>> {
        if (requestParameters.category === null || requestParameters.category === undefined) {
            throw new runtime.RequiredError('category','Required parameter requestParameters.category was null or undefined when calling apiDrivinglicenseV5CategoryvalidCategoryDrivinglicenseidGet.');
        }

        if (requestParameters.drivinglicenseid === null || requestParameters.drivinglicenseid === undefined) {
            throw new runtime.RequiredError('drivinglicenseid','Required parameter requestParameters.drivinglicenseid was null or undefined when calling apiDrivinglicenseV5CategoryvalidCategoryDrivinglicenseidGet.');
        }

        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiDrivinglicenseV5CategoryvalidCategoryDrivinglicenseidGet.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiDrivinglicenseV5CategoryvalidCategoryDrivinglicenseidGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.jwttoken !== undefined && requestParameters.jwttoken !== null) {
            headerParameters['jwttoken'] = String(requestParameters.jwttoken);
        }

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/drivinglicense/v5/categoryvalid/{category}/{drivinglicenseid}`.replace(`{${"category"}}`, encodeURIComponent(String(requestParameters.category))).replace(`{${"drivinglicenseid"}}`, encodeURIComponent(String(requestParameters.drivinglicenseid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CategoryValidDtoFromJSON(jsonValue));
    }

    /**
     * Check status of license and category
     */
    async apiDrivinglicenseV5CategoryvalidCategoryDrivinglicenseidGet(requestParameters: ApiDrivinglicenseV5CategoryvalidCategoryDrivinglicenseidGetRequest): Promise<CategoryValidDto> {
        const response = await this.apiDrivinglicenseV5CategoryvalidCategoryDrivinglicenseidGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get for current deprivation
     */
    async apiDrivinglicenseV5DeprivationGetRaw(requestParameters: ApiDrivinglicenseV5DeprivationGetRequest): Promise<runtime.ApiResponse<DeprivationDto>> {
        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiDrivinglicenseV5DeprivationGet.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiDrivinglicenseV5DeprivationGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.jwttoken !== undefined && requestParameters.jwttoken !== null) {
            headerParameters['jwttoken'] = String(requestParameters.jwttoken);
        }

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/drivinglicense/v5/deprivation`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DeprivationDtoFromJSON(jsonValue));
    }

    /**
     * Get for current deprivation
     */
    async apiDrivinglicenseV5DeprivationGet(requestParameters: ApiDrivinglicenseV5DeprivationGetRequest): Promise<DeprivationDto> {
        const response = await this.apiDrivinglicenseV5DeprivationGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create record of digital licence created
     */
    async apiDrivinglicenseV5DigitallicensecreatedPostRaw(requestParameters: ApiDrivinglicenseV5DigitallicensecreatedPostRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiDrivinglicenseV5DigitallicensecreatedPost.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiDrivinglicenseV5DigitallicensecreatedPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.jwttoken !== undefined && requestParameters.jwttoken !== null) {
            headerParameters['jwttoken'] = String(requestParameters.jwttoken);
        }

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/drivinglicense/v5/digitallicensecreated`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create record of digital licence created
     */
    async apiDrivinglicenseV5DigitallicensecreatedPost(requestParameters: ApiDrivinglicenseV5DigitallicensecreatedPostRequest): Promise<void> {
        await this.apiDrivinglicenseV5DigitallicensecreatedPostRaw(requestParameters);
    }

    /**
     * Check if person has driving assessment
     */
    async apiDrivinglicenseV5DrivingassessmentGetRaw(requestParameters: ApiDrivinglicenseV5DrivingassessmentGetRequest): Promise<runtime.ApiResponse<DrivingAssessmentDto>> {
        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiDrivinglicenseV5DrivingassessmentGet.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiDrivinglicenseV5DrivingassessmentGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.jwttoken !== undefined && requestParameters.jwttoken !== null) {
            headerParameters['jwttoken'] = String(requestParameters.jwttoken);
        }

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/drivinglicense/v5/drivingassessment`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DrivingAssessmentDtoFromJSON(jsonValue));
    }

    /**
     * Check if person has driving assessment
     */
    async apiDrivinglicenseV5DrivingassessmentGet(requestParameters: ApiDrivinglicenseV5DrivingassessmentGetRequest): Promise<DrivingAssessmentDto> {
        const response = await this.apiDrivinglicenseV5DrivingassessmentGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create a new driver assessment
     */
    async apiDrivinglicenseV5DrivingassessmentPostRaw(requestParameters: ApiDrivinglicenseV5DrivingassessmentPostRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiDrivinglicenseV5DrivingassessmentPost.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiDrivinglicenseV5DrivingassessmentPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/drivinglicense/v5/drivingassessment`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostNewDrivingAssessmentToJSON(requestParameters.postNewDrivingAssessment),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a new driver assessment
     */
    async apiDrivinglicenseV5DrivingassessmentPost(requestParameters: ApiDrivinglicenseV5DrivingassessmentPostRequest): Promise<void> {
        await this.apiDrivinglicenseV5DrivingassessmentPostRaw(requestParameters);
    }

    /**
     * Get driving teachers
     */
    async apiDrivinglicenseV5DrivinginstructorsGetRaw(requestParameters: ApiDrivinglicenseV5DrivinginstructorsGetRequest): Promise<runtime.ApiResponse<Array<InstructorDto>>> {
        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiDrivinglicenseV5DrivinginstructorsGet.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiDrivinglicenseV5DrivinginstructorsGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/drivinglicense/v5/drivinginstructors`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InstructorDtoFromJSON));
    }

    /**
     * Get driving teachers
     */
    async apiDrivinglicenseV5DrivinginstructorsGet(requestParameters: ApiDrivinglicenseV5DrivinginstructorsGetRequest): Promise<Array<InstructorDto>> {
        const response = await this.apiDrivinglicenseV5DrivinginstructorsGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get quality marked photo for person
     */
    async apiDrivinglicenseV5GetqualityphotoGetRaw(requestParameters: ApiDrivinglicenseV5GetqualityphotoGetRequest): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiDrivinglicenseV5GetqualityphotoGet.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiDrivinglicenseV5GetqualityphotoGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.jwttoken !== undefined && requestParameters.jwttoken !== null) {
            headerParameters['jwttoken'] = String(requestParameters.jwttoken);
        }

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/drivinglicense/v5/getqualityphoto`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Get quality marked photo for person
     */
    async apiDrivinglicenseV5GetqualityphotoGet(requestParameters: ApiDrivinglicenseV5GetqualityphotoGetRequest): Promise<string> {
        const response = await this.apiDrivinglicenseV5GetqualityphotoGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get quality marked photo for person
     */
    async apiDrivinglicenseV5GetqualitysignatureGetRaw(requestParameters: ApiDrivinglicenseV5GetqualitysignatureGetRequest): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiDrivinglicenseV5GetqualitysignatureGet.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiDrivinglicenseV5GetqualitysignatureGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.jwttoken !== undefined && requestParameters.jwttoken !== null) {
            headerParameters['jwttoken'] = String(requestParameters.jwttoken);
        }

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/drivinglicense/v5/getqualitysignature`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Get quality marked photo for person
     */
    async apiDrivinglicenseV5GetqualitysignatureGet(requestParameters: ApiDrivinglicenseV5GetqualitysignatureGetRequest): Promise<string> {
        const response = await this.apiDrivinglicenseV5GetqualitysignatureGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Has person finised driving school 3
     */
    async apiDrivinglicenseV5Hasfinisheddrivingschool3GetRaw(requestParameters: ApiDrivinglicenseV5Hasfinisheddrivingschool3GetRequest): Promise<runtime.ApiResponse<HasFinishedDrivingSchool3Dto>> {
        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiDrivinglicenseV5Hasfinisheddrivingschool3Get.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiDrivinglicenseV5Hasfinisheddrivingschool3Get.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.jwttoken !== undefined && requestParameters.jwttoken !== null) {
            headerParameters['jwttoken'] = String(requestParameters.jwttoken);
        }

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/drivinglicense/v5/hasfinisheddrivingschool3`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => HasFinishedDrivingSchool3DtoFromJSON(jsonValue));
    }

    /**
     * Has person finised driving school 3
     */
    async apiDrivinglicenseV5Hasfinisheddrivingschool3Get(requestParameters: ApiDrivinglicenseV5Hasfinisheddrivingschool3GetRequest): Promise<HasFinishedDrivingSchool3Dto> {
        const response = await this.apiDrivinglicenseV5Hasfinisheddrivingschool3GetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Check if person has quality marked photo
     */
    async apiDrivinglicenseV5HasqualityphotoGetRaw(requestParameters: ApiDrivinglicenseV5HasqualityphotoGetRequest): Promise<runtime.ApiResponse<number>> {
        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiDrivinglicenseV5HasqualityphotoGet.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiDrivinglicenseV5HasqualityphotoGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.jwttoken !== undefined && requestParameters.jwttoken !== null) {
            headerParameters['jwttoken'] = String(requestParameters.jwttoken);
        }

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/drivinglicense/v5/hasqualityphoto`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Check if person has quality marked photo
     */
    async apiDrivinglicenseV5HasqualityphotoGet(requestParameters: ApiDrivinglicenseV5HasqualityphotoGetRequest): Promise<number> {
        const response = await this.apiDrivinglicenseV5HasqualityphotoGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Check if person has quality marked photo
     */
    async apiDrivinglicenseV5HasqualitysignatureGetRaw(requestParameters: ApiDrivinglicenseV5HasqualitysignatureGetRequest): Promise<runtime.ApiResponse<number>> {
        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiDrivinglicenseV5HasqualitysignatureGet.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiDrivinglicenseV5HasqualitysignatureGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.jwttoken !== undefined && requestParameters.jwttoken !== null) {
            headerParameters['jwttoken'] = String(requestParameters.jwttoken);
        }

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/drivinglicense/v5/hasqualitysignature`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Check if person has quality marked photo
     */
    async apiDrivinglicenseV5HasqualitysignatureGet(requestParameters: ApiDrivinglicenseV5HasqualitysignatureGetRequest): Promise<number> {
        const response = await this.apiDrivinglicenseV5HasqualitysignatureGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Check if person has rights to be a driving instructor
     */
    async apiDrivinglicenseV5HasteachingrightsGetRaw(requestParameters: ApiDrivinglicenseV5HasteachingrightsGetRequest): Promise<runtime.ApiResponse<number>> {
        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiDrivinglicenseV5HasteachingrightsGet.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiDrivinglicenseV5HasteachingrightsGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.jwttoken !== undefined && requestParameters.jwttoken !== null) {
            headerParameters['jwttoken'] = String(requestParameters.jwttoken);
        }

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/drivinglicense/v5/hasteachingrights`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Check if person has rights to be a driving instructor
     */
    async apiDrivinglicenseV5HasteachingrightsGet(requestParameters: ApiDrivinglicenseV5HasteachingrightsGetRequest): Promise<number> {
        const response = await this.apiDrivinglicenseV5HasteachingrightsGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get all license actions
     */
    async apiDrivinglicenseV5LicenseactionsLicenseidGetRaw(requestParameters: ApiDrivinglicenseV5LicenseactionsLicenseidGetRequest): Promise<runtime.ApiResponse<Array<MedferdDto>>> {
        if (requestParameters.licenseid === null || requestParameters.licenseid === undefined) {
            throw new runtime.RequiredError('licenseid','Required parameter requestParameters.licenseid was null or undefined when calling apiDrivinglicenseV5LicenseactionsLicenseidGet.');
        }

        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiDrivinglicenseV5LicenseactionsLicenseidGet.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiDrivinglicenseV5LicenseactionsLicenseidGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.jwttoken !== undefined && requestParameters.jwttoken !== null) {
            headerParameters['jwttoken'] = String(requestParameters.jwttoken);
        }

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/drivinglicense/v5/licenseactions/{licenseid}`.replace(`{${"licenseid"}}`, encodeURIComponent(String(requestParameters.licenseid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MedferdDtoFromJSON));
    }

    /**
     * Get all license actions
     */
    async apiDrivinglicenseV5LicenseactionsLicenseidGet(requestParameters: ApiDrivinglicenseV5LicenseactionsLicenseidGetRequest): Promise<Array<MedferdDto>> {
        const response = await this.apiDrivinglicenseV5LicenseactionsLicenseidGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Mark license produced by SKRA
     */
    async apiDrivinglicenseV5LicenseactionsProducedbyskraLicenseIdPostRaw(requestParameters: ApiDrivinglicenseV5LicenseactionsProducedbyskraLicenseIdPostRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.licenseId === null || requestParameters.licenseId === undefined) {
            throw new runtime.RequiredError('licenseId','Required parameter requestParameters.licenseId was null or undefined when calling apiDrivinglicenseV5LicenseactionsProducedbyskraLicenseIdPost.');
        }

        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiDrivinglicenseV5LicenseactionsProducedbyskraLicenseIdPost.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiDrivinglicenseV5LicenseactionsProducedbyskraLicenseIdPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/drivinglicense/v5/licenseactions/producedbyskra/{licenseId}`.replace(`{${"licenseId"}}`, encodeURIComponent(String(requestParameters.licenseId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Mark license produced by SKRA
     */
    async apiDrivinglicenseV5LicenseactionsProducedbyskraLicenseIdPost(requestParameters: ApiDrivinglicenseV5LicenseactionsProducedbyskraLicenseIdPostRequest): Promise<void> {
        await this.apiDrivinglicenseV5LicenseactionsProducedbyskraLicenseIdPostRaw(requestParameters);
    }

    /**
     * Mark license produced by SKRA
     */
    async apiDrivinglicenseV5LicenseactionsProducedbyskraandsenthomeLicenseIdPostRaw(requestParameters: ApiDrivinglicenseV5LicenseactionsProducedbyskraandsenthomeLicenseIdPostRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.licenseId === null || requestParameters.licenseId === undefined) {
            throw new runtime.RequiredError('licenseId','Required parameter requestParameters.licenseId was null or undefined when calling apiDrivinglicenseV5LicenseactionsProducedbyskraandsenthomeLicenseIdPost.');
        }

        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiDrivinglicenseV5LicenseactionsProducedbyskraandsenthomeLicenseIdPost.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiDrivinglicenseV5LicenseactionsProducedbyskraandsenthomeLicenseIdPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/drivinglicense/v5/licenseactions/producedbyskraandsenthome/{licenseId}`.replace(`{${"licenseId"}}`, encodeURIComponent(String(requestParameters.licenseId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Mark license produced by SKRA
     */
    async apiDrivinglicenseV5LicenseactionsProducedbyskraandsenthomeLicenseIdPost(requestParameters: ApiDrivinglicenseV5LicenseactionsProducedbyskraandsenthomeLicenseIdPostRequest): Promise<void> {
        await this.apiDrivinglicenseV5LicenseactionsProducedbyskraandsenthomeLicenseIdPostRaw(requestParameters);
    }

    /**
     * Mark license produced by SKRA
     */
    async apiDrivinglicenseV5LicenseactionsProducedbyskraandsenttodistrictLicenseIdPostRaw(requestParameters: ApiDrivinglicenseV5LicenseactionsProducedbyskraandsenttodistrictLicenseIdPostRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.licenseId === null || requestParameters.licenseId === undefined) {
            throw new runtime.RequiredError('licenseId','Required parameter requestParameters.licenseId was null or undefined when calling apiDrivinglicenseV5LicenseactionsProducedbyskraandsenttodistrictLicenseIdPost.');
        }

        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiDrivinglicenseV5LicenseactionsProducedbyskraandsenttodistrictLicenseIdPost.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiDrivinglicenseV5LicenseactionsProducedbyskraandsenttodistrictLicenseIdPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/drivinglicense/v5/licenseactions/producedbyskraandsenttodistrict/{licenseId}`.replace(`{${"licenseId"}}`, encodeURIComponent(String(requestParameters.licenseId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Mark license produced by SKRA
     */
    async apiDrivinglicenseV5LicenseactionsProducedbyskraandsenttodistrictLicenseIdPost(requestParameters: ApiDrivinglicenseV5LicenseactionsProducedbyskraandsenttodistrictLicenseIdPostRequest): Promise<void> {
        await this.apiDrivinglicenseV5LicenseactionsProducedbyskraandsenttodistrictLicenseIdPostRaw(requestParameters);
    }

    /**
     * Update license, a production error occured
     */
    async apiDrivinglicenseV5LicenseactionsProductionerrorLicenseIdPostRaw(requestParameters: ApiDrivinglicenseV5LicenseactionsProductionerrorLicenseIdPostRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.licenseId === null || requestParameters.licenseId === undefined) {
            throw new runtime.RequiredError('licenseId','Required parameter requestParameters.licenseId was null or undefined when calling apiDrivinglicenseV5LicenseactionsProductionerrorLicenseIdPost.');
        }

        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiDrivinglicenseV5LicenseactionsProductionerrorLicenseIdPost.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiDrivinglicenseV5LicenseactionsProductionerrorLicenseIdPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/drivinglicense/v5/licenseactions/productionerror/{licenseId}`.replace(`{${"licenseId"}}`, encodeURIComponent(String(requestParameters.licenseId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update license, a production error occured
     */
    async apiDrivinglicenseV5LicenseactionsProductionerrorLicenseIdPost(requestParameters: ApiDrivinglicenseV5LicenseactionsProductionerrorLicenseIdPostRequest): Promise<void> {
        await this.apiDrivinglicenseV5LicenseactionsProductionerrorLicenseIdPostRaw(requestParameters);
    }

    /**
     * Update license, a production error occured
     */
    async apiDrivinglicenseV5LicenseactionsProductionerrorwithmsgLicenseIdPostRaw(requestParameters: ApiDrivinglicenseV5LicenseactionsProductionerrorwithmsgLicenseIdPostRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.licenseId === null || requestParameters.licenseId === undefined) {
            throw new runtime.RequiredError('licenseId','Required parameter requestParameters.licenseId was null or undefined when calling apiDrivinglicenseV5LicenseactionsProductionerrorwithmsgLicenseIdPost.');
        }

        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiDrivinglicenseV5LicenseactionsProductionerrorwithmsgLicenseIdPost.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiDrivinglicenseV5LicenseactionsProductionerrorwithmsgLicenseIdPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/drivinglicense/v5/licenseactions/productionerrorwithmsg/{licenseId}`.replace(`{${"licenseId"}}`, encodeURIComponent(String(requestParameters.licenseId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LicenseProductionErrorMsgModelToJSON(requestParameters.licenseProductionErrorMsgModel),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update license, a production error occured
     */
    async apiDrivinglicenseV5LicenseactionsProductionerrorwithmsgLicenseIdPost(requestParameters: ApiDrivinglicenseV5LicenseactionsProductionerrorwithmsgLicenseIdPostRequest): Promise<void> {
        await this.apiDrivinglicenseV5LicenseactionsProductionerrorwithmsgLicenseIdPostRaw(requestParameters);
    }

    /**
     * Get traffic violation points for person
     */
    async apiDrivinglicenseV5PenaltypointsGetRaw(requestParameters: ApiDrivinglicenseV5PenaltypointsGetRequest): Promise<runtime.ApiResponse<PenaltyPointsDto>> {
        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiDrivinglicenseV5PenaltypointsGet.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiDrivinglicenseV5PenaltypointsGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.jwttoken !== undefined && requestParameters.jwttoken !== null) {
            headerParameters['jwttoken'] = String(requestParameters.jwttoken);
        }

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/drivinglicense/v5/penaltypoints`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PenaltyPointsDtoFromJSON(jsonValue));
    }

    /**
     * Get traffic violation points for person
     */
    async apiDrivinglicenseV5PenaltypointsGet(requestParameters: ApiDrivinglicenseV5PenaltypointsGetRequest): Promise<PenaltyPointsDto> {
        const response = await this.apiDrivinglicenseV5PenaltypointsGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get a list of driving assessments created
     */
    async apiDrivinglicenseV5StatisticsDrivingassessmentsCreatedDetailedYearfromMonthfromGetRaw(requestParameters: ApiDrivinglicenseV5StatisticsDrivingassessmentsCreatedDetailedYearfromMonthfromGetRequest): Promise<runtime.ApiResponse<Array<DrivingAssessmentStatisticsDetailedDto>>> {
        if (requestParameters.yearfrom === null || requestParameters.yearfrom === undefined) {
            throw new runtime.RequiredError('yearfrom','Required parameter requestParameters.yearfrom was null or undefined when calling apiDrivinglicenseV5StatisticsDrivingassessmentsCreatedDetailedYearfromMonthfromGet.');
        }

        if (requestParameters.monthfrom === null || requestParameters.monthfrom === undefined) {
            throw new runtime.RequiredError('monthfrom','Required parameter requestParameters.monthfrom was null or undefined when calling apiDrivinglicenseV5StatisticsDrivingassessmentsCreatedDetailedYearfromMonthfromGet.');
        }

        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiDrivinglicenseV5StatisticsDrivingassessmentsCreatedDetailedYearfromMonthfromGet.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiDrivinglicenseV5StatisticsDrivingassessmentsCreatedDetailedYearfromMonthfromGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/drivinglicense/v5/statistics/drivingassessments/created/detailed/{yearfrom}/{monthfrom}`.replace(`{${"yearfrom"}}`, encodeURIComponent(String(requestParameters.yearfrom))).replace(`{${"monthfrom"}}`, encodeURIComponent(String(requestParameters.monthfrom))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DrivingAssessmentStatisticsDetailedDtoFromJSON));
    }

    /**
     * Get a list of driving assessments created
     */
    async apiDrivinglicenseV5StatisticsDrivingassessmentsCreatedDetailedYearfromMonthfromGet(requestParameters: ApiDrivinglicenseV5StatisticsDrivingassessmentsCreatedDetailedYearfromMonthfromGetRequest): Promise<Array<DrivingAssessmentStatisticsDetailedDto>> {
        const response = await this.apiDrivinglicenseV5StatisticsDrivingassessmentsCreatedDetailedYearfromMonthfromGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get a grouped list (year/month/count) of driving ass licenses created
     */
    async apiDrivinglicenseV5StatisticsDrivingassessmentsCreatedGroupedYearfromMonthfromGetRaw(requestParameters: ApiDrivinglicenseV5StatisticsDrivingassessmentsCreatedGroupedYearfromMonthfromGetRequest): Promise<runtime.ApiResponse<Array<DrivingAssessmentStatisticsGroupedDto>>> {
        if (requestParameters.yearfrom === null || requestParameters.yearfrom === undefined) {
            throw new runtime.RequiredError('yearfrom','Required parameter requestParameters.yearfrom was null or undefined when calling apiDrivinglicenseV5StatisticsDrivingassessmentsCreatedGroupedYearfromMonthfromGet.');
        }

        if (requestParameters.monthfrom === null || requestParameters.monthfrom === undefined) {
            throw new runtime.RequiredError('monthfrom','Required parameter requestParameters.monthfrom was null or undefined when calling apiDrivinglicenseV5StatisticsDrivingassessmentsCreatedGroupedYearfromMonthfromGet.');
        }

        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiDrivinglicenseV5StatisticsDrivingassessmentsCreatedGroupedYearfromMonthfromGet.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiDrivinglicenseV5StatisticsDrivingassessmentsCreatedGroupedYearfromMonthfromGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/drivinglicense/v5/statistics/drivingassessments/created/grouped/{yearfrom}/{monthfrom}`.replace(`{${"yearfrom"}}`, encodeURIComponent(String(requestParameters.yearfrom))).replace(`{${"monthfrom"}}`, encodeURIComponent(String(requestParameters.monthfrom))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DrivingAssessmentStatisticsGroupedDtoFromJSON));
    }

    /**
     * Get a grouped list (year/month/count) of driving ass licenses created
     */
    async apiDrivinglicenseV5StatisticsDrivingassessmentsCreatedGroupedYearfromMonthfromGet(requestParameters: ApiDrivinglicenseV5StatisticsDrivingassessmentsCreatedGroupedYearfromMonthfromGetRequest): Promise<Array<DrivingAssessmentStatisticsGroupedDto>> {
        const response = await this.apiDrivinglicenseV5StatisticsDrivingassessmentsCreatedGroupedYearfromMonthfromGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get a list of full licenses created from year/month
     */
    async apiDrivinglicenseV5StatisticsLicensesCreatedDetailedYearfromMonthfromGetRaw(requestParameters: ApiDrivinglicenseV5StatisticsLicensesCreatedDetailedYearfromMonthfromGetRequest): Promise<runtime.ApiResponse<Array<FullLicenseStatisticsDetailedDto>>> {
        if (requestParameters.yearfrom === null || requestParameters.yearfrom === undefined) {
            throw new runtime.RequiredError('yearfrom','Required parameter requestParameters.yearfrom was null or undefined when calling apiDrivinglicenseV5StatisticsLicensesCreatedDetailedYearfromMonthfromGet.');
        }

        if (requestParameters.monthfrom === null || requestParameters.monthfrom === undefined) {
            throw new runtime.RequiredError('monthfrom','Required parameter requestParameters.monthfrom was null or undefined when calling apiDrivinglicenseV5StatisticsLicensesCreatedDetailedYearfromMonthfromGet.');
        }

        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiDrivinglicenseV5StatisticsLicensesCreatedDetailedYearfromMonthfromGet.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiDrivinglicenseV5StatisticsLicensesCreatedDetailedYearfromMonthfromGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/drivinglicense/v5/statistics/licenses/created/detailed/{yearfrom}/{monthfrom}`.replace(`{${"yearfrom"}}`, encodeURIComponent(String(requestParameters.yearfrom))).replace(`{${"monthfrom"}}`, encodeURIComponent(String(requestParameters.monthfrom))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FullLicenseStatisticsDetailedDtoFromJSON));
    }

    /**
     * Get a list of full licenses created from year/month
     */
    async apiDrivinglicenseV5StatisticsLicensesCreatedDetailedYearfromMonthfromGet(requestParameters: ApiDrivinglicenseV5StatisticsLicensesCreatedDetailedYearfromMonthfromGetRequest): Promise<Array<FullLicenseStatisticsDetailedDto>> {
        const response = await this.apiDrivinglicenseV5StatisticsLicensesCreatedDetailedYearfromMonthfromGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get a grouped list (year/month/count) of full licenses created
     */
    async apiDrivinglicenseV5StatisticsLicensesCreatedGroupedYearfromMonthfromGetRaw(requestParameters: ApiDrivinglicenseV5StatisticsLicensesCreatedGroupedYearfromMonthfromGetRequest): Promise<runtime.ApiResponse<Array<FullLicenseStatisticsGroupedDto>>> {
        if (requestParameters.yearfrom === null || requestParameters.yearfrom === undefined) {
            throw new runtime.RequiredError('yearfrom','Required parameter requestParameters.yearfrom was null or undefined when calling apiDrivinglicenseV5StatisticsLicensesCreatedGroupedYearfromMonthfromGet.');
        }

        if (requestParameters.monthfrom === null || requestParameters.monthfrom === undefined) {
            throw new runtime.RequiredError('monthfrom','Required parameter requestParameters.monthfrom was null or undefined when calling apiDrivinglicenseV5StatisticsLicensesCreatedGroupedYearfromMonthfromGet.');
        }

        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiDrivinglicenseV5StatisticsLicensesCreatedGroupedYearfromMonthfromGet.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiDrivinglicenseV5StatisticsLicensesCreatedGroupedYearfromMonthfromGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/drivinglicense/v5/statistics/licenses/created/grouped/{yearfrom}/{monthfrom}`.replace(`{${"yearfrom"}}`, encodeURIComponent(String(requestParameters.yearfrom))).replace(`{${"monthfrom"}}`, encodeURIComponent(String(requestParameters.monthfrom))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FullLicenseStatisticsGroupedDtoFromJSON));
    }

    /**
     * Get a grouped list (year/month/count) of full licenses created
     */
    async apiDrivinglicenseV5StatisticsLicensesCreatedGroupedYearfromMonthfromGet(requestParameters: ApiDrivinglicenseV5StatisticsLicensesCreatedGroupedYearfromMonthfromGetRequest): Promise<Array<FullLicenseStatisticsGroupedDto>> {
        const response = await this.apiDrivinglicenseV5StatisticsLicensesCreatedGroupedYearfromMonthfromGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get a list of temporary licenses created from year/month
     */
    async apiDrivinglicenseV5StatisticsTemporarylicensesCreatedDetailedYearfromMonthfromGetRaw(requestParameters: ApiDrivinglicenseV5StatisticsTemporarylicensesCreatedDetailedYearfromMonthfromGetRequest): Promise<runtime.ApiResponse<Array<TemporaryLicenseStatisticsDetailedDto>>> {
        if (requestParameters.yearfrom === null || requestParameters.yearfrom === undefined) {
            throw new runtime.RequiredError('yearfrom','Required parameter requestParameters.yearfrom was null or undefined when calling apiDrivinglicenseV5StatisticsTemporarylicensesCreatedDetailedYearfromMonthfromGet.');
        }

        if (requestParameters.monthfrom === null || requestParameters.monthfrom === undefined) {
            throw new runtime.RequiredError('monthfrom','Required parameter requestParameters.monthfrom was null or undefined when calling apiDrivinglicenseV5StatisticsTemporarylicensesCreatedDetailedYearfromMonthfromGet.');
        }

        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiDrivinglicenseV5StatisticsTemporarylicensesCreatedDetailedYearfromMonthfromGet.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiDrivinglicenseV5StatisticsTemporarylicensesCreatedDetailedYearfromMonthfromGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/drivinglicense/v5/statistics/temporarylicenses/created/detailed/{yearfrom}/{monthfrom}`.replace(`{${"yearfrom"}}`, encodeURIComponent(String(requestParameters.yearfrom))).replace(`{${"monthfrom"}}`, encodeURIComponent(String(requestParameters.monthfrom))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TemporaryLicenseStatisticsDetailedDtoFromJSON));
    }

    /**
     * Get a list of temporary licenses created from year/month
     */
    async apiDrivinglicenseV5StatisticsTemporarylicensesCreatedDetailedYearfromMonthfromGet(requestParameters: ApiDrivinglicenseV5StatisticsTemporarylicensesCreatedDetailedYearfromMonthfromGetRequest): Promise<Array<TemporaryLicenseStatisticsDetailedDto>> {
        const response = await this.apiDrivinglicenseV5StatisticsTemporarylicensesCreatedDetailedYearfromMonthfromGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get a grouped list (year/month/count) of temporary licenses created
     */
    async apiDrivinglicenseV5StatisticsTemporarylicensesCreatedGroupedYearfromMonthfromGetRaw(requestParameters: ApiDrivinglicenseV5StatisticsTemporarylicensesCreatedGroupedYearfromMonthfromGetRequest): Promise<runtime.ApiResponse<Array<TemporaryLicenseStatisticsGroupedDto>>> {
        if (requestParameters.yearfrom === null || requestParameters.yearfrom === undefined) {
            throw new runtime.RequiredError('yearfrom','Required parameter requestParameters.yearfrom was null or undefined when calling apiDrivinglicenseV5StatisticsTemporarylicensesCreatedGroupedYearfromMonthfromGet.');
        }

        if (requestParameters.monthfrom === null || requestParameters.monthfrom === undefined) {
            throw new runtime.RequiredError('monthfrom','Required parameter requestParameters.monthfrom was null or undefined when calling apiDrivinglicenseV5StatisticsTemporarylicensesCreatedGroupedYearfromMonthfromGet.');
        }

        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiDrivinglicenseV5StatisticsTemporarylicensesCreatedGroupedYearfromMonthfromGet.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiDrivinglicenseV5StatisticsTemporarylicensesCreatedGroupedYearfromMonthfromGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/drivinglicense/v5/statistics/temporarylicenses/created/grouped/{yearfrom}/{monthfrom}`.replace(`{${"yearfrom"}}`, encodeURIComponent(String(requestParameters.yearfrom))).replace(`{${"monthfrom"}}`, encodeURIComponent(String(requestParameters.monthfrom))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TemporaryLicenseStatisticsGroupedDtoFromJSON));
    }

    /**
     * Get a grouped list (year/month/count) of temporary licenses created
     */
    async apiDrivinglicenseV5StatisticsTemporarylicensesCreatedGroupedYearfromMonthfromGet(requestParameters: ApiDrivinglicenseV5StatisticsTemporarylicensesCreatedGroupedYearfromMonthfromGetRequest): Promise<Array<TemporaryLicenseStatisticsGroupedDto>> {
        const response = await this.apiDrivinglicenseV5StatisticsTemporarylicensesCreatedGroupedYearfromMonthfromGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get for person driver licence
     */
    async getCurrentLicenseV5Raw(requestParameters: GetCurrentLicenseV5Request): Promise<runtime.ApiResponse<DriverLicenseDto>> {
        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling getCurrentLicenseV5.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling getCurrentLicenseV5.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.jwttoken !== undefined && requestParameters.jwttoken !== null) {
            headerParameters['jwttoken'] = String(requestParameters.jwttoken);
        }

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/drivinglicense/v5`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DriverLicenseDtoFromJSON(jsonValue));
    }

    /**
     * Get for person driver licence
     */
    async getCurrentLicenseV5(requestParameters: GetCurrentLicenseV5Request): Promise<DriverLicenseDto> {
        const response = await this.getCurrentLicenseV5Raw(requestParameters);
        return await response.value();
    }

    /**
     * Check current license status
     */
    async getLicenseByIdRaw(requestParameters: GetLicenseByIdRequest): Promise<runtime.ApiResponse<LicenseStatusDto>> {
        if (requestParameters.licenseid === null || requestParameters.licenseid === undefined) {
            throw new runtime.RequiredError('licenseid','Required parameter requestParameters.licenseid was null or undefined when calling getLicenseById.');
        }

        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling getLicenseById.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling getLicenseById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/drivinglicense/v5/{licenseid}/status`.replace(`{${"licenseid"}}`, encodeURIComponent(String(requestParameters.licenseid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => LicenseStatusDtoFromJSON(jsonValue));
    }

    /**
     * Check current license status
     */
    async getLicenseById(requestParameters: GetLicenseByIdRequest): Promise<LicenseStatusDto> {
        const response = await this.getLicenseByIdRaw(requestParameters);
        return await response.value();
    }

}
