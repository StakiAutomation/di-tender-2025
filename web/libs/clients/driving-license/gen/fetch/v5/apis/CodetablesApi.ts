/* tslint:disable */
/* eslint-disable */
/**
 * RLS driver licence Rest API
 * RESTFul services for driver licences. Programmed in .NET 8
 *
 * The version of the OpenAPI document: 5.0
 * Contact: tmd@tmd.is
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    EmbaettiDto,
    EmbaettiDtoFromJSON,
    EmbaettiDtoToJSON,
    TegSviptingaDto,
    TegSviptingaDtoFromJSON,
    TegSviptingaDtoToJSON,
    TegundAthugasemdaDto,
    TegundAthugasemdaDtoFromJSON,
    TegundAthugasemdaDtoToJSON,
    TegundRettindaDto,
    TegundRettindaDtoFromJSON,
    TegundRettindaDtoToJSON,
} from '../models';

export interface ApiCodetablesCategoriesGetRequest {
    apiVersion: string;
    apiVersion2: string;
}

export interface ApiCodetablesDeprivationsGetRequest {
    apiVersion: string;
    apiVersion2: string;
}

export interface ApiCodetablesDistrictsGetRequest {
    apiVersion: string;
    apiVersion2: string;
}

export interface ApiCodetablesRemarksGetRequest {
    apiVersion: string;
    apiVersion2: string;
}

/**
 * 
 */
export class CodetablesApi extends runtime.BaseAPI {

    /**
     * Get types of categories
     */
    async apiCodetablesCategoriesGetRaw(requestParameters: ApiCodetablesCategoriesGetRequest): Promise<runtime.ApiResponse<Array<TegundRettindaDto>>> {
        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiCodetablesCategoriesGet.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiCodetablesCategoriesGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/codetables/categories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TegundRettindaDtoFromJSON));
    }

    /**
     * Get types of categories
     */
    async apiCodetablesCategoriesGet(requestParameters: ApiCodetablesCategoriesGetRequest): Promise<Array<TegundRettindaDto>> {
        const response = await this.apiCodetablesCategoriesGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get for types of driver licence deprivations
     */
    async apiCodetablesDeprivationsGetRaw(requestParameters: ApiCodetablesDeprivationsGetRequest): Promise<runtime.ApiResponse<Array<TegSviptingaDto>>> {
        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiCodetablesDeprivationsGet.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiCodetablesDeprivationsGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/codetables/deprivations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TegSviptingaDtoFromJSON));
    }

    /**
     * Get for types of driver licence deprivations
     */
    async apiCodetablesDeprivationsGet(requestParameters: ApiCodetablesDeprivationsGetRequest): Promise<Array<TegSviptingaDto>> {
        const response = await this.apiCodetablesDeprivationsGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get for all districts
     */
    async apiCodetablesDistrictsGetRaw(requestParameters: ApiCodetablesDistrictsGetRequest): Promise<runtime.ApiResponse<Array<EmbaettiDto>>> {
        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiCodetablesDistrictsGet.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiCodetablesDistrictsGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/codetables/districts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EmbaettiDtoFromJSON));
    }

    /**
     * Get for all districts
     */
    async apiCodetablesDistrictsGet(requestParameters: ApiCodetablesDistrictsGetRequest): Promise<Array<EmbaettiDto>> {
        const response = await this.apiCodetablesDistrictsGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get types of remarks
     */
    async apiCodetablesRemarksGetRaw(requestParameters: ApiCodetablesRemarksGetRequest): Promise<runtime.ApiResponse<Array<TegundAthugasemdaDto>>> {
        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiCodetablesRemarksGet.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling apiCodetablesRemarksGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/codetables/remarks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TegundAthugasemdaDtoFromJSON));
    }

    /**
     * Get types of remarks
     */
    async apiCodetablesRemarksGet(requestParameters: ApiCodetablesRemarksGetRequest): Promise<Array<TegundAthugasemdaDto>> {
        const response = await this.apiCodetablesRemarksGetRaw(requestParameters);
        return await response.value();
    }

}
