/* tslint:disable */
/* eslint-disable */
/**
 * RLS driver licence Rest API
 * RESTFul services for driver licences. Programmed in .NET 8
 *
 * The version of the OpenAPI document: 5.0
 * Contact: tmd@tmd.is
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Revoke entity
 * @export
 * @interface DeprivationDto
 */
export interface DeprivationDto {
    /**
     * Date from on deprevation
     * @type {Date}
     * @memberof DeprivationDto
     */
    dateFrom?: Date | null;
    /**
     * Date to on deprivation
     * @type {Date}
     * @memberof DeprivationDto
     */
    dateTo?: Date | null;
    /**
     * License lost
     * @type {boolean}
     * @memberof DeprivationDto
     */
    licenseLost?: boolean | null;
    /**
     * Type name of deprevation
     * @type {string}
     * @memberof DeprivationDto
     */
    deprivationName?: string | null;
    /**
     * Type id of deprevation
     * @type {number}
     * @memberof DeprivationDto
     */
    deprivationType?: number | null;
    /**
     * Is the license expired
     * @type {boolean}
     * @memberof DeprivationDto
     */
    licenseExpired?: boolean | null;
    /**
     * Does individual have to retake test to get license
     * @type {boolean}
     * @memberof DeprivationDto
     */
    retakeLicense?: boolean | null;
}

export function DeprivationDtoFromJSON(json: any): DeprivationDto {
    return DeprivationDtoFromJSONTyped(json, false);
}

export function DeprivationDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): DeprivationDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'dateFrom': !exists(json, 'dateFrom') ? undefined : (json['dateFrom'] === null ? null : new Date(json['dateFrom'])),
        'dateTo': !exists(json, 'dateTo') ? undefined : (json['dateTo'] === null ? null : new Date(json['dateTo'])),
        'licenseLost': !exists(json, 'licenseLost') ? undefined : json['licenseLost'],
        'deprivationName': !exists(json, 'deprivationName') ? undefined : json['deprivationName'],
        'deprivationType': !exists(json, 'deprivationType') ? undefined : json['deprivationType'],
        'licenseExpired': !exists(json, 'licenseExpired') ? undefined : json['licenseExpired'],
        'retakeLicense': !exists(json, 'retakeLicense') ? undefined : json['retakeLicense'],
    };
}

export function DeprivationDtoToJSON(value?: DeprivationDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'dateFrom': value.dateFrom === undefined ? undefined : (value.dateFrom === null ? null : value.dateFrom.toISOString()),
        'dateTo': value.dateTo === undefined ? undefined : (value.dateTo === null ? null : value.dateTo.toISOString()),
        'licenseLost': value.licenseLost,
        'deprivationName': value.deprivationName,
        'deprivationType': value.deprivationType,
        'licenseExpired': value.licenseExpired,
        'retakeLicense': value.retakeLicense,
    };
}


