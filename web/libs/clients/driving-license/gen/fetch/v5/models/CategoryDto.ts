/* tslint:disable */
/* eslint-disable */
/**
 * RLS driver licence Rest API
 * RESTFul services for driver licences. Programmed in .NET 8
 *
 * The version of the OpenAPI document: 5.0
 * Contact: tmd@tmd.is
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Entity for licence category
 * @export
 * @interface CategoryDto
 */
export interface CategoryDto {
    /**
     * Category id
     * @type {number}
     * @memberof CategoryDto
     */
    id?: number;
    /**
     * Category
     * @type {string}
     * @memberof CategoryDto
     */
    nr?: string | null;
    /**
     * Name of category
     * @type {string}
     * @memberof CategoryDto
     */
    categoryName?: string | null;
    /**
     * Date published
     * @type {Date}
     * @memberof CategoryDto
     */
    publishDate?: Date | null;
    /**
     * Date of expiry
     * @type {Date}
     * @memberof CategoryDto
     */
    dateTo?: Date;
    /**
     * Valid to code
     * @type {number}
     * @memberof CategoryDto
     */
    validToCode?: number;
    /**
     * Valid to text
     * @type {string}
     * @memberof CategoryDto
     */
    validToText?: string | null;
    /**
     * Comments on category
     * @type {string}
     * @memberof CategoryDto
     */
    comment?: string | null;
}

export function CategoryDtoFromJSON(json: any): CategoryDto {
    return CategoryDtoFromJSONTyped(json, false);
}

export function CategoryDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): CategoryDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'nr': !exists(json, 'nr') ? undefined : json['nr'],
        'categoryName': !exists(json, 'categoryName') ? undefined : json['categoryName'],
        'publishDate': !exists(json, 'publishDate') ? undefined : (json['publishDate'] === null ? null : new Date(json['publishDate'])),
        'dateTo': !exists(json, 'dateTo') ? undefined : (new Date(json['dateTo'])),
        'validToCode': !exists(json, 'validToCode') ? undefined : json['validToCode'],
        'validToText': !exists(json, 'validToText') ? undefined : json['validToText'],
        'comment': !exists(json, 'comment') ? undefined : json['comment'],
    };
}

export function CategoryDtoToJSON(value?: CategoryDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'nr': value.nr,
        'categoryName': value.categoryName,
        'publishDate': value.publishDate === undefined ? undefined : (value.publishDate === null ? null : value.publishDate.toISOString()),
        'dateTo': value.dateTo === undefined ? undefined : (value.dateTo.toISOString()),
        'validToCode': value.validToCode,
        'validToText': value.validToText,
        'comment': value.comment,
    };
}


