/* tslint:disable */
/* eslint-disable */
/**
 * RLS driver licence Rest API
 * RESTFul services for driver licences. Programmed in .NET 8
 *
 * The version of the OpenAPI document: 5.0
 * Contact: tmd@tmd.is
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    CategoryDto,
    CategoryDtoFromJSON,
    CategoryDtoFromJSONTyped,
    CategoryDtoToJSON,
    DeprivationDto,
    DeprivationDtoFromJSON,
    DeprivationDtoFromJSONTyped,
    DeprivationDtoToJSON,
    LicenseCommentsDto,
    LicenseCommentsDtoFromJSON,
    LicenseCommentsDtoFromJSONTyped,
    LicenseCommentsDtoToJSON,
} from './';

/**
 * Licence entity
 * @export
 * @interface DriverLicenseWithoutImagesDto
 */
export interface DriverLicenseWithoutImagesDto {
    /**
     * Id
     * @type {number}
     * @memberof DriverLicenseWithoutImagesDto
     */
    id?: number;
    /**
     * Name
     * @type {string}
     * @memberof DriverLicenseWithoutImagesDto
     */
    name?: string | null;
    /**
     * Persond id number
     * @type {string}
     * @memberof DriverLicenseWithoutImagesDto
     */
    socialSecurityNumber?: string | null;
    /**
     * Birthplace
     * @type {string}
     * @memberof DriverLicenseWithoutImagesDto
     */
    birthPlace?: string | null;
    /**
     * Birthplace name
     * @type {string}
     * @memberof DriverLicenseWithoutImagesDto
     */
    birthPlaceName?: string | null;
    /**
     * Date registerd
     * @type {Date}
     * @memberof DriverLicenseWithoutImagesDto
     */
    publishDate?: Date | null;
    /**
     * Expiry date
     * @type {Date}
     * @memberof DriverLicenseWithoutImagesDto
     */
    dateValidTo?: Date;
    /**
     * Published where
     * @type {number}
     * @memberof DriverLicenseWithoutImagesDto
     */
    publishPlaceNr?: number;
    /**
     * Published where name
     * @type {string}
     * @memberof DriverLicenseWithoutImagesDto
     */
    publishPlaceName?: string | null;
    /**
     * Category list
     * @type {Array<CategoryDto>}
     * @memberof DriverLicenseWithoutImagesDto
     */
    categories?: Array<CategoryDto> | null;
    /**
     * License comments
     * @type {string}
     * @memberof DriverLicenseWithoutImagesDto
     */
    licenseComments?: string | null;
    /**
     * Remark list
     * @type {Array<LicenseCommentsDto>}
     * @memberof DriverLicenseWithoutImagesDto
     */
    comments?: Array<LicenseCommentsDto> | null;
    /**
     * 
     * @type {DeprivationDto}
     * @memberof DriverLicenseWithoutImagesDto
     */
    deprivation?: DeprivationDto;
}

export function DriverLicenseWithoutImagesDtoFromJSON(json: any): DriverLicenseWithoutImagesDto {
    return DriverLicenseWithoutImagesDtoFromJSONTyped(json, false);
}

export function DriverLicenseWithoutImagesDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): DriverLicenseWithoutImagesDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'socialSecurityNumber': !exists(json, 'socialSecurityNumber') ? undefined : json['socialSecurityNumber'],
        'birthPlace': !exists(json, 'birthPlace') ? undefined : json['birthPlace'],
        'birthPlaceName': !exists(json, 'birthPlaceName') ? undefined : json['birthPlaceName'],
        'publishDate': !exists(json, 'publishDate') ? undefined : (json['publishDate'] === null ? null : new Date(json['publishDate'])),
        'dateValidTo': !exists(json, 'dateValidTo') ? undefined : (new Date(json['dateValidTo'])),
        'publishPlaceNr': !exists(json, 'publishPlaceNr') ? undefined : json['publishPlaceNr'],
        'publishPlaceName': !exists(json, 'publishPlaceName') ? undefined : json['publishPlaceName'],
        'categories': !exists(json, 'categories') ? undefined : (json['categories'] === null ? null : (json['categories'] as Array<any>).map(CategoryDtoFromJSON)),
        'licenseComments': !exists(json, 'licenseComments') ? undefined : json['licenseComments'],
        'comments': !exists(json, 'comments') ? undefined : (json['comments'] === null ? null : (json['comments'] as Array<any>).map(LicenseCommentsDtoFromJSON)),
        'deprivation': !exists(json, 'deprivation') ? undefined : DeprivationDtoFromJSON(json['deprivation']),
    };
}

export function DriverLicenseWithoutImagesDtoToJSON(value?: DriverLicenseWithoutImagesDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'socialSecurityNumber': value.socialSecurityNumber,
        'birthPlace': value.birthPlace,
        'birthPlaceName': value.birthPlaceName,
        'publishDate': value.publishDate === undefined ? undefined : (value.publishDate === null ? null : value.publishDate.toISOString()),
        'dateValidTo': value.dateValidTo === undefined ? undefined : (value.dateValidTo.toISOString()),
        'publishPlaceNr': value.publishPlaceNr,
        'publishPlaceName': value.publishPlaceName,
        'categories': value.categories === undefined ? undefined : (value.categories === null ? null : (value.categories as Array<any>).map(CategoryDtoToJSON)),
        'licenseComments': value.licenseComments,
        'comments': value.comments === undefined ? undefined : (value.comments === null ? null : (value.comments as Array<any>).map(LicenseCommentsDtoToJSON)),
        'deprivation': DeprivationDtoToJSON(value.deprivation),
    };
}


