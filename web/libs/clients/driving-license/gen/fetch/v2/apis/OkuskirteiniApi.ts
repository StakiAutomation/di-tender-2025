/* tslint:disable */
/* eslint-disable */
/**
 * RLS driver licence Rest API
 * RESTFul services for driver licences. Programmed in ASP.NET Core 3 API 
 *
 * The version of the OpenAPI document: 2.0
 * Contact: tmd@tmd.is
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    GeturSottUmFullnadarSkirteiniDto,
    GeturSottUmFullnadarSkirteiniDtoFromJSON,
    GeturSottUmFullnadarSkirteiniDtoToJSON,
    NewTemporaryLicsenseDto,
    NewTemporaryLicsenseDtoFromJSON,
    NewTemporaryLicsenseDtoToJSON,
    Okuskirteini,
    OkuskirteiniFromJSON,
    OkuskirteiniToJSON,
    PantaBBSkirteiniDto,
    PantaBBSkirteiniDtoFromJSON,
    PantaBBSkirteiniDtoToJSON,
    PostNewFinalLicense,
    PostNewFinalLicenseFromJSON,
    PostNewFinalLicenseToJSON,
    PostTeachingDoneForTempLicenseV2,
    PostTeachingDoneForTempLicenseV2FromJSON,
    PostTeachingDoneForTempLicenseV2ToJSON,
    PostTemporaryLicenseV2,
    PostTemporaryLicenseV2FromJSON,
    PostTemporaryLicenseV2ToJSON,
    ProblemDetails,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    SviptingDto,
    SviptingDtoFromJSON,
    SviptingDtoToJSON,
} from '../models';

export interface ApiOkuskirteiniApplicationsNewCategoryPostRequest {
    category: string;
    apiVersion: string;
    postNewFinalLicense?: PostNewFinalLicense;
}

export interface ApiOkuskirteiniApplicationsNewTemporaryPostRequest {
    apiVersion: string;
    postTemporaryLicenseV2?: PostTemporaryLicenseV2;
}

export interface ApiOkuskirteiniApplicationsTemporarytestfinishedPostRequest {
    apiVersion: string;
    postTeachingDoneForTempLicenseV2?: PostTeachingDoneForTempLicenseV2;
}

export interface ApiOkuskirteiniKennitalaCanapplyforCategoryFullGetRequest {
    kennitala: string;
    category: string;
    apiVersion: string;
}

export interface ApiOkuskirteiniSviptingKennitalaGetRequest {
    kennitala: string;
    apiVersion: string;
}

export interface GetCurrentLicenseV2Request {
    kennitala: string;
    apiVersion: string;
}

/**
 * 
 */
export class OkuskirteiniApi extends runtime.BaseAPI {

    /**
     * Apply for drivers license for a category
     */
    async apiOkuskirteiniApplicationsNewCategoryPostRaw(requestParameters: ApiOkuskirteiniApplicationsNewCategoryPostRequest): Promise<runtime.ApiResponse<number>> {
        if (requestParameters.category === null || requestParameters.category === undefined) {
            throw new runtime.RequiredError('category','Required parameter requestParameters.category was null or undefined when calling apiOkuskirteiniApplicationsNewCategoryPost.');
        }

        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiOkuskirteiniApplicationsNewCategoryPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/okuskirteini/applications/new/{category}`.replace(`{${"category"}}`, encodeURIComponent(String(requestParameters.category))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostNewFinalLicenseToJSON(requestParameters.postNewFinalLicense),
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Apply for drivers license for a category
     */
    async apiOkuskirteiniApplicationsNewCategoryPost(requestParameters: ApiOkuskirteiniApplicationsNewCategoryPostRequest): Promise<number> {
        const response = await this.apiOkuskirteiniApplicationsNewCategoryPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Apply for drivers license for a category
     */
    async apiOkuskirteiniApplicationsNewTemporaryPostRaw(requestParameters: ApiOkuskirteiniApplicationsNewTemporaryPostRequest): Promise<runtime.ApiResponse<NewTemporaryLicsenseDto>> {
        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiOkuskirteiniApplicationsNewTemporaryPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/okuskirteini/applications/new/temporary`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostTemporaryLicenseV2ToJSON(requestParameters.postTemporaryLicenseV2),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => NewTemporaryLicsenseDtoFromJSON(jsonValue));
    }

    /**
     * Apply for drivers license for a category
     */
    async apiOkuskirteiniApplicationsNewTemporaryPost(requestParameters: ApiOkuskirteiniApplicationsNewTemporaryPostRequest): Promise<NewTemporaryLicsenseDto> {
        const response = await this.apiOkuskirteiniApplicationsNewTemporaryPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Checks  - Does person exist in national registry  - Is the liecense that has not been ordered  - Is person at least 17 years old  - Does he have a deprivation  - Does he have a quality marked picture  - Does he have a quality marked signature
     * Endpoint to tell system that person has finished learning for temporary license and license can be ordered
     */
    async apiOkuskirteiniApplicationsTemporarytestfinishedPostRaw(requestParameters: ApiOkuskirteiniApplicationsTemporarytestfinishedPostRequest): Promise<runtime.ApiResponse<PantaBBSkirteiniDto>> {
        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiOkuskirteiniApplicationsTemporarytestfinishedPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/okuskirteini/applications/temporarytestfinished`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostTeachingDoneForTempLicenseV2ToJSON(requestParameters.postTeachingDoneForTempLicenseV2),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PantaBBSkirteiniDtoFromJSON(jsonValue));
    }

    /**
     * Checks  - Does person exist in national registry  - Is the liecense that has not been ordered  - Is person at least 17 years old  - Does he have a deprivation  - Does he have a quality marked picture  - Does he have a quality marked signature
     * Endpoint to tell system that person has finished learning for temporary license and license can be ordered
     */
    async apiOkuskirteiniApplicationsTemporarytestfinishedPost(requestParameters: ApiOkuskirteiniApplicationsTemporarytestfinishedPostRequest): Promise<PantaBBSkirteiniDto> {
        const response = await this.apiOkuskirteiniApplicationsTemporarytestfinishedPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Check if person can apply for full drivers license for a specific category
     */
    async apiOkuskirteiniKennitalaCanapplyforCategoryFullGetRaw(requestParameters: ApiOkuskirteiniKennitalaCanapplyforCategoryFullGetRequest): Promise<runtime.ApiResponse<GeturSottUmFullnadarSkirteiniDto>> {
        if (requestParameters.kennitala === null || requestParameters.kennitala === undefined) {
            throw new runtime.RequiredError('kennitala','Required parameter requestParameters.kennitala was null or undefined when calling apiOkuskirteiniKennitalaCanapplyforCategoryFullGet.');
        }

        if (requestParameters.category === null || requestParameters.category === undefined) {
            throw new runtime.RequiredError('category','Required parameter requestParameters.category was null or undefined when calling apiOkuskirteiniKennitalaCanapplyforCategoryFullGet.');
        }

        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiOkuskirteiniKennitalaCanapplyforCategoryFullGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/okuskirteini/{kennitala}/canapplyfor/{category}/full`.replace(`{${"kennitala"}}`, encodeURIComponent(String(requestParameters.kennitala))).replace(`{${"category"}}`, encodeURIComponent(String(requestParameters.category))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GeturSottUmFullnadarSkirteiniDtoFromJSON(jsonValue));
    }

    /**
     * Check if person can apply for full drivers license for a specific category
     */
    async apiOkuskirteiniKennitalaCanapplyforCategoryFullGet(requestParameters: ApiOkuskirteiniKennitalaCanapplyforCategoryFullGetRequest): Promise<GeturSottUmFullnadarSkirteiniDto> {
        const response = await this.apiOkuskirteiniKennitalaCanapplyforCategoryFullGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get for current licence revoke
     */
    async apiOkuskirteiniSviptingKennitalaGetRaw(requestParameters: ApiOkuskirteiniSviptingKennitalaGetRequest): Promise<runtime.ApiResponse<SviptingDto>> {
        if (requestParameters.kennitala === null || requestParameters.kennitala === undefined) {
            throw new runtime.RequiredError('kennitala','Required parameter requestParameters.kennitala was null or undefined when calling apiOkuskirteiniSviptingKennitalaGet.');
        }

        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling apiOkuskirteiniSviptingKennitalaGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/okuskirteini/svipting/{kennitala}`.replace(`{${"kennitala"}}`, encodeURIComponent(String(requestParameters.kennitala))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SviptingDtoFromJSON(jsonValue));
    }

    /**
     * Get for current licence revoke
     */
    async apiOkuskirteiniSviptingKennitalaGet(requestParameters: ApiOkuskirteiniSviptingKennitalaGetRequest): Promise<SviptingDto> {
        const response = await this.apiOkuskirteiniSviptingKennitalaGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get for person driver licence
     */
    async getCurrentLicenseV2Raw(requestParameters: GetCurrentLicenseV2Request): Promise<runtime.ApiResponse<Okuskirteini>> {
        if (requestParameters.kennitala === null || requestParameters.kennitala === undefined) {
            throw new runtime.RequiredError('kennitala','Required parameter requestParameters.kennitala was null or undefined when calling getCurrentLicenseV2.');
        }

        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling getCurrentLicenseV2.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/okuskirteini/{kennitala}`.replace(`{${"kennitala"}}`, encodeURIComponent(String(requestParameters.kennitala))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OkuskirteiniFromJSON(jsonValue));
    }

    /**
     * Get for person driver licence
     */
    async getCurrentLicenseV2(requestParameters: GetCurrentLicenseV2Request): Promise<Okuskirteini> {
        const response = await this.getCurrentLicenseV2Raw(requestParameters);
        return await response.value();
    }

}
