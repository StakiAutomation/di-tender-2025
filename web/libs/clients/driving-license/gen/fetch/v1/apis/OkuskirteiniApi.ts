/* tslint:disable */
/* eslint-disable */
/**
 * RLS driver licence Rest API
 * RESTFul services for driver licences. Programmed in ASP.NET Core 3 API 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tmd@tmd.is
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AkstursmatDto,
    AkstursmatDtoFromJSON,
    AkstursmatDtoToJSON,
    EmbaettiDto,
    EmbaettiDtoFromJSON,
    EmbaettiDtoToJSON,
    GeturSottUmBBSkirteiniDto,
    GeturSottUmBBSkirteiniDtoFromJSON,
    GeturSottUmBBSkirteiniDtoToJSON,
    HefurLokidOkugerdiDto,
    HefurLokidOkugerdiDtoFromJSON,
    HefurLokidOkugerdiDtoToJSON,
    OkukennariDto,
    OkukennariDtoFromJSON,
    OkukennariDtoToJSON,
    Okuskirteini,
    OkuskirteiniFromJSON,
    OkuskirteiniToJSON,
    PostNewDrivingAssessment,
    PostNewDrivingAssessmentFromJSON,
    PostNewDrivingAssessmentToJSON,
    PostNewFinalLicense,
    PostNewFinalLicenseFromJSON,
    PostNewFinalLicenseToJSON,
    PostTemporaryLicense,
    PostTemporaryLicenseFromJSON,
    PostTemporaryLicenseToJSON,
    ProblemDetails,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    PunktastadaDto,
    PunktastadaDtoFromJSON,
    PunktastadaDtoToJSON,
    Svipting,
    SviptingFromJSON,
    SviptingToJSON,
    TegSviptingaDto,
    TegSviptingaDtoFromJSON,
    TegSviptingaDtoToJSON,
    TegundAthugasemdaDto,
    TegundAthugasemdaDtoFromJSON,
    TegundAthugasemdaDtoToJSON,
    TegundRettindaDto,
    TegundRettindaDtoFromJSON,
    TegundRettindaDtoToJSON,
} from '../models';

export interface ApiOkuskirteiniApplicationsNewCategoryPostRequest {
    category: string;
    apiVersion?: string;
    postNewFinalLicense?: PostNewFinalLicense;
}

export interface ApiOkuskirteiniApplicationsNewTemporaryPostRequest {
    apiVersion?: string;
    postTemporaryLicense?: PostTemporaryLicense;
}

export interface ApiOkuskirteiniEmbaettiGetRequest {
    apiVersion?: string;
}

export interface ApiOkuskirteiniHasteachingrightsKennitalaGetRequest {
    kennitala: string;
    apiVersion?: string;
}

export interface ApiOkuskirteiniKennitalaAllGetRequest {
    kennitala: string;
    apiVersion?: string;
}

export interface ApiOkuskirteiniKennitalaCanapplyforCategoryFullGetRequest {
    kennitala: string;
    category: string;
    apiVersion?: string;
}

export interface ApiOkuskirteiniKennitalaCanapplyforTemporaryGetRequest {
    kennitala: string;
    apiVersion?: string;
}

export interface ApiOkuskirteiniKennitalaFinishedokugerdiGetRequest {
    kennitala: string;
    apiVersion?: string;
}

export interface ApiOkuskirteiniKennitalaGetqualityphotoGetRequest {
    kennitala: string;
    apiVersion?: string;
}

export interface ApiOkuskirteiniKennitalaGetqualitysignatureGetRequest {
    kennitala: string;
    apiVersion?: string;
}

export interface ApiOkuskirteiniKennitalaHasqualityphotoGetRequest {
    kennitala: string;
    apiVersion?: string;
}

export interface ApiOkuskirteiniKennitalaHasqualitysignatureGetRequest {
    kennitala: string;
    apiVersion?: string;
}

export interface ApiOkuskirteiniKennitalaPostRequest {
    kennitala: string;
    apiVersion?: string;
}

export interface ApiOkuskirteiniNewDrivingassesmentPostRequest {
    apiVersion?: string;
    postNewDrivingAssessment?: PostNewDrivingAssessment;
}

export interface ApiOkuskirteiniOkukennararGetRequest {
    apiVersion?: string;
}

export interface ApiOkuskirteiniPunktastadaKennitalaGetRequest {
    kennitala: string;
    apiVersion?: string;
}

export interface ApiOkuskirteiniSaekjaakstursmatKennitalaGetRequest {
    kennitala: string;
    apiVersion?: string;
}

export interface ApiOkuskirteiniSviptingKennitalaGetRequest {
    kennitala: string;
    apiVersion?: string;
}

export interface ApiOkuskirteiniTegundirathugasemdaGetRequest {
    apiVersion?: string;
}

export interface ApiOkuskirteiniTegundirrettindaGetRequest {
    apiVersion?: string;
}

export interface ApiOkuskirteiniTegundirsviptingaGetRequest {
    apiVersion?: string;
}

export interface GetCurrentLicenseRequest {
    kennitala: string;
    apiVersion?: string;
}

/**
 * 
 */
export class OkuskirteiniApi extends runtime.BaseAPI {

    /**
     * Apply for drivers license for a category
     */
    async apiOkuskirteiniApplicationsNewCategoryPostRaw(requestParameters: ApiOkuskirteiniApplicationsNewCategoryPostRequest): Promise<runtime.ApiResponse<number>> {
        if (requestParameters.category === null || requestParameters.category === undefined) {
            throw new runtime.RequiredError('category','Required parameter requestParameters.category was null or undefined when calling apiOkuskirteiniApplicationsNewCategoryPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/okuskirteini/applications/new/{category}`.replace(`{${"category"}}`, encodeURIComponent(String(requestParameters.category))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostNewFinalLicenseToJSON(requestParameters.postNewFinalLicense),
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Apply for drivers license for a category
     */
    async apiOkuskirteiniApplicationsNewCategoryPost(requestParameters: ApiOkuskirteiniApplicationsNewCategoryPostRequest): Promise<number> {
        const response = await this.apiOkuskirteiniApplicationsNewCategoryPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Apply for drivers license for a category
     */
    async apiOkuskirteiniApplicationsNewTemporaryPostRaw(requestParameters: ApiOkuskirteiniApplicationsNewTemporaryPostRequest): Promise<runtime.ApiResponse<number>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/okuskirteini/applications/new/temporary`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostTemporaryLicenseToJSON(requestParameters.postTemporaryLicense),
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Apply for drivers license for a category
     */
    async apiOkuskirteiniApplicationsNewTemporaryPost(requestParameters: ApiOkuskirteiniApplicationsNewTemporaryPostRequest): Promise<number> {
        const response = await this.apiOkuskirteiniApplicationsNewTemporaryPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get for all districts
     */
    async apiOkuskirteiniEmbaettiGetRaw(requestParameters: ApiOkuskirteiniEmbaettiGetRequest): Promise<runtime.ApiResponse<Array<EmbaettiDto>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/okuskirteini/embaetti`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EmbaettiDtoFromJSON));
    }

    /**
     * Get for all districts
     */
    async apiOkuskirteiniEmbaettiGet(requestParameters: ApiOkuskirteiniEmbaettiGetRequest): Promise<Array<EmbaettiDto>> {
        const response = await this.apiOkuskirteiniEmbaettiGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Check if person has rights to be a driving teacher
     */
    async apiOkuskirteiniHasteachingrightsKennitalaGetRaw(requestParameters: ApiOkuskirteiniHasteachingrightsKennitalaGetRequest): Promise<runtime.ApiResponse<number>> {
        if (requestParameters.kennitala === null || requestParameters.kennitala === undefined) {
            throw new runtime.RequiredError('kennitala','Required parameter requestParameters.kennitala was null or undefined when calling apiOkuskirteiniHasteachingrightsKennitalaGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/okuskirteini/hasteachingrights/{kennitala}`.replace(`{${"kennitala"}}`, encodeURIComponent(String(requestParameters.kennitala))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Check if person has rights to be a driving teacher
     */
    async apiOkuskirteiniHasteachingrightsKennitalaGet(requestParameters: ApiOkuskirteiniHasteachingrightsKennitalaGetRequest): Promise<number> {
        const response = await this.apiOkuskirteiniHasteachingrightsKennitalaGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get for all persons driver licences
     */
    async apiOkuskirteiniKennitalaAllGetRaw(requestParameters: ApiOkuskirteiniKennitalaAllGetRequest): Promise<runtime.ApiResponse<Array<Okuskirteini>>> {
        if (requestParameters.kennitala === null || requestParameters.kennitala === undefined) {
            throw new runtime.RequiredError('kennitala','Required parameter requestParameters.kennitala was null or undefined when calling apiOkuskirteiniKennitalaAllGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/okuskirteini/{kennitala}/all`.replace(`{${"kennitala"}}`, encodeURIComponent(String(requestParameters.kennitala))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OkuskirteiniFromJSON));
    }

    /**
     * Get for all persons driver licences
     */
    async apiOkuskirteiniKennitalaAllGet(requestParameters: ApiOkuskirteiniKennitalaAllGetRequest): Promise<Array<Okuskirteini>> {
        const response = await this.apiOkuskirteiniKennitalaAllGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Check if person can apply for full drivers license for a specific category
     */
    async apiOkuskirteiniKennitalaCanapplyforCategoryFullGetRaw(requestParameters: ApiOkuskirteiniKennitalaCanapplyforCategoryFullGetRequest): Promise<runtime.ApiResponse<number>> {
        if (requestParameters.kennitala === null || requestParameters.kennitala === undefined) {
            throw new runtime.RequiredError('kennitala','Required parameter requestParameters.kennitala was null or undefined when calling apiOkuskirteiniKennitalaCanapplyforCategoryFullGet.');
        }

        if (requestParameters.category === null || requestParameters.category === undefined) {
            throw new runtime.RequiredError('category','Required parameter requestParameters.category was null or undefined when calling apiOkuskirteiniKennitalaCanapplyforCategoryFullGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/okuskirteini/{kennitala}/canapplyfor/{category}/full`.replace(`{${"kennitala"}}`, encodeURIComponent(String(requestParameters.kennitala))).replace(`{${"category"}}`, encodeURIComponent(String(requestParameters.category))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Check if person can apply for full drivers license for a specific category
     */
    async apiOkuskirteiniKennitalaCanapplyforCategoryFullGet(requestParameters: ApiOkuskirteiniKennitalaCanapplyforCategoryFullGetRequest): Promise<number> {
        const response = await this.apiOkuskirteiniKennitalaCanapplyforCategoryFullGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Checks :   - Is in national registry   - Does not have B category license already   - Has a deprivation exeeding next 30 days   - Is at least 16 years of age
     * Check if person can apply for temporary B drivers license
     */
    async apiOkuskirteiniKennitalaCanapplyforTemporaryGetRaw(requestParameters: ApiOkuskirteiniKennitalaCanapplyforTemporaryGetRequest): Promise<runtime.ApiResponse<GeturSottUmBBSkirteiniDto>> {
        if (requestParameters.kennitala === null || requestParameters.kennitala === undefined) {
            throw new runtime.RequiredError('kennitala','Required parameter requestParameters.kennitala was null or undefined when calling apiOkuskirteiniKennitalaCanapplyforTemporaryGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/okuskirteini/{kennitala}/canapplyfor/temporary`.replace(`{${"kennitala"}}`, encodeURIComponent(String(requestParameters.kennitala))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GeturSottUmBBSkirteiniDtoFromJSON(jsonValue));
    }

    /**
     * Checks :   - Is in national registry   - Does not have B category license already   - Has a deprivation exeeding next 30 days   - Is at least 16 years of age
     * Check if person can apply for temporary B drivers license
     */
    async apiOkuskirteiniKennitalaCanapplyforTemporaryGet(requestParameters: ApiOkuskirteiniKennitalaCanapplyforTemporaryGetRequest): Promise<GeturSottUmBBSkirteiniDto> {
        const response = await this.apiOkuskirteiniKennitalaCanapplyforTemporaryGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Has person finised \"ökugerði\"
     */
    async apiOkuskirteiniKennitalaFinishedokugerdiGetRaw(requestParameters: ApiOkuskirteiniKennitalaFinishedokugerdiGetRequest): Promise<runtime.ApiResponse<HefurLokidOkugerdiDto>> {
        if (requestParameters.kennitala === null || requestParameters.kennitala === undefined) {
            throw new runtime.RequiredError('kennitala','Required parameter requestParameters.kennitala was null or undefined when calling apiOkuskirteiniKennitalaFinishedokugerdiGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/okuskirteini/{kennitala}/finishedokugerdi`.replace(`{${"kennitala"}}`, encodeURIComponent(String(requestParameters.kennitala))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => HefurLokidOkugerdiDtoFromJSON(jsonValue));
    }

    /**
     * Has person finised \"ökugerði\"
     */
    async apiOkuskirteiniKennitalaFinishedokugerdiGet(requestParameters: ApiOkuskirteiniKennitalaFinishedokugerdiGetRequest): Promise<HefurLokidOkugerdiDto> {
        const response = await this.apiOkuskirteiniKennitalaFinishedokugerdiGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get quality marked photo for person
     */
    async apiOkuskirteiniKennitalaGetqualityphotoGetRaw(requestParameters: ApiOkuskirteiniKennitalaGetqualityphotoGetRequest): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.kennitala === null || requestParameters.kennitala === undefined) {
            throw new runtime.RequiredError('kennitala','Required parameter requestParameters.kennitala was null or undefined when calling apiOkuskirteiniKennitalaGetqualityphotoGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/okuskirteini/{kennitala}/getqualityphoto`.replace(`{${"kennitala"}}`, encodeURIComponent(String(requestParameters.kennitala))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Get quality marked photo for person
     */
    async apiOkuskirteiniKennitalaGetqualityphotoGet(requestParameters: ApiOkuskirteiniKennitalaGetqualityphotoGetRequest): Promise<string> {
        const response = await this.apiOkuskirteiniKennitalaGetqualityphotoGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get quality marked photo for person
     */
    async apiOkuskirteiniKennitalaGetqualitysignatureGetRaw(requestParameters: ApiOkuskirteiniKennitalaGetqualitysignatureGetRequest): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.kennitala === null || requestParameters.kennitala === undefined) {
            throw new runtime.RequiredError('kennitala','Required parameter requestParameters.kennitala was null or undefined when calling apiOkuskirteiniKennitalaGetqualitysignatureGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/okuskirteini/{kennitala}/getqualitysignature`.replace(`{${"kennitala"}}`, encodeURIComponent(String(requestParameters.kennitala))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Get quality marked photo for person
     */
    async apiOkuskirteiniKennitalaGetqualitysignatureGet(requestParameters: ApiOkuskirteiniKennitalaGetqualitysignatureGetRequest): Promise<string> {
        const response = await this.apiOkuskirteiniKennitalaGetqualitysignatureGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Check if person has quality marked photo
     */
    async apiOkuskirteiniKennitalaHasqualityphotoGetRaw(requestParameters: ApiOkuskirteiniKennitalaHasqualityphotoGetRequest): Promise<runtime.ApiResponse<number>> {
        if (requestParameters.kennitala === null || requestParameters.kennitala === undefined) {
            throw new runtime.RequiredError('kennitala','Required parameter requestParameters.kennitala was null or undefined when calling apiOkuskirteiniKennitalaHasqualityphotoGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/okuskirteini/{kennitala}/hasqualityphoto`.replace(`{${"kennitala"}}`, encodeURIComponent(String(requestParameters.kennitala))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Check if person has quality marked photo
     */
    async apiOkuskirteiniKennitalaHasqualityphotoGet(requestParameters: ApiOkuskirteiniKennitalaHasqualityphotoGetRequest): Promise<number> {
        const response = await this.apiOkuskirteiniKennitalaHasqualityphotoGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Check if person has quality marked photo
     */
    async apiOkuskirteiniKennitalaHasqualitysignatureGetRaw(requestParameters: ApiOkuskirteiniKennitalaHasqualitysignatureGetRequest): Promise<runtime.ApiResponse<number>> {
        if (requestParameters.kennitala === null || requestParameters.kennitala === undefined) {
            throw new runtime.RequiredError('kennitala','Required parameter requestParameters.kennitala was null or undefined when calling apiOkuskirteiniKennitalaHasqualitysignatureGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/okuskirteini/{kennitala}/hasqualitysignature`.replace(`{${"kennitala"}}`, encodeURIComponent(String(requestParameters.kennitala))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Check if person has quality marked photo
     */
    async apiOkuskirteiniKennitalaHasqualitysignatureGet(requestParameters: ApiOkuskirteiniKennitalaHasqualitysignatureGetRequest): Promise<number> {
        const response = await this.apiOkuskirteiniKennitalaHasqualitysignatureGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create medferd for digital licence created
     */
    async apiOkuskirteiniKennitalaPostRaw(requestParameters: ApiOkuskirteiniKennitalaPostRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.kennitala === null || requestParameters.kennitala === undefined) {
            throw new runtime.RequiredError('kennitala','Required parameter requestParameters.kennitala was null or undefined when calling apiOkuskirteiniKennitalaPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/okuskirteini/{kennitala}`.replace(`{${"kennitala"}}`, encodeURIComponent(String(requestParameters.kennitala))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create medferd for digital licence created
     */
    async apiOkuskirteiniKennitalaPost(requestParameters: ApiOkuskirteiniKennitalaPostRequest): Promise<void> {
        await this.apiOkuskirteiniKennitalaPostRaw(requestParameters);
    }

    /**
     * Create a new driver assessment
     */
    async apiOkuskirteiniNewDrivingassesmentPostRaw(requestParameters: ApiOkuskirteiniNewDrivingassesmentPostRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/okuskirteini/new/drivingassesment`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostNewDrivingAssessmentToJSON(requestParameters.postNewDrivingAssessment),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a new driver assessment
     */
    async apiOkuskirteiniNewDrivingassesmentPost(requestParameters: ApiOkuskirteiniNewDrivingassesmentPostRequest): Promise<void> {
        await this.apiOkuskirteiniNewDrivingassesmentPostRaw(requestParameters);
    }

    /**
     * Get driving teacherse
     */
    async apiOkuskirteiniOkukennararGetRaw(requestParameters: ApiOkuskirteiniOkukennararGetRequest): Promise<runtime.ApiResponse<Array<OkukennariDto>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/okuskirteini/okukennarar`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OkukennariDtoFromJSON));
    }

    /**
     * Get driving teacherse
     */
    async apiOkuskirteiniOkukennararGet(requestParameters: ApiOkuskirteiniOkukennararGetRequest): Promise<Array<OkukennariDto>> {
        const response = await this.apiOkuskirteiniOkukennararGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get traffic violation points for person
     */
    async apiOkuskirteiniPunktastadaKennitalaGetRaw(requestParameters: ApiOkuskirteiniPunktastadaKennitalaGetRequest): Promise<runtime.ApiResponse<PunktastadaDto>> {
        if (requestParameters.kennitala === null || requestParameters.kennitala === undefined) {
            throw new runtime.RequiredError('kennitala','Required parameter requestParameters.kennitala was null or undefined when calling apiOkuskirteiniPunktastadaKennitalaGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/okuskirteini/punktastada/{kennitala}`.replace(`{${"kennitala"}}`, encodeURIComponent(String(requestParameters.kennitala))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PunktastadaDtoFromJSON(jsonValue));
    }

    /**
     * Get traffic violation points for person
     */
    async apiOkuskirteiniPunktastadaKennitalaGet(requestParameters: ApiOkuskirteiniPunktastadaKennitalaGetRequest): Promise<PunktastadaDto> {
        const response = await this.apiOkuskirteiniPunktastadaKennitalaGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Check if person has driving assessment
     */
    async apiOkuskirteiniSaekjaakstursmatKennitalaGetRaw(requestParameters: ApiOkuskirteiniSaekjaakstursmatKennitalaGetRequest): Promise<runtime.ApiResponse<AkstursmatDto>> {
        if (requestParameters.kennitala === null || requestParameters.kennitala === undefined) {
            throw new runtime.RequiredError('kennitala','Required parameter requestParameters.kennitala was null or undefined when calling apiOkuskirteiniSaekjaakstursmatKennitalaGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/okuskirteini/saekjaakstursmat/{kennitala}`.replace(`{${"kennitala"}}`, encodeURIComponent(String(requestParameters.kennitala))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AkstursmatDtoFromJSON(jsonValue));
    }

    /**
     * Check if person has driving assessment
     */
    async apiOkuskirteiniSaekjaakstursmatKennitalaGet(requestParameters: ApiOkuskirteiniSaekjaakstursmatKennitalaGetRequest): Promise<AkstursmatDto> {
        const response = await this.apiOkuskirteiniSaekjaakstursmatKennitalaGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get for current licence revoke
     */
    async apiOkuskirteiniSviptingKennitalaGetRaw(requestParameters: ApiOkuskirteiniSviptingKennitalaGetRequest): Promise<runtime.ApiResponse<Svipting>> {
        if (requestParameters.kennitala === null || requestParameters.kennitala === undefined) {
            throw new runtime.RequiredError('kennitala','Required parameter requestParameters.kennitala was null or undefined when calling apiOkuskirteiniSviptingKennitalaGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/okuskirteini/svipting/{kennitala}`.replace(`{${"kennitala"}}`, encodeURIComponent(String(requestParameters.kennitala))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SviptingFromJSON(jsonValue));
    }

    /**
     * Get for current licence revoke
     */
    async apiOkuskirteiniSviptingKennitalaGet(requestParameters: ApiOkuskirteiniSviptingKennitalaGetRequest): Promise<Svipting> {
        const response = await this.apiOkuskirteiniSviptingKennitalaGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get types of remarks
     */
    async apiOkuskirteiniTegundirathugasemdaGetRaw(requestParameters: ApiOkuskirteiniTegundirathugasemdaGetRequest): Promise<runtime.ApiResponse<Array<TegundAthugasemdaDto>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/okuskirteini/tegundirathugasemda`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TegundAthugasemdaDtoFromJSON));
    }

    /**
     * Get types of remarks
     */
    async apiOkuskirteiniTegundirathugasemdaGet(requestParameters: ApiOkuskirteiniTegundirathugasemdaGetRequest): Promise<Array<TegundAthugasemdaDto>> {
        const response = await this.apiOkuskirteiniTegundirathugasemdaGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get types of categories
     */
    async apiOkuskirteiniTegundirrettindaGetRaw(requestParameters: ApiOkuskirteiniTegundirrettindaGetRequest): Promise<runtime.ApiResponse<Array<TegundRettindaDto>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/okuskirteini/tegundirrettinda`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TegundRettindaDtoFromJSON));
    }

    /**
     * Get types of categories
     */
    async apiOkuskirteiniTegundirrettindaGet(requestParameters: ApiOkuskirteiniTegundirrettindaGetRequest): Promise<Array<TegundRettindaDto>> {
        const response = await this.apiOkuskirteiniTegundirrettindaGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get for types of driver licence deprivations
     */
    async apiOkuskirteiniTegundirsviptingaGetRaw(requestParameters: ApiOkuskirteiniTegundirsviptingaGetRequest): Promise<runtime.ApiResponse<Array<TegSviptingaDto>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/okuskirteini/tegundirsviptinga`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TegSviptingaDtoFromJSON));
    }

    /**
     * Get for types of driver licence deprivations
     */
    async apiOkuskirteiniTegundirsviptingaGet(requestParameters: ApiOkuskirteiniTegundirsviptingaGetRequest): Promise<Array<TegSviptingaDto>> {
        const response = await this.apiOkuskirteiniTegundirsviptingaGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get for person driver licence
     */
    async getCurrentLicenseRaw(requestParameters: GetCurrentLicenseRequest): Promise<runtime.ApiResponse<Okuskirteini>> {
        if (requestParameters.kennitala === null || requestParameters.kennitala === undefined) {
            throw new runtime.RequiredError('kennitala','Required parameter requestParameters.kennitala was null or undefined when calling getCurrentLicense.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/api/okuskirteini/{kennitala}`.replace(`{${"kennitala"}}`, encodeURIComponent(String(requestParameters.kennitala))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OkuskirteiniFromJSON(jsonValue));
    }

    /**
     * Get for person driver licence
     */
    async getCurrentLicense(requestParameters: GetCurrentLicenseRequest): Promise<Okuskirteini> {
        const response = await this.getCurrentLicenseRaw(requestParameters);
        return await response.value();
    }

}
