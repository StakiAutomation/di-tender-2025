/* tslint:disable */
/* eslint-disable */
/**
 * IslandIs.Skjalabirting
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    BatchReadRequest,
    BatchReadRequestFromJSON,
    BatchReadRequestToJSON,
    BatchRequest,
    BatchRequestFromJSON,
    BatchRequestToJSON,
    CategoriesResponse,
    CategoriesResponseFromJSON,
    CategoriesResponseToJSON,
    DocumentDTO,
    DocumentDTOFromJSON,
    DocumentDTOToJSON,
    MessagePageDTO,
    MessagePageDTOFromJSON,
    MessagePageDTOToJSON,
    MessageTypesResponse,
    MessageTypesResponseFromJSON,
    MessageTypesResponseToJSON,
    MessagesListView,
    MessagesListViewFromJSON,
    MessagesListViewToJSON,
    PaperMailDTO,
    PaperMailDTOFromJSON,
    PaperMailDTOToJSON,
    SendersResponse,
    SendersResponseFromJSON,
    SendersResponseToJSON,
} from '../models';

export interface CustomersArchiveRequest {
    kennitala: string;
    messageId: string;
}

export interface CustomersBatchArchiveRequest {
    kennitala: string;
    batchRequest: BatchRequest;
}

export interface CustomersBatchBookmarkRequest {
    kennitala: string;
    batchRequest: BatchRequest;
}

export interface CustomersBatchReadDocumentsRequest {
    kennitala: string;
    request: BatchReadRequest;
}

export interface CustomersBookmarkRequest {
    kennitala: string;
    messageId: string;
}

export interface CustomersCategoriesRequest {
    kennitala: string;
}

export interface CustomersDocumentRequest {
    kennitala: string;
    messageId: string;
    authenticationType: string;
    includeDocument?: boolean;
    locale?: string;
}

export interface CustomersGetDocumentPageRequest {
    kennitala: string;
    messageId: string;
    senderKennitala?: string;
    dateFrom?: Date;
    dateTo?: Date;
    categoryId?: string;
    typeId?: string;
    subjectContains?: string;
    archived?: boolean;
    sortBy?: CustomersGetDocumentPageSortByEnum;
    order?: CustomersGetDocumentPageOrderEnum;
    opened?: boolean;
    page?: number;
    pageSize?: number;
    bookmarked?: boolean;
}

export interface CustomersGetUnreadCountRequest {
    kennitala: string;
}

export interface CustomersListDocumentsRequest {
    kennitala: string;
    senderKennitala?: string;
    dateFrom?: Date;
    dateTo?: Date;
    categoryId?: string;
    typeId?: string;
    subjectContains?: string;
    archived?: boolean;
    sortBy?: CustomersListDocumentsSortByEnum;
    order?: CustomersListDocumentsOrderEnum;
    opened?: boolean;
    page?: number;
    pageSize?: number;
    bookmarked?: boolean;
}

export interface CustomersMessageTypesRequest {
    kennitala: string;
}

export interface CustomersReadAllDocumentsRequest {
    kennitala: string;
}

export interface CustomersSendersRequest {
    kennitala: string;
}

export interface CustomersUnarchiveRequest {
    kennitala: string;
    messageId: string;
}

export interface CustomersUnbookmarkRequest {
    kennitala: string;
    messageId: string;
}

export interface CustomersUpdatePaperMailPreferenceRequest {
    kennitala: string;
    paperMail: PaperMailDTO;
}

export interface CustomersWantsPaperMailRequest {
    kennitala: string;
}

/**
 * 
 */
export class CustomersApi extends runtime.BaseAPI {

    /**
     */
    async customersArchiveRaw(requestParameters: CustomersArchiveRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.kennitala === null || requestParameters.kennitala === undefined) {
            throw new runtime.RequiredError('kennitala','Required parameter requestParameters.kennitala was null or undefined when calling customersArchive.');
        }

        if (requestParameters.messageId === null || requestParameters.messageId === undefined) {
            throw new runtime.RequiredError('messageId','Required parameter requestParameters.messageId was null or undefined when calling customersArchive.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/mail/v1/customers/{kennitala}/messages/{messageId}/archive`.replace(`{${"kennitala"}}`, encodeURIComponent(String(requestParameters.kennitala))).replace(`{${"messageId"}}`, encodeURIComponent(String(requestParameters.messageId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async customersArchive(requestParameters: CustomersArchiveRequest): Promise<void> {
        await this.customersArchiveRaw(requestParameters);
    }

    /**
     */
    async customersBatchArchiveRaw(requestParameters: CustomersBatchArchiveRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.kennitala === null || requestParameters.kennitala === undefined) {
            throw new runtime.RequiredError('kennitala','Required parameter requestParameters.kennitala was null or undefined when calling customersBatchArchive.');
        }

        if (requestParameters.batchRequest === null || requestParameters.batchRequest === undefined) {
            throw new runtime.RequiredError('batchRequest','Required parameter requestParameters.batchRequest was null or undefined when calling customersBatchArchive.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/mail/v1/customers/{kennitala}/messages/batcharchive`.replace(`{${"kennitala"}}`, encodeURIComponent(String(requestParameters.kennitala))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BatchRequestToJSON(requestParameters.batchRequest),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async customersBatchArchive(requestParameters: CustomersBatchArchiveRequest): Promise<void> {
        await this.customersBatchArchiveRaw(requestParameters);
    }

    /**
     */
    async customersBatchBookmarkRaw(requestParameters: CustomersBatchBookmarkRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.kennitala === null || requestParameters.kennitala === undefined) {
            throw new runtime.RequiredError('kennitala','Required parameter requestParameters.kennitala was null or undefined when calling customersBatchBookmark.');
        }

        if (requestParameters.batchRequest === null || requestParameters.batchRequest === undefined) {
            throw new runtime.RequiredError('batchRequest','Required parameter requestParameters.batchRequest was null or undefined when calling customersBatchBookmark.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/mail/v1/customers/{kennitala}/messages/batchbookmark`.replace(`{${"kennitala"}}`, encodeURIComponent(String(requestParameters.kennitala))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BatchRequestToJSON(requestParameters.batchRequest),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async customersBatchBookmark(requestParameters: CustomersBatchBookmarkRequest): Promise<void> {
        await this.customersBatchBookmarkRaw(requestParameters);
    }

    /**
     */
    async customersBatchReadDocumentsRaw(requestParameters: CustomersBatchReadDocumentsRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.kennitala === null || requestParameters.kennitala === undefined) {
            throw new runtime.RequiredError('kennitala','Required parameter requestParameters.kennitala was null or undefined when calling customersBatchReadDocuments.');
        }

        if (requestParameters.request === null || requestParameters.request === undefined) {
            throw new runtime.RequiredError('request','Required parameter requestParameters.request was null or undefined when calling customersBatchReadDocuments.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/mail/v1/customers/{kennitala}/messages/batchread`.replace(`{${"kennitala"}}`, encodeURIComponent(String(requestParameters.kennitala))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BatchReadRequestToJSON(requestParameters.request),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async customersBatchReadDocuments(requestParameters: CustomersBatchReadDocumentsRequest): Promise<void> {
        await this.customersBatchReadDocumentsRaw(requestParameters);
    }

    /**
     */
    async customersBookmarkRaw(requestParameters: CustomersBookmarkRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.kennitala === null || requestParameters.kennitala === undefined) {
            throw new runtime.RequiredError('kennitala','Required parameter requestParameters.kennitala was null or undefined when calling customersBookmark.');
        }

        if (requestParameters.messageId === null || requestParameters.messageId === undefined) {
            throw new runtime.RequiredError('messageId','Required parameter requestParameters.messageId was null or undefined when calling customersBookmark.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/mail/v1/customers/{kennitala}/messages/{messageId}/bookmark`.replace(`{${"kennitala"}}`, encodeURIComponent(String(requestParameters.kennitala))).replace(`{${"messageId"}}`, encodeURIComponent(String(requestParameters.messageId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async customersBookmark(requestParameters: CustomersBookmarkRequest): Promise<void> {
        await this.customersBookmarkRaw(requestParameters);
    }

    /**
     */
    async customersCategoriesRaw(requestParameters: CustomersCategoriesRequest): Promise<runtime.ApiResponse<CategoriesResponse>> {
        if (requestParameters.kennitala === null || requestParameters.kennitala === undefined) {
            throw new runtime.RequiredError('kennitala','Required parameter requestParameters.kennitala was null or undefined when calling customersCategories.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/mail/v1/customers/{kennitala}/messages/categories`.replace(`{${"kennitala"}}`, encodeURIComponent(String(requestParameters.kennitala))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CategoriesResponseFromJSON(jsonValue));
    }

    /**
     */
    async customersCategories(requestParameters: CustomersCategoriesRequest): Promise<CategoriesResponse> {
        const response = await this.customersCategoriesRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async customersDocumentRaw(requestParameters: CustomersDocumentRequest): Promise<runtime.ApiResponse<DocumentDTO>> {
        if (requestParameters.kennitala === null || requestParameters.kennitala === undefined) {
            throw new runtime.RequiredError('kennitala','Required parameter requestParameters.kennitala was null or undefined when calling customersDocument.');
        }

        if (requestParameters.messageId === null || requestParameters.messageId === undefined) {
            throw new runtime.RequiredError('messageId','Required parameter requestParameters.messageId was null or undefined when calling customersDocument.');
        }

        if (requestParameters.authenticationType === null || requestParameters.authenticationType === undefined) {
            throw new runtime.RequiredError('authenticationType','Required parameter requestParameters.authenticationType was null or undefined when calling customersDocument.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.authenticationType !== undefined) {
            queryParameters['authenticationType'] = requestParameters.authenticationType;
        }

        if (requestParameters.includeDocument !== undefined) {
            queryParameters['includeDocument'] = requestParameters.includeDocument;
        }

        if (requestParameters.locale !== undefined) {
            queryParameters['locale'] = requestParameters.locale;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/mail/v1/customers/{kennitala}/messages/{messageId}`.replace(`{${"kennitala"}}`, encodeURIComponent(String(requestParameters.kennitala))).replace(`{${"messageId"}}`, encodeURIComponent(String(requestParameters.messageId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentDTOFromJSON(jsonValue));
    }

    /**
     */
    async customersDocument(requestParameters: CustomersDocumentRequest): Promise<DocumentDTO> {
        const response = await this.customersDocumentRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async customersGetDocumentPageRaw(requestParameters: CustomersGetDocumentPageRequest): Promise<runtime.ApiResponse<MessagePageDTO>> {
        if (requestParameters.kennitala === null || requestParameters.kennitala === undefined) {
            throw new runtime.RequiredError('kennitala','Required parameter requestParameters.kennitala was null or undefined when calling customersGetDocumentPage.');
        }

        if (requestParameters.messageId === null || requestParameters.messageId === undefined) {
            throw new runtime.RequiredError('messageId','Required parameter requestParameters.messageId was null or undefined when calling customersGetDocumentPage.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.senderKennitala !== undefined) {
            queryParameters['senderKennitala'] = requestParameters.senderKennitala;
        }

        if (requestParameters.dateFrom !== undefined) {
            queryParameters['dateFrom'] = (requestParameters.dateFrom as any).toISOString();
        }

        if (requestParameters.dateTo !== undefined) {
            queryParameters['dateTo'] = (requestParameters.dateTo as any).toISOString();
        }

        if (requestParameters.categoryId !== undefined) {
            queryParameters['categoryId'] = requestParameters.categoryId;
        }

        if (requestParameters.typeId !== undefined) {
            queryParameters['typeId'] = requestParameters.typeId;
        }

        if (requestParameters.subjectContains !== undefined) {
            queryParameters['subjectContains'] = requestParameters.subjectContains;
        }

        if (requestParameters.archived !== undefined) {
            queryParameters['archived'] = requestParameters.archived;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.order !== undefined) {
            queryParameters['order'] = requestParameters.order;
        }

        if (requestParameters.opened !== undefined) {
            queryParameters['opened'] = requestParameters.opened;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.bookmarked !== undefined) {
            queryParameters['bookmarked'] = requestParameters.bookmarked;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/mail/v1/customers/{kennitala}/messages/{messageId}/page`.replace(`{${"kennitala"}}`, encodeURIComponent(String(requestParameters.kennitala))).replace(`{${"messageId"}}`, encodeURIComponent(String(requestParameters.messageId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MessagePageDTOFromJSON(jsonValue));
    }

    /**
     */
    async customersGetDocumentPage(requestParameters: CustomersGetDocumentPageRequest): Promise<MessagePageDTO> {
        const response = await this.customersGetDocumentPageRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async customersGetUnreadCountRaw(requestParameters: CustomersGetUnreadCountRequest): Promise<runtime.ApiResponse<number>> {
        if (requestParameters.kennitala === null || requestParameters.kennitala === undefined) {
            throw new runtime.RequiredError('kennitala','Required parameter requestParameters.kennitala was null or undefined when calling customersGetUnreadCount.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/mail/v1/customers/{kennitala}/messages/unreadCount`.replace(`{${"kennitala"}}`, encodeURIComponent(String(requestParameters.kennitala))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async customersGetUnreadCount(requestParameters: CustomersGetUnreadCountRequest): Promise<number> {
        const response = await this.customersGetUnreadCountRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async customersListDocumentsRaw(requestParameters: CustomersListDocumentsRequest): Promise<runtime.ApiResponse<MessagesListView>> {
        if (requestParameters.kennitala === null || requestParameters.kennitala === undefined) {
            throw new runtime.RequiredError('kennitala','Required parameter requestParameters.kennitala was null or undefined when calling customersListDocuments.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.senderKennitala !== undefined) {
            queryParameters['senderKennitala'] = requestParameters.senderKennitala;
        }

        if (requestParameters.dateFrom !== undefined) {
            queryParameters['dateFrom'] = (requestParameters.dateFrom as any).toISOString();
        }

        if (requestParameters.dateTo !== undefined) {
            queryParameters['dateTo'] = (requestParameters.dateTo as any).toISOString();
        }

        if (requestParameters.categoryId !== undefined) {
            queryParameters['categoryId'] = requestParameters.categoryId;
        }

        if (requestParameters.typeId !== undefined) {
            queryParameters['typeId'] = requestParameters.typeId;
        }

        if (requestParameters.subjectContains !== undefined) {
            queryParameters['subjectContains'] = requestParameters.subjectContains;
        }

        if (requestParameters.archived !== undefined) {
            queryParameters['archived'] = requestParameters.archived;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sortBy'] = requestParameters.sortBy;
        }

        if (requestParameters.order !== undefined) {
            queryParameters['order'] = requestParameters.order;
        }

        if (requestParameters.opened !== undefined) {
            queryParameters['opened'] = requestParameters.opened;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.bookmarked !== undefined) {
            queryParameters['bookmarked'] = requestParameters.bookmarked;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/mail/v1/customers/{kennitala}/messages`.replace(`{${"kennitala"}}`, encodeURIComponent(String(requestParameters.kennitala))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MessagesListViewFromJSON(jsonValue));
    }

    /**
     */
    async customersListDocuments(requestParameters: CustomersListDocumentsRequest): Promise<MessagesListView> {
        const response = await this.customersListDocumentsRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async customersMessageTypesRaw(requestParameters: CustomersMessageTypesRequest): Promise<runtime.ApiResponse<MessageTypesResponse>> {
        if (requestParameters.kennitala === null || requestParameters.kennitala === undefined) {
            throw new runtime.RequiredError('kennitala','Required parameter requestParameters.kennitala was null or undefined when calling customersMessageTypes.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/mail/v1/customers/{kennitala}/messages/types`.replace(`{${"kennitala"}}`, encodeURIComponent(String(requestParameters.kennitala))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MessageTypesResponseFromJSON(jsonValue));
    }

    /**
     */
    async customersMessageTypes(requestParameters: CustomersMessageTypesRequest): Promise<MessageTypesResponse> {
        const response = await this.customersMessageTypesRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async customersReadAllDocumentsRaw(requestParameters: CustomersReadAllDocumentsRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.kennitala === null || requestParameters.kennitala === undefined) {
            throw new runtime.RequiredError('kennitala','Required parameter requestParameters.kennitala was null or undefined when calling customersReadAllDocuments.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/mail/v1/customers/{kennitala}/messages/readall`.replace(`{${"kennitala"}}`, encodeURIComponent(String(requestParameters.kennitala))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async customersReadAllDocuments(requestParameters: CustomersReadAllDocumentsRequest): Promise<void> {
        await this.customersReadAllDocumentsRaw(requestParameters);
    }

    /**
     */
    async customersSendersRaw(requestParameters: CustomersSendersRequest): Promise<runtime.ApiResponse<SendersResponse>> {
        if (requestParameters.kennitala === null || requestParameters.kennitala === undefined) {
            throw new runtime.RequiredError('kennitala','Required parameter requestParameters.kennitala was null or undefined when calling customersSenders.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/mail/v1/customers/{kennitala}/messages/senders`.replace(`{${"kennitala"}}`, encodeURIComponent(String(requestParameters.kennitala))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SendersResponseFromJSON(jsonValue));
    }

    /**
     */
    async customersSenders(requestParameters: CustomersSendersRequest): Promise<SendersResponse> {
        const response = await this.customersSendersRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async customersUnarchiveRaw(requestParameters: CustomersUnarchiveRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.kennitala === null || requestParameters.kennitala === undefined) {
            throw new runtime.RequiredError('kennitala','Required parameter requestParameters.kennitala was null or undefined when calling customersUnarchive.');
        }

        if (requestParameters.messageId === null || requestParameters.messageId === undefined) {
            throw new runtime.RequiredError('messageId','Required parameter requestParameters.messageId was null or undefined when calling customersUnarchive.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/mail/v1/customers/{kennitala}/messages/{messageId}/unarchive`.replace(`{${"kennitala"}}`, encodeURIComponent(String(requestParameters.kennitala))).replace(`{${"messageId"}}`, encodeURIComponent(String(requestParameters.messageId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async customersUnarchive(requestParameters: CustomersUnarchiveRequest): Promise<void> {
        await this.customersUnarchiveRaw(requestParameters);
    }

    /**
     */
    async customersUnbookmarkRaw(requestParameters: CustomersUnbookmarkRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.kennitala === null || requestParameters.kennitala === undefined) {
            throw new runtime.RequiredError('kennitala','Required parameter requestParameters.kennitala was null or undefined when calling customersUnbookmark.');
        }

        if (requestParameters.messageId === null || requestParameters.messageId === undefined) {
            throw new runtime.RequiredError('messageId','Required parameter requestParameters.messageId was null or undefined when calling customersUnbookmark.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/mail/v1/customers/{kennitala}/messages/{messageId}/unbookmark`.replace(`{${"kennitala"}}`, encodeURIComponent(String(requestParameters.kennitala))).replace(`{${"messageId"}}`, encodeURIComponent(String(requestParameters.messageId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async customersUnbookmark(requestParameters: CustomersUnbookmarkRequest): Promise<void> {
        await this.customersUnbookmarkRaw(requestParameters);
    }

    /**
     */
    async customersUpdatePaperMailPreferenceRaw(requestParameters: CustomersUpdatePaperMailPreferenceRequest): Promise<runtime.ApiResponse<PaperMailDTO>> {
        if (requestParameters.kennitala === null || requestParameters.kennitala === undefined) {
            throw new runtime.RequiredError('kennitala','Required parameter requestParameters.kennitala was null or undefined when calling customersUpdatePaperMailPreference.');
        }

        if (requestParameters.paperMail === null || requestParameters.paperMail === undefined) {
            throw new runtime.RequiredError('paperMail','Required parameter requestParameters.paperMail was null or undefined when calling customersUpdatePaperMailPreference.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/mail/v1/customers/{kennitala}/paper`.replace(`{${"kennitala"}}`, encodeURIComponent(String(requestParameters.kennitala))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PaperMailDTOToJSON(requestParameters.paperMail),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PaperMailDTOFromJSON(jsonValue));
    }

    /**
     */
    async customersUpdatePaperMailPreference(requestParameters: CustomersUpdatePaperMailPreferenceRequest): Promise<PaperMailDTO> {
        const response = await this.customersUpdatePaperMailPreferenceRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async customersWantsPaperMailRaw(requestParameters: CustomersWantsPaperMailRequest): Promise<runtime.ApiResponse<PaperMailDTO>> {
        if (requestParameters.kennitala === null || requestParameters.kennitala === undefined) {
            throw new runtime.RequiredError('kennitala','Required parameter requestParameters.kennitala was null or undefined when calling customersWantsPaperMail.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/mail/v1/customers/{kennitala}/paper`.replace(`{${"kennitala"}}`, encodeURIComponent(String(requestParameters.kennitala))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PaperMailDTOFromJSON(jsonValue));
    }

    /**
     */
    async customersWantsPaperMail(requestParameters: CustomersWantsPaperMailRequest): Promise<PaperMailDTO> {
        const response = await this.customersWantsPaperMailRaw(requestParameters);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum CustomersGetDocumentPageSortByEnum {
    Date = 'Date',
    Category = 'Category',
    Type = 'Type',
    Sender = 'Sender',
    Subject = 'Subject',
    Publication = 'Publication'
}
/**
    * @export
    * @enum {string}
    */
export enum CustomersGetDocumentPageOrderEnum {
    Ascending = 'Ascending',
    Descending = 'Descending'
}
/**
    * @export
    * @enum {string}
    */
export enum CustomersListDocumentsSortByEnum {
    Date = 'Date',
    Category = 'Category',
    Type = 'Type',
    Sender = 'Sender',
    Subject = 'Subject',
    Publication = 'Publication'
}
/**
    * @export
    * @enum {string}
    */
export enum CustomersListDocumentsOrderEnum {
    Ascending = 'Ascending',
    Descending = 'Descending'
}
