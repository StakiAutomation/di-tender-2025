/* tslint:disable */
/* eslint-disable */
/**
 * Electric Car Subsidy service v1
 * Service for Electric car subsidy
 *
 * The version of the OpenAPI document: 1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CatalogGETResponse,
    CatalogGETResponseFromJSON,
    CatalogGETResponseToJSON,
    ElectricCarSubsidyPOSTResponse,
    ElectricCarSubsidyPOSTResponseFromJSON,
    ElectricCarSubsidyPOSTResponseToJSON,
    GotElectricCarSubsidyvinNumberGETResponse,
    GotElectricCarSubsidyvinNumberGETResponseFromJSON,
    GotElectricCarSubsidyvinNumberGETResponseToJSON,
    PostElectricCarSubsidyInputDT,
    PostElectricCarSubsidyInputDTFromJSON,
    PostElectricCarSubsidyInputDTToJSON,
} from '../models';

export interface CatalogGET1Request {
    vehicleGroup: string;
    registrationDate: string;
    firstRegDate: string;
    carNumber?: string;
}

export interface ElectricCarSubsidyPOST3Request {
    subsidyInput: PostElectricCarSubsidyInputDT;
}

export interface GotElectricCarSubsidyvinNumberGET2Request {
    vinNumber: string;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Get  itemcode and amount for subsidy
     */
    async catalogGET1Raw(requestParameters: CatalogGET1Request): Promise<runtime.ApiResponse<CatalogGETResponse>> {
        if (requestParameters.vehicleGroup === null || requestParameters.vehicleGroup === undefined) {
            throw new runtime.RequiredError('vehicleGroup','Required parameter requestParameters.vehicleGroup was null or undefined when calling catalogGET1.');
        }

        if (requestParameters.registrationDate === null || requestParameters.registrationDate === undefined) {
            throw new runtime.RequiredError('registrationDate','Required parameter requestParameters.registrationDate was null or undefined when calling catalogGET1.');
        }

        if (requestParameters.firstRegDate === null || requestParameters.firstRegDate === undefined) {
            throw new runtime.RequiredError('firstRegDate','Required parameter requestParameters.firstRegDate was null or undefined when calling catalogGET1.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.vehicleGroup !== undefined) {
            queryParameters['vehicleGroup'] = requestParameters.vehicleGroup;
        }

        if (requestParameters.registrationDate !== undefined) {
            queryParameters['registrationDate'] = requestParameters.registrationDate;
        }

        if (requestParameters.firstRegDate !== undefined) {
            queryParameters['firstRegDate'] = requestParameters.firstRegDate;
        }

        if (requestParameters.carNumber !== undefined) {
            queryParameters['carNumber'] = requestParameters.carNumber;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/catalog`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CatalogGETResponseFromJSON(jsonValue));
    }

    /**
     * Get  itemcode and amount for subsidy
     */
    async catalogGET1(requestParameters: CatalogGET1Request): Promise<CatalogGETResponse> {
        const response = await this.catalogGET1Raw(requestParameters);
        return await response.value();
    }

    /**
     * Create electric car subsidy
     */
    async electricCarSubsidyPOST3Raw(requestParameters: ElectricCarSubsidyPOST3Request): Promise<runtime.ApiResponse<ElectricCarSubsidyPOSTResponse>> {
        if (requestParameters.subsidyInput === null || requestParameters.subsidyInput === undefined) {
            throw new runtime.RequiredError('subsidyInput','Required parameter requestParameters.subsidyInput was null or undefined when calling electricCarSubsidyPOST3.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/electricCarSubsidy`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostElectricCarSubsidyInputDTToJSON(requestParameters.subsidyInput),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ElectricCarSubsidyPOSTResponseFromJSON(jsonValue));
    }

    /**
     * Create electric car subsidy
     */
    async electricCarSubsidyPOST3(requestParameters: ElectricCarSubsidyPOST3Request): Promise<ElectricCarSubsidyPOSTResponse> {
        const response = await this.electricCarSubsidyPOST3Raw(requestParameters);
        return await response.value();
    }

    /**
     * check if car got subsidy
     */
    async gotElectricCarSubsidyvinNumberGET2Raw(requestParameters: GotElectricCarSubsidyvinNumberGET2Request): Promise<runtime.ApiResponse<GotElectricCarSubsidyvinNumberGETResponse>> {
        if (requestParameters.vinNumber === null || requestParameters.vinNumber === undefined) {
            throw new runtime.RequiredError('vinNumber','Required parameter requestParameters.vinNumber was null or undefined when calling gotElectricCarSubsidyvinNumberGET2.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/gotElectricCarSubsidy/{vinNumber}`.replace(`{${"vinNumber"}}`, encodeURIComponent(String(requestParameters.vinNumber))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GotElectricCarSubsidyvinNumberGETResponseFromJSON(jsonValue));
    }

    /**
     * check if car got subsidy
     */
    async gotElectricCarSubsidyvinNumberGET2(requestParameters: GotElectricCarSubsidyvinNumberGET2Request): Promise<GotElectricCarSubsidyvinNumberGETResponse> {
        const response = await this.gotElectricCarSubsidyvinNumberGET2Raw(requestParameters);
        return await response.value();
    }

}
