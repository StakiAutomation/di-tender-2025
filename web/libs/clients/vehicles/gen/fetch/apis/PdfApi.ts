/* tslint:disable */
/* eslint-disable */
/**
 * SamgÃ¶ngustofa
 * Leitar eftir Ã¶kutÃ¦kjum Ãºt frÃ¡ fastanÃºmeri, skrï¿½ningarnÃºmeri eÃ°a verksmiÃ°junÃºmeri - Release-46 : 20241106.1
 *
 * The version of the OpenAPI document: v1
 * Contact: samgongustofa@samgongustofa.is
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface OwnershipReportPdfGetRequest {
    ssn?: string;
}

export interface VehicleReportPdfGetRequest {
    permno?: string;
}

/**
 * 
 */
export class PdfApi extends runtime.BaseAPI {

    /**
     */
    async ownershipReportPdfGetRaw(requestParameters: OwnershipReportPdfGetRequest): Promise<runtime.ApiResponse<Blob>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.ssn !== undefined) {
            queryParameters['ssn'] = requestParameters.ssn;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("OAuth2", ["OAuth2"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/OwnershipReportPdf`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.BlobApiResponse(response);
    }

    /**
     */
    async ownershipReportPdfGet(requestParameters: OwnershipReportPdfGetRequest): Promise<Blob> {
        const response = await this.ownershipReportPdfGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async vehicleReportPdfGetRaw(requestParameters: VehicleReportPdfGetRequest): Promise<runtime.ApiResponse<Blob>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.permno !== undefined) {
            queryParameters['permno'] = requestParameters.permno;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("OAuth2", ["OAuth2"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/VehicleReportPdf`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.BlobApiResponse(response);
    }

    /**
     */
    async vehicleReportPdfGet(requestParameters: VehicleReportPdfGetRequest): Promise<Blob> {
        const response = await this.vehicleReportPdfGetRaw(requestParameters);
        return await response.value();
    }

}
