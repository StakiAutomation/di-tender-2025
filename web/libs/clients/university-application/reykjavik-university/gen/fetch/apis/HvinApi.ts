/* tslint:disable */
/* eslint-disable */
/**
 * Version 1 of Custom API.RU.IS
 * This is an API managed by Reykjavik University
 *
 * The version of the OpenAPI document: v1
 * Contact: help@ru.is
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    RekUniITAPICustomModelsHvinActiveProgram,
    RekUniITAPICustomModelsHvinActiveProgramFromJSON,
    RekUniITAPICustomModelsHvinActiveProgramToJSON,
    RekUniITAPICustomModelsHvinApplication,
    RekUniITAPICustomModelsHvinApplicationFromJSON,
    RekUniITAPICustomModelsHvinApplicationToJSON,
    RekUniITAPICustomModelsHvinNewApplication,
    RekUniITAPICustomModelsHvinNewApplicationFromJSON,
    RekUniITAPICustomModelsHvinNewApplicationToJSON,
    RekUniITAPICustomModelsHvinUpdateApplication,
    RekUniITAPICustomModelsHvinUpdateApplicationFromJSON,
    RekUniITAPICustomModelsHvinUpdateApplicationToJSON,
    RekUniITAPICustomModelsHvinUpdateApplicationResponse,
    RekUniITAPICustomModelsHvinUpdateApplicationResponseFromJSON,
    RekUniITAPICustomModelsHvinUpdateApplicationResponseToJSON,
} from '../models';

export interface HvinActiveProgramsRequest {
    version: string;
}

export interface HvinCreateApplicationRequest {
    version: string;
    application: RekUniITAPICustomModelsHvinNewApplication;
}

export interface HvinGetApplicationByIdRequest {
    id: number;
    version: string;
}

export interface HvinGetApplicationsBySemesterCodeRequest {
    semesterYear: number;
    semesterSeason: HvinGetApplicationsBySemesterCodeSemesterSeasonEnum;
    version: string;
}

export interface HvinUpdateApplicationByIdRequest {
    id: number;
    version: string;
    update: RekUniITAPICustomModelsHvinUpdateApplication;
}

/**
 * 
 */
export class HvinApi extends runtime.BaseAPI {

    /**
     * Returns all active programs in RU
     */
    async hvinActiveProgramsRaw(requestParameters: HvinActiveProgramsRequest): Promise<runtime.ApiResponse<Array<RekUniITAPICustomModelsHvinActiveProgram>>> {
        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling hvinActivePrograms.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/active-programs`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RekUniITAPICustomModelsHvinActiveProgramFromJSON));
    }

    /**
     * Returns all active programs in RU
     */
    async hvinActivePrograms(requestParameters: HvinActiveProgramsRequest): Promise<Array<RekUniITAPICustomModelsHvinActiveProgram>> {
        const response = await this.hvinActiveProgramsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Creates an applicant and application in RU application system
     */
    async hvinCreateApplicationRaw(requestParameters: HvinCreateApplicationRequest): Promise<runtime.ApiResponse<number>> {
        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling hvinCreateApplication.');
        }

        if (requestParameters.application === null || requestParameters.application === undefined) {
            throw new runtime.RequiredError('application','Required parameter requestParameters.application was null or undefined when calling hvinCreateApplication.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v{version}/hvin/applications`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RekUniITAPICustomModelsHvinNewApplicationToJSON(requestParameters.application),
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Creates an applicant and application in RU application system
     */
    async hvinCreateApplication(requestParameters: HvinCreateApplicationRequest): Promise<number> {
        const response = await this.hvinCreateApplicationRaw(requestParameters);
        return await response.value();
    }

    /**
     * Finds and returns the application by RU id
     */
    async hvinGetApplicationByIdRaw(requestParameters: HvinGetApplicationByIdRequest): Promise<runtime.ApiResponse<RekUniITAPICustomModelsHvinApplication>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling hvinGetApplicationById.');
        }

        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling hvinGetApplicationById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v{version}/hvin/applications/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RekUniITAPICustomModelsHvinApplicationFromJSON(jsonValue));
    }

    /**
     * Finds and returns the application by RU id
     */
    async hvinGetApplicationById(requestParameters: HvinGetApplicationByIdRequest): Promise<RekUniITAPICustomModelsHvinApplication> {
        const response = await this.hvinGetApplicationByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Finds and returns all the applications on a specific semester
     */
    async hvinGetApplicationsBySemesterCodeRaw(requestParameters: HvinGetApplicationsBySemesterCodeRequest): Promise<runtime.ApiResponse<Array<RekUniITAPICustomModelsHvinApplication>>> {
        if (requestParameters.semesterYear === null || requestParameters.semesterYear === undefined) {
            throw new runtime.RequiredError('semesterYear','Required parameter requestParameters.semesterYear was null or undefined when calling hvinGetApplicationsBySemesterCode.');
        }

        if (requestParameters.semesterSeason === null || requestParameters.semesterSeason === undefined) {
            throw new runtime.RequiredError('semesterSeason','Required parameter requestParameters.semesterSeason was null or undefined when calling hvinGetApplicationsBySemesterCode.');
        }

        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling hvinGetApplicationsBySemesterCode.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/semesters/{semesterYear}/{semesterSeason}/applications`.replace(`{${"semesterYear"}}`, encodeURIComponent(String(requestParameters.semesterYear))).replace(`{${"semesterSeason"}}`, encodeURIComponent(String(requestParameters.semesterSeason))).replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RekUniITAPICustomModelsHvinApplicationFromJSON));
    }

    /**
     * Finds and returns all the applications on a specific semester
     */
    async hvinGetApplicationsBySemesterCode(requestParameters: HvinGetApplicationsBySemesterCodeRequest): Promise<Array<RekUniITAPICustomModelsHvinApplication>> {
        const response = await this.hvinGetApplicationsBySemesterCodeRaw(requestParameters);
        return await response.value();
    }

    /**
     * Updates an application value. For example the status
     */
    async hvinUpdateApplicationByIdRaw(requestParameters: HvinUpdateApplicationByIdRequest): Promise<runtime.ApiResponse<Array<RekUniITAPICustomModelsHvinUpdateApplicationResponse>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling hvinUpdateApplicationById.');
        }

        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling hvinUpdateApplicationById.');
        }

        if (requestParameters.update === null || requestParameters.update === undefined) {
            throw new runtime.RequiredError('update','Required parameter requestParameters.update was null or undefined when calling hvinUpdateApplicationById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v{version}/hvin/applications/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: RekUniITAPICustomModelsHvinUpdateApplicationToJSON(requestParameters.update),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RekUniITAPICustomModelsHvinUpdateApplicationResponseFromJSON));
    }

    /**
     * Updates an application value. For example the status
     */
    async hvinUpdateApplicationById(requestParameters: HvinUpdateApplicationByIdRequest): Promise<Array<RekUniITAPICustomModelsHvinUpdateApplicationResponse>> {
        const response = await this.hvinUpdateApplicationByIdRaw(requestParameters);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum HvinGetApplicationsBySemesterCodeSemesterSeasonEnum {
    NOTSET = 'NOTSET',
    SPRING = 'SPRING',
    SUMMER = 'SUMMER',
    FALL = 'FALL'
}
