/* tslint:disable */
/* eslint-disable */
/**
 * University Gateway
 * API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ApplicationResponse,
    ApplicationResponseFromJSON,
    ApplicationResponseToJSON,
    UpdateApplicationDto,
    UpdateApplicationDtoFromJSON,
    UpdateApplicationDtoToJSON,
} from '../models';

export interface ControllerGetApplicationStatusRequest {
    id: string;
}

export interface ControllerUpdateApplicationRequest {
    id: string;
    updateApplicationDto: UpdateApplicationDto;
}

/**
 * 
 */
export class ApplicationsApi extends runtime.BaseAPI {

    /**
     * Get application data
     */
    async controllerGetApplicationStatusRaw(requestParameters: ControllerGetApplicationStatusRequest): Promise<runtime.ApiResponse<ApplicationResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling controllerGetApplicationStatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/applications/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationResponseFromJSON(jsonValue));
    }

    /**
     * Get application data
     */
    async controllerGetApplicationStatus(requestParameters: ControllerGetApplicationStatusRequest): Promise<ApplicationResponse> {
        const response = await this.controllerGetApplicationStatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update application status. Used when student accepts/rejects/cancels.
     */
    async controllerUpdateApplicationRaw(requestParameters: ControllerUpdateApplicationRequest): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling controllerUpdateApplication.');
        }

        if (requestParameters.updateApplicationDto === null || requestParameters.updateApplicationDto === undefined) {
            throw new runtime.RequiredError('updateApplicationDto','Required parameter requestParameters.updateApplicationDto was null or undefined when calling controllerUpdateApplication.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/applications/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateApplicationDtoToJSON(requestParameters.updateApplicationDto),
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Update application status. Used when student accepts/rejects/cancels.
     */
    async controllerUpdateApplication(requestParameters: ControllerUpdateApplicationRequest): Promise<string> {
        const response = await this.controllerUpdateApplicationRaw(requestParameters);
        return await response.value();
    }

}
