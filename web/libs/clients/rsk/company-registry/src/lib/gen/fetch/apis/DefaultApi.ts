/* tslint:disable */
/* eslint-disable */
/**
 * Company registry
 * Iceland Company Registry - XRoad - REST API
 *
 * The version of the OpenAPI document: 0.5.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CompanyItem,
    CompanyItemFromJSON,
    CompanyItemToJSON,
    ModelError,
    ModelErrorFromJSON,
    ModelErrorToJSON,
    SearchCompanyItems,
    SearchCompanyItemsFromJSON,
    SearchCompanyItemsToJSON,
    Serviceinfo,
    ServiceinfoFromJSON,
    ServiceinfoToJSON,
} from '../models';

export interface SearchSearchStringGetRequest {
    searchString: string;
    offset?: number;
    limit?: number;
}

export interface SsidGetRequest {
    ssid: string;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Service Information.
     */
    async rootGetRaw(): Promise<runtime.ApiResponse<Serviceinfo>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceinfoFromJSON(jsonValue));
    }

    /**
     * Service Information.
     */
    async rootGet(): Promise<Serviceinfo> {
        const response = await this.rootGetRaw();
        return await response.value();
    }

    /**
     * Search Company Registry with search string. If left null then shows 100 newest entries.
     */
    async searchSearchStringGetRaw(requestParameters: SearchSearchStringGetRequest): Promise<runtime.ApiResponse<SearchCompanyItems>> {
        if (requestParameters.searchString === null || requestParameters.searchString === undefined) {
            throw new runtime.RequiredError('searchString','Required parameter requestParameters.searchString was null or undefined when calling searchSearchStringGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/search/{search_string}`.replace(`{${"search_string"}}`, encodeURIComponent(String(requestParameters.searchString))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchCompanyItemsFromJSON(jsonValue));
    }

    /**
     * Search Company Registry with search string. If left null then shows 100 newest entries.
     */
    async searchSearchStringGet(requestParameters: SearchSearchStringGetRequest): Promise<SearchCompanyItems> {
        const response = await this.searchSearchStringGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Information about company
     */
    async ssidGetRaw(requestParameters: SsidGetRequest): Promise<runtime.ApiResponse<CompanyItem>> {
        if (requestParameters.ssid === null || requestParameters.ssid === undefined) {
            throw new runtime.RequiredError('ssid','Required parameter requestParameters.ssid was null or undefined when calling ssidGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/{ssid}`.replace(`{${"ssid"}}`, encodeURIComponent(String(requestParameters.ssid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CompanyItemFromJSON(jsonValue));
    }

    /**
     * Information about company
     */
    async ssidGet(requestParameters: SsidGetRequest): Promise<CompanyItem> {
        const response = await this.ssidGetRaw(requestParameters);
        return await response.value();
    }

}
