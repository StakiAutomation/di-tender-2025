/* tslint:disable */
/* eslint-disable */
/**
 * Relationships - API 1.0.0
 * API offers information about relationships between legal entities and individuals.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: xroad@skattur.is
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    LinkItem,
    LinkItemFromJSON,
    LinkItemFromJSONTyped,
    LinkItemToJSON,
    RelationshipItem,
    RelationshipItemFromJSON,
    RelationshipItemFromJSONTyped,
    RelationshipItemToJSON,
} from './';

/**
 * 
 * @export
 * @interface IndividualSearchItem
 */
export interface IndividualSearchItem {
    /**
     * 
     * @type {string}
     * @memberof IndividualSearchItem
     */
    nationalId?: string;
    /**
     * 
     * @type {string}
     * @memberof IndividualSearchItem
     */
    name?: string;
    /**
     * 
     * @type {Array<RelationshipItem>}
     * @memberof IndividualSearchItem
     */
    relationships?: Array<RelationshipItem>;
    /**
     * 
     * @type {Array<LinkItem>}
     * @memberof IndividualSearchItem
     */
    links?: Array<LinkItem>;
}

export function IndividualSearchItemFromJSON(json: any): IndividualSearchItem {
    return IndividualSearchItemFromJSONTyped(json, false);
}

export function IndividualSearchItemFromJSONTyped(json: any, ignoreDiscriminator: boolean): IndividualSearchItem {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'nationalId': !exists(json, 'nationalId') ? undefined : json['nationalId'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'relationships': !exists(json, 'relationships') ? undefined : ((json['relationships'] as Array<any>).map(RelationshipItemFromJSON)),
        'links': !exists(json, 'links') ? undefined : ((json['links'] as Array<any>).map(LinkItemFromJSON)),
    };
}

export function IndividualSearchItemToJSON(value?: IndividualSearchItem | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'nationalId': value.nationalId,
        'name': value.name,
        'relationships': value.relationships === undefined ? undefined : ((value.relationships as Array<any>).map(RelationshipItemToJSON)),
        'links': value.links === undefined ? undefined : ((value.links as Array<any>).map(LinkItemToJSON)),
    };
}


