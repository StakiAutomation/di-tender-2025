/* tslint:disable */
/* eslint-disable */
/**
 * Relationships - API 1.0.0
 * API offers information about relationships between legal entities and individuals.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: xroad@skattur.is
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    AddressItem,
    AddressItemFromJSON,
    AddressItemFromJSONTyped,
    AddressItemToJSON,
    LinkItem,
    LinkItemFromJSON,
    LinkItemFromJSONTyped,
    LinkItemToJSON,
    RelationshipItem,
    RelationshipItemFromJSON,
    RelationshipItemFromJSONTyped,
    RelationshipItemToJSON,
    VatItem,
    VatItemFromJSON,
    VatItemFromJSONTyped,
    VatItemToJSON,
} from './';

/**
 * 
 * @export
 * @interface Legalentity
 */
export interface Legalentity {
    /**
     * 
     * @type {string}
     * @memberof Legalentity
     */
    $id?: string;
    /**
     * 
     * @type {string}
     * @memberof Legalentity
     */
    nationalId: string;
    /**
     * 
     * @type {string}
     * @memberof Legalentity
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Legalentity
     */
    created: string;
    /**
     * 
     * @type {string}
     * @memberof Legalentity
     */
    status?: string;
    /**
     * 
     * @type {string}
     * @memberof Legalentity
     */
    closed?: string;
    /**
     * 
     * @type {string}
     * @memberof Legalentity
     */
    type?: string;
    /**
     * 
     * @type {Array<VatItem>}
     * @memberof Legalentity
     */
    vat?: Array<VatItem>;
    /**
     * 
     * @type {Array<AddressItem>}
     * @memberof Legalentity
     */
    addresses?: Array<AddressItem>;
    /**
     * 
     * @type {Array<RelationshipItem>}
     * @memberof Legalentity
     */
    relationships?: Array<RelationshipItem>;
    /**
     * 
     * @type {string}
     * @memberof Legalentity
     */
    lastUpdated?: string;
    /**
     * 
     * @type {Array<LinkItem>}
     * @memberof Legalentity
     */
    links?: Array<LinkItem>;
}

export function LegalentityFromJSON(json: any): Legalentity {
    return LegalentityFromJSONTyped(json, false);
}

export function LegalentityFromJSONTyped(json: any, ignoreDiscriminator: boolean): Legalentity {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        '$id': !exists(json, '$.id') ? undefined : json['$.id'],
        'nationalId': json['nationalId'],
        'name': json['name'],
        'created': json['created'],
        'status': !exists(json, 'status') ? undefined : json['status'],
        'closed': !exists(json, 'closed') ? undefined : json['closed'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'vat': !exists(json, 'vat') ? undefined : ((json['vat'] as Array<any>).map(VatItemFromJSON)),
        'addresses': !exists(json, 'addresses') ? undefined : ((json['addresses'] as Array<any>).map(AddressItemFromJSON)),
        'relationships': !exists(json, 'relationships') ? undefined : ((json['relationships'] as Array<any>).map(RelationshipItemFromJSON)),
        'lastUpdated': !exists(json, 'lastUpdated') ? undefined : json['lastUpdated'],
        'links': !exists(json, 'links') ? undefined : ((json['links'] as Array<any>).map(LinkItemFromJSON)),
    };
}

export function LegalentityToJSON(value?: Legalentity | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        '$.id': value.$id,
        'nationalId': value.nationalId,
        'name': value.name,
        'created': value.created,
        'status': value.status,
        'closed': value.closed,
        'type': value.type,
        'vat': value.vat === undefined ? undefined : ((value.vat as Array<any>).map(VatItemToJSON)),
        'addresses': value.addresses === undefined ? undefined : ((value.addresses as Array<any>).map(AddressItemToJSON)),
        'relationships': value.relationships === undefined ? undefined : ((value.relationships as Array<any>).map(RelationshipItemToJSON)),
        'lastUpdated': value.lastUpdated,
        'links': value.links === undefined ? undefined : ((value.links as Array<any>).map(LinkItemToJSON)),
    };
}


