/* tslint:disable */
/* eslint-disable */
/**
 * User Profile backend
 * Backend providing user profiles for Island.is
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ActorLocale,
    ActorLocaleFromJSON,
    ActorLocaleToJSON,
    ConfirmEmailDto,
    ConfirmEmailDtoFromJSON,
    ConfirmEmailDtoToJSON,
    ConfirmSmsDto,
    ConfirmSmsDtoFromJSON,
    ConfirmSmsDtoToJSON,
    ConfirmationDtoResponse,
    ConfirmationDtoResponseFromJSON,
    ConfirmationDtoResponseToJSON,
    CreateEmailVerificationDto,
    CreateEmailVerificationDtoFromJSON,
    CreateEmailVerificationDtoToJSON,
    CreateSmsVerificationDto,
    CreateSmsVerificationDtoFromJSON,
    CreateSmsVerificationDtoToJSON,
    CreateUserProfileDto,
    CreateUserProfileDtoFromJSON,
    CreateUserProfileDtoToJSON,
    DeleteTokenResponseDto,
    DeleteTokenResponseDtoFromJSON,
    DeleteTokenResponseDtoToJSON,
    DeviceTokenDto,
    DeviceTokenDtoFromJSON,
    DeviceTokenDtoToJSON,
    UpdateUserProfileDto,
    UpdateUserProfileDtoFromJSON,
    UpdateUserProfileDtoToJSON,
    UserDeviceTokenDto,
    UserDeviceTokenDtoFromJSON,
    UserDeviceTokenDtoToJSON,
    UserProfile,
    UserProfileFromJSON,
    UserProfileToJSON,
} from '../models';

export interface UserProfileControllerAddDeviceTokenRequest {
    nationalId: string;
    deviceTokenDto: DeviceTokenDto;
}

export interface UserProfileControllerConfirmEmailRequest {
    nationalId: string;
    confirmEmailDto: ConfirmEmailDto;
}

export interface UserProfileControllerConfirmSmsRequest {
    nationalId: string;
    confirmSmsDto: ConfirmSmsDto;
}

export interface UserProfileControllerCreateRequest {
    createUserProfileDto: CreateUserProfileDto;
}

export interface UserProfileControllerCreateEmailVerificationRequest {
    createEmailVerificationDto: CreateEmailVerificationDto;
}

export interface UserProfileControllerCreateSmsVerificationRequest {
    createSmsVerificationDto: CreateSmsVerificationDto;
}

export interface UserProfileControllerDeleteDeviceTokenRequest {
    nationalId: string;
    deviceTokenDto: DeviceTokenDto;
}

export interface UserProfileControllerFindOneByNationalIdRequest {
    nationalId: string;
}

export interface UserProfileControllerRecreateVerificationRequest {
    nationalId: string;
}

export interface UserProfileControllerUpdateRequest {
    nationalId: string;
    updateUserProfileDto: UpdateUserProfileDto;
}

export interface UserTokenControllerFindOneByNationalIdRequest {
    nationalId: string;
}

export interface UserTokenControllerGetDeviceTokensRequest {
    nationalId: string;
}

/**
 * 
 */
export class UserProfileApi extends runtime.BaseAPI {

    /**
     * Adds a device token for notifications for a user device 
     */
    async userProfileControllerAddDeviceTokenRaw(requestParameters: UserProfileControllerAddDeviceTokenRequest): Promise<runtime.ApiResponse<UserDeviceTokenDto>> {
        if (requestParameters.nationalId === null || requestParameters.nationalId === undefined) {
            throw new runtime.RequiredError('nationalId','Required parameter requestParameters.nationalId was null or undefined when calling userProfileControllerAddDeviceToken.');
        }

        if (requestParameters.deviceTokenDto === null || requestParameters.deviceTokenDto === undefined) {
            throw new runtime.RequiredError('deviceTokenDto','Required parameter requestParameters.deviceTokenDto was null or undefined when calling userProfileControllerAddDeviceToken.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", ["@island.is/user-profile:write"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/userProfile/{nationalId}/device-tokens`.replace(`{${"nationalId"}}`, encodeURIComponent(String(requestParameters.nationalId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DeviceTokenDtoToJSON(requestParameters.deviceTokenDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserDeviceTokenDtoFromJSON(jsonValue));
    }

    /**
     * Adds a device token for notifications for a user device 
     */
    async userProfileControllerAddDeviceToken(requestParameters: UserProfileControllerAddDeviceTokenRequest): Promise<UserDeviceTokenDto> {
        const response = await this.userProfileControllerAddDeviceTokenRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async userProfileControllerConfirmEmailRaw(requestParameters: UserProfileControllerConfirmEmailRequest): Promise<runtime.ApiResponse<ConfirmationDtoResponse>> {
        if (requestParameters.nationalId === null || requestParameters.nationalId === undefined) {
            throw new runtime.RequiredError('nationalId','Required parameter requestParameters.nationalId was null or undefined when calling userProfileControllerConfirmEmail.');
        }

        if (requestParameters.confirmEmailDto === null || requestParameters.confirmEmailDto === undefined) {
            throw new runtime.RequiredError('confirmEmailDto','Required parameter requestParameters.confirmEmailDto was null or undefined when calling userProfileControllerConfirmEmail.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", ["@island.is/user-profile:write"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/confirmEmail/{nationalId}`.replace(`{${"nationalId"}}`, encodeURIComponent(String(requestParameters.nationalId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConfirmEmailDtoToJSON(requestParameters.confirmEmailDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ConfirmationDtoResponseFromJSON(jsonValue));
    }

    /**
     */
    async userProfileControllerConfirmEmail(requestParameters: UserProfileControllerConfirmEmailRequest): Promise<ConfirmationDtoResponse> {
        const response = await this.userProfileControllerConfirmEmailRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async userProfileControllerConfirmSmsRaw(requestParameters: UserProfileControllerConfirmSmsRequest): Promise<runtime.ApiResponse<ConfirmationDtoResponse>> {
        if (requestParameters.nationalId === null || requestParameters.nationalId === undefined) {
            throw new runtime.RequiredError('nationalId','Required parameter requestParameters.nationalId was null or undefined when calling userProfileControllerConfirmSms.');
        }

        if (requestParameters.confirmSmsDto === null || requestParameters.confirmSmsDto === undefined) {
            throw new runtime.RequiredError('confirmSmsDto','Required parameter requestParameters.confirmSmsDto was null or undefined when calling userProfileControllerConfirmSms.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", ["@island.is/user-profile:write"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/confirmSms/{nationalId}`.replace(`{${"nationalId"}}`, encodeURIComponent(String(requestParameters.nationalId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConfirmSmsDtoToJSON(requestParameters.confirmSmsDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ConfirmationDtoResponseFromJSON(jsonValue));
    }

    /**
     */
    async userProfileControllerConfirmSms(requestParameters: UserProfileControllerConfirmSmsRequest): Promise<ConfirmationDtoResponse> {
        const response = await this.userProfileControllerConfirmSmsRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async userProfileControllerCreateRaw(requestParameters: UserProfileControllerCreateRequest): Promise<runtime.ApiResponse<UserProfile>> {
        if (requestParameters.createUserProfileDto === null || requestParameters.createUserProfileDto === undefined) {
            throw new runtime.RequiredError('createUserProfileDto','Required parameter requestParameters.createUserProfileDto was null or undefined when calling userProfileControllerCreate.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", ["@island.is/user-profile:write"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/userProfile`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateUserProfileDtoToJSON(requestParameters.createUserProfileDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserProfileFromJSON(jsonValue));
    }

    /**
     */
    async userProfileControllerCreate(requestParameters: UserProfileControllerCreateRequest): Promise<UserProfile> {
        const response = await this.userProfileControllerCreateRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async userProfileControllerCreateEmailVerificationRaw(requestParameters: UserProfileControllerCreateEmailVerificationRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.createEmailVerificationDto === null || requestParameters.createEmailVerificationDto === undefined) {
            throw new runtime.RequiredError('createEmailVerificationDto','Required parameter requestParameters.createEmailVerificationDto was null or undefined when calling userProfileControllerCreateEmailVerification.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", ["@island.is/user-profile:write"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/emailVerification`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateEmailVerificationDtoToJSON(requestParameters.createEmailVerificationDto),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async userProfileControllerCreateEmailVerification(requestParameters: UserProfileControllerCreateEmailVerificationRequest): Promise<void> {
        await this.userProfileControllerCreateEmailVerificationRaw(requestParameters);
    }

    /**
     */
    async userProfileControllerCreateSmsVerificationRaw(requestParameters: UserProfileControllerCreateSmsVerificationRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.createSmsVerificationDto === null || requestParameters.createSmsVerificationDto === undefined) {
            throw new runtime.RequiredError('createSmsVerificationDto','Required parameter requestParameters.createSmsVerificationDto was null or undefined when calling userProfileControllerCreateSmsVerification.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", ["@island.is/user-profile:write"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/smsVerification`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateSmsVerificationDtoToJSON(requestParameters.createSmsVerificationDto),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async userProfileControllerCreateSmsVerification(requestParameters: UserProfileControllerCreateSmsVerificationRequest): Promise<void> {
        await this.userProfileControllerCreateSmsVerificationRaw(requestParameters);
    }

    /**
     * Deletes a device token for a user device
     */
    async userProfileControllerDeleteDeviceTokenRaw(requestParameters: UserProfileControllerDeleteDeviceTokenRequest): Promise<runtime.ApiResponse<DeleteTokenResponseDto>> {
        if (requestParameters.nationalId === null || requestParameters.nationalId === undefined) {
            throw new runtime.RequiredError('nationalId','Required parameter requestParameters.nationalId was null or undefined when calling userProfileControllerDeleteDeviceToken.');
        }

        if (requestParameters.deviceTokenDto === null || requestParameters.deviceTokenDto === undefined) {
            throw new runtime.RequiredError('deviceTokenDto','Required parameter requestParameters.deviceTokenDto was null or undefined when calling userProfileControllerDeleteDeviceToken.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", ["@island.is/user-profile:write"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/userProfile/{nationalId}/device-tokens`.replace(`{${"nationalId"}}`, encodeURIComponent(String(requestParameters.nationalId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: DeviceTokenDtoToJSON(requestParameters.deviceTokenDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteTokenResponseDtoFromJSON(jsonValue));
    }

    /**
     * Deletes a device token for a user device
     */
    async userProfileControllerDeleteDeviceToken(requestParameters: UserProfileControllerDeleteDeviceTokenRequest): Promise<DeleteTokenResponseDto> {
        const response = await this.userProfileControllerDeleteDeviceTokenRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async userProfileControllerFindOneByNationalIdRaw(requestParameters: UserProfileControllerFindOneByNationalIdRequest): Promise<runtime.ApiResponse<UserProfile>> {
        if (requestParameters.nationalId === null || requestParameters.nationalId === undefined) {
            throw new runtime.RequiredError('nationalId','Required parameter requestParameters.nationalId was null or undefined when calling userProfileControllerFindOneByNationalId.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", ["@island.is/user-profile:read"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/userProfile/{nationalId}`.replace(`{${"nationalId"}}`, encodeURIComponent(String(requestParameters.nationalId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserProfileFromJSON(jsonValue));
    }

    /**
     */
    async userProfileControllerFindOneByNationalId(requestParameters: UserProfileControllerFindOneByNationalIdRequest): Promise<UserProfile> {
        const response = await this.userProfileControllerFindOneByNationalIdRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async userProfileControllerGetActorLocaleRaw(): Promise<runtime.ApiResponse<ActorLocale>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", ["@island.is/user-profile:read"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/actor/locale`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ActorLocaleFromJSON(jsonValue));
    }

    /**
     */
    async userProfileControllerGetActorLocale(): Promise<ActorLocale> {
        const response = await this.userProfileControllerGetActorLocaleRaw();
        return await response.value();
    }

    /**
     */
    async userProfileControllerRecreateVerificationRaw(requestParameters: UserProfileControllerRecreateVerificationRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.nationalId === null || requestParameters.nationalId === undefined) {
            throw new runtime.RequiredError('nationalId','Required parameter requestParameters.nationalId was null or undefined when calling userProfileControllerRecreateVerification.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", ["@island.is/user-profile:write"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/emailVerification/{nationalId}`.replace(`{${"nationalId"}}`, encodeURIComponent(String(requestParameters.nationalId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async userProfileControllerRecreateVerification(requestParameters: UserProfileControllerRecreateVerificationRequest): Promise<void> {
        await this.userProfileControllerRecreateVerificationRaw(requestParameters);
    }

    /**
     */
    async userProfileControllerUpdateRaw(requestParameters: UserProfileControllerUpdateRequest): Promise<runtime.ApiResponse<UserProfile>> {
        if (requestParameters.nationalId === null || requestParameters.nationalId === undefined) {
            throw new runtime.RequiredError('nationalId','Required parameter requestParameters.nationalId was null or undefined when calling userProfileControllerUpdate.');
        }

        if (requestParameters.updateUserProfileDto === null || requestParameters.updateUserProfileDto === undefined) {
            throw new runtime.RequiredError('updateUserProfileDto','Required parameter requestParameters.updateUserProfileDto was null or undefined when calling userProfileControllerUpdate.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", ["@island.is/user-profile:write"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/userProfile/{nationalId}`.replace(`{${"nationalId"}}`, encodeURIComponent(String(requestParameters.nationalId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateUserProfileDtoToJSON(requestParameters.updateUserProfileDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserProfileFromJSON(jsonValue));
    }

    /**
     */
    async userProfileControllerUpdate(requestParameters: UserProfileControllerUpdateRequest): Promise<UserProfile> {
        const response = await this.userProfileControllerUpdateRaw(requestParameters);
        return await response.value();
    }

    /**
     * admin access - returns user profile settings
     */
    async userTokenControllerFindOneByNationalIdRaw(requestParameters: UserTokenControllerFindOneByNationalIdRequest): Promise<runtime.ApiResponse<UserProfile>> {
        if (requestParameters.nationalId === null || requestParameters.nationalId === undefined) {
            throw new runtime.RequiredError('nationalId','Required parameter requestParameters.nationalId was null or undefined when calling userTokenControllerFindOneByNationalId.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", ["@island.is/user-profile:admin"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/userProfile/{nationalId}/notification-settings`.replace(`{${"nationalId"}}`, encodeURIComponent(String(requestParameters.nationalId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserProfileFromJSON(jsonValue));
    }

    /**
     * admin access - returns user profile settings
     */
    async userTokenControllerFindOneByNationalId(requestParameters: UserTokenControllerFindOneByNationalIdRequest): Promise<UserProfile> {
        const response = await this.userTokenControllerFindOneByNationalIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * admin access - returns a list of user device tokens
     */
    async userTokenControllerGetDeviceTokensRaw(requestParameters: UserTokenControllerGetDeviceTokensRequest): Promise<runtime.ApiResponse<Array<UserDeviceTokenDto>>> {
        if (requestParameters.nationalId === null || requestParameters.nationalId === undefined) {
            throw new runtime.RequiredError('nationalId','Required parameter requestParameters.nationalId was null or undefined when calling userTokenControllerGetDeviceTokens.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", ["@island.is/user-profile:admin"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/userProfile/{nationalId}/device-tokens`.replace(`{${"nationalId"}}`, encodeURIComponent(String(requestParameters.nationalId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserDeviceTokenDtoFromJSON));
    }

    /**
     * admin access - returns a list of user device tokens
     */
    async userTokenControllerGetDeviceTokens(requestParameters: UserTokenControllerGetDeviceTokensRequest): Promise<Array<UserDeviceTokenDto>> {
        const response = await this.userTokenControllerGetDeviceTokensRaw(requestParameters);
        return await response.value();
    }

}
