/* tslint:disable */
/* eslint-disable */
/**
 * User Profile backend
 * Backend providing user profiles for Island.is
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ActorProfileDto,
    ActorProfileDtoFromJSON,
    ActorProfileDtoToJSON,
    HttpProblemResponse,
    HttpProblemResponseFromJSON,
    HttpProblemResponseToJSON,
    PaginatedUserProfileDto,
    PaginatedUserProfileDtoFromJSON,
    PaginatedUserProfileDtoToJSON,
    PatchUserProfileDto,
    PatchUserProfileDtoFromJSON,
    PatchUserProfileDtoToJSON,
    UserDeviceTokenDto,
    UserDeviceTokenDtoFromJSON,
    UserDeviceTokenDtoToJSON,
    UserProfileDto,
    UserProfileDtoFromJSON,
    UserProfileDtoToJSON,
} from '../models';

export interface UserProfileControllerFindUserProfileRequest {
    xParamNationalId: string;
    clientType?: UserProfileControllerFindUserProfileClientTypeEnum;
}

export interface UserProfileControllerFindUserProfilesRequest {
    search: string;
}

export interface UserProfileControllerGetActorProfileRequest {
    xParamToNationalId: string;
    xParamFromNationalId: string;
}

export interface UserProfileControllerPatchUserProfileRequest {
    xParamNationalId: string;
    patchUserProfileDto: PatchUserProfileDto;
}

export interface UserTokenControllerDeleteUserDeviceTokenRequest {
    xParamNationalId: string;
    deviceToken: string;
}

export interface UserTokenControllerFindUserDeviceTokenRequest {
    xParamNationalId: string;
}

/**
 * 
 */
export class V2UsersApi extends runtime.BaseAPI {

    /**
     * Get user profile for given nationalId.
     */
    async userProfileControllerFindUserProfileRaw(requestParameters: UserProfileControllerFindUserProfileRequest): Promise<runtime.ApiResponse<UserProfileDto>> {
        if (requestParameters.xParamNationalId === null || requestParameters.xParamNationalId === undefined) {
            throw new runtime.RequiredError('xParamNationalId','Required parameter requestParameters.xParamNationalId was null or undefined when calling userProfileControllerFindUserProfile.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.clientType !== undefined) {
            queryParameters['clientType'] = requestParameters.clientType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xParamNationalId !== undefined && requestParameters.xParamNationalId !== null) {
            headerParameters['X-Param-National-Id'] = String(requestParameters.xParamNationalId);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", ["@island.is/user-profile:system"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/v2/users/.national-id`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserProfileDtoFromJSON(jsonValue));
    }

    /**
     * Get user profile for given nationalId.
     */
    async userProfileControllerFindUserProfile(requestParameters: UserProfileControllerFindUserProfileRequest): Promise<UserProfileDto> {
        const response = await this.userProfileControllerFindUserProfileRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get user profiles.
     */
    async userProfileControllerFindUserProfilesRaw(requestParameters: UserProfileControllerFindUserProfilesRequest): Promise<runtime.ApiResponse<PaginatedUserProfileDto>> {
        if (requestParameters.search === null || requestParameters.search === undefined) {
            throw new runtime.RequiredError('search','Required parameter requestParameters.search was null or undefined when calling userProfileControllerFindUserProfiles.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/v2/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedUserProfileDtoFromJSON(jsonValue));
    }

    /**
     * Get user profiles.
     */
    async userProfileControllerFindUserProfiles(requestParameters: UserProfileControllerFindUserProfilesRequest): Promise<PaginatedUserProfileDto> {
        const response = await this.userProfileControllerFindUserProfilesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get actor profiles for nationalId.
     */
    async userProfileControllerGetActorProfileRaw(requestParameters: UserProfileControllerGetActorProfileRequest): Promise<runtime.ApiResponse<ActorProfileDto>> {
        if (requestParameters.xParamToNationalId === null || requestParameters.xParamToNationalId === undefined) {
            throw new runtime.RequiredError('xParamToNationalId','Required parameter requestParameters.xParamToNationalId was null or undefined when calling userProfileControllerGetActorProfile.');
        }

        if (requestParameters.xParamFromNationalId === null || requestParameters.xParamFromNationalId === undefined) {
            throw new runtime.RequiredError('xParamFromNationalId','Required parameter requestParameters.xParamFromNationalId was null or undefined when calling userProfileControllerGetActorProfile.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xParamToNationalId !== undefined && requestParameters.xParamToNationalId !== null) {
            headerParameters['X-Param-To-National-Id'] = String(requestParameters.xParamToNationalId);
        }

        if (requestParameters.xParamFromNationalId !== undefined && requestParameters.xParamFromNationalId !== null) {
            headerParameters['X-Param-From-National-Id'] = String(requestParameters.xParamFromNationalId);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", ["@island.is/user-profile:system"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/v2/users/.to-national-id/actor-profiles/.from-national-id`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ActorProfileDtoFromJSON(jsonValue));
    }

    /**
     * Get actor profiles for nationalId.
     */
    async userProfileControllerGetActorProfile(requestParameters: UserProfileControllerGetActorProfileRequest): Promise<ActorProfileDto> {
        const response = await this.userProfileControllerGetActorProfileRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update user profile for given nationalId.
     */
    async userProfileControllerPatchUserProfileRaw(requestParameters: UserProfileControllerPatchUserProfileRequest): Promise<runtime.ApiResponse<UserProfileDto>> {
        if (requestParameters.xParamNationalId === null || requestParameters.xParamNationalId === undefined) {
            throw new runtime.RequiredError('xParamNationalId','Required parameter requestParameters.xParamNationalId was null or undefined when calling userProfileControllerPatchUserProfile.');
        }

        if (requestParameters.patchUserProfileDto === null || requestParameters.patchUserProfileDto === undefined) {
            throw new runtime.RequiredError('patchUserProfileDto','Required parameter requestParameters.patchUserProfileDto was null or undefined when calling userProfileControllerPatchUserProfile.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xParamNationalId !== undefined && requestParameters.xParamNationalId !== null) {
            headerParameters['X-Param-National-Id'] = String(requestParameters.xParamNationalId);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/v2/users/.national-id`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchUserProfileDtoToJSON(requestParameters.patchUserProfileDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserProfileDtoFromJSON(jsonValue));
    }

    /**
     * Update user profile for given nationalId.
     */
    async userProfileControllerPatchUserProfile(requestParameters: UserProfileControllerPatchUserProfileRequest): Promise<UserProfileDto> {
        const response = await this.userProfileControllerPatchUserProfileRaw(requestParameters);
        return await response.value();
    }

    /**
     * Delete a user device token.
     */
    async userTokenControllerDeleteUserDeviceTokenRaw(requestParameters: UserTokenControllerDeleteUserDeviceTokenRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.xParamNationalId === null || requestParameters.xParamNationalId === undefined) {
            throw new runtime.RequiredError('xParamNationalId','Required parameter requestParameters.xParamNationalId was null or undefined when calling userTokenControllerDeleteUserDeviceToken.');
        }

        if (requestParameters.deviceToken === null || requestParameters.deviceToken === undefined) {
            throw new runtime.RequiredError('deviceToken','Required parameter requestParameters.deviceToken was null or undefined when calling userTokenControllerDeleteUserDeviceToken.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xParamNationalId !== undefined && requestParameters.xParamNationalId !== null) {
            headerParameters['X-Param-National-Id'] = String(requestParameters.xParamNationalId);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", ["@island.is/user-profile:admin"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/v2/users/.nationalId/device-tokens/{deviceToken}`.replace(`{${"deviceToken"}}`, encodeURIComponent(String(requestParameters.deviceToken))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a user device token.
     */
    async userTokenControllerDeleteUserDeviceToken(requestParameters: UserTokenControllerDeleteUserDeviceTokenRequest): Promise<void> {
        await this.userTokenControllerDeleteUserDeviceTokenRaw(requestParameters);
    }

    /**
     * Get user device tokens for given nationalId.
     */
    async userTokenControllerFindUserDeviceTokenRaw(requestParameters: UserTokenControllerFindUserDeviceTokenRequest): Promise<runtime.ApiResponse<Array<UserDeviceTokenDto>>> {
        if (requestParameters.xParamNationalId === null || requestParameters.xParamNationalId === undefined) {
            throw new runtime.RequiredError('xParamNationalId','Required parameter requestParameters.xParamNationalId was null or undefined when calling userTokenControllerFindUserDeviceToken.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xParamNationalId !== undefined && requestParameters.xParamNationalId !== null) {
            headerParameters['X-Param-National-Id'] = String(requestParameters.xParamNationalId);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", ["@island.is/user-profile:admin"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/v2/users/.nationalId/device-tokens`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserDeviceTokenDtoFromJSON));
    }

    /**
     * Get user device tokens for given nationalId.
     */
    async userTokenControllerFindUserDeviceToken(requestParameters: UserTokenControllerFindUserDeviceTokenRequest): Promise<Array<UserDeviceTokenDto>> {
        const response = await this.userTokenControllerFindUserDeviceTokenRaw(requestParameters);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum UserProfileControllerFindUserProfileClientTypeEnum {
    FirstParty = 'first_party',
    ThirdParty = 'third_party'
}
