/* tslint:disable */
/* eslint-disable */
/**
 * User Profile backend
 * Backend providing user profiles for Island.is
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateVerificationDto,
    CreateVerificationDtoFromJSON,
    CreateVerificationDtoToJSON,
    HttpProblemResponse,
    HttpProblemResponseFromJSON,
    HttpProblemResponseToJSON,
    MeActorProfileDto,
    MeActorProfileDtoFromJSON,
    MeActorProfileDtoToJSON,
    PaginatedActorProfileDto,
    PaginatedActorProfileDtoFromJSON,
    PaginatedActorProfileDtoToJSON,
    PatchActorProfileDto,
    PatchActorProfileDtoFromJSON,
    PatchActorProfileDtoToJSON,
    PatchUserProfileDto,
    PatchUserProfileDtoFromJSON,
    PatchUserProfileDtoToJSON,
    PostNudgeDto,
    PostNudgeDtoFromJSON,
    PostNudgeDtoToJSON,
    UserProfileDto,
    UserProfileDtoFromJSON,
    UserProfileDtoToJSON,
} from '../models';

export interface MeUserProfileControllerConfirmNudgeRequest {
    postNudgeDto: PostNudgeDto;
}

export interface MeUserProfileControllerCreateOrUpdateActorProfileRequest {
    xParamFromNationalId: string;
    patchActorProfileDto: PatchActorProfileDto;
}

export interface MeUserProfileControllerCreateVerificationRequest {
    createVerificationDto: CreateVerificationDto;
}

export interface MeUserProfileControllerPatchUserProfileRequest {
    patchUserProfileDto: PatchUserProfileDto;
}

/**
 * 
 */
export class V2MeApi extends runtime.BaseAPI {

    /**
     * Confirms that the user has seen the nudge from a specific screen. Allowed screens are defined in NudgeFrom enum.
     */
    async meUserProfileControllerConfirmNudgeRaw(requestParameters: MeUserProfileControllerConfirmNudgeRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.postNudgeDto === null || requestParameters.postNudgeDto === undefined) {
            throw new runtime.RequiredError('postNudgeDto','Required parameter requestParameters.postNudgeDto was null or undefined when calling meUserProfileControllerConfirmNudge.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", ["@island.is/user-profile:read"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/v2/me/nudge`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostNudgeDtoToJSON(requestParameters.postNudgeDto),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Confirms that the user has seen the nudge from a specific screen. Allowed screens are defined in NudgeFrom enum.
     */
    async meUserProfileControllerConfirmNudge(requestParameters: MeUserProfileControllerConfirmNudgeRequest): Promise<void> {
        await this.meUserProfileControllerConfirmNudgeRaw(requestParameters);
    }

    /**
     * Update or create an actor profile for the current user
     */
    async meUserProfileControllerCreateOrUpdateActorProfileRaw(requestParameters: MeUserProfileControllerCreateOrUpdateActorProfileRequest): Promise<runtime.ApiResponse<MeActorProfileDto>> {
        if (requestParameters.xParamFromNationalId === null || requestParameters.xParamFromNationalId === undefined) {
            throw new runtime.RequiredError('xParamFromNationalId','Required parameter requestParameters.xParamFromNationalId was null or undefined when calling meUserProfileControllerCreateOrUpdateActorProfile.');
        }

        if (requestParameters.patchActorProfileDto === null || requestParameters.patchActorProfileDto === undefined) {
            throw new runtime.RequiredError('patchActorProfileDto','Required parameter requestParameters.patchActorProfileDto was null or undefined when calling meUserProfileControllerCreateOrUpdateActorProfile.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xParamFromNationalId !== undefined && requestParameters.xParamFromNationalId !== null) {
            headerParameters['X-Param-From-National-Id'] = String(requestParameters.xParamFromNationalId);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", ["@island.is/user-profile:read"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/v2/me/actor-profiles/.from-national-id`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchActorProfileDtoToJSON(requestParameters.patchActorProfileDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MeActorProfileDtoFromJSON(jsonValue));
    }

    /**
     * Update or create an actor profile for the current user
     */
    async meUserProfileControllerCreateOrUpdateActorProfile(requestParameters: MeUserProfileControllerCreateOrUpdateActorProfileRequest): Promise<MeActorProfileDto> {
        const response = await this.meUserProfileControllerCreateOrUpdateActorProfileRaw(requestParameters);
        return await response.value();
    }

    /**
     * Creates a verification code for the user for either email or sms
     */
    async meUserProfileControllerCreateVerificationRaw(requestParameters: MeUserProfileControllerCreateVerificationRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.createVerificationDto === null || requestParameters.createVerificationDto === undefined) {
            throw new runtime.RequiredError('createVerificationDto','Required parameter requestParameters.createVerificationDto was null or undefined when calling meUserProfileControllerCreateVerification.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", ["@island.is/user-profile:read"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/v2/me/create-verification`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateVerificationDtoToJSON(requestParameters.createVerificationDto),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Creates a verification code for the user for either email or sms
     */
    async meUserProfileControllerCreateVerification(requestParameters: MeUserProfileControllerCreateVerificationRequest): Promise<void> {
        await this.meUserProfileControllerCreateVerificationRaw(requestParameters);
    }

    /**
     * Get user profile for the current user.
     */
    async meUserProfileControllerFindUserProfileRaw(): Promise<runtime.ApiResponse<UserProfileDto>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", ["@island.is/user-profile:read"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/v2/me`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserProfileDtoFromJSON(jsonValue));
    }

    /**
     * Get user profile for the current user.
     */
    async meUserProfileControllerFindUserProfile(): Promise<UserProfileDto> {
        const response = await this.meUserProfileControllerFindUserProfileRaw();
        return await response.value();
    }

    /**
     * Get actor profiles for the current user.
     */
    async meUserProfileControllerGetActorProfilesRaw(): Promise<runtime.ApiResponse<PaginatedActorProfileDto>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", ["@island.is/user-profile:read"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/v2/me/actor-profiles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedActorProfileDtoFromJSON(jsonValue));
    }

    /**
     * Get actor profiles for the current user.
     */
    async meUserProfileControllerGetActorProfiles(): Promise<PaginatedActorProfileDto> {
        const response = await this.meUserProfileControllerGetActorProfilesRaw();
        return await response.value();
    }

    /**
     * Update user profile for the current user.
     */
    async meUserProfileControllerPatchUserProfileRaw(requestParameters: MeUserProfileControllerPatchUserProfileRequest): Promise<runtime.ApiResponse<UserProfileDto>> {
        if (requestParameters.patchUserProfileDto === null || requestParameters.patchUserProfileDto === undefined) {
            throw new runtime.RequiredError('patchUserProfileDto','Required parameter requestParameters.patchUserProfileDto was null or undefined when calling meUserProfileControllerPatchUserProfile.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", ["@island.is/user-profile:read"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/v2/me`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchUserProfileDtoToJSON(requestParameters.patchUserProfileDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserProfileDtoFromJSON(jsonValue));
    }

    /**
     * Update user profile for the current user.
     */
    async meUserProfileControllerPatchUserProfile(requestParameters: MeUserProfileControllerPatchUserProfileRequest): Promise<UserProfileDto> {
        const response = await this.meUserProfileControllerPatchUserProfileRaw(requestParameters);
        return await response.value();
    }

}
