/* tslint:disable */
/* eslint-disable */
/**
 * MMS Island.is application API
 * API for Island.is
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AnyOpenForAdmissionDto,
    AnyOpenForAdmissionDtoFromJSON,
    AnyOpenForAdmissionDtoToJSON,
    ProgrammeSimpleDto,
    ProgrammeSimpleDtoFromJSON,
    ProgrammeSimpleDtoToJSON,
    SchoolDto,
    SchoolDtoFromJSON,
    SchoolDtoToJSON,
} from '../models';

export interface V1SchoolsGetRequest {
    rowOffset?: number;
    fetchSize?: number;
}

export interface V1SchoolsSchoolIdGetRequest {
    schoolId: string;
}

export interface V1SchoolsSchoolIdProgrammesGetRequest {
    schoolId: string;
    onlyFreshmenEnabled?: boolean;
    rowOffset?: number;
    fetchSize?: number;
}

/**
 * 
 */
export class SchoolsApi extends runtime.BaseAPI {

    /**
     * [GET] Check if any programme is open for admission for any school.
     */
    async v1SchoolsAdmissionsOpenGetRaw(): Promise<runtime.ApiResponse<AnyOpenForAdmissionDto>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/schools/admissions/open`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AnyOpenForAdmissionDtoFromJSON(jsonValue));
    }

    /**
     * [GET] Check if any programme is open for admission for any school.
     */
    async v1SchoolsAdmissionsOpenGet(): Promise<AnyOpenForAdmissionDto> {
        const response = await this.v1SchoolsAdmissionsOpenGetRaw();
        return await response.value();
    }

    /**
     * [GET] Fetch list of schools.
     */
    async v1SchoolsGetRaw(requestParameters: V1SchoolsGetRequest): Promise<runtime.ApiResponse<Array<SchoolDto>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.rowOffset !== undefined) {
            queryParameters['rowOffset'] = requestParameters.rowOffset;
        }

        if (requestParameters.fetchSize !== undefined) {
            queryParameters['fetchSize'] = requestParameters.fetchSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/schools`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SchoolDtoFromJSON));
    }

    /**
     * [GET] Fetch list of schools.
     */
    async v1SchoolsGet(requestParameters: V1SchoolsGetRequest): Promise<Array<SchoolDto>> {
        const response = await this.v1SchoolsGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * [GET] Fetch information on school.
     */
    async v1SchoolsSchoolIdGetRaw(requestParameters: V1SchoolsSchoolIdGetRequest): Promise<runtime.ApiResponse<SchoolDto>> {
        if (requestParameters.schoolId === null || requestParameters.schoolId === undefined) {
            throw new runtime.RequiredError('schoolId','Required parameter requestParameters.schoolId was null or undefined when calling v1SchoolsSchoolIdGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/schools/{schoolId}`.replace(`{${"schoolId"}}`, encodeURIComponent(String(requestParameters.schoolId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SchoolDtoFromJSON(jsonValue));
    }

    /**
     * [GET] Fetch information on school.
     */
    async v1SchoolsSchoolIdGet(requestParameters: V1SchoolsSchoolIdGetRequest): Promise<SchoolDto> {
        const response = await this.v1SchoolsSchoolIdGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * [GET] Get a list of programmes for a school.
     */
    async v1SchoolsSchoolIdProgrammesGetRaw(requestParameters: V1SchoolsSchoolIdProgrammesGetRequest): Promise<runtime.ApiResponse<Array<ProgrammeSimpleDto>>> {
        if (requestParameters.schoolId === null || requestParameters.schoolId === undefined) {
            throw new runtime.RequiredError('schoolId','Required parameter requestParameters.schoolId was null or undefined when calling v1SchoolsSchoolIdProgrammesGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.onlyFreshmenEnabled !== undefined) {
            queryParameters['onlyFreshmenEnabled'] = requestParameters.onlyFreshmenEnabled;
        }

        if (requestParameters.rowOffset !== undefined) {
            queryParameters['rowOffset'] = requestParameters.rowOffset;
        }

        if (requestParameters.fetchSize !== undefined) {
            queryParameters['fetchSize'] = requestParameters.fetchSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/schools/{schoolId}/programmes`.replace(`{${"schoolId"}}`, encodeURIComponent(String(requestParameters.schoolId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProgrammeSimpleDtoFromJSON));
    }

    /**
     * [GET] Get a list of programmes for a school.
     */
    async v1SchoolsSchoolIdProgrammesGet(requestParameters: V1SchoolsSchoolIdProgrammesGetRequest): Promise<Array<ProgrammeSimpleDto>> {
        const response = await this.v1SchoolsSchoolIdProgrammesGetRaw(requestParameters);
        return await response.value();
    }

}
