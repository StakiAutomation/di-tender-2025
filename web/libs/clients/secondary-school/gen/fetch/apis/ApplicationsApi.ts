/* tslint:disable */
/* eslint-disable */
/**
 * MMS Island.is application API
 * API for Island.is
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ApplicationBaseDto,
    ApplicationBaseDtoFromJSON,
    ApplicationBaseDtoToJSON,
    ApplicationIdReturnDto,
    ApplicationIdReturnDtoFromJSON,
    ApplicationIdReturnDtoToJSON,
    ApplicationReturnDto,
    ApplicationReturnDtoFromJSON,
    ApplicationReturnDtoToJSON,
} from '../models';

export interface V1ApplicationsIslandIsApplicationIdDeleteRequest {
    islandIsApplicationId: string;
}

export interface V1ApplicationsIslandIsApplicationIdGetRequest {
    islandIsApplicationId: string;
}

export interface V1ApplicationsIslandIsApplicationIdIdGetRequest {
    islandIsApplicationId: string;
}

export interface V1ApplicationsIslandIsApplicationIdPutRequest {
    islandIsApplicationId: string;
    applicationBaseDto?: ApplicationBaseDto;
}

export interface V1ApplicationsPostRequest {
    applicationBaseDto?: ApplicationBaseDto;
}

/**
 * 
 */
export class ApplicationsApi extends runtime.BaseAPI {

    /**
     * [DELETE] Deletes an application.
     */
    async v1ApplicationsIslandIsApplicationIdDeleteRaw(requestParameters: V1ApplicationsIslandIsApplicationIdDeleteRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.islandIsApplicationId === null || requestParameters.islandIsApplicationId === undefined) {
            throw new runtime.RequiredError('islandIsApplicationId','Required parameter requestParameters.islandIsApplicationId was null or undefined when calling v1ApplicationsIslandIsApplicationIdDelete.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/applications/{islandIsApplicationId}`.replace(`{${"islandIsApplicationId"}}`, encodeURIComponent(String(requestParameters.islandIsApplicationId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * [DELETE] Deletes an application.
     */
    async v1ApplicationsIslandIsApplicationIdDelete(requestParameters: V1ApplicationsIslandIsApplicationIdDeleteRequest): Promise<void> {
        await this.v1ApplicationsIslandIsApplicationIdDeleteRaw(requestParameters);
    }

    /**
     * [GET] Fetch an application.
     */
    async v1ApplicationsIslandIsApplicationIdGetRaw(requestParameters: V1ApplicationsIslandIsApplicationIdGetRequest): Promise<runtime.ApiResponse<ApplicationReturnDto>> {
        if (requestParameters.islandIsApplicationId === null || requestParameters.islandIsApplicationId === undefined) {
            throw new runtime.RequiredError('islandIsApplicationId','Required parameter requestParameters.islandIsApplicationId was null or undefined when calling v1ApplicationsIslandIsApplicationIdGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/applications/{islandIsApplicationId}`.replace(`{${"islandIsApplicationId"}}`, encodeURIComponent(String(requestParameters.islandIsApplicationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationReturnDtoFromJSON(jsonValue));
    }

    /**
     * [GET] Fetch an application.
     */
    async v1ApplicationsIslandIsApplicationIdGet(requestParameters: V1ApplicationsIslandIsApplicationIdGetRequest): Promise<ApplicationReturnDto> {
        const response = await this.v1ApplicationsIslandIsApplicationIdGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * [GET] Fetch an applicationId.
     */
    async v1ApplicationsIslandIsApplicationIdIdGetRaw(requestParameters: V1ApplicationsIslandIsApplicationIdIdGetRequest): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.islandIsApplicationId === null || requestParameters.islandIsApplicationId === undefined) {
            throw new runtime.RequiredError('islandIsApplicationId','Required parameter requestParameters.islandIsApplicationId was null or undefined when calling v1ApplicationsIslandIsApplicationIdIdGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/applications/{islandIsApplicationId}/id`.replace(`{${"islandIsApplicationId"}}`, encodeURIComponent(String(requestParameters.islandIsApplicationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * [GET] Fetch an applicationId.
     */
    async v1ApplicationsIslandIsApplicationIdIdGet(requestParameters: V1ApplicationsIslandIsApplicationIdIdGetRequest): Promise<string> {
        const response = await this.v1ApplicationsIslandIsApplicationIdIdGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * [PUT] Overwrites an existing application
     */
    async v1ApplicationsIslandIsApplicationIdPutRaw(requestParameters: V1ApplicationsIslandIsApplicationIdPutRequest): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.islandIsApplicationId === null || requestParameters.islandIsApplicationId === undefined) {
            throw new runtime.RequiredError('islandIsApplicationId','Required parameter requestParameters.islandIsApplicationId was null or undefined when calling v1ApplicationsIslandIsApplicationIdPut.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/applications/{islandIsApplicationId}`.replace(`{${"islandIsApplicationId"}}`, encodeURIComponent(String(requestParameters.islandIsApplicationId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ApplicationBaseDtoToJSON(requestParameters.applicationBaseDto),
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * [PUT] Overwrites an existing application
     */
    async v1ApplicationsIslandIsApplicationIdPut(requestParameters: V1ApplicationsIslandIsApplicationIdPutRequest): Promise<string> {
        const response = await this.v1ApplicationsIslandIsApplicationIdPutRaw(requestParameters);
        return await response.value();
    }

    /**
     * [POST] Creates a new application.
     */
    async v1ApplicationsPostRaw(requestParameters: V1ApplicationsPostRequest): Promise<runtime.ApiResponse<ApplicationIdReturnDto>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/applications`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApplicationBaseDtoToJSON(requestParameters.applicationBaseDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationIdReturnDtoFromJSON(jsonValue));
    }

    /**
     * [POST] Creates a new application.
     */
    async v1ApplicationsPost(requestParameters: V1ApplicationsPostRequest): Promise<ApplicationIdReturnDto> {
        const response = await this.v1ApplicationsPostRaw(requestParameters);
        return await response.value();
    }

}
