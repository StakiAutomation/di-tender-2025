/* tslint:disable */
/* eslint-disable */
/**
 * MMS Island.is application API
 * API for Island.is
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    GradeDto,
    GradeDtoFromJSON,
    GradeDtoToJSON,
    StudentInfoDto,
    StudentInfoDtoFromJSON,
    StudentInfoDtoToJSON,
} from '../models';

export interface V1StudentsNationalIdElementarygradesGetRequest {
    nationalId: string;
    rowOffset?: number;
    fetchSize?: number;
}

/**
 * 
 */
export class StudentsApi extends runtime.BaseAPI {

    /**
     * [GET] Fetch student information
     */
    async v1StudentsInfoGetRaw(): Promise<runtime.ApiResponse<StudentInfoDto>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/students/info`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => StudentInfoDtoFromJSON(jsonValue));
    }

    /**
     * [GET] Fetch student information
     */
    async v1StudentsInfoGet(): Promise<StudentInfoDto> {
        const response = await this.v1StudentsInfoGetRaw();
        return await response.value();
    }

    /**
     * [GET] Check if student is a freshman
     */
    async v1StudentsIsfreshmanGetRaw(): Promise<runtime.ApiResponse<boolean>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/students/isfreshman`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * [GET] Check if student is a freshman
     */
    async v1StudentsIsfreshmanGet(): Promise<boolean> {
        const response = await this.v1StudentsIsfreshmanGetRaw();
        return await response.value();
    }

    /**
     * [GET] Fetch list of grades by national Id.
     */
    async v1StudentsNationalIdElementarygradesGetRaw(requestParameters: V1StudentsNationalIdElementarygradesGetRequest): Promise<runtime.ApiResponse<Array<GradeDto>>> {
        if (requestParameters.nationalId === null || requestParameters.nationalId === undefined) {
            throw new runtime.RequiredError('nationalId','Required parameter requestParameters.nationalId was null or undefined when calling v1StudentsNationalIdElementarygradesGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.rowOffset !== undefined) {
            queryParameters['rowOffset'] = requestParameters.rowOffset;
        }

        if (requestParameters.fetchSize !== undefined) {
            queryParameters['fetchSize'] = requestParameters.fetchSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/v1/students/{nationalId}/elementarygrades`.replace(`{${"nationalId"}}`, encodeURIComponent(String(requestParameters.nationalId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GradeDtoFromJSON));
    }

    /**
     * [GET] Fetch list of grades by national Id.
     */
    async v1StudentsNationalIdElementarygradesGet(requestParameters: V1StudentsNationalIdElementarygradesGetRequest): Promise<Array<GradeDto>> {
        const response = await this.v1StudentsNationalIdElementarygradesGetRaw(requestParameters);
        return await response.value();
    }

}
