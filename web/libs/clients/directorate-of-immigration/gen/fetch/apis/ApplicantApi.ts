/* tslint:disable */
/* eslint-disable */
/**
 * ST2-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ApplicantEditModel,
    ApplicantEditModelFromJSON,
    ApplicantEditModelToJSON,
    ApplicantNewChildModel,
    ApplicantNewChildModelFromJSON,
    ApplicantNewChildModelToJSON,
    ApplicantNewModel,
    ApplicantNewModelFromJSON,
    ApplicantNewModelToJSON,
    ApplicantViewModel,
    ApplicantViewModelFromJSON,
    ApplicantViewModelToJSON,
    CitizenshipValidity,
    CitizenshipValidityFromJSON,
    CitizenshipValidityToJSON,
} from '../models';

export interface ApiApplicantNewChildPostRequest {
    applicantNewChildModel?: ApplicantNewChildModel;
}

export interface ApiApplicantPatchRequest {
    applicantEditModel?: ApplicantEditModel;
}

export interface ApiApplicantPostRequest {
    applicantNewModel?: ApplicantNewModel;
}

/**
 * 
 */
export class ApplicantApi extends runtime.BaseAPI {

    /**
     */
    async apiApplicantGetCitizenshipValidityGetRaw(): Promise<runtime.ApiResponse<CitizenshipValidity>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Applicant/GetCitizenshipValidity`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CitizenshipValidityFromJSON(jsonValue));
    }

    /**
     */
    async apiApplicantGetCitizenshipValidityGet(): Promise<CitizenshipValidity> {
        const response = await this.apiApplicantGetCitizenshipValidityGetRaw();
        return await response.value();
    }

    /**
     */
    async apiApplicantGetGetRaw(): Promise<runtime.ApiResponse<ApplicantViewModel>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Applicant/Get`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplicantViewModelFromJSON(jsonValue));
    }

    /**
     */
    async apiApplicantGetGet(): Promise<ApplicantViewModel> {
        const response = await this.apiApplicantGetGetRaw();
        return await response.value();
    }

    /**
     */
    async apiApplicantGetTokenSSNRGetRaw(): Promise<runtime.ApiResponse<string>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Applicant/GetTokenSSNR`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async apiApplicantGetTokenSSNRGet(): Promise<string> {
        const response = await this.apiApplicantGetTokenSSNRGetRaw();
        return await response.value();
    }

    /**
     */
    async apiApplicantNewChildPostRaw(requestParameters: ApiApplicantNewChildPostRequest): Promise<runtime.ApiResponse<string>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Applicant/NewChild`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApplicantNewChildModelToJSON(requestParameters.applicantNewChildModel),
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async apiApplicantNewChildPost(requestParameters: ApiApplicantNewChildPostRequest): Promise<string> {
        const response = await this.apiApplicantNewChildPostRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiApplicantPatchRaw(requestParameters: ApiApplicantPatchRequest): Promise<runtime.ApiResponse<string>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Applicant`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ApplicantEditModelToJSON(requestParameters.applicantEditModel),
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async apiApplicantPatch(requestParameters: ApiApplicantPatchRequest): Promise<string> {
        const response = await this.apiApplicantPatchRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiApplicantPostRaw(requestParameters: ApiApplicantPostRequest): Promise<runtime.ApiResponse<string>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Applicant`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApplicantNewModelToJSON(requestParameters.applicantNewModel),
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async apiApplicantPost(requestParameters: ApiApplicantPostRequest): Promise<string> {
        const response = await this.apiApplicantPostRaw(requestParameters);
        return await response.value();
    }

}
