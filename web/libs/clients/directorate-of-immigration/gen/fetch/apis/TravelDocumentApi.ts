/* tslint:disable */
/* eslint-disable */
/**
 * ST2-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    TravelDocumentNewModel,
    TravelDocumentNewModelFromJSON,
    TravelDocumentNewModelToJSON,
    TravelDocumentViewModel,
    TravelDocumentViewModelFromJSON,
    TravelDocumentViewModelToJSON,
} from '../models';

export interface ApiTravelDocumentApplicationIdPostRequest {
    applicationId: string;
    travelDocumentNewModel?: TravelDocumentNewModel;
}

export interface ApiTravelDocumentGetAllApplicationIdGetRequest {
    applicationId: string;
}

/**
 * 
 */
export class TravelDocumentApi extends runtime.BaseAPI {

    /**
     */
    async apiTravelDocumentApplicationIdPostRaw(requestParameters: ApiTravelDocumentApplicationIdPostRequest): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.applicationId === null || requestParameters.applicationId === undefined) {
            throw new runtime.RequiredError('applicationId','Required parameter requestParameters.applicationId was null or undefined when calling apiTravelDocumentApplicationIdPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/TravelDocument/{applicationId}`.replace(`{${"applicationId"}}`, encodeURIComponent(String(requestParameters.applicationId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TravelDocumentNewModelToJSON(requestParameters.travelDocumentNewModel),
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async apiTravelDocumentApplicationIdPost(requestParameters: ApiTravelDocumentApplicationIdPostRequest): Promise<string> {
        const response = await this.apiTravelDocumentApplicationIdPostRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiTravelDocumentGetAllApplicationIdGetRaw(requestParameters: ApiTravelDocumentGetAllApplicationIdGetRequest): Promise<runtime.ApiResponse<Array<TravelDocumentViewModel>>> {
        if (requestParameters.applicationId === null || requestParameters.applicationId === undefined) {
            throw new runtime.RequiredError('applicationId','Required parameter requestParameters.applicationId was null or undefined when calling apiTravelDocumentGetAllApplicationIdGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/TravelDocument/GetAll/{applicationId}`.replace(`{${"applicationId"}}`, encodeURIComponent(String(requestParameters.applicationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TravelDocumentViewModelFromJSON));
    }

    /**
     */
    async apiTravelDocumentGetAllApplicationIdGet(requestParameters: ApiTravelDocumentGetAllApplicationIdGetRequest): Promise<Array<TravelDocumentViewModel>> {
        const response = await this.apiTravelDocumentGetAllApplicationIdGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiTravelDocumentGetAllGetRaw(): Promise<runtime.ApiResponse<Array<TravelDocumentViewModel>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/TravelDocument/GetAll`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TravelDocumentViewModelFromJSON));
    }

    /**
     */
    async apiTravelDocumentGetAllGet(): Promise<Array<TravelDocumentViewModel>> {
        const response = await this.apiTravelDocumentGetAllGetRaw();
        return await response.value();
    }

}
