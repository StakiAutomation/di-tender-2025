/* tslint:disable */
/* eslint-disable */
/**
 * ST2-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ApplicationCitizenshipChildCompleteNewModel,
    ApplicationCitizenshipChildCompleteNewModelFromJSON,
    ApplicationCitizenshipChildCompleteNewModelToJSON,
    ApplicationCitizenshipCompleteNewModel,
    ApplicationCitizenshipCompleteNewModelFromJSON,
    ApplicationCitizenshipCompleteNewModelToJSON,
    ApplicationCitizienshipNewModel,
    ApplicationCitizienshipNewModelFromJSON,
    ApplicationCitizienshipNewModelToJSON,
    ApplicationNewModel,
    ApplicationNewModelFromJSON,
    ApplicationNewModelToJSON,
    ApplicationViewCompleteModel,
    ApplicationViewCompleteModelFromJSON,
    ApplicationViewCompleteModelToJSON,
    ApplicationViewModel,
    ApplicationViewModelFromJSON,
    ApplicationViewModelToJSON,
} from '../models';

export interface ApiApplicationApplicationIdGetRequest {
    applicationId: string;
}

export interface ApiApplicationCitizenshipChildCompletePostRequest {
    applicationCitizenshipChildCompleteNewModel?: ApplicationCitizenshipChildCompleteNewModel;
}

export interface ApiApplicationCitizenshipCompletePostRequest {
    applicationCitizenshipCompleteNewModel?: ApplicationCitizenshipCompleteNewModel;
}

export interface ApiApplicationCitizenshipPostRequest {
    applicationCitizienshipNewModel?: ApplicationCitizienshipNewModel;
}

export interface ApiApplicationCitizenshipSsnrPostRequest {
    ssnr: string;
    applicationCitizienshipNewModel?: ApplicationCitizienshipNewModel;
}

export interface ApiApplicationConfirmApplicationIdPatchRequest {
    applicationId: string;
}

export interface ApiApplicationGetAllSsnrGetRequest {
    ssnr: string;
}

export interface ApiApplicationPostRequest {
    applicationNewModel?: ApplicationNewModel;
}

/**
 * 
 */
export class ApplicationApi extends runtime.BaseAPI {

    /**
     */
    async apiApplicationApplicationIdGetRaw(requestParameters: ApiApplicationApplicationIdGetRequest): Promise<runtime.ApiResponse<ApplicationViewCompleteModel>> {
        if (requestParameters.applicationId === null || requestParameters.applicationId === undefined) {
            throw new runtime.RequiredError('applicationId','Required parameter requestParameters.applicationId was null or undefined when calling apiApplicationApplicationIdGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Application/{applicationId}`.replace(`{${"applicationId"}}`, encodeURIComponent(String(requestParameters.applicationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationViewCompleteModelFromJSON(jsonValue));
    }

    /**
     */
    async apiApplicationApplicationIdGet(requestParameters: ApiApplicationApplicationIdGetRequest): Promise<ApplicationViewCompleteModel> {
        const response = await this.apiApplicationApplicationIdGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiApplicationCitizenshipChildCompletePostRaw(requestParameters: ApiApplicationCitizenshipChildCompletePostRequest): Promise<runtime.ApiResponse<string>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Application/CitizenshipChildComplete`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApplicationCitizenshipChildCompleteNewModelToJSON(requestParameters.applicationCitizenshipChildCompleteNewModel),
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async apiApplicationCitizenshipChildCompletePost(requestParameters: ApiApplicationCitizenshipChildCompletePostRequest): Promise<string> {
        const response = await this.apiApplicationCitizenshipChildCompletePostRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiApplicationCitizenshipCompletePostRaw(requestParameters: ApiApplicationCitizenshipCompletePostRequest): Promise<runtime.ApiResponse<string>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Application/CitizenshipComplete`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApplicationCitizenshipCompleteNewModelToJSON(requestParameters.applicationCitizenshipCompleteNewModel),
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async apiApplicationCitizenshipCompletePost(requestParameters: ApiApplicationCitizenshipCompletePostRequest): Promise<string> {
        const response = await this.apiApplicationCitizenshipCompletePostRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiApplicationCitizenshipPostRaw(requestParameters: ApiApplicationCitizenshipPostRequest): Promise<runtime.ApiResponse<string>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Application/Citizenship`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApplicationCitizienshipNewModelToJSON(requestParameters.applicationCitizienshipNewModel),
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async apiApplicationCitizenshipPost(requestParameters: ApiApplicationCitizenshipPostRequest): Promise<string> {
        const response = await this.apiApplicationCitizenshipPostRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiApplicationCitizenshipSsnrPostRaw(requestParameters: ApiApplicationCitizenshipSsnrPostRequest): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.ssnr === null || requestParameters.ssnr === undefined) {
            throw new runtime.RequiredError('ssnr','Required parameter requestParameters.ssnr was null or undefined when calling apiApplicationCitizenshipSsnrPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Application/Citizenship/{ssnr}`.replace(`{${"ssnr"}}`, encodeURIComponent(String(requestParameters.ssnr))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApplicationCitizienshipNewModelToJSON(requestParameters.applicationCitizienshipNewModel),
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async apiApplicationCitizenshipSsnrPost(requestParameters: ApiApplicationCitizenshipSsnrPostRequest): Promise<string> {
        const response = await this.apiApplicationCitizenshipSsnrPostRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiApplicationConfirmApplicationIdPatchRaw(requestParameters: ApiApplicationConfirmApplicationIdPatchRequest): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.applicationId === null || requestParameters.applicationId === undefined) {
            throw new runtime.RequiredError('applicationId','Required parameter requestParameters.applicationId was null or undefined when calling apiApplicationConfirmApplicationIdPatch.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Application/Confirm/{applicationId}`.replace(`{${"applicationId"}}`, encodeURIComponent(String(requestParameters.applicationId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async apiApplicationConfirmApplicationIdPatch(requestParameters: ApiApplicationConfirmApplicationIdPatchRequest): Promise<boolean> {
        const response = await this.apiApplicationConfirmApplicationIdPatchRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiApplicationGetAllGetRaw(): Promise<runtime.ApiResponse<Array<ApplicationViewModel>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Application/GetAll`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ApplicationViewModelFromJSON));
    }

    /**
     */
    async apiApplicationGetAllGet(): Promise<Array<ApplicationViewModel>> {
        const response = await this.apiApplicationGetAllGetRaw();
        return await response.value();
    }

    /**
     */
    async apiApplicationGetAllSsnrGetRaw(requestParameters: ApiApplicationGetAllSsnrGetRequest): Promise<runtime.ApiResponse<Array<ApplicationViewModel>>> {
        if (requestParameters.ssnr === null || requestParameters.ssnr === undefined) {
            throw new runtime.RequiredError('ssnr','Required parameter requestParameters.ssnr was null or undefined when calling apiApplicationGetAllSsnrGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Application/GetAll/{ssnr}`.replace(`{${"ssnr"}}`, encodeURIComponent(String(requestParameters.ssnr))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ApplicationViewModelFromJSON));
    }

    /**
     */
    async apiApplicationGetAllSsnrGet(requestParameters: ApiApplicationGetAllSsnrGetRequest): Promise<Array<ApplicationViewModel>> {
        const response = await this.apiApplicationGetAllSsnrGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiApplicationPostRaw(requestParameters: ApiApplicationPostRequest): Promise<runtime.ApiResponse<string>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Application`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApplicationNewModelToJSON(requestParameters.applicationNewModel),
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async apiApplicationPost(requestParameters: ApiApplicationPostRequest): Promise<string> {
        const response = await this.apiApplicationPostRaw(requestParameters);
        return await response.value();
    }

}
