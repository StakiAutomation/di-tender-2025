/* tslint:disable */
/* eslint-disable */
/**
 * ST2-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ClassificationDetailViewModel,
    ClassificationDetailViewModelFromJSON,
    ClassificationDetailViewModelToJSON,
    ClassificationTypeViewModel,
    ClassificationTypeViewModelFromJSON,
    ClassificationTypeViewModelToJSON,
    ClassificationViewModel,
    ClassificationViewModelFromJSON,
    ClassificationViewModelToJSON,
} from '../models';

export interface ApiResidencePermitClassificationClassificationDetailClassificationTypeIdGetRequest {
    classificationTypeId: string;
}

export interface ApiResidencePermitClassificationClassificationTypeClassificationIdGetRequest {
    classificationId: string;
}

/**
 * 
 */
export class ResidencePermitClassificationApi extends runtime.BaseAPI {

    /**
     */
    async apiResidencePermitClassificationClassificationDetailClassificationTypeIdGetRaw(requestParameters: ApiResidencePermitClassificationClassificationDetailClassificationTypeIdGetRequest): Promise<runtime.ApiResponse<Array<ClassificationDetailViewModel>>> {
        if (requestParameters.classificationTypeId === null || requestParameters.classificationTypeId === undefined) {
            throw new runtime.RequiredError('classificationTypeId','Required parameter requestParameters.classificationTypeId was null or undefined when calling apiResidencePermitClassificationClassificationDetailClassificationTypeIdGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/ResidencePermitClassification/ClassificationDetail/{classificationTypeId}`.replace(`{${"classificationTypeId"}}`, encodeURIComponent(String(requestParameters.classificationTypeId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ClassificationDetailViewModelFromJSON));
    }

    /**
     */
    async apiResidencePermitClassificationClassificationDetailClassificationTypeIdGet(requestParameters: ApiResidencePermitClassificationClassificationDetailClassificationTypeIdGetRequest): Promise<Array<ClassificationDetailViewModel>> {
        const response = await this.apiResidencePermitClassificationClassificationDetailClassificationTypeIdGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiResidencePermitClassificationClassificationTypeClassificationIdGetRaw(requestParameters: ApiResidencePermitClassificationClassificationTypeClassificationIdGetRequest): Promise<runtime.ApiResponse<Array<ClassificationTypeViewModel>>> {
        if (requestParameters.classificationId === null || requestParameters.classificationId === undefined) {
            throw new runtime.RequiredError('classificationId','Required parameter requestParameters.classificationId was null or undefined when calling apiResidencePermitClassificationClassificationTypeClassificationIdGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/ResidencePermitClassification/ClassificationType/{classificationId}`.replace(`{${"classificationId"}}`, encodeURIComponent(String(requestParameters.classificationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ClassificationTypeViewModelFromJSON));
    }

    /**
     */
    async apiResidencePermitClassificationClassificationTypeClassificationIdGet(requestParameters: ApiResidencePermitClassificationClassificationTypeClassificationIdGetRequest): Promise<Array<ClassificationTypeViewModel>> {
        const response = await this.apiResidencePermitClassificationClassificationTypeClassificationIdGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiResidencePermitClassificationGetRaw(): Promise<runtime.ApiResponse<Array<ClassificationViewModel>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/ResidencePermitClassification`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ClassificationViewModelFromJSON));
    }

    /**
     */
    async apiResidencePermitClassificationGet(): Promise<Array<ClassificationViewModel>> {
        const response = await this.apiResidencePermitClassificationGetRaw();
        return await response.value();
    }

}
