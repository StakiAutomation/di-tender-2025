/* tslint:disable */
/* eslint-disable */
/**
 * ST2-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ApplicationAttachmentArrayFileLinkNewModel,
    ApplicationAttachmentArrayFileLinkNewModelFromJSON,
    ApplicationAttachmentArrayFileLinkNewModelToJSON,
    ApplicationAttachmentArrayNewModel,
    ApplicationAttachmentArrayNewModelFromJSON,
    ApplicationAttachmentArrayNewModelToJSON,
    ApplicationAttachmentFileLinkNewModel,
    ApplicationAttachmentFileLinkNewModelFromJSON,
    ApplicationAttachmentFileLinkNewModelToJSON,
    ApplicationAttachmentItem,
    ApplicationAttachmentItemFromJSON,
    ApplicationAttachmentItemToJSON,
    ApplicationAttachmentItemContents,
    ApplicationAttachmentItemContentsFromJSON,
    ApplicationAttachmentItemContentsToJSON,
    ApplicationAttachmentNewModel,
    ApplicationAttachmentNewModelFromJSON,
    ApplicationAttachmentNewModelToJSON,
    ProblemDetails,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
} from '../models';

export interface ApiApplicationAttachmentApplicationIdPostRequest {
    applicationId: string;
    applicationAttachmentNewModel?: ApplicationAttachmentNewModel;
}

export interface ApiApplicationAttachmentDownloadFileIdGetRequest {
    id: string;
}

export interface ApiApplicationAttachmentFileLinkApplicationIdPostRequest {
    applicationId: string;
    applicationAttachmentFileLinkNewModel?: ApplicationAttachmentFileLinkNewModel;
}

export interface ApiApplicationAttachmentFileLinkNewItemsApplicationIdPostRequest {
    applicationId: string;
    applicationAttachmentArrayFileLinkNewModel?: ApplicationAttachmentArrayFileLinkNewModel;
}

export interface ApiApplicationAttachmentGetFilesApplicationIdGetRequest {
    applicationId: string;
}

export interface ApiApplicationAttachmentNewItemsApplicationIdPostRequest {
    applicationId: string;
    applicationAttachmentArrayNewModel?: ApplicationAttachmentArrayNewModel;
}

/**
 * 
 */
export class ApplicationAttachmentApi extends runtime.BaseAPI {

    /**
     * Allowable mime types: image/jpeg, application/pdf, image/jpg
     */
    async apiApplicationAttachmentApplicationIdPostRaw(requestParameters: ApiApplicationAttachmentApplicationIdPostRequest): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.applicationId === null || requestParameters.applicationId === undefined) {
            throw new runtime.RequiredError('applicationId','Required parameter requestParameters.applicationId was null or undefined when calling apiApplicationAttachmentApplicationIdPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/ApplicationAttachment/{applicationId}`.replace(`{${"applicationId"}}`, encodeURIComponent(String(requestParameters.applicationId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApplicationAttachmentNewModelToJSON(requestParameters.applicationAttachmentNewModel),
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Allowable mime types: image/jpeg, application/pdf, image/jpg
     */
    async apiApplicationAttachmentApplicationIdPost(requestParameters: ApiApplicationAttachmentApplicationIdPostRequest): Promise<string> {
        const response = await this.apiApplicationAttachmentApplicationIdPostRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiApplicationAttachmentDownloadFileIdGetRaw(requestParameters: ApiApplicationAttachmentDownloadFileIdGetRequest): Promise<runtime.ApiResponse<ApplicationAttachmentItemContents>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiApplicationAttachmentDownloadFileIdGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/ApplicationAttachment/DownloadFile/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationAttachmentItemContentsFromJSON(jsonValue));
    }

    /**
     */
    async apiApplicationAttachmentDownloadFileIdGet(requestParameters: ApiApplicationAttachmentDownloadFileIdGetRequest): Promise<ApplicationAttachmentItemContents> {
        const response = await this.apiApplicationAttachmentDownloadFileIdGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiApplicationAttachmentFileLinkApplicationIdPostRaw(requestParameters: ApiApplicationAttachmentFileLinkApplicationIdPostRequest): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.applicationId === null || requestParameters.applicationId === undefined) {
            throw new runtime.RequiredError('applicationId','Required parameter requestParameters.applicationId was null or undefined when calling apiApplicationAttachmentFileLinkApplicationIdPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/ApplicationAttachment/FileLink/{applicationId}`.replace(`{${"applicationId"}}`, encodeURIComponent(String(requestParameters.applicationId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApplicationAttachmentFileLinkNewModelToJSON(requestParameters.applicationAttachmentFileLinkNewModel),
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async apiApplicationAttachmentFileLinkApplicationIdPost(requestParameters: ApiApplicationAttachmentFileLinkApplicationIdPostRequest): Promise<string> {
        const response = await this.apiApplicationAttachmentFileLinkApplicationIdPostRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiApplicationAttachmentFileLinkNewItemsApplicationIdPostRaw(requestParameters: ApiApplicationAttachmentFileLinkNewItemsApplicationIdPostRequest): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.applicationId === null || requestParameters.applicationId === undefined) {
            throw new runtime.RequiredError('applicationId','Required parameter requestParameters.applicationId was null or undefined when calling apiApplicationAttachmentFileLinkNewItemsApplicationIdPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/ApplicationAttachment/FileLink/NewItems/{applicationId}`.replace(`{${"applicationId"}}`, encodeURIComponent(String(requestParameters.applicationId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApplicationAttachmentArrayFileLinkNewModelToJSON(requestParameters.applicationAttachmentArrayFileLinkNewModel),
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async apiApplicationAttachmentFileLinkNewItemsApplicationIdPost(requestParameters: ApiApplicationAttachmentFileLinkNewItemsApplicationIdPostRequest): Promise<string> {
        const response = await this.apiApplicationAttachmentFileLinkNewItemsApplicationIdPostRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiApplicationAttachmentGetFilesApplicationIdGetRaw(requestParameters: ApiApplicationAttachmentGetFilesApplicationIdGetRequest): Promise<runtime.ApiResponse<Array<ApplicationAttachmentItem>>> {
        if (requestParameters.applicationId === null || requestParameters.applicationId === undefined) {
            throw new runtime.RequiredError('applicationId','Required parameter requestParameters.applicationId was null or undefined when calling apiApplicationAttachmentGetFilesApplicationIdGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/ApplicationAttachment/GetFiles/{applicationId}`.replace(`{${"applicationId"}}`, encodeURIComponent(String(requestParameters.applicationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ApplicationAttachmentItemFromJSON));
    }

    /**
     */
    async apiApplicationAttachmentGetFilesApplicationIdGet(requestParameters: ApiApplicationAttachmentGetFilesApplicationIdGetRequest): Promise<Array<ApplicationAttachmentItem>> {
        const response = await this.apiApplicationAttachmentGetFilesApplicationIdGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Allowable mime types: image/jpeg, application/pdf, image/jpg
     */
    async apiApplicationAttachmentNewItemsApplicationIdPostRaw(requestParameters: ApiApplicationAttachmentNewItemsApplicationIdPostRequest): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.applicationId === null || requestParameters.applicationId === undefined) {
            throw new runtime.RequiredError('applicationId','Required parameter requestParameters.applicationId was null or undefined when calling apiApplicationAttachmentNewItemsApplicationIdPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/ApplicationAttachment/NewItems/{applicationId}`.replace(`{${"applicationId"}}`, encodeURIComponent(String(requestParameters.applicationId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApplicationAttachmentArrayNewModelToJSON(requestParameters.applicationAttachmentArrayNewModel),
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Allowable mime types: image/jpeg, application/pdf, image/jpg
     */
    async apiApplicationAttachmentNewItemsApplicationIdPost(requestParameters: ApiApplicationAttachmentNewItemsApplicationIdPostRequest): Promise<string> {
        const response = await this.apiApplicationAttachmentNewItemsApplicationIdPostRaw(requestParameters);
        return await response.value();
    }

}
