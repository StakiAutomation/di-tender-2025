/* tslint:disable */
/* eslint-disable */
/**
 * ST2-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CriminalRecordNewModel,
    CriminalRecordNewModelFromJSON,
    CriminalRecordNewModelToJSON,
    CriminalRecordViewModel,
    CriminalRecordViewModelFromJSON,
    CriminalRecordViewModelToJSON,
} from '../models';

export interface ApiCriminalRecordPostRequest {
    criminalRecordNewModel?: CriminalRecordNewModel;
}

/**
 * 
 */
export class CriminalRecordApi extends runtime.BaseAPI {

    /**
     */
    async apiCriminalRecordGetAllGetRaw(): Promise<runtime.ApiResponse<Array<CriminalRecordViewModel>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/CriminalRecord/GetAll`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CriminalRecordViewModelFromJSON));
    }

    /**
     */
    async apiCriminalRecordGetAllGet(): Promise<Array<CriminalRecordViewModel>> {
        const response = await this.apiCriminalRecordGetAllGetRaw();
        return await response.value();
    }

    /**
     */
    async apiCriminalRecordPostRaw(requestParameters: ApiCriminalRecordPostRequest): Promise<runtime.ApiResponse<string>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/CriminalRecord`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CriminalRecordNewModelToJSON(requestParameters.criminalRecordNewModel),
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async apiCriminalRecordPost(requestParameters: ApiCriminalRecordPostRequest): Promise<string> {
        const response = await this.apiCriminalRecordPostRaw(requestParameters);
        return await response.value();
    }

}
