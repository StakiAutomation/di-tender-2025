/* tslint:disable */
/* eslint-disable */
/**
 * ST2-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ApplicationViewModel,
    ApplicationViewModelFromJSON,
    ApplicationViewModelToJSON,
    StaticDataViewModel,
    StaticDataViewModelFromJSON,
    StaticDataViewModelToJSON,
} from '../models';

export interface ApiStaticDataStaticDataIdGetRequest {
    staticDataId: string;
}

/**
 * 
 */
export class StaticDataApi extends runtime.BaseAPI {

    /**
     */
    async apiStaticDataGetAllGetRaw(): Promise<runtime.ApiResponse<Array<StaticDataViewModel>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/StaticData/GetAll`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StaticDataViewModelFromJSON));
    }

    /**
     */
    async apiStaticDataGetAllGet(): Promise<Array<StaticDataViewModel>> {
        const response = await this.apiStaticDataGetAllGetRaw();
        return await response.value();
    }

    /**
     */
    async apiStaticDataStaticDataIdGetRaw(requestParameters: ApiStaticDataStaticDataIdGetRequest): Promise<runtime.ApiResponse<ApplicationViewModel>> {
        if (requestParameters.staticDataId === null || requestParameters.staticDataId === undefined) {
            throw new runtime.RequiredError('staticDataId','Required parameter requestParameters.staticDataId was null or undefined when calling apiStaticDataStaticDataIdGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/StaticData/{staticDataId}`.replace(`{${"staticDataId"}}`, encodeURIComponent(String(requestParameters.staticDataId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationViewModelFromJSON(jsonValue));
    }

    /**
     */
    async apiStaticDataStaticDataIdGet(requestParameters: ApiStaticDataStaticDataIdGetRequest): Promise<ApplicationViewModel> {
        const response = await this.apiStaticDataStaticDataIdGetRaw(requestParameters);
        return await response.value();
    }

}
