/* tslint:disable */
/* eslint-disable */
/**
 * ST2-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    LookupType,
    LookupTypeFromJSON,
    LookupTypeToJSON,
    OptionSetItem,
    OptionSetItemFromJSON,
    OptionSetItemToJSON,
} from '../models';

export interface ApiOptionSetGetSingleLookupTypeIdGetRequest {
    lookupType: LookupType;
    id: string;
}

export interface ApiOptionSetLookupTypeGetRequest {
    lookupType: LookupType;
}

/**
 * 
 */
export class OptionSetApi extends runtime.BaseAPI {

    /**
     */
    async apiOptionSetGetSingleLookupTypeIdGetRaw(requestParameters: ApiOptionSetGetSingleLookupTypeIdGetRequest): Promise<runtime.ApiResponse<OptionSetItem>> {
        if (requestParameters.lookupType === null || requestParameters.lookupType === undefined) {
            throw new runtime.RequiredError('lookupType','Required parameter requestParameters.lookupType was null or undefined when calling apiOptionSetGetSingleLookupTypeIdGet.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiOptionSetGetSingleLookupTypeIdGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/OptionSet/GetSingle/{lookupType}/{id}`.replace(`{${"lookupType"}}`, encodeURIComponent(String(requestParameters.lookupType))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OptionSetItemFromJSON(jsonValue));
    }

    /**
     */
    async apiOptionSetGetSingleLookupTypeIdGet(requestParameters: ApiOptionSetGetSingleLookupTypeIdGetRequest): Promise<OptionSetItem> {
        const response = await this.apiOptionSetGetSingleLookupTypeIdGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiOptionSetLookupTypeGetRaw(requestParameters: ApiOptionSetLookupTypeGetRequest): Promise<runtime.ApiResponse<Array<OptionSetItem>>> {
        if (requestParameters.lookupType === null || requestParameters.lookupType === undefined) {
            throw new runtime.RequiredError('lookupType','Required parameter requestParameters.lookupType was null or undefined when calling apiOptionSetLookupTypeGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/OptionSet/{lookupType}`.replace(`{${"lookupType"}}`, encodeURIComponent(String(requestParameters.lookupType))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OptionSetItemFromJSON));
    }

    /**
     */
    async apiOptionSetLookupTypeGet(requestParameters: ApiOptionSetLookupTypeGetRequest): Promise<Array<OptionSetItem>> {
        const response = await this.apiOptionSetLookupTypeGetRaw(requestParameters);
        return await response.value();
    }

}
