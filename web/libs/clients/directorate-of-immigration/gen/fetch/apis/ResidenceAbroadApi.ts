/* tslint:disable */
/* eslint-disable */
/**
 * ST2-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ResidenceAbroadNewModel,
    ResidenceAbroadNewModelFromJSON,
    ResidenceAbroadNewModelToJSON,
    ResidenceAbroadViewModel,
    ResidenceAbroadViewModelFromJSON,
    ResidenceAbroadViewModelToJSON,
} from '../models';

export interface ApiResidenceAbroadApplicationIdPostRequest {
    applicationId: string;
    residenceAbroadNewModel?: ResidenceAbroadNewModel;
}

export interface ApiResidenceAbroadGetAllApplicationIdGetRequest {
    applicationId: string;
}

/**
 * 
 */
export class ResidenceAbroadApi extends runtime.BaseAPI {

    /**
     */
    async apiResidenceAbroadApplicationIdPostRaw(requestParameters: ApiResidenceAbroadApplicationIdPostRequest): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.applicationId === null || requestParameters.applicationId === undefined) {
            throw new runtime.RequiredError('applicationId','Required parameter requestParameters.applicationId was null or undefined when calling apiResidenceAbroadApplicationIdPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/ResidenceAbroad/{applicationId}`.replace(`{${"applicationId"}}`, encodeURIComponent(String(requestParameters.applicationId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ResidenceAbroadNewModelToJSON(requestParameters.residenceAbroadNewModel),
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async apiResidenceAbroadApplicationIdPost(requestParameters: ApiResidenceAbroadApplicationIdPostRequest): Promise<string> {
        const response = await this.apiResidenceAbroadApplicationIdPostRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiResidenceAbroadGetAllApplicationIdGetRaw(requestParameters: ApiResidenceAbroadGetAllApplicationIdGetRequest): Promise<runtime.ApiResponse<Array<ResidenceAbroadViewModel>>> {
        if (requestParameters.applicationId === null || requestParameters.applicationId === undefined) {
            throw new runtime.RequiredError('applicationId','Required parameter requestParameters.applicationId was null or undefined when calling apiResidenceAbroadGetAllApplicationIdGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/ResidenceAbroad/GetAll/{applicationId}`.replace(`{${"applicationId"}}`, encodeURIComponent(String(requestParameters.applicationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ResidenceAbroadViewModelFromJSON));
    }

    /**
     */
    async apiResidenceAbroadGetAllApplicationIdGet(requestParameters: ApiResidenceAbroadGetAllApplicationIdGetRequest): Promise<Array<ResidenceAbroadViewModel>> {
        const response = await this.apiResidenceAbroadGetAllApplicationIdGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiResidenceAbroadGetAllGetRaw(): Promise<runtime.ApiResponse<Array<ResidenceAbroadViewModel>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/ResidenceAbroad/GetAll`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ResidenceAbroadViewModelFromJSON));
    }

    /**
     */
    async apiResidenceAbroadGetAllGet(): Promise<Array<ResidenceAbroadViewModel>> {
        const response = await this.apiResidenceAbroadGetAllGetRaw();
        return await response.value();
    }

}
