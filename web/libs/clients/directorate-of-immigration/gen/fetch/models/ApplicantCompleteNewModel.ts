/* tslint:disable */
/* eslint-disable */
/**
 * ST2-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    CountryOfResidenceNewModel,
    CountryOfResidenceNewModelFromJSON,
    CountryOfResidenceNewModelFromJSONTyped,
    CountryOfResidenceNewModelToJSON,
} from './';

/**
 * 
 * @export
 * @interface ApplicantCompleteNewModel
 */
export interface ApplicantCompleteNewModel {
    /**
     * 
     * @type {string}
     * @memberof ApplicantCompleteNewModel
     */
    icelandicIDNO?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApplicantCompleteNewModel
     */
    readonly icelandicIDNOWithHyphen?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApplicantCompleteNewModel
     */
    givenName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApplicantCompleteNewModel
     */
    surName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApplicantCompleteNewModel
     */
    emailAddress?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApplicantCompleteNewModel
     */
    telephone?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ApplicantCompleteNewModel
     */
    addressCity?: string | null;
    /**
     * 
     * @type {Array<CountryOfResidenceNewModel>}
     * @memberof ApplicantCompleteNewModel
     */
    countryOfResidence?: Array<CountryOfResidenceNewModel> | null;
}

export function ApplicantCompleteNewModelFromJSON(json: any): ApplicantCompleteNewModel {
    return ApplicantCompleteNewModelFromJSONTyped(json, false);
}

export function ApplicantCompleteNewModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): ApplicantCompleteNewModel {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'icelandicIDNO': !exists(json, 'icelandicIDNO') ? undefined : json['icelandicIDNO'],
        'icelandicIDNOWithHyphen': !exists(json, 'icelandicIDNOWithHyphen') ? undefined : json['icelandicIDNOWithHyphen'],
        'givenName': !exists(json, 'givenName') ? undefined : json['givenName'],
        'surName': !exists(json, 'surName') ? undefined : json['surName'],
        'emailAddress': !exists(json, 'emailAddress') ? undefined : json['emailAddress'],
        'telephone': !exists(json, 'telephone') ? undefined : json['telephone'],
        'addressCity': !exists(json, 'addressCity') ? undefined : json['addressCity'],
        'countryOfResidence': !exists(json, 'countryOfResidence') ? undefined : (json['countryOfResidence'] === null ? null : (json['countryOfResidence'] as Array<any>).map(CountryOfResidenceNewModelFromJSON)),
    };
}

export function ApplicantCompleteNewModelToJSON(value?: ApplicantCompleteNewModel | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'icelandicIDNO': value.icelandicIDNO,
        'givenName': value.givenName,
        'surName': value.surName,
        'emailAddress': value.emailAddress,
        'telephone': value.telephone,
        'addressCity': value.addressCity,
        'countryOfResidence': value.countryOfResidence === undefined ? undefined : (value.countryOfResidence === null ? null : (value.countryOfResidence as Array<any>).map(CountryOfResidenceNewModelToJSON)),
    };
}


