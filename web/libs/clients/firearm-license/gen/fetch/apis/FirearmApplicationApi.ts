/* tslint:disable */
/* eslint-disable */
/**
 * IslandISxRoadAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    FirearmPropertyList,
    FirearmPropertyListFromJSON,
    FirearmPropertyListToJSON,
    LicenseInfo,
    LicenseInfoFromJSON,
    LicenseInfoToJSON,
} from '../models';

export interface ApiFirearmApplicationWithAPIKeyLicenseInfoSsnGetRequest {
    ssn: string | null;
}

export interface ApiFirearmApplicationWithAPIKeyPropertyInfoSsnGetRequest {
    ssn: string | null;
}

/**
 * 
 */
export class FirearmApplicationApi extends runtime.BaseAPI {

    /**
     */
    async apiFirearmApplicationCategoriesGetRaw(): Promise<runtime.ApiResponse<{ [key: string]: string; }>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/FirearmApplication/Categories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async apiFirearmApplicationCategoriesGet(): Promise<{ [key: string]: string; }> {
        const response = await this.apiFirearmApplicationCategoriesGetRaw();
        return await response.value();
    }

    /**
     */
    async apiFirearmApplicationLicenseInfoGetRaw(): Promise<runtime.ApiResponse<LicenseInfo>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/FirearmApplication/LicenseInfo`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => LicenseInfoFromJSON(jsonValue));
    }

    /**
     */
    async apiFirearmApplicationLicenseInfoGet(): Promise<LicenseInfo> {
        const response = await this.apiFirearmApplicationLicenseInfoGetRaw();
        return await response.value();
    }

    /**
     */
    async apiFirearmApplicationPropertyInfoGetRaw(): Promise<runtime.ApiResponse<FirearmPropertyList>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/FirearmApplication/PropertyInfo`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => FirearmPropertyListFromJSON(jsonValue));
    }

    /**
     */
    async apiFirearmApplicationPropertyInfoGet(): Promise<FirearmPropertyList> {
        const response = await this.apiFirearmApplicationPropertyInfoGetRaw();
        return await response.value();
    }

    /**
     */
    async apiFirearmApplicationWithAPIKeyLicenseInfoSsnGetRaw(requestParameters: ApiFirearmApplicationWithAPIKeyLicenseInfoSsnGetRequest): Promise<runtime.ApiResponse<LicenseInfo>> {
        if (requestParameters.ssn === null || requestParameters.ssn === undefined) {
            throw new runtime.RequiredError('ssn','Required parameter requestParameters.ssn was null or undefined when calling apiFirearmApplicationWithAPIKeyLicenseInfoSsnGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/FirearmApplication/WithAPIKey/LicenseInfo/{ssn}`.replace(`{${"ssn"}}`, encodeURIComponent(String(requestParameters.ssn))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => LicenseInfoFromJSON(jsonValue));
    }

    /**
     */
    async apiFirearmApplicationWithAPIKeyLicenseInfoSsnGet(requestParameters: ApiFirearmApplicationWithAPIKeyLicenseInfoSsnGetRequest): Promise<LicenseInfo> {
        const response = await this.apiFirearmApplicationWithAPIKeyLicenseInfoSsnGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiFirearmApplicationWithAPIKeyPropertyInfoSsnGetRaw(requestParameters: ApiFirearmApplicationWithAPIKeyPropertyInfoSsnGetRequest): Promise<runtime.ApiResponse<FirearmPropertyList>> {
        if (requestParameters.ssn === null || requestParameters.ssn === undefined) {
            throw new runtime.RequiredError('ssn','Required parameter requestParameters.ssn was null or undefined when calling apiFirearmApplicationWithAPIKeyPropertyInfoSsnGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/FirearmApplication/WithAPIKey/PropertyInfo/{ssn}`.replace(`{${"ssn"}}`, encodeURIComponent(String(requestParameters.ssn))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => FirearmPropertyListFromJSON(jsonValue));
    }

    /**
     */
    async apiFirearmApplicationWithAPIKeyPropertyInfoSsnGet(requestParameters: ApiFirearmApplicationWithAPIKeyPropertyInfoSsnGetRequest): Promise<FirearmPropertyList> {
        const response = await this.apiFirearmApplicationWithAPIKeyPropertyInfoSsnGetRaw(requestParameters);
        return await response.value();
    }

}
