/* tslint:disable */
/* eslint-disable */
/**
 * Form System API
 * This is an API for formbuilder and form-rendering (application) system
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    FieldSettings,
    FieldSettingsFromJSON,
    FieldSettingsFromJSONTyped,
    FieldSettingsToJSON,
    LanguageType,
    LanguageTypeFromJSON,
    LanguageTypeFromJSONTyped,
    LanguageTypeToJSON,
    ListItemDto,
    ListItemDtoFromJSON,
    ListItemDtoFromJSONTyped,
    ListItemDtoToJSON,
    ValueDto,
    ValueDtoFromJSON,
    ValueDtoFromJSONTyped,
    ValueDtoToJSON,
} from './';

/**
 * 
 * @export
 * @interface FieldDto
 */
export interface FieldDto {
    /**
     * 
     * @type {string}
     * @memberof FieldDto
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof FieldDto
     */
    screenId: string;
    /**
     * 
     * @type {LanguageType}
     * @memberof FieldDto
     */
    name: LanguageType;
    /**
     * 
     * @type {number}
     * @memberof FieldDto
     */
    displayOrder: number;
    /**
     * 
     * @type {LanguageType}
     * @memberof FieldDto
     */
    description: LanguageType;
    /**
     * 
     * @type {boolean}
     * @memberof FieldDto
     */
    isPartOfMultiset: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof FieldDto
     */
    isRequired: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof FieldDto
     */
    isHidden: boolean;
    /**
     * 
     * @type {FieldSettings}
     * @memberof FieldDto
     */
    fieldSettings?: FieldSettings;
    /**
     * 
     * @type {string}
     * @memberof FieldDto
     */
    fieldType: string;
    /**
     * 
     * @type {Array<ListItemDto>}
     * @memberof FieldDto
     */
    list?: Array<ListItemDto>;
    /**
     * 
     * @type {Array<ValueDto>}
     * @memberof FieldDto
     */
    values?: Array<ValueDto>;
}

export function FieldDtoFromJSON(json: any): FieldDto {
    return FieldDtoFromJSONTyped(json, false);
}

export function FieldDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): FieldDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'screenId': json['screenId'],
        'name': LanguageTypeFromJSON(json['name']),
        'displayOrder': json['displayOrder'],
        'description': LanguageTypeFromJSON(json['description']),
        'isPartOfMultiset': json['isPartOfMultiset'],
        'isRequired': json['isRequired'],
        'isHidden': json['isHidden'],
        'fieldSettings': !exists(json, 'fieldSettings') ? undefined : FieldSettingsFromJSON(json['fieldSettings']),
        'fieldType': json['fieldType'],
        'list': !exists(json, 'list') ? undefined : ((json['list'] as Array<any>).map(ListItemDtoFromJSON)),
        'values': !exists(json, 'values') ? undefined : ((json['values'] as Array<any>).map(ValueDtoFromJSON)),
    };
}

export function FieldDtoToJSON(value?: FieldDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'screenId': value.screenId,
        'name': LanguageTypeToJSON(value.name),
        'displayOrder': value.displayOrder,
        'description': LanguageTypeToJSON(value.description),
        'isPartOfMultiset': value.isPartOfMultiset,
        'isRequired': value.isRequired,
        'isHidden': value.isHidden,
        'fieldSettings': FieldSettingsToJSON(value.fieldSettings),
        'fieldType': value.fieldType,
        'list': value.list === undefined ? undefined : ((value.list as Array<any>).map(ListItemDtoToJSON)),
        'values': value.values === undefined ? undefined : ((value.values as Array<any>).map(ValueDtoToJSON)),
    };
}


