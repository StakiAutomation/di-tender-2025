/* tslint:disable */
/* eslint-disable */
/**
 * Form System API
 * This is an API for formbuilder and form-rendering (application) system
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Dependency,
    DependencyFromJSON,
    DependencyFromJSONTyped,
    DependencyToJSON,
    FieldDto,
    FieldDtoFromJSON,
    FieldDtoFromJSONTyped,
    FieldDtoToJSON,
    FormApplicantTypeDto,
    FormApplicantTypeDtoFromJSON,
    FormApplicantTypeDtoFromJSONTyped,
    FormApplicantTypeDtoToJSON,
    FormCertificationTypeDto,
    FormCertificationTypeDtoFromJSON,
    FormCertificationTypeDtoFromJSONTyped,
    FormCertificationTypeDtoToJSON,
    FormUrlDto,
    FormUrlDtoFromJSON,
    FormUrlDtoFromJSONTyped,
    FormUrlDtoToJSON,
    LanguageType,
    LanguageTypeFromJSON,
    LanguageTypeFromJSONTyped,
    LanguageTypeToJSON,
    ScreenDto,
    ScreenDtoFromJSON,
    ScreenDtoFromJSONTyped,
    ScreenDtoToJSON,
    SectionDto,
    SectionDtoFromJSON,
    SectionDtoFromJSONTyped,
    SectionDtoToJSON,
} from './';

/**
 * 
 * @export
 * @interface FormDto
 */
export interface FormDto {
    /**
     * 
     * @type {string}
     * @memberof FormDto
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof FormDto
     */
    organizationId: string;
    /**
     * 
     * @type {string}
     * @memberof FormDto
     */
    organizationNationalId: string;
    /**
     * 
     * @type {string}
     * @memberof FormDto
     */
    organizationTitle?: string;
    /**
     * 
     * @type {string}
     * @memberof FormDto
     */
    organizationTitleEn?: string;
    /**
     * 
     * @type {LanguageType}
     * @memberof FormDto
     */
    organizationDisplayName?: LanguageType;
    /**
     * 
     * @type {LanguageType}
     * @memberof FormDto
     */
    name: LanguageType;
    /**
     * 
     * @type {string}
     * @memberof FormDto
     */
    slug: string;
    /**
     * 
     * @type {Date}
     * @memberof FormDto
     */
    invalidationDate?: Date;
    /**
     * 
     * @type {Date}
     * @memberof FormDto
     */
    created: Date;
    /**
     * 
     * @type {Date}
     * @memberof FormDto
     */
    modified: Date;
    /**
     * 
     * @type {boolean}
     * @memberof FormDto
     */
    hasPayment: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof FormDto
     */
    beenPublished: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof FormDto
     */
    isTranslated: boolean;
    /**
     * 
     * @type {number}
     * @memberof FormDto
     */
    applicationDaysToRemove: number;
    /**
     * 
     * @type {string}
     * @memberof FormDto
     */
    derivedFrom: string;
    /**
     * 
     * @type {string}
     * @memberof FormDto
     */
    status: string;
    /**
     * 
     * @type {boolean}
     * @memberof FormDto
     */
    stopProgressOnValidatingScreen: boolean;
    /**
     * 
     * @type {LanguageType}
     * @memberof FormDto
     */
    completedMessage?: LanguageType;
    /**
     * 
     * @type {Array<Dependency>}
     * @memberof FormDto
     */
    dependencies?: Array<Dependency>;
    /**
     * 
     * @type {Array<FormCertificationTypeDto>}
     * @memberof FormDto
     */
    certificationTypes?: Array<FormCertificationTypeDto>;
    /**
     * 
     * @type {Array<FormApplicantTypeDto>}
     * @memberof FormDto
     */
    applicantTypes?: Array<FormApplicantTypeDto>;
    /**
     * 
     * @type {Array<FormUrlDto>}
     * @memberof FormDto
     */
    urls?: Array<FormUrlDto>;
    /**
     * 
     * @type {Array<SectionDto>}
     * @memberof FormDto
     */
    sections?: Array<SectionDto>;
    /**
     * 
     * @type {Array<ScreenDto>}
     * @memberof FormDto
     */
    screens?: Array<ScreenDto>;
    /**
     * 
     * @type {Array<FieldDto>}
     * @memberof FormDto
     */
    fields?: Array<FieldDto>;
}

export function FormDtoFromJSON(json: any): FormDto {
    return FormDtoFromJSONTyped(json, false);
}

export function FormDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): FormDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'organizationId': json['organizationId'],
        'organizationNationalId': json['organizationNationalId'],
        'organizationTitle': !exists(json, 'organizationTitle') ? undefined : json['organizationTitle'],
        'organizationTitleEn': !exists(json, 'organizationTitleEn') ? undefined : json['organizationTitleEn'],
        'organizationDisplayName': !exists(json, 'organizationDisplayName') ? undefined : LanguageTypeFromJSON(json['organizationDisplayName']),
        'name': LanguageTypeFromJSON(json['name']),
        'slug': json['slug'],
        'invalidationDate': !exists(json, 'invalidationDate') ? undefined : (new Date(json['invalidationDate'])),
        'created': (new Date(json['created'])),
        'modified': (new Date(json['modified'])),
        'hasPayment': json['hasPayment'],
        'beenPublished': json['beenPublished'],
        'isTranslated': json['isTranslated'],
        'applicationDaysToRemove': json['applicationDaysToRemove'],
        'derivedFrom': json['derivedFrom'],
        'status': json['status'],
        'stopProgressOnValidatingScreen': json['stopProgressOnValidatingScreen'],
        'completedMessage': !exists(json, 'completedMessage') ? undefined : LanguageTypeFromJSON(json['completedMessage']),
        'dependencies': !exists(json, 'dependencies') ? undefined : ((json['dependencies'] as Array<any>).map(DependencyFromJSON)),
        'certificationTypes': !exists(json, 'certificationTypes') ? undefined : ((json['certificationTypes'] as Array<any>).map(FormCertificationTypeDtoFromJSON)),
        'applicantTypes': !exists(json, 'applicantTypes') ? undefined : ((json['applicantTypes'] as Array<any>).map(FormApplicantTypeDtoFromJSON)),
        'urls': !exists(json, 'urls') ? undefined : ((json['urls'] as Array<any>).map(FormUrlDtoFromJSON)),
        'sections': !exists(json, 'sections') ? undefined : ((json['sections'] as Array<any>).map(SectionDtoFromJSON)),
        'screens': !exists(json, 'screens') ? undefined : ((json['screens'] as Array<any>).map(ScreenDtoFromJSON)),
        'fields': !exists(json, 'fields') ? undefined : ((json['fields'] as Array<any>).map(FieldDtoFromJSON)),
    };
}

export function FormDtoToJSON(value?: FormDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'organizationId': value.organizationId,
        'organizationNationalId': value.organizationNationalId,
        'organizationTitle': value.organizationTitle,
        'organizationTitleEn': value.organizationTitleEn,
        'organizationDisplayName': LanguageTypeToJSON(value.organizationDisplayName),
        'name': LanguageTypeToJSON(value.name),
        'slug': value.slug,
        'invalidationDate': value.invalidationDate === undefined ? undefined : (value.invalidationDate.toISOString()),
        'created': (value.created.toISOString()),
        'modified': (value.modified.toISOString()),
        'hasPayment': value.hasPayment,
        'beenPublished': value.beenPublished,
        'isTranslated': value.isTranslated,
        'applicationDaysToRemove': value.applicationDaysToRemove,
        'derivedFrom': value.derivedFrom,
        'status': value.status,
        'stopProgressOnValidatingScreen': value.stopProgressOnValidatingScreen,
        'completedMessage': LanguageTypeToJSON(value.completedMessage),
        'dependencies': value.dependencies === undefined ? undefined : ((value.dependencies as Array<any>).map(DependencyToJSON)),
        'certificationTypes': value.certificationTypes === undefined ? undefined : ((value.certificationTypes as Array<any>).map(FormCertificationTypeDtoToJSON)),
        'applicantTypes': value.applicantTypes === undefined ? undefined : ((value.applicantTypes as Array<any>).map(FormApplicantTypeDtoToJSON)),
        'urls': value.urls === undefined ? undefined : ((value.urls as Array<any>).map(FormUrlDtoToJSON)),
        'sections': value.sections === undefined ? undefined : ((value.sections as Array<any>).map(SectionDtoToJSON)),
        'screens': value.screens === undefined ? undefined : ((value.screens as Array<any>).map(ScreenDtoToJSON)),
        'fields': value.fields === undefined ? undefined : ((value.fields as Array<any>).map(FieldDtoToJSON)),
    };
}


