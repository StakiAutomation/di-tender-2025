/* tslint:disable */
/* eslint-disable */
/**
 * Form System API
 * This is an API for formbuilder and form-rendering (application) system
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    LanguageType,
    LanguageTypeFromJSON,
    LanguageTypeFromJSONTyped,
    LanguageTypeToJSON,
} from './';

/**
 * 
 * @export
 * @interface FieldSettings
 */
export interface FieldSettings {
    /**
     * 
     * @type {number}
     * @memberof FieldSettings
     */
    minValue?: number;
    /**
     * 
     * @type {number}
     * @memberof FieldSettings
     */
    maxValue?: number;
    /**
     * 
     * @type {number}
     * @memberof FieldSettings
     */
    minLength?: number;
    /**
     * 
     * @type {number}
     * @memberof FieldSettings
     */
    maxLength?: number;
    /**
     * 
     * @type {Date}
     * @memberof FieldSettings
     */
    minDate?: Date;
    /**
     * 
     * @type {Date}
     * @memberof FieldSettings
     */
    maxDate?: Date;
    /**
     * 
     * @type {number}
     * @memberof FieldSettings
     */
    minAmount?: number;
    /**
     * 
     * @type {number}
     * @memberof FieldSettings
     */
    maxAmount?: number;
    /**
     * 
     * @type {number}
     * @memberof FieldSettings
     */
    year?: number;
    /**
     * 
     * @type {boolean}
     * @memberof FieldSettings
     */
    hasLink?: boolean;
    /**
     * 
     * @type {string}
     * @memberof FieldSettings
     */
    url?: string;
    /**
     * 
     * @type {LanguageType}
     * @memberof FieldSettings
     */
    buttonText?: LanguageType;
    /**
     * 
     * @type {boolean}
     * @memberof FieldSettings
     */
    isLarge?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof FieldSettings
     */
    hasPropertyInput?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof FieldSettings
     */
    hasPropertyList?: boolean;
    /**
     * 
     * @type {string}
     * @memberof FieldSettings
     */
    listType?: FieldSettingsListTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof FieldSettings
     */
    fileTypes?: string;
    /**
     * 
     * @type {number}
     * @memberof FieldSettings
     */
    fileMaxSize?: number;
    /**
     * 
     * @type {number}
     * @memberof FieldSettings
     */
    maxFiles?: number;
    /**
     * 
     * @type {string}
     * @memberof FieldSettings
     */
    timeInterval?: string;
}

export function FieldSettingsFromJSON(json: any): FieldSettings {
    return FieldSettingsFromJSONTyped(json, false);
}

export function FieldSettingsFromJSONTyped(json: any, ignoreDiscriminator: boolean): FieldSettings {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'minValue': !exists(json, 'minValue') ? undefined : json['minValue'],
        'maxValue': !exists(json, 'maxValue') ? undefined : json['maxValue'],
        'minLength': !exists(json, 'minLength') ? undefined : json['minLength'],
        'maxLength': !exists(json, 'maxLength') ? undefined : json['maxLength'],
        'minDate': !exists(json, 'minDate') ? undefined : (new Date(json['minDate'])),
        'maxDate': !exists(json, 'maxDate') ? undefined : (new Date(json['maxDate'])),
        'minAmount': !exists(json, 'minAmount') ? undefined : json['minAmount'],
        'maxAmount': !exists(json, 'maxAmount') ? undefined : json['maxAmount'],
        'year': !exists(json, 'year') ? undefined : json['year'],
        'hasLink': !exists(json, 'hasLink') ? undefined : json['hasLink'],
        'url': !exists(json, 'url') ? undefined : json['url'],
        'buttonText': !exists(json, 'buttonText') ? undefined : LanguageTypeFromJSON(json['buttonText']),
        'isLarge': !exists(json, 'isLarge') ? undefined : json['isLarge'],
        'hasPropertyInput': !exists(json, 'hasPropertyInput') ? undefined : json['hasPropertyInput'],
        'hasPropertyList': !exists(json, 'hasPropertyList') ? undefined : json['hasPropertyList'],
        'listType': !exists(json, 'listType') ? undefined : json['listType'],
        'fileTypes': !exists(json, 'fileTypes') ? undefined : json['fileTypes'],
        'fileMaxSize': !exists(json, 'fileMaxSize') ? undefined : json['fileMaxSize'],
        'maxFiles': !exists(json, 'maxFiles') ? undefined : json['maxFiles'],
        'timeInterval': !exists(json, 'timeInterval') ? undefined : json['timeInterval'],
    };
}

export function FieldSettingsToJSON(value?: FieldSettings | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'minValue': value.minValue,
        'maxValue': value.maxValue,
        'minLength': value.minLength,
        'maxLength': value.maxLength,
        'minDate': value.minDate === undefined ? undefined : (value.minDate.toISOString()),
        'maxDate': value.maxDate === undefined ? undefined : (value.maxDate.toISOString()),
        'minAmount': value.minAmount,
        'maxAmount': value.maxAmount,
        'year': value.year,
        'hasLink': value.hasLink,
        'url': value.url,
        'buttonText': LanguageTypeToJSON(value.buttonText),
        'isLarge': value.isLarge,
        'hasPropertyInput': value.hasPropertyInput,
        'hasPropertyList': value.hasPropertyList,
        'listType': value.listType,
        'fileTypes': value.fileTypes,
        'fileMaxSize': value.fileMaxSize,
        'maxFiles': value.maxFiles,
        'timeInterval': value.timeInterval,
    };
}

/**
* @export
* @enum {string}
*/
export enum FieldSettingsListTypeEnum {
    CUSTOM = 'CUSTOM',
    MUNICIPALITIES = 'MUNICIPALITIES',
    COUNTRIES = 'COUNTRIES',
    POSTAL_CODES = 'POSTAL_CODES',
    MASTERS_TRADES = 'MASTERS_TRADES',
    REGISTRATION_CATEGORIES_OF_ACTIVITIES = 'REGISTRATION_CATEGORIES_OF_ACTIVITIES'
}


