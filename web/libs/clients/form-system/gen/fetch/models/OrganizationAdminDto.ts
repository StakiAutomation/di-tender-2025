/* tslint:disable */
/* eslint-disable */
/**
 * Form System API
 * This is an API for formbuilder and form-rendering (application) system
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    CertificationType,
    CertificationTypeFromJSON,
    CertificationTypeFromJSONTyped,
    CertificationTypeToJSON,
    FieldType,
    FieldTypeFromJSON,
    FieldTypeFromJSONTyped,
    FieldTypeToJSON,
    ListType,
    ListTypeFromJSON,
    ListTypeFromJSONTyped,
    ListTypeToJSON,
    Option,
    OptionFromJSON,
    OptionFromJSONTyped,
    OptionToJSON,
} from './';

/**
 * 
 * @export
 * @interface OrganizationAdminDto
 */
export interface OrganizationAdminDto {
    /**
     * 
     * @type {string}
     * @memberof OrganizationAdminDto
     */
    organizationId?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof OrganizationAdminDto
     */
    selectedListTypes?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof OrganizationAdminDto
     */
    selectedFieldTypes?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof OrganizationAdminDto
     */
    selectedCertificationTypes?: Array<string>;
    /**
     * 
     * @type {Array<ListType>}
     * @memberof OrganizationAdminDto
     */
    listTypes?: Array<ListType>;
    /**
     * 
     * @type {Array<FieldType>}
     * @memberof OrganizationAdminDto
     */
    fieldTypes?: Array<FieldType>;
    /**
     * 
     * @type {Array<CertificationType>}
     * @memberof OrganizationAdminDto
     */
    certificationTypes?: Array<CertificationType>;
    /**
     * 
     * @type {Array<Option>}
     * @memberof OrganizationAdminDto
     */
    organizations?: Array<Option>;
}

export function OrganizationAdminDtoFromJSON(json: any): OrganizationAdminDto {
    return OrganizationAdminDtoFromJSONTyped(json, false);
}

export function OrganizationAdminDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): OrganizationAdminDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'organizationId': !exists(json, 'organizationId') ? undefined : json['organizationId'],
        'selectedListTypes': !exists(json, 'selectedListTypes') ? undefined : json['selectedListTypes'],
        'selectedFieldTypes': !exists(json, 'selectedFieldTypes') ? undefined : json['selectedFieldTypes'],
        'selectedCertificationTypes': !exists(json, 'selectedCertificationTypes') ? undefined : json['selectedCertificationTypes'],
        'listTypes': !exists(json, 'ListTypes') ? undefined : ((json['ListTypes'] as Array<any>).map(ListTypeFromJSON)),
        'fieldTypes': !exists(json, 'FieldTypes') ? undefined : ((json['FieldTypes'] as Array<any>).map(FieldTypeFromJSON)),
        'certificationTypes': !exists(json, 'certificationTypes') ? undefined : ((json['certificationTypes'] as Array<any>).map(CertificationTypeFromJSON)),
        'organizations': !exists(json, 'organizations') ? undefined : ((json['organizations'] as Array<any>).map(OptionFromJSON)),
    };
}

export function OrganizationAdminDtoToJSON(value?: OrganizationAdminDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'organizationId': value.organizationId,
        'selectedListTypes': value.selectedListTypes,
        'selectedFieldTypes': value.selectedFieldTypes,
        'selectedCertificationTypes': value.selectedCertificationTypes,
        'ListTypes': value.listTypes === undefined ? undefined : ((value.listTypes as Array<any>).map(ListTypeToJSON)),
        'FieldTypes': value.fieldTypes === undefined ? undefined : ((value.fieldTypes as Array<any>).map(FieldTypeToJSON)),
        'certificationTypes': value.certificationTypes === undefined ? undefined : ((value.certificationTypes as Array<any>).map(CertificationTypeToJSON)),
        'organizations': value.organizations === undefined ? undefined : ((value.organizations as Array<any>).map(OptionToJSON)),
    };
}


