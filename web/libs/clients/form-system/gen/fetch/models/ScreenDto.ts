/* tslint:disable */
/* eslint-disable */
/**
 * Form System API
 * This is an API for formbuilder and form-rendering (application) system
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    FieldDto,
    FieldDtoFromJSON,
    FieldDtoFromJSONTyped,
    FieldDtoToJSON,
    LanguageType,
    LanguageTypeFromJSON,
    LanguageTypeFromJSONTyped,
    LanguageTypeToJSON,
} from './';

/**
 * 
 * @export
 * @interface ScreenDto
 */
export interface ScreenDto {
    /**
     * 
     * @type {string}
     * @memberof ScreenDto
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof ScreenDto
     */
    sectionId: string;
    /**
     * 
     * @type {LanguageType}
     * @memberof ScreenDto
     */
    name: LanguageType;
    /**
     * 
     * @type {number}
     * @memberof ScreenDto
     */
    displayOrder: number;
    /**
     * 
     * @type {boolean}
     * @memberof ScreenDto
     */
    isHidden: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ScreenDto
     */
    isCompleted: boolean;
    /**
     * 
     * @type {number}
     * @memberof ScreenDto
     */
    multiset: number;
    /**
     * 
     * @type {boolean}
     * @memberof ScreenDto
     */
    callRuleset: boolean;
    /**
     * 
     * @type {Array<FieldDto>}
     * @memberof ScreenDto
     */
    fields?: Array<FieldDto>;
}

export function ScreenDtoFromJSON(json: any): ScreenDto {
    return ScreenDtoFromJSONTyped(json, false);
}

export function ScreenDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): ScreenDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'sectionId': json['sectionId'],
        'name': LanguageTypeFromJSON(json['name']),
        'displayOrder': json['displayOrder'],
        'isHidden': json['isHidden'],
        'isCompleted': json['isCompleted'],
        'multiset': json['multiset'],
        'callRuleset': json['callRuleset'],
        'fields': !exists(json, 'fields') ? undefined : ((json['fields'] as Array<any>).map(FieldDtoFromJSON)),
    };
}

export function ScreenDtoToJSON(value?: ScreenDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'sectionId': value.sectionId,
        'name': LanguageTypeToJSON(value.name),
        'displayOrder': value.displayOrder,
        'isHidden': value.isHidden,
        'isCompleted': value.isCompleted,
        'multiset': value.multiset,
        'callRuleset': value.callRuleset,
        'fields': value.fields === undefined ? undefined : ((value.fields as Array<any>).map(FieldDtoToJSON)),
    };
}


