/* tslint:disable */
/* eslint-disable */
/**
 * Form System API
 * This is an API for formbuilder and form-rendering (application) system
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ApplicationEventDto,
    ApplicationEventDtoFromJSON,
    ApplicationEventDtoFromJSONTyped,
    ApplicationEventDtoToJSON,
    Dependency,
    DependencyFromJSON,
    DependencyFromJSONTyped,
    DependencyToJSON,
    FormApplicantTypeDto,
    FormApplicantTypeDtoFromJSON,
    FormApplicantTypeDtoFromJSONTyped,
    FormApplicantTypeDtoToJSON,
    FormCertificationTypeDto,
    FormCertificationTypeDtoFromJSON,
    FormCertificationTypeDtoFromJSONTyped,
    FormCertificationTypeDtoToJSON,
    LanguageType,
    LanguageTypeFromJSON,
    LanguageTypeFromJSONTyped,
    LanguageTypeToJSON,
    SectionDto,
    SectionDtoFromJSON,
    SectionDtoFromJSONTyped,
    SectionDtoToJSON,
    ValueDto,
    ValueDtoFromJSON,
    ValueDtoFromJSONTyped,
    ValueDtoToJSON,
} from './';

/**
 * 
 * @export
 * @interface ApplicationDto
 */
export interface ApplicationDto {
    /**
     * 
     * @type {string}
     * @memberof ApplicationDto
     */
    id?: string;
    /**
     * 
     * @type {LanguageType}
     * @memberof ApplicationDto
     */
    organizationName?: LanguageType;
    /**
     * 
     * @type {string}
     * @memberof ApplicationDto
     */
    formId?: string;
    /**
     * 
     * @type {LanguageType}
     * @memberof ApplicationDto
     */
    formName?: LanguageType;
    /**
     * 
     * @type {boolean}
     * @memberof ApplicationDto
     */
    isTest?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ApplicationDto
     */
    slug?: string;
    /**
     * 
     * @type {Date}
     * @memberof ApplicationDto
     */
    created?: Date;
    /**
     * 
     * @type {Date}
     * @memberof ApplicationDto
     */
    modified?: Date;
    /**
     * 
     * @type {Date}
     * @memberof ApplicationDto
     */
    submittedAt?: Date;
    /**
     * 
     * @type {Array<Dependency>}
     * @memberof ApplicationDto
     */
    dependencies?: Array<Dependency>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ApplicationDto
     */
    completed?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ApplicationDto
     */
    status?: string;
    /**
     * 
     * @type {Array<ApplicationEventDto>}
     * @memberof ApplicationDto
     */
    events?: Array<ApplicationEventDto>;
    /**
     * 
     * @type {Array<SectionDto>}
     * @memberof ApplicationDto
     */
    sections?: Array<SectionDto>;
    /**
     * 
     * @type {Array<ValueDto>}
     * @memberof ApplicationDto
     */
    files?: Array<ValueDto>;
    /**
     * 
     * @type {Array<FormCertificationTypeDto>}
     * @memberof ApplicationDto
     */
    certificationTypes?: Array<FormCertificationTypeDto>;
    /**
     * 
     * @type {Array<FormApplicantTypeDto>}
     * @memberof ApplicationDto
     */
    applicantTypes?: Array<FormApplicantTypeDto>;
}

export function ApplicationDtoFromJSON(json: any): ApplicationDto {
    return ApplicationDtoFromJSONTyped(json, false);
}

export function ApplicationDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): ApplicationDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'organizationName': !exists(json, 'organizationName') ? undefined : LanguageTypeFromJSON(json['organizationName']),
        'formId': !exists(json, 'formId') ? undefined : json['formId'],
        'formName': !exists(json, 'formName') ? undefined : LanguageTypeFromJSON(json['formName']),
        'isTest': !exists(json, 'isTest') ? undefined : json['isTest'],
        'slug': !exists(json, 'slug') ? undefined : json['slug'],
        'created': !exists(json, 'created') ? undefined : (new Date(json['created'])),
        'modified': !exists(json, 'modified') ? undefined : (new Date(json['modified'])),
        'submittedAt': !exists(json, 'submittedAt') ? undefined : (new Date(json['submittedAt'])),
        'dependencies': !exists(json, 'dependencies') ? undefined : ((json['dependencies'] as Array<any>).map(DependencyFromJSON)),
        'completed': !exists(json, 'completed') ? undefined : json['completed'],
        'status': !exists(json, 'status') ? undefined : json['status'],
        'events': !exists(json, 'events') ? undefined : ((json['events'] as Array<any>).map(ApplicationEventDtoFromJSON)),
        'sections': !exists(json, 'sections') ? undefined : ((json['sections'] as Array<any>).map(SectionDtoFromJSON)),
        'files': !exists(json, 'files') ? undefined : ((json['files'] as Array<any>).map(ValueDtoFromJSON)),
        'certificationTypes': !exists(json, 'certificationTypes') ? undefined : ((json['certificationTypes'] as Array<any>).map(FormCertificationTypeDtoFromJSON)),
        'applicantTypes': !exists(json, 'applicantTypes') ? undefined : ((json['applicantTypes'] as Array<any>).map(FormApplicantTypeDtoFromJSON)),
    };
}

export function ApplicationDtoToJSON(value?: ApplicationDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'organizationName': LanguageTypeToJSON(value.organizationName),
        'formId': value.formId,
        'formName': LanguageTypeToJSON(value.formName),
        'isTest': value.isTest,
        'slug': value.slug,
        'created': value.created === undefined ? undefined : (value.created.toISOString()),
        'modified': value.modified === undefined ? undefined : (value.modified.toISOString()),
        'submittedAt': value.submittedAt === undefined ? undefined : (value.submittedAt.toISOString()),
        'dependencies': value.dependencies === undefined ? undefined : ((value.dependencies as Array<any>).map(DependencyToJSON)),
        'completed': value.completed,
        'status': value.status,
        'events': value.events === undefined ? undefined : ((value.events as Array<any>).map(ApplicationEventDtoToJSON)),
        'sections': value.sections === undefined ? undefined : ((value.sections as Array<any>).map(SectionDtoToJSON)),
        'files': value.files === undefined ? undefined : ((value.files as Array<any>).map(ValueDtoToJSON)),
        'certificationTypes': value.certificationTypes === undefined ? undefined : ((value.certificationTypes as Array<any>).map(FormCertificationTypeDtoToJSON)),
        'applicantTypes': value.applicantTypes === undefined ? undefined : ((value.applicantTypes as Array<any>).map(FormApplicantTypeDtoToJSON)),
    };
}


