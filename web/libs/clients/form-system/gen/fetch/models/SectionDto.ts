/* tslint:disable */
/* eslint-disable */
/**
 * Form System API
 * This is an API for formbuilder and form-rendering (application) system
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    LanguageType,
    LanguageTypeFromJSON,
    LanguageTypeFromJSONTyped,
    LanguageTypeToJSON,
    ScreenDto,
    ScreenDtoFromJSON,
    ScreenDtoFromJSONTyped,
    ScreenDtoToJSON,
} from './';

/**
 * 
 * @export
 * @interface SectionDto
 */
export interface SectionDto {
    /**
     * 
     * @type {string}
     * @memberof SectionDto
     */
    id: string;
    /**
     * 
     * @type {LanguageType}
     * @memberof SectionDto
     */
    name: LanguageType;
    /**
     * 
     * @type {string}
     * @memberof SectionDto
     */
    sectionType: string;
    /**
     * 
     * @type {number}
     * @memberof SectionDto
     */
    displayOrder: number;
    /**
     * 
     * @type {LanguageType}
     * @memberof SectionDto
     */
    waitingText?: LanguageType;
    /**
     * 
     * @type {boolean}
     * @memberof SectionDto
     */
    isHidden: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SectionDto
     */
    isCompleted: boolean;
    /**
     * 
     * @type {Array<ScreenDto>}
     * @memberof SectionDto
     */
    screens?: Array<ScreenDto>;
}

export function SectionDtoFromJSON(json: any): SectionDto {
    return SectionDtoFromJSONTyped(json, false);
}

export function SectionDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): SectionDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': LanguageTypeFromJSON(json['name']),
        'sectionType': json['sectionType'],
        'displayOrder': json['displayOrder'],
        'waitingText': !exists(json, 'waitingText') ? undefined : LanguageTypeFromJSON(json['waitingText']),
        'isHidden': json['isHidden'],
        'isCompleted': json['isCompleted'],
        'screens': !exists(json, 'screens') ? undefined : ((json['screens'] as Array<any>).map(ScreenDtoFromJSON)),
    };
}

export function SectionDtoToJSON(value?: SectionDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': LanguageTypeToJSON(value.name),
        'sectionType': value.sectionType,
        'displayOrder': value.displayOrder,
        'waitingText': LanguageTypeToJSON(value.waitingText),
        'isHidden': value.isHidden,
        'isCompleted': value.isCompleted,
        'screens': value.screens === undefined ? undefined : ((value.screens as Array<any>).map(ScreenDtoToJSON)),
    };
}


