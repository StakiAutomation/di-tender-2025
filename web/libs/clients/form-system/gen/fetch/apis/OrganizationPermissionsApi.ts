/* tslint:disable */
/* eslint-disable */
/**
 * Form System API
 * This is an API for formbuilder and form-rendering (application) system
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    OrganizationPermissionDto,
    OrganizationPermissionDtoFromJSON,
    OrganizationPermissionDtoToJSON,
    UpdateOrganizationPermissionDto,
    UpdateOrganizationPermissionDtoFromJSON,
    UpdateOrganizationPermissionDtoToJSON,
} from '../models';

export interface OrganizationPermissionsControllerCreateRequest {
    updateOrganizationPermissionDto: UpdateOrganizationPermissionDto;
}

export interface OrganizationPermissionsControllerDeleteRequest {
    updateOrganizationPermissionDto: UpdateOrganizationPermissionDto;
}

/**
 * 
 */
export class OrganizationPermissionsApi extends runtime.BaseAPI {

    /**
     * Add organization permission
     */
    async organizationPermissionsControllerCreateRaw(requestParameters: OrganizationPermissionsControllerCreateRequest): Promise<runtime.ApiResponse<OrganizationPermissionDto>> {
        if (requestParameters.updateOrganizationPermissionDto === null || requestParameters.updateOrganizationPermissionDto === undefined) {
            throw new runtime.RequiredError('updateOrganizationPermissionDto','Required parameter requestParameters.updateOrganizationPermissionDto was null or undefined when calling organizationPermissionsControllerCreate.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/organizationPermissions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateOrganizationPermissionDtoToJSON(requestParameters.updateOrganizationPermissionDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganizationPermissionDtoFromJSON(jsonValue));
    }

    /**
     * Add organization permission
     */
    async organizationPermissionsControllerCreate(requestParameters: OrganizationPermissionsControllerCreateRequest): Promise<OrganizationPermissionDto> {
        const response = await this.organizationPermissionsControllerCreateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Remove organization permission
     */
    async organizationPermissionsControllerDeleteRaw(requestParameters: OrganizationPermissionsControllerDeleteRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.updateOrganizationPermissionDto === null || requestParameters.updateOrganizationPermissionDto === undefined) {
            throw new runtime.RequiredError('updateOrganizationPermissionDto','Required parameter requestParameters.updateOrganizationPermissionDto was null or undefined when calling organizationPermissionsControllerDelete.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/organizationPermissions`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateOrganizationPermissionDtoToJSON(requestParameters.updateOrganizationPermissionDto),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove organization permission
     */
    async organizationPermissionsControllerDelete(requestParameters: OrganizationPermissionsControllerDeleteRequest): Promise<void> {
        await this.organizationPermissionsControllerDeleteRaw(requestParameters);
    }

}
