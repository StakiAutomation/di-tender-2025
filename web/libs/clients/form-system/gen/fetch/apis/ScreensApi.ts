/* tslint:disable */
/* eslint-disable */
/**
 * Form System API
 * This is an API for formbuilder and form-rendering (application) system
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateScreenDto,
    CreateScreenDtoFromJSON,
    CreateScreenDtoToJSON,
    ScreenDto,
    ScreenDtoFromJSON,
    ScreenDtoToJSON,
    UpdateScreenDto,
    UpdateScreenDtoFromJSON,
    UpdateScreenDtoToJSON,
    UpdateScreensDisplayOrderDto,
    UpdateScreensDisplayOrderDtoFromJSON,
    UpdateScreensDisplayOrderDtoToJSON,
} from '../models';

export interface ScreensControllerCreateRequest {
    createScreenDto: CreateScreenDto;
}

export interface ScreensControllerDeleteRequest {
    id: string;
}

export interface ScreensControllerUpdateRequest {
    id: string;
    updateScreenDto: UpdateScreenDto;
}

export interface ScreensControllerUpdateDisplayOrderRequest {
    updateScreensDisplayOrderDto: UpdateScreensDisplayOrderDto;
}

/**
 * 
 */
export class ScreensApi extends runtime.BaseAPI {

    /**
     * Creates a new screen
     */
    async screensControllerCreateRaw(requestParameters: ScreensControllerCreateRequest): Promise<runtime.ApiResponse<ScreenDto>> {
        if (requestParameters.createScreenDto === null || requestParameters.createScreenDto === undefined) {
            throw new runtime.RequiredError('createScreenDto','Required parameter requestParameters.createScreenDto was null or undefined when calling screensControllerCreate.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/screens`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateScreenDtoToJSON(requestParameters.createScreenDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ScreenDtoFromJSON(jsonValue));
    }

    /**
     * Creates a new screen
     */
    async screensControllerCreate(requestParameters: ScreensControllerCreateRequest): Promise<ScreenDto> {
        const response = await this.screensControllerCreateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Delete screen by id
     */
    async screensControllerDeleteRaw(requestParameters: ScreensControllerDeleteRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling screensControllerDelete.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/screens/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete screen by id
     */
    async screensControllerDelete(requestParameters: ScreensControllerDeleteRequest): Promise<void> {
        await this.screensControllerDeleteRaw(requestParameters);
    }

    /**
     * Update screen
     */
    async screensControllerUpdateRaw(requestParameters: ScreensControllerUpdateRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling screensControllerUpdate.');
        }

        if (requestParameters.updateScreenDto === null || requestParameters.updateScreenDto === undefined) {
            throw new runtime.RequiredError('updateScreenDto','Required parameter requestParameters.updateScreenDto was null or undefined when calling screensControllerUpdate.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/screens/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateScreenDtoToJSON(requestParameters.updateScreenDto),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update screen
     */
    async screensControllerUpdate(requestParameters: ScreensControllerUpdateRequest): Promise<void> {
        await this.screensControllerUpdateRaw(requestParameters);
    }

    /**
     * Update display order of screens
     */
    async screensControllerUpdateDisplayOrderRaw(requestParameters: ScreensControllerUpdateDisplayOrderRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.updateScreensDisplayOrderDto === null || requestParameters.updateScreensDisplayOrderDto === undefined) {
            throw new runtime.RequiredError('updateScreensDisplayOrderDto','Required parameter requestParameters.updateScreensDisplayOrderDto was null or undefined when calling screensControllerUpdateDisplayOrder.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/screens`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateScreensDisplayOrderDtoToJSON(requestParameters.updateScreensDisplayOrderDto),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update display order of screens
     */
    async screensControllerUpdateDisplayOrder(requestParameters: ScreensControllerUpdateDisplayOrderRequest): Promise<void> {
        await this.screensControllerUpdateDisplayOrderRaw(requestParameters);
    }

}
