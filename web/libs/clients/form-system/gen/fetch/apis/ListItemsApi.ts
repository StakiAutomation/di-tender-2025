/* tslint:disable */
/* eslint-disable */
/**
 * Form System API
 * This is an API for formbuilder and form-rendering (application) system
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateListItemDto,
    CreateListItemDtoFromJSON,
    CreateListItemDtoToJSON,
    ListItemDto,
    ListItemDtoFromJSON,
    ListItemDtoToJSON,
    UpdateListItemDto,
    UpdateListItemDtoFromJSON,
    UpdateListItemDtoToJSON,
    UpdateListItemsDisplayOrderDto,
    UpdateListItemsDisplayOrderDtoFromJSON,
    UpdateListItemsDisplayOrderDtoToJSON,
} from '../models';

export interface ListItemsControllerCreateRequest {
    createListItemDto: CreateListItemDto;
}

export interface ListItemsControllerDeleteRequest {
    id: string;
}

export interface ListItemsControllerUpdateRequest {
    id: string;
    updateListItemDto: UpdateListItemDto;
}

export interface ListItemsControllerUpdateDisplayOrderRequest {
    updateListItemsDisplayOrderDto: UpdateListItemsDisplayOrderDto;
}

/**
 * 
 */
export class ListItemsApi extends runtime.BaseAPI {

    /**
     * Create a list item
     */
    async listItemsControllerCreateRaw(requestParameters: ListItemsControllerCreateRequest): Promise<runtime.ApiResponse<ListItemDto>> {
        if (requestParameters.createListItemDto === null || requestParameters.createListItemDto === undefined) {
            throw new runtime.RequiredError('createListItemDto','Required parameter requestParameters.createListItemDto was null or undefined when calling listItemsControllerCreate.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/listItems`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateListItemDtoToJSON(requestParameters.createListItemDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ListItemDtoFromJSON(jsonValue));
    }

    /**
     * Create a list item
     */
    async listItemsControllerCreate(requestParameters: ListItemsControllerCreateRequest): Promise<ListItemDto> {
        const response = await this.listItemsControllerCreateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Delete list item
     */
    async listItemsControllerDeleteRaw(requestParameters: ListItemsControllerDeleteRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling listItemsControllerDelete.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/listItems/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete list item
     */
    async listItemsControllerDelete(requestParameters: ListItemsControllerDeleteRequest): Promise<void> {
        await this.listItemsControllerDeleteRaw(requestParameters);
    }

    /**
     * Update list item
     */
    async listItemsControllerUpdateRaw(requestParameters: ListItemsControllerUpdateRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling listItemsControllerUpdate.');
        }

        if (requestParameters.updateListItemDto === null || requestParameters.updateListItemDto === undefined) {
            throw new runtime.RequiredError('updateListItemDto','Required parameter requestParameters.updateListItemDto was null or undefined when calling listItemsControllerUpdate.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/listItems/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateListItemDtoToJSON(requestParameters.updateListItemDto),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update list item
     */
    async listItemsControllerUpdate(requestParameters: ListItemsControllerUpdateRequest): Promise<void> {
        await this.listItemsControllerUpdateRaw(requestParameters);
    }

    /**
     * Update display order of list items
     */
    async listItemsControllerUpdateDisplayOrderRaw(requestParameters: ListItemsControllerUpdateDisplayOrderRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.updateListItemsDisplayOrderDto === null || requestParameters.updateListItemsDisplayOrderDto === undefined) {
            throw new runtime.RequiredError('updateListItemsDisplayOrderDto','Required parameter requestParameters.updateListItemsDisplayOrderDto was null or undefined when calling listItemsControllerUpdateDisplayOrder.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/listItems`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateListItemsDisplayOrderDtoToJSON(requestParameters.updateListItemsDisplayOrderDto),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update display order of list items
     */
    async listItemsControllerUpdateDisplayOrder(requestParameters: ListItemsControllerUpdateDisplayOrderRequest): Promise<void> {
        await this.listItemsControllerUpdateDisplayOrderRaw(requestParameters);
    }

}
