/* tslint:disable */
/* eslint-disable */
/**
 * Form System API
 * This is an API for formbuilder and form-rendering (application) system
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateFormUrlDto,
    CreateFormUrlDtoFromJSON,
    CreateFormUrlDtoToJSON,
    FormUrlDto,
    FormUrlDtoFromJSON,
    FormUrlDtoToJSON,
} from '../models';

export interface FormUrlsControllerCreateRequest {
    createFormUrlDto: CreateFormUrlDto;
}

export interface FormUrlsControllerDeleteRequest {
    id: string;
}

/**
 * 
 */
export class FormUrlsApi extends runtime.BaseAPI {

    /**
     * Add form url
     */
    async formUrlsControllerCreateRaw(requestParameters: FormUrlsControllerCreateRequest): Promise<runtime.ApiResponse<FormUrlDto>> {
        if (requestParameters.createFormUrlDto === null || requestParameters.createFormUrlDto === undefined) {
            throw new runtime.RequiredError('createFormUrlDto','Required parameter requestParameters.createFormUrlDto was null or undefined when calling formUrlsControllerCreate.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/formUrls`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateFormUrlDtoToJSON(requestParameters.createFormUrlDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => FormUrlDtoFromJSON(jsonValue));
    }

    /**
     * Add form url
     */
    async formUrlsControllerCreate(requestParameters: FormUrlsControllerCreateRequest): Promise<FormUrlDto> {
        const response = await this.formUrlsControllerCreateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Remove form url
     */
    async formUrlsControllerDeleteRaw(requestParameters: FormUrlsControllerDeleteRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling formUrlsControllerDelete.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/formUrls/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove form url
     */
    async formUrlsControllerDelete(requestParameters: FormUrlsControllerDeleteRequest): Promise<void> {
        await this.formUrlsControllerDeleteRaw(requestParameters);
    }

}
