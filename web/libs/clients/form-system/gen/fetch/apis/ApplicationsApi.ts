/* tslint:disable */
/* eslint-disable */
/**
 * Form System API
 * This is an API for formbuilder and form-rendering (application) system
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ApplicationDto,
    ApplicationDtoFromJSON,
    ApplicationDtoToJSON,
    ApplicationListDto,
    ApplicationListDtoFromJSON,
    ApplicationListDtoToJSON,
    CreateApplicationDto,
    CreateApplicationDtoFromJSON,
    CreateApplicationDtoToJSON,
    UpdateApplicationDto,
    UpdateApplicationDtoFromJSON,
    UpdateApplicationDtoToJSON,
} from '../models';

export interface ApplicationsControllerCreateRequest {
    slug: string;
    createApplicationDto: CreateApplicationDto;
}

export interface ApplicationsControllerFindAllByOrganizationRequest {
    organizationId: string;
    page: number;
    limit: number;
    isTest: boolean;
}

export interface ApplicationsControllerGetApplicationRequest {
    id: string;
}

export interface ApplicationsControllerSubmitRequest {
    id: string;
}

export interface ApplicationsControllerSubmitScreenRequest {
    screenId: string;
    applicationDto: ApplicationDto;
}

export interface ApplicationsControllerUpdateRequest {
    id: string;
    updateApplicationDto: UpdateApplicationDto;
}

/**
 * 
 */
export class ApplicationsApi extends runtime.BaseAPI {

    /**
     * Create new application
     */
    async applicationsControllerCreateRaw(requestParameters: ApplicationsControllerCreateRequest): Promise<runtime.ApiResponse<ApplicationDto>> {
        if (requestParameters.slug === null || requestParameters.slug === undefined) {
            throw new runtime.RequiredError('slug','Required parameter requestParameters.slug was null or undefined when calling applicationsControllerCreate.');
        }

        if (requestParameters.createApplicationDto === null || requestParameters.createApplicationDto === undefined) {
            throw new runtime.RequiredError('createApplicationDto','Required parameter requestParameters.createApplicationDto was null or undefined when calling applicationsControllerCreate.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/applications/{slug}`.replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters.slug))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateApplicationDtoToJSON(requestParameters.createApplicationDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationDtoFromJSON(jsonValue));
    }

    /**
     * Create new application
     */
    async applicationsControllerCreate(requestParameters: ApplicationsControllerCreateRequest): Promise<ApplicationDto> {
        const response = await this.applicationsControllerCreateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get all applications belonging to organization
     */
    async applicationsControllerFindAllByOrganizationRaw(requestParameters: ApplicationsControllerFindAllByOrganizationRequest): Promise<runtime.ApiResponse<ApplicationListDto>> {
        if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
            throw new runtime.RequiredError('organizationId','Required parameter requestParameters.organizationId was null or undefined when calling applicationsControllerFindAllByOrganization.');
        }

        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling applicationsControllerFindAllByOrganization.');
        }

        if (requestParameters.limit === null || requestParameters.limit === undefined) {
            throw new runtime.RequiredError('limit','Required parameter requestParameters.limit was null or undefined when calling applicationsControllerFindAllByOrganization.');
        }

        if (requestParameters.isTest === null || requestParameters.isTest === undefined) {
            throw new runtime.RequiredError('isTest','Required parameter requestParameters.isTest was null or undefined when calling applicationsControllerFindAllByOrganization.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.isTest !== undefined) {
            queryParameters['isTest'] = requestParameters.isTest;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/applications/organization/{organizationId}`.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters.organizationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationListDtoFromJSON(jsonValue));
    }

    /**
     * Get all applications belonging to organization
     */
    async applicationsControllerFindAllByOrganization(requestParameters: ApplicationsControllerFindAllByOrganizationRequest): Promise<ApplicationListDto> {
        const response = await this.applicationsControllerFindAllByOrganizationRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get an application by id
     */
    async applicationsControllerGetApplicationRaw(requestParameters: ApplicationsControllerGetApplicationRequest): Promise<runtime.ApiResponse<ApplicationDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling applicationsControllerGetApplication.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/applications/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationDtoFromJSON(jsonValue));
    }

    /**
     * Get an application by id
     */
    async applicationsControllerGetApplication(requestParameters: ApplicationsControllerGetApplicationRequest): Promise<ApplicationDto> {
        const response = await this.applicationsControllerGetApplicationRaw(requestParameters);
        return await response.value();
    }

    /**
     * Submit application
     */
    async applicationsControllerSubmitRaw(requestParameters: ApplicationsControllerSubmitRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling applicationsControllerSubmit.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/applications/submit/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Submit application
     */
    async applicationsControllerSubmit(requestParameters: ApplicationsControllerSubmitRequest): Promise<void> {
        await this.applicationsControllerSubmitRaw(requestParameters);
    }

    /**
     * validate and save input values of a screen
     */
    async applicationsControllerSubmitScreenRaw(requestParameters: ApplicationsControllerSubmitScreenRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.screenId === null || requestParameters.screenId === undefined) {
            throw new runtime.RequiredError('screenId','Required parameter requestParameters.screenId was null or undefined when calling applicationsControllerSubmitScreen.');
        }

        if (requestParameters.applicationDto === null || requestParameters.applicationDto === undefined) {
            throw new runtime.RequiredError('applicationDto','Required parameter requestParameters.applicationDto was null or undefined when calling applicationsControllerSubmitScreen.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/applications/submitScreen{screenId}`.replace(`{${"screenId"}}`, encodeURIComponent(String(requestParameters.screenId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApplicationDtoToJSON(requestParameters.applicationDto),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * validate and save input values of a screen
     */
    async applicationsControllerSubmitScreen(requestParameters: ApplicationsControllerSubmitScreenRequest): Promise<void> {
        await this.applicationsControllerSubmitScreenRaw(requestParameters);
    }

    /**
     * Update application dependencies
     */
    async applicationsControllerUpdateRaw(requestParameters: ApplicationsControllerUpdateRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling applicationsControllerUpdate.');
        }

        if (requestParameters.updateApplicationDto === null || requestParameters.updateApplicationDto === undefined) {
            throw new runtime.RequiredError('updateApplicationDto','Required parameter requestParameters.updateApplicationDto was null or undefined when calling applicationsControllerUpdate.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/applications/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateApplicationDtoToJSON(requestParameters.updateApplicationDto),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update application dependencies
     */
    async applicationsControllerUpdate(requestParameters: ApplicationsControllerUpdateRequest): Promise<void> {
        await this.applicationsControllerUpdateRaw(requestParameters);
    }

}
