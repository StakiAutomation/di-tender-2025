/* tslint:disable */
/* eslint-disable */
/**
 * Form System API
 * This is an API for formbuilder and form-rendering (application) system
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateFieldDto,
    CreateFieldDtoFromJSON,
    CreateFieldDtoToJSON,
    FieldDto,
    FieldDtoFromJSON,
    FieldDtoToJSON,
    UpdateFieldDto,
    UpdateFieldDtoFromJSON,
    UpdateFieldDtoToJSON,
    UpdateFieldsDisplayOrderDto,
    UpdateFieldsDisplayOrderDtoFromJSON,
    UpdateFieldsDisplayOrderDtoToJSON,
} from '../models';

export interface FieldsControllerCreateRequest {
    createFieldDto: CreateFieldDto;
}

export interface FieldsControllerDeleteRequest {
    id: string;
}

export interface FieldsControllerUpdateRequest {
    id: string;
    updateFieldDto: UpdateFieldDto;
}

export interface FieldsControllerUpdateDisplayOrderRequest {
    updateFieldsDisplayOrderDto: UpdateFieldsDisplayOrderDto;
}

/**
 * 
 */
export class FieldsApi extends runtime.BaseAPI {

    /**
     * Create a field
     */
    async fieldsControllerCreateRaw(requestParameters: FieldsControllerCreateRequest): Promise<runtime.ApiResponse<FieldDto>> {
        if (requestParameters.createFieldDto === null || requestParameters.createFieldDto === undefined) {
            throw new runtime.RequiredError('createFieldDto','Required parameter requestParameters.createFieldDto was null or undefined when calling fieldsControllerCreate.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/fields`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateFieldDtoToJSON(requestParameters.createFieldDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => FieldDtoFromJSON(jsonValue));
    }

    /**
     * Create a field
     */
    async fieldsControllerCreate(requestParameters: FieldsControllerCreateRequest): Promise<FieldDto> {
        const response = await this.fieldsControllerCreateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Delete field by id
     */
    async fieldsControllerDeleteRaw(requestParameters: FieldsControllerDeleteRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling fieldsControllerDelete.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/fields/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete field by id
     */
    async fieldsControllerDelete(requestParameters: FieldsControllerDeleteRequest): Promise<void> {
        await this.fieldsControllerDeleteRaw(requestParameters);
    }

    /**
     * Update field
     */
    async fieldsControllerUpdateRaw(requestParameters: FieldsControllerUpdateRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling fieldsControllerUpdate.');
        }

        if (requestParameters.updateFieldDto === null || requestParameters.updateFieldDto === undefined) {
            throw new runtime.RequiredError('updateFieldDto','Required parameter requestParameters.updateFieldDto was null or undefined when calling fieldsControllerUpdate.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/fields/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateFieldDtoToJSON(requestParameters.updateFieldDto),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update field
     */
    async fieldsControllerUpdate(requestParameters: FieldsControllerUpdateRequest): Promise<void> {
        await this.fieldsControllerUpdateRaw(requestParameters);
    }

    /**
     * Update display order of fields
     */
    async fieldsControllerUpdateDisplayOrderRaw(requestParameters: FieldsControllerUpdateDisplayOrderRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.updateFieldsDisplayOrderDto === null || requestParameters.updateFieldsDisplayOrderDto === undefined) {
            throw new runtime.RequiredError('updateFieldsDisplayOrderDto','Required parameter requestParameters.updateFieldsDisplayOrderDto was null or undefined when calling fieldsControllerUpdateDisplayOrder.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/fields`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateFieldsDisplayOrderDtoToJSON(requestParameters.updateFieldsDisplayOrderDto),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update display order of fields
     */
    async fieldsControllerUpdateDisplayOrder(requestParameters: FieldsControllerUpdateDisplayOrderRequest): Promise<void> {
        await this.fieldsControllerUpdateDisplayOrderRaw(requestParameters);
    }

}
