/* tslint:disable */
/* eslint-disable */
/**
 * Form System API
 * This is an API for formbuilder and form-rendering (application) system
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateFormCertificationTypeDto,
    CreateFormCertificationTypeDtoFromJSON,
    CreateFormCertificationTypeDtoToJSON,
    FormCertificationTypeDto,
    FormCertificationTypeDtoFromJSON,
    FormCertificationTypeDtoToJSON,
} from '../models';

export interface FormCertificationTypesControllerCreateRequest {
    createFormCertificationTypeDto: CreateFormCertificationTypeDto;
}

export interface FormCertificationTypesControllerDeleteRequest {
    id: string;
}

/**
 * 
 */
export class FormCertificationTypesApi extends runtime.BaseAPI {

    /**
     * Add form certification type
     */
    async formCertificationTypesControllerCreateRaw(requestParameters: FormCertificationTypesControllerCreateRequest): Promise<runtime.ApiResponse<FormCertificationTypeDto>> {
        if (requestParameters.createFormCertificationTypeDto === null || requestParameters.createFormCertificationTypeDto === undefined) {
            throw new runtime.RequiredError('createFormCertificationTypeDto','Required parameter requestParameters.createFormCertificationTypeDto was null or undefined when calling formCertificationTypesControllerCreate.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/formCertificationTypes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateFormCertificationTypeDtoToJSON(requestParameters.createFormCertificationTypeDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => FormCertificationTypeDtoFromJSON(jsonValue));
    }

    /**
     * Add form certification type
     */
    async formCertificationTypesControllerCreate(requestParameters: FormCertificationTypesControllerCreateRequest): Promise<FormCertificationTypeDto> {
        const response = await this.formCertificationTypesControllerCreateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Remove form certification type
     */
    async formCertificationTypesControllerDeleteRaw(requestParameters: FormCertificationTypesControllerDeleteRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling formCertificationTypesControllerDelete.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/formCertificationTypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove form certification type
     */
    async formCertificationTypesControllerDelete(requestParameters: FormCertificationTypesControllerDeleteRequest): Promise<void> {
        await this.formCertificationTypesControllerDeleteRaw(requestParameters);
    }

}
