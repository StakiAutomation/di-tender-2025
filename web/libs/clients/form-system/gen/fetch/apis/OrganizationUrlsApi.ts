/* tslint:disable */
/* eslint-disable */
/**
 * Form System API
 * This is an API for formbuilder and form-rendering (application) system
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateOrganizationUrlDto,
    CreateOrganizationUrlDtoFromJSON,
    CreateOrganizationUrlDtoToJSON,
    OrganizationUrlDto,
    OrganizationUrlDtoFromJSON,
    OrganizationUrlDtoToJSON,
    UpdateOrganizationUrlDto,
    UpdateOrganizationUrlDtoFromJSON,
    UpdateOrganizationUrlDtoToJSON,
} from '../models';

export interface OrganizationUrlsControllerCreateRequest {
    createOrganizationUrlDto: CreateOrganizationUrlDto;
}

export interface OrganizationUrlsControllerDeleteRequest {
    id: string;
}

export interface OrganizationUrlsControllerUpdateRequest {
    id: string;
    updateOrganizationUrlDto: UpdateOrganizationUrlDto;
}

/**
 * 
 */
export class OrganizationUrlsApi extends runtime.BaseAPI {

    /**
     * Add organization url
     */
    async organizationUrlsControllerCreateRaw(requestParameters: OrganizationUrlsControllerCreateRequest): Promise<runtime.ApiResponse<OrganizationUrlDto>> {
        if (requestParameters.createOrganizationUrlDto === null || requestParameters.createOrganizationUrlDto === undefined) {
            throw new runtime.RequiredError('createOrganizationUrlDto','Required parameter requestParameters.createOrganizationUrlDto was null or undefined when calling organizationUrlsControllerCreate.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/organizationUrls`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateOrganizationUrlDtoToJSON(requestParameters.createOrganizationUrlDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganizationUrlDtoFromJSON(jsonValue));
    }

    /**
     * Add organization url
     */
    async organizationUrlsControllerCreate(requestParameters: OrganizationUrlsControllerCreateRequest): Promise<OrganizationUrlDto> {
        const response = await this.organizationUrlsControllerCreateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Remove organization url
     */
    async organizationUrlsControllerDeleteRaw(requestParameters: OrganizationUrlsControllerDeleteRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling organizationUrlsControllerDelete.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/organizationUrls/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove organization url
     */
    async organizationUrlsControllerDelete(requestParameters: OrganizationUrlsControllerDeleteRequest): Promise<void> {
        await this.organizationUrlsControllerDeleteRaw(requestParameters);
    }

    /**
     * Update an organization url
     */
    async organizationUrlsControllerUpdateRaw(requestParameters: OrganizationUrlsControllerUpdateRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling organizationUrlsControllerUpdate.');
        }

        if (requestParameters.updateOrganizationUrlDto === null || requestParameters.updateOrganizationUrlDto === undefined) {
            throw new runtime.RequiredError('updateOrganizationUrlDto','Required parameter requestParameters.updateOrganizationUrlDto was null or undefined when calling organizationUrlsControllerUpdate.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/organizationUrls/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateOrganizationUrlDtoToJSON(requestParameters.updateOrganizationUrlDto),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update an organization url
     */
    async organizationUrlsControllerUpdate(requestParameters: OrganizationUrlsControllerUpdateRequest): Promise<void> {
        await this.organizationUrlsControllerUpdateRaw(requestParameters);
    }

}
