/* tslint:disable */
/* eslint-disable */
/**
 * Form System API
 * This is an API for formbuilder and form-rendering (application) system
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    FormResponseDto,
    FormResponseDtoFromJSON,
    FormResponseDtoToJSON,
    UpdateFormDto,
    UpdateFormDtoFromJSON,
    UpdateFormDtoToJSON,
    UpdateFormResponse,
    UpdateFormResponseFromJSON,
    UpdateFormResponseToJSON,
} from '../models';

export interface FormsControllerChangePublishedFormRequest {
    id: string;
}

export interface FormsControllerCreateRequest {
    organizationNationalId: string;
}

export interface FormsControllerDeleteRequest {
    id: string;
}

export interface FormsControllerFindAllRequest {
    nationalId: string;
}

export interface FormsControllerFindOneRequest {
    id: string;
}

export interface FormsControllerPublishRequest {
    id: string;
}

export interface FormsControllerUpdateFormRequest {
    id: string;
    updateFormDto: UpdateFormDto;
}

/**
 * 
 */
export class FormsApi extends runtime.BaseAPI {

    /**
     * Change published form
     */
    async formsControllerChangePublishedFormRaw(requestParameters: FormsControllerChangePublishedFormRequest): Promise<runtime.ApiResponse<FormResponseDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling formsControllerChangePublishedForm.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/forms/changePublished/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => FormResponseDtoFromJSON(jsonValue));
    }

    /**
     * Change published form
     */
    async formsControllerChangePublishedForm(requestParameters: FormsControllerChangePublishedFormRequest): Promise<FormResponseDto> {
        const response = await this.formsControllerChangePublishedFormRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create new form
     */
    async formsControllerCreateRaw(requestParameters: FormsControllerCreateRequest): Promise<runtime.ApiResponse<FormResponseDto>> {
        if (requestParameters.organizationNationalId === null || requestParameters.organizationNationalId === undefined) {
            throw new runtime.RequiredError('organizationNationalId','Required parameter requestParameters.organizationNationalId was null or undefined when calling formsControllerCreate.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/forms/{organizationNationalId}`.replace(`{${"organizationNationalId"}}`, encodeURIComponent(String(requestParameters.organizationNationalId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => FormResponseDtoFromJSON(jsonValue));
    }

    /**
     * Create new form
     */
    async formsControllerCreate(requestParameters: FormsControllerCreateRequest): Promise<FormResponseDto> {
        const response = await this.formsControllerCreateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Delete form
     */
    async formsControllerDeleteRaw(requestParameters: FormsControllerDeleteRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling formsControllerDelete.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/forms/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete form
     */
    async formsControllerDelete(requestParameters: FormsControllerDeleteRequest): Promise<void> {
        await this.formsControllerDeleteRaw(requestParameters);
    }

    /**
     * Get all forms belonging to organization
     */
    async formsControllerFindAllRaw(requestParameters: FormsControllerFindAllRequest): Promise<runtime.ApiResponse<FormResponseDto>> {
        if (requestParameters.nationalId === null || requestParameters.nationalId === undefined) {
            throw new runtime.RequiredError('nationalId','Required parameter requestParameters.nationalId was null or undefined when calling formsControllerFindAll.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/forms/organization/{nationalId}`.replace(`{${"nationalId"}}`, encodeURIComponent(String(requestParameters.nationalId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => FormResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get all forms belonging to organization
     */
    async formsControllerFindAll(requestParameters: FormsControllerFindAllRequest): Promise<FormResponseDto> {
        const response = await this.formsControllerFindAllRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get form by id
     */
    async formsControllerFindOneRaw(requestParameters: FormsControllerFindOneRequest): Promise<runtime.ApiResponse<FormResponseDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling formsControllerFindOne.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/forms/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => FormResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get form by id
     */
    async formsControllerFindOne(requestParameters: FormsControllerFindOneRequest): Promise<FormResponseDto> {
        const response = await this.formsControllerFindOneRaw(requestParameters);
        return await response.value();
    }

    /**
     * Publish form
     */
    async formsControllerPublishRaw(requestParameters: FormsControllerPublishRequest): Promise<runtime.ApiResponse<FormResponseDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling formsControllerPublish.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/forms/publish/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => FormResponseDtoFromJSON(jsonValue));
    }

    /**
     * Publish form
     */
    async formsControllerPublish(requestParameters: FormsControllerPublishRequest): Promise<FormResponseDto> {
        const response = await this.formsControllerPublishRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update form
     */
    async formsControllerUpdateFormRaw(requestParameters: FormsControllerUpdateFormRequest): Promise<runtime.ApiResponse<UpdateFormResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling formsControllerUpdateForm.');
        }

        if (requestParameters.updateFormDto === null || requestParameters.updateFormDto === undefined) {
            throw new runtime.RequiredError('updateFormDto','Required parameter requestParameters.updateFormDto was null or undefined when calling formsControllerUpdateForm.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/forms/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateFormDtoToJSON(requestParameters.updateFormDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateFormResponseFromJSON(jsonValue));
    }

    /**
     * Update form
     */
    async formsControllerUpdateForm(requestParameters: FormsControllerUpdateFormRequest): Promise<UpdateFormResponse> {
        const response = await this.formsControllerUpdateFormRaw(requestParameters);
        return await response.value();
    }

}
