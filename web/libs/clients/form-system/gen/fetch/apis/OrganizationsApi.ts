/* tslint:disable */
/* eslint-disable */
/**
 * Form System API
 * This is an API for formbuilder and form-rendering (application) system
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateOrganizationDto,
    CreateOrganizationDtoFromJSON,
    CreateOrganizationDtoToJSON,
    OrganizationAdminDto,
    OrganizationAdminDtoFromJSON,
    OrganizationAdminDtoToJSON,
    OrganizationDto,
    OrganizationDtoFromJSON,
    OrganizationDtoToJSON,
    OrganizationsResponseDto,
    OrganizationsResponseDtoFromJSON,
    OrganizationsResponseDtoToJSON,
} from '../models';

export interface OrganizationsControllerCreateRequest {
    createOrganizationDto: CreateOrganizationDto;
}

export interface OrganizationsControllerFindAdminRequest {
    nationalId: string;
}

export interface OrganizationsControllerFindOneRequest {
    id: string;
}

/**
 * 
 */
export class OrganizationsApi extends runtime.BaseAPI {

    /**
     * Create an organization
     */
    async organizationsControllerCreateRaw(requestParameters: OrganizationsControllerCreateRequest): Promise<runtime.ApiResponse<OrganizationDto>> {
        if (requestParameters.createOrganizationDto === null || requestParameters.createOrganizationDto === undefined) {
            throw new runtime.RequiredError('createOrganizationDto','Required parameter requestParameters.createOrganizationDto was null or undefined when calling organizationsControllerCreate.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/organizations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateOrganizationDtoToJSON(requestParameters.createOrganizationDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganizationDtoFromJSON(jsonValue));
    }

    /**
     * Create an organization
     */
    async organizationsControllerCreate(requestParameters: OrganizationsControllerCreateRequest): Promise<OrganizationDto> {
        const response = await this.organizationsControllerCreateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get organization admin
     */
    async organizationsControllerFindAdminRaw(requestParameters: OrganizationsControllerFindAdminRequest): Promise<runtime.ApiResponse<OrganizationAdminDto>> {
        if (requestParameters.nationalId === null || requestParameters.nationalId === undefined) {
            throw new runtime.RequiredError('nationalId','Required parameter requestParameters.nationalId was null or undefined when calling organizationsControllerFindAdmin.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/organizations/admin/{nationalId}`.replace(`{${"nationalId"}}`, encodeURIComponent(String(requestParameters.nationalId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganizationAdminDtoFromJSON(jsonValue));
    }

    /**
     * Get organization admin
     */
    async organizationsControllerFindAdmin(requestParameters: OrganizationsControllerFindAdminRequest): Promise<OrganizationAdminDto> {
        const response = await this.organizationsControllerFindAdminRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get all Organizations
     */
    async organizationsControllerFindAllRaw(): Promise<runtime.ApiResponse<OrganizationsResponseDto>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/organizations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganizationsResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get all Organizations
     */
    async organizationsControllerFindAll(): Promise<OrganizationsResponseDto> {
        const response = await this.organizationsControllerFindAllRaw();
        return await response.value();
    }

    /**
     * Get an organization by id
     */
    async organizationsControllerFindOneRaw(requestParameters: OrganizationsControllerFindOneRequest): Promise<runtime.ApiResponse<OrganizationDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling organizationsControllerFindOne.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/organizations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganizationDtoFromJSON(jsonValue));
    }

    /**
     * Get an organization by id
     */
    async organizationsControllerFindOne(requestParameters: OrganizationsControllerFindOneRequest): Promise<OrganizationDto> {
        const response = await this.organizationsControllerFindOneRaw(requestParameters);
        return await response.value();
    }

}
