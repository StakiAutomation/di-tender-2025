/* tslint:disable */
/* eslint-disable */
/**
 * Form System API
 * This is an API for formbuilder and form-rendering (application) system
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateFormApplicantTypeDto,
    CreateFormApplicantTypeDtoFromJSON,
    CreateFormApplicantTypeDtoToJSON,
    FormApplicantTypeDto,
    FormApplicantTypeDtoFromJSON,
    FormApplicantTypeDtoToJSON,
    UpdateFormApplicantTypeDto,
    UpdateFormApplicantTypeDtoFromJSON,
    UpdateFormApplicantTypeDtoToJSON,
} from '../models';

export interface FormApplicantTypesControllerCreateRequest {
    createFormApplicantTypeDto: CreateFormApplicantTypeDto;
}

export interface FormApplicantTypesControllerDeleteRequest {
    id: string;
}

export interface FormApplicantTypesControllerUpdateRequest {
    id: string;
    updateFormApplicantTypeDto: UpdateFormApplicantTypeDto;
}

/**
 * 
 */
export class FormApplicantTypesApi extends runtime.BaseAPI {

    /**
     * Add form applicant type
     */
    async formApplicantTypesControllerCreateRaw(requestParameters: FormApplicantTypesControllerCreateRequest): Promise<runtime.ApiResponse<FormApplicantTypeDto>> {
        if (requestParameters.createFormApplicantTypeDto === null || requestParameters.createFormApplicantTypeDto === undefined) {
            throw new runtime.RequiredError('createFormApplicantTypeDto','Required parameter requestParameters.createFormApplicantTypeDto was null or undefined when calling formApplicantTypesControllerCreate.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/formApplicantTypes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateFormApplicantTypeDtoToJSON(requestParameters.createFormApplicantTypeDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => FormApplicantTypeDtoFromJSON(jsonValue));
    }

    /**
     * Add form applicant type
     */
    async formApplicantTypesControllerCreate(requestParameters: FormApplicantTypesControllerCreateRequest): Promise<FormApplicantTypeDto> {
        const response = await this.formApplicantTypesControllerCreateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Delete form applicant
     */
    async formApplicantTypesControllerDeleteRaw(requestParameters: FormApplicantTypesControllerDeleteRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling formApplicantTypesControllerDelete.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/formApplicantTypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete form applicant
     */
    async formApplicantTypesControllerDelete(requestParameters: FormApplicantTypesControllerDeleteRequest): Promise<void> {
        await this.formApplicantTypesControllerDeleteRaw(requestParameters);
    }

    /**
     * Update form applicant
     */
    async formApplicantTypesControllerUpdateRaw(requestParameters: FormApplicantTypesControllerUpdateRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling formApplicantTypesControllerUpdate.');
        }

        if (requestParameters.updateFormApplicantTypeDto === null || requestParameters.updateFormApplicantTypeDto === undefined) {
            throw new runtime.RequiredError('updateFormApplicantTypeDto','Required parameter requestParameters.updateFormApplicantTypeDto was null or undefined when calling formApplicantTypesControllerUpdate.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/formApplicantTypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateFormApplicantTypeDtoToJSON(requestParameters.updateFormApplicantTypeDto),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update form applicant
     */
    async formApplicantTypesControllerUpdate(requestParameters: FormApplicantTypesControllerUpdateRequest): Promise<void> {
        await this.formApplicantTypesControllerUpdateRaw(requestParameters);
    }

}
