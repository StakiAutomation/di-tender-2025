/* tslint:disable */
/* eslint-disable */
/**
 * SGS Rest API
 * Ownerchange API developed in .Net6.0 - Release-13 : 20231219.2
 *
 * The version of the OpenAPI document: 2.0
 * Contact: tolvuhjalp@samgongustofa.is
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    PostCoOwner,
    PostCoOwnerFromJSON,
    PostCoOwnerFromJSONTyped,
    PostCoOwnerToJSON,
    PostOperator,
    PostOperatorFromJSON,
    PostOperatorFromJSONTyped,
    PostOperatorToJSON,
} from './';

/**
 * Check if person owner change is ok
 * @export
 * @interface PostPersonOwnerChange
 */
export interface PostPersonOwnerChange {
    /**
     * Vehicle permanent number
     * @type {string}
     * @memberof PostPersonOwnerChange
     */
    permno: string;
    /**
     * Buyer's social security number
     * @type {string}
     * @memberof PostPersonOwnerChange
     */
    personIdNumber: string;
    /**
     * Current owner's social security number
     * @type {string}
     * @memberof PostPersonOwnerChange
     */
    currentOwnerPersonIdNumber: string;
    /**
     * Date of purchase
     * @type {Date}
     * @memberof PostPersonOwnerChange
     */
    purchaseDate?: Date;
    /**
     * Insurance company code for buyer, see REST GET endpoint /vehicle/codetables/insurancecompanies
     * @type {string}
     * @memberof PostPersonOwnerChange
     */
    insuranceCompanyCode: string;
    /**
     * Vehicle use group, see REST GET endpoint /vehicle/codetables/usegroups
     * @type {string}
     * @memberof PostPersonOwnerChange
     */
    useGroup: string;
    /**
     * Amount of sale
     * @type {number}
     * @memberof PostPersonOwnerChange
     */
    saleAmount: number;
    /**
     * Seller's email
     * @type {string}
     * @memberof PostPersonOwnerChange
     */
    sellerEmail?: string | null;
    /**
     * Buyer's email
     * @type {string}
     * @memberof PostPersonOwnerChange
     */
    buyerEmail?: string | null;
    /**
     * Operator's email
     * @type {string}
     * @memberof PostPersonOwnerChange
     */
    operatorEmail?: string | null;
    /**
     * List of vehicle operators
     * @type {Array<PostOperator>}
     * @memberof PostPersonOwnerChange
     */
    operators?: Array<PostOperator> | null;
    /**
     * List of vehicle co owners
     * @type {Array<PostCoOwner>}
     * @memberof PostPersonOwnerChange
     */
    coOwners?: Array<PostCoOwner> | null;
    /**
     * Reporting person's social security number (car sale)
     * @type {string}
     * @memberof PostPersonOwnerChange
     */
    reportingPersonIdNumber?: string | null;
    /**
     * Current mileage on vehicle when owner change is reported
     * @type {number}
     * @memberof PostPersonOwnerChange
     */
    mileage?: number | null;
}

export function PostPersonOwnerChangeFromJSON(json: any): PostPersonOwnerChange {
    return PostPersonOwnerChangeFromJSONTyped(json, false);
}

export function PostPersonOwnerChangeFromJSONTyped(json: any, ignoreDiscriminator: boolean): PostPersonOwnerChange {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'permno': json['permno'],
        'personIdNumber': json['personIdNumber'],
        'currentOwnerPersonIdNumber': json['currentOwnerPersonIdNumber'],
        'purchaseDate': !exists(json, 'purchaseDate') ? undefined : (new Date(json['purchaseDate'])),
        'insuranceCompanyCode': json['insuranceCompanyCode'],
        'useGroup': json['useGroup'],
        'saleAmount': json['saleAmount'],
        'sellerEmail': !exists(json, 'sellerEmail') ? undefined : json['sellerEmail'],
        'buyerEmail': !exists(json, 'buyerEmail') ? undefined : json['buyerEmail'],
        'operatorEmail': !exists(json, 'operatorEmail') ? undefined : json['operatorEmail'],
        'operators': !exists(json, 'operators') ? undefined : (json['operators'] === null ? null : (json['operators'] as Array<any>).map(PostOperatorFromJSON)),
        'coOwners': !exists(json, 'coOwners') ? undefined : (json['coOwners'] === null ? null : (json['coOwners'] as Array<any>).map(PostCoOwnerFromJSON)),
        'reportingPersonIdNumber': !exists(json, 'reportingPersonIdNumber') ? undefined : json['reportingPersonIdNumber'],
        'mileage': !exists(json, 'mileage') ? undefined : json['mileage'],
    };
}

export function PostPersonOwnerChangeToJSON(value?: PostPersonOwnerChange | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'permno': value.permno,
        'personIdNumber': value.personIdNumber,
        'currentOwnerPersonIdNumber': value.currentOwnerPersonIdNumber,
        'purchaseDate': value.purchaseDate === undefined ? undefined : (value.purchaseDate.toISOString()),
        'insuranceCompanyCode': value.insuranceCompanyCode,
        'useGroup': value.useGroup,
        'saleAmount': value.saleAmount,
        'sellerEmail': value.sellerEmail,
        'buyerEmail': value.buyerEmail,
        'operatorEmail': value.operatorEmail,
        'operators': value.operators === undefined ? undefined : (value.operators === null ? null : (value.operators as Array<any>).map(PostOperatorToJSON)),
        'coOwners': value.coOwners === undefined ? undefined : (value.coOwners === null ? null : (value.coOwners as Array<any>).map(PostCoOwnerToJSON)),
        'reportingPersonIdNumber': value.reportingPersonIdNumber,
        'mileage': value.mileage,
    };
}


