/* tslint:disable */
/* eslint-disable */
/**
 * SGS Rest API
 * Ownerchange API developed in .Net6.0 - Release-13 : 20231219.2
 *
 * The version of the OpenAPI document: 2.0
 * Contact: tolvuhjalp@samgongustofa.is
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    OwnerChangeDto,
    OwnerChangeDtoFromJSON,
    OwnerChangeDtoToJSON,
    PostOwnerChange,
    PostOwnerChangeFromJSON,
    PostOwnerChangeToJSON,
    PostOwnerChangeForFinancialCompanies,
    PostOwnerChangeForFinancialCompaniesFromJSON,
    PostOwnerChangeForFinancialCompaniesToJSON,
    PostOwnerChangeWithBase64Contract,
    PostOwnerChangeWithBase64ContractFromJSON,
    PostOwnerChangeWithBase64ContractToJSON,
    PostPersonOwnerChange,
    PostPersonOwnerChangeFromJSON,
    PostPersonOwnerChangeToJSON,
    PostVehicleOwnerChange,
    PostVehicleOwnerChangeFromJSON,
    PostVehicleOwnerChangeToJSON,
    ProblemDetails,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    ReturnTypeMessage,
    ReturnTypeMessageFromJSON,
    ReturnTypeMessageToJSON,
    ValidationProblemDetails,
    ValidationProblemDetailsFromJSON,
    ValidationProblemDetailsToJSON,
} from '../models';

export interface FinancialcompaniesPostRequest {
    apiVersion: string;
    apiVersion2: string;
    postOwnerChangeForFinancialCompanies?: PostOwnerChangeForFinancialCompanies;
}

export interface GetOwnerChangeRequest {
    permno: string;
    apiVersion: string;
    apiVersion2: string;
}

export interface PersoncheckPostRequest {
    apiVersion: string;
    apiVersion2: string;
    postPersonOwnerChange?: PostPersonOwnerChange;
}

export interface RootPostRequest {
    apiVersion: string;
    apiVersion2: string;
    postOwnerChange?: PostOwnerChange;
}

export interface VehiclecheckPostRequest {
    apiVersion: string;
    apiVersion2: string;
    postVehicleOwnerChange?: PostVehicleOwnerChange;
}

export interface WithcontractPostRequest {
    apiVersion: string;
    apiVersion2: string;
    postOwnerChangeWithBase64Contract?: PostOwnerChangeWithBase64Contract;
}

/**
 * 
 */
export class OwnerChangeApi extends runtime.BaseAPI {

    /**
     */
    async financialcompaniesPostRaw(requestParameters: FinancialcompaniesPostRequest): Promise<runtime.ApiResponse<Array<ReturnTypeMessage>>> {
        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling financialcompaniesPost.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling financialcompaniesPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/financialcompanies`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostOwnerChangeForFinancialCompaniesToJSON(requestParameters.postOwnerChangeForFinancialCompanies),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ReturnTypeMessageFromJSON));
    }

    /**
     */
    async financialcompaniesPost(requestParameters: FinancialcompaniesPostRequest): Promise<Array<ReturnTypeMessage>> {
        const response = await this.financialcompaniesPostRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getOwnerChangeRaw(requestParameters: GetOwnerChangeRequest): Promise<runtime.ApiResponse<OwnerChangeDto>> {
        if (requestParameters.permno === null || requestParameters.permno === undefined) {
            throw new runtime.RequiredError('permno','Required parameter requestParameters.permno was null or undefined when calling getOwnerChange.');
        }

        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling getOwnerChange.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling getOwnerChange.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/{permno}`.replace(`{${"permno"}}`, encodeURIComponent(String(requestParameters.permno))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OwnerChangeDtoFromJSON(jsonValue));
    }

    /**
     */
    async getOwnerChange(requestParameters: GetOwnerChangeRequest): Promise<OwnerChangeDto> {
        const response = await this.getOwnerChangeRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async personcheckPostRaw(requestParameters: PersoncheckPostRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling personcheckPost.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling personcheckPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/personcheck`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostPersonOwnerChangeToJSON(requestParameters.postPersonOwnerChange),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async personcheckPost(requestParameters: PersoncheckPostRequest): Promise<void> {
        await this.personcheckPostRaw(requestParameters);
    }

    /**
     */
    async rootPostRaw(requestParameters: RootPostRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling rootPost.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling rootPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostOwnerChangeToJSON(requestParameters.postOwnerChange),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async rootPost(requestParameters: RootPostRequest): Promise<void> {
        await this.rootPostRaw(requestParameters);
    }

    /**
     */
    async vehiclecheckPostRaw(requestParameters: VehiclecheckPostRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling vehiclecheckPost.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling vehiclecheckPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/vehiclecheck`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostVehicleOwnerChangeToJSON(requestParameters.postVehicleOwnerChange),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async vehiclecheckPost(requestParameters: VehiclecheckPostRequest): Promise<void> {
        await this.vehiclecheckPostRaw(requestParameters);
    }

    /**
     */
    async withcontractPostRaw(requestParameters: WithcontractPostRequest): Promise<runtime.ApiResponse<Array<ReturnTypeMessage>>> {
        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling withcontractPost.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling withcontractPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/withcontract`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostOwnerChangeWithBase64ContractToJSON(requestParameters.postOwnerChangeWithBase64Contract),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ReturnTypeMessageFromJSON));
    }

    /**
     */
    async withcontractPost(requestParameters: WithcontractPostRequest): Promise<Array<ReturnTypeMessage>> {
        const response = await this.withcontractPostRaw(requestParameters);
        return await response.value();
    }

}
