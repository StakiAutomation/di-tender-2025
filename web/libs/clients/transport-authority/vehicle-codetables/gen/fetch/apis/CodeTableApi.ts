/* tslint:disable */
/* eslint-disable */
/**
 * SGS Rest API
 * Vehicle Codetables API, developed in .Net6.0 - Release-4 : 20221202.1
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tolvuhjalp@samgongustofa.is
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AdditionalResultDto,
    AdditionalResultDtoFromJSON,
    AdditionalResultDtoToJSON,
    AuthenticateModel,
    AuthenticateModelFromJSON,
    AuthenticateModelToJSON,
    FuelDto,
    FuelDtoFromJSON,
    FuelDtoToJSON,
    ImportDto,
    ImportDtoFromJSON,
    ImportDtoToJSON,
    InspectionItemTypeDto,
    InspectionItemTypeDtoFromJSON,
    InspectionItemTypeDtoToJSON,
    InspectionResultDto,
    InspectionResultDtoFromJSON,
    InspectionResultDtoToJSON,
    InspectionTrackDto,
    InspectionTrackDtoFromJSON,
    InspectionTrackDtoToJSON,
    InspectionTypeDto,
    InspectionTypeDtoFromJSON,
    InspectionTypeDtoToJSON,
    OfficerDto,
    OfficerDtoFromJSON,
    OfficerDtoToJSON,
    PlateReasonDto,
    PlateReasonDtoFromJSON,
    PlateReasonDtoToJSON,
    PlateTypeDto,
    PlateTypeDtoFromJSON,
    PlateTypeDtoToJSON,
    ProblemDetails,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    RegGroupDto,
    RegGroupDtoFromJSON,
    RegGroupDtoToJSON,
    RegistrationCodeDto,
    RegistrationCodeDtoFromJSON,
    RegistrationCodeDtoToJSON,
    TrafficRegistrationDto,
    TrafficRegistrationDtoFromJSON,
    TrafficRegistrationDtoToJSON,
    UpdateLockTypeDto,
    UpdateLockTypeDtoFromJSON,
    UpdateLockTypeDtoToJSON,
    UseGroupDto,
    UseGroupDtoFromJSON,
    UseGroupDtoToJSON,
} from '../models';

export interface AuthenticatePostRequest {
    apiVersion?: string;
    apiVersion2?: string;
    authenticateModel?: AuthenticateModel;
}

export interface ColorsAllGetRequest {
    apiVersion?: string;
    apiVersion2?: string;
}

export interface ColorsGetRequest {
    apiVersion?: string;
    apiVersion2?: string;
}

export interface FuelAllGetRequest {
    apiVersion?: string;
    apiVersion2?: string;
}

export interface FuelGetRequest {
    apiVersion?: string;
    apiVersion2?: string;
}

export interface ImportcodesAllGetRequest {
    apiVersion?: string;
    apiVersion2?: string;
}

export interface ImportcodesGetRequest {
    apiVersion?: string;
    apiVersion2?: string;
}

export interface InspectionsAdditionalresultsAllGetRequest {
    apiVersion?: string;
    apiVersion2?: string;
}

export interface InspectionsAdditionalresultsGetRequest {
    apiVersion?: string;
    apiVersion2?: string;
}

export interface InspectionsItemsAllGetRequest {
    apiVersion?: string;
    apiVersion2?: string;
}

export interface InspectionsItemsGetRequest {
    apiVersion?: string;
    apiVersion2?: string;
}

export interface InspectionsOfficersAllGetRequest {
    apiVersion?: string;
    apiVersion2?: string;
}

export interface InspectionsOfficersGetRequest {
    apiVersion?: string;
    apiVersion2?: string;
}

export interface InspectionsResultsAllGetRequest {
    apiVersion?: string;
    apiVersion2?: string;
}

export interface InspectionsResultsGetRequest {
    apiVersion?: string;
    apiVersion2?: string;
}

export interface InspectionsTracksAllGetRequest {
    apiVersion?: string;
    apiVersion2?: string;
}

export interface InspectionsTracksGetRequest {
    apiVersion?: string;
    apiVersion2?: string;
}

export interface InspectionsTypesAllGetRequest {
    apiVersion?: string;
    apiVersion2?: string;
}

export interface InspectionsTypesGetRequest {
    apiVersion?: string;
    apiVersion2?: string;
}

export interface InsurancecompaniesAllGetRequest {
    apiVersion?: string;
    apiVersion2?: string;
}

export interface InsurancecompaniesGetRequest {
    apiVersion?: string;
    apiVersion2?: string;
}

export interface PlatereasonsAllGetRequest {
    apiVersion?: string;
    apiVersion2?: string;
}

export interface PlatereasonsGetRequest {
    apiVersion?: string;
    apiVersion2?: string;
}

export interface PlatetypesAllGetRequest {
    apiVersion?: string;
    apiVersion2?: string;
}

export interface PlatetypesGetRequest {
    apiVersion?: string;
    apiVersion2?: string;
}

export interface ReggroupsAllGetRequest {
    apiVersion?: string;
    apiVersion2?: string;
}

export interface ReggroupsGetRequest {
    apiVersion?: string;
    apiVersion2?: string;
}

export interface RegistrationcodesAllGetRequest {
    apiVersion?: string;
    apiVersion2?: string;
}

export interface RegistrationcodesGetRequest {
    apiVersion?: string;
    apiVersion2?: string;
}

export interface TaxgroupsAllGetRequest {
    apiVersion?: string;
    apiVersion2?: string;
}

export interface TaxgroupsGetRequest {
    apiVersion?: string;
    apiVersion2?: string;
}

export interface TrafficregistrationsAllGetRequest {
    apiVersion?: string;
    apiVersion2?: string;
}

export interface TrafficregistrationsGetRequest {
    apiVersion?: string;
    apiVersion2?: string;
}

export interface UpdatelocksAllGetRequest {
    apiVersion?: string;
    apiVersion2?: string;
}

export interface UpdatelocksGetRequest {
    apiVersion?: string;
    apiVersion2?: string;
}

export interface UsegroupsAllGetRequest {
    apiVersion?: string;
    apiVersion2?: string;
}

export interface UsegroupsGetRequest {
    apiVersion?: string;
    apiVersion2?: string;
}

/**
 * 
 */
export class CodeTableApi extends runtime.BaseAPI {

    /**
     */
    async authenticatePostRaw(requestParameters: AuthenticatePostRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/authenticate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthenticateModelToJSON(requestParameters.authenticateModel),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async authenticatePost(requestParameters: AuthenticatePostRequest): Promise<void> {
        await this.authenticatePostRaw(requestParameters);
    }

    /**
     */
    async colorsAllGetRaw(requestParameters: ColorsAllGetRequest): Promise<runtime.ApiResponse<Array<UseGroupDto>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/colors/all`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UseGroupDtoFromJSON));
    }

    /**
     */
    async colorsAllGet(requestParameters: ColorsAllGetRequest): Promise<Array<UseGroupDto>> {
        const response = await this.colorsAllGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async colorsGetRaw(requestParameters: ColorsGetRequest): Promise<runtime.ApiResponse<Array<UseGroupDto>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/colors`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UseGroupDtoFromJSON));
    }

    /**
     */
    async colorsGet(requestParameters: ColorsGetRequest): Promise<Array<UseGroupDto>> {
        const response = await this.colorsGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async fuelAllGetRaw(requestParameters: FuelAllGetRequest): Promise<runtime.ApiResponse<Array<FuelDto>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/fuel/all`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FuelDtoFromJSON));
    }

    /**
     */
    async fuelAllGet(requestParameters: FuelAllGetRequest): Promise<Array<FuelDto>> {
        const response = await this.fuelAllGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async fuelGetRaw(requestParameters: FuelGetRequest): Promise<runtime.ApiResponse<Array<FuelDto>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/fuel`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FuelDtoFromJSON));
    }

    /**
     */
    async fuelGet(requestParameters: FuelGetRequest): Promise<Array<FuelDto>> {
        const response = await this.fuelGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async importcodesAllGetRaw(requestParameters: ImportcodesAllGetRequest): Promise<runtime.ApiResponse<Array<ImportDto>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/importcodes/all`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ImportDtoFromJSON));
    }

    /**
     */
    async importcodesAllGet(requestParameters: ImportcodesAllGetRequest): Promise<Array<ImportDto>> {
        const response = await this.importcodesAllGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async importcodesGetRaw(requestParameters: ImportcodesGetRequest): Promise<runtime.ApiResponse<Array<ImportDto>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/importcodes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ImportDtoFromJSON));
    }

    /**
     */
    async importcodesGet(requestParameters: ImportcodesGetRequest): Promise<Array<ImportDto>> {
        const response = await this.importcodesGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async inspectionsAdditionalresultsAllGetRaw(requestParameters: InspectionsAdditionalresultsAllGetRequest): Promise<runtime.ApiResponse<Array<AdditionalResultDto>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/inspections/additionalresults/all`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AdditionalResultDtoFromJSON));
    }

    /**
     */
    async inspectionsAdditionalresultsAllGet(requestParameters: InspectionsAdditionalresultsAllGetRequest): Promise<Array<AdditionalResultDto>> {
        const response = await this.inspectionsAdditionalresultsAllGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async inspectionsAdditionalresultsGetRaw(requestParameters: InspectionsAdditionalresultsGetRequest): Promise<runtime.ApiResponse<Array<AdditionalResultDto>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/inspections/additionalresults`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AdditionalResultDtoFromJSON));
    }

    /**
     */
    async inspectionsAdditionalresultsGet(requestParameters: InspectionsAdditionalresultsGetRequest): Promise<Array<AdditionalResultDto>> {
        const response = await this.inspectionsAdditionalresultsGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async inspectionsItemsAllGetRaw(requestParameters: InspectionsItemsAllGetRequest): Promise<runtime.ApiResponse<Array<InspectionItemTypeDto>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/inspections/items/all`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InspectionItemTypeDtoFromJSON));
    }

    /**
     */
    async inspectionsItemsAllGet(requestParameters: InspectionsItemsAllGetRequest): Promise<Array<InspectionItemTypeDto>> {
        const response = await this.inspectionsItemsAllGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async inspectionsItemsGetRaw(requestParameters: InspectionsItemsGetRequest): Promise<runtime.ApiResponse<Array<InspectionItemTypeDto>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/inspections/items`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InspectionItemTypeDtoFromJSON));
    }

    /**
     */
    async inspectionsItemsGet(requestParameters: InspectionsItemsGetRequest): Promise<Array<InspectionItemTypeDto>> {
        const response = await this.inspectionsItemsGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async inspectionsOfficersAllGetRaw(requestParameters: InspectionsOfficersAllGetRequest): Promise<runtime.ApiResponse<Array<OfficerDto>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/inspections/officers/all`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OfficerDtoFromJSON));
    }

    /**
     */
    async inspectionsOfficersAllGet(requestParameters: InspectionsOfficersAllGetRequest): Promise<Array<OfficerDto>> {
        const response = await this.inspectionsOfficersAllGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async inspectionsOfficersGetRaw(requestParameters: InspectionsOfficersGetRequest): Promise<runtime.ApiResponse<Array<OfficerDto>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/inspections/officers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OfficerDtoFromJSON));
    }

    /**
     */
    async inspectionsOfficersGet(requestParameters: InspectionsOfficersGetRequest): Promise<Array<OfficerDto>> {
        const response = await this.inspectionsOfficersGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async inspectionsResultsAllGetRaw(requestParameters: InspectionsResultsAllGetRequest): Promise<runtime.ApiResponse<Array<OfficerDto>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/inspections/results/all`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OfficerDtoFromJSON));
    }

    /**
     */
    async inspectionsResultsAllGet(requestParameters: InspectionsResultsAllGetRequest): Promise<Array<OfficerDto>> {
        const response = await this.inspectionsResultsAllGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async inspectionsResultsGetRaw(requestParameters: InspectionsResultsGetRequest): Promise<runtime.ApiResponse<Array<InspectionResultDto>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/inspections/results`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InspectionResultDtoFromJSON));
    }

    /**
     */
    async inspectionsResultsGet(requestParameters: InspectionsResultsGetRequest): Promise<Array<InspectionResultDto>> {
        const response = await this.inspectionsResultsGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async inspectionsTracksAllGetRaw(requestParameters: InspectionsTracksAllGetRequest): Promise<runtime.ApiResponse<Array<InspectionTrackDto>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/inspections/tracks/all`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InspectionTrackDtoFromJSON));
    }

    /**
     */
    async inspectionsTracksAllGet(requestParameters: InspectionsTracksAllGetRequest): Promise<Array<InspectionTrackDto>> {
        const response = await this.inspectionsTracksAllGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async inspectionsTracksGetRaw(requestParameters: InspectionsTracksGetRequest): Promise<runtime.ApiResponse<Array<InspectionTrackDto>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/inspections/tracks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InspectionTrackDtoFromJSON));
    }

    /**
     */
    async inspectionsTracksGet(requestParameters: InspectionsTracksGetRequest): Promise<Array<InspectionTrackDto>> {
        const response = await this.inspectionsTracksGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async inspectionsTypesAllGetRaw(requestParameters: InspectionsTypesAllGetRequest): Promise<runtime.ApiResponse<Array<InspectionTypeDto>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/inspections/types/all`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InspectionTypeDtoFromJSON));
    }

    /**
     */
    async inspectionsTypesAllGet(requestParameters: InspectionsTypesAllGetRequest): Promise<Array<InspectionTypeDto>> {
        const response = await this.inspectionsTypesAllGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async inspectionsTypesGetRaw(requestParameters: InspectionsTypesGetRequest): Promise<runtime.ApiResponse<Array<InspectionTypeDto>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/inspections/types`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InspectionTypeDtoFromJSON));
    }

    /**
     */
    async inspectionsTypesGet(requestParameters: InspectionsTypesGetRequest): Promise<Array<InspectionTypeDto>> {
        const response = await this.inspectionsTypesGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async insurancecompaniesAllGetRaw(requestParameters: InsurancecompaniesAllGetRequest): Promise<runtime.ApiResponse<Array<UseGroupDto>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/insurancecompanies/all`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UseGroupDtoFromJSON));
    }

    /**
     */
    async insurancecompaniesAllGet(requestParameters: InsurancecompaniesAllGetRequest): Promise<Array<UseGroupDto>> {
        const response = await this.insurancecompaniesAllGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async insurancecompaniesGetRaw(requestParameters: InsurancecompaniesGetRequest): Promise<runtime.ApiResponse<Array<UseGroupDto>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/insurancecompanies`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UseGroupDtoFromJSON));
    }

    /**
     */
    async insurancecompaniesGet(requestParameters: InsurancecompaniesGetRequest): Promise<Array<UseGroupDto>> {
        const response = await this.insurancecompaniesGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async platereasonsAllGetRaw(requestParameters: PlatereasonsAllGetRequest): Promise<runtime.ApiResponse<Array<PlateReasonDto>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/platereasons/all`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PlateReasonDtoFromJSON));
    }

    /**
     */
    async platereasonsAllGet(requestParameters: PlatereasonsAllGetRequest): Promise<Array<PlateReasonDto>> {
        const response = await this.platereasonsAllGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async platereasonsGetRaw(requestParameters: PlatereasonsGetRequest): Promise<runtime.ApiResponse<Array<PlateReasonDto>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/platereasons`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PlateReasonDtoFromJSON));
    }

    /**
     */
    async platereasonsGet(requestParameters: PlatereasonsGetRequest): Promise<Array<PlateReasonDto>> {
        const response = await this.platereasonsGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async platetypesAllGetRaw(requestParameters: PlatetypesAllGetRequest): Promise<runtime.ApiResponse<Array<PlateTypeDto>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/platetypes/all`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PlateTypeDtoFromJSON));
    }

    /**
     */
    async platetypesAllGet(requestParameters: PlatetypesAllGetRequest): Promise<Array<PlateTypeDto>> {
        const response = await this.platetypesAllGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async platetypesGetRaw(requestParameters: PlatetypesGetRequest): Promise<runtime.ApiResponse<Array<PlateTypeDto>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/platetypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PlateTypeDtoFromJSON));
    }

    /**
     */
    async platetypesGet(requestParameters: PlatetypesGetRequest): Promise<Array<PlateTypeDto>> {
        const response = await this.platetypesGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async reggroupsAllGetRaw(requestParameters: ReggroupsAllGetRequest): Promise<runtime.ApiResponse<Array<RegGroupDto>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/reggroups/all`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RegGroupDtoFromJSON));
    }

    /**
     */
    async reggroupsAllGet(requestParameters: ReggroupsAllGetRequest): Promise<Array<RegGroupDto>> {
        const response = await this.reggroupsAllGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async reggroupsGetRaw(requestParameters: ReggroupsGetRequest): Promise<runtime.ApiResponse<Array<RegGroupDto>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/reggroups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RegGroupDtoFromJSON));
    }

    /**
     */
    async reggroupsGet(requestParameters: ReggroupsGetRequest): Promise<Array<RegGroupDto>> {
        const response = await this.reggroupsGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async registrationcodesAllGetRaw(requestParameters: RegistrationcodesAllGetRequest): Promise<runtime.ApiResponse<Array<RegistrationCodeDto>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/registrationcodes/all`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RegistrationCodeDtoFromJSON));
    }

    /**
     */
    async registrationcodesAllGet(requestParameters: RegistrationcodesAllGetRequest): Promise<Array<RegistrationCodeDto>> {
        const response = await this.registrationcodesAllGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async registrationcodesGetRaw(requestParameters: RegistrationcodesGetRequest): Promise<runtime.ApiResponse<Array<RegistrationCodeDto>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/registrationcodes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RegistrationCodeDtoFromJSON));
    }

    /**
     */
    async registrationcodesGet(requestParameters: RegistrationcodesGetRequest): Promise<Array<RegistrationCodeDto>> {
        const response = await this.registrationcodesGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async taxgroupsAllGetRaw(requestParameters: TaxgroupsAllGetRequest): Promise<runtime.ApiResponse<Array<UseGroupDto>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/taxgroups/all`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UseGroupDtoFromJSON));
    }

    /**
     */
    async taxgroupsAllGet(requestParameters: TaxgroupsAllGetRequest): Promise<Array<UseGroupDto>> {
        const response = await this.taxgroupsAllGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async taxgroupsGetRaw(requestParameters: TaxgroupsGetRequest): Promise<runtime.ApiResponse<Array<UseGroupDto>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/taxgroups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UseGroupDtoFromJSON));
    }

    /**
     */
    async taxgroupsGet(requestParameters: TaxgroupsGetRequest): Promise<Array<UseGroupDto>> {
        const response = await this.taxgroupsGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async trafficregistrationsAllGetRaw(requestParameters: TrafficregistrationsAllGetRequest): Promise<runtime.ApiResponse<Array<TrafficRegistrationDto>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/trafficregistrations/all`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TrafficRegistrationDtoFromJSON));
    }

    /**
     */
    async trafficregistrationsAllGet(requestParameters: TrafficregistrationsAllGetRequest): Promise<Array<TrafficRegistrationDto>> {
        const response = await this.trafficregistrationsAllGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async trafficregistrationsGetRaw(requestParameters: TrafficregistrationsGetRequest): Promise<runtime.ApiResponse<Array<TrafficRegistrationDto>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/trafficregistrations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TrafficRegistrationDtoFromJSON));
    }

    /**
     */
    async trafficregistrationsGet(requestParameters: TrafficregistrationsGetRequest): Promise<Array<TrafficRegistrationDto>> {
        const response = await this.trafficregistrationsGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async updatelocksAllGetRaw(requestParameters: UpdatelocksAllGetRequest): Promise<runtime.ApiResponse<Array<UpdateLockTypeDto>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/updatelocks/all`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UpdateLockTypeDtoFromJSON));
    }

    /**
     */
    async updatelocksAllGet(requestParameters: UpdatelocksAllGetRequest): Promise<Array<UpdateLockTypeDto>> {
        const response = await this.updatelocksAllGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async updatelocksGetRaw(requestParameters: UpdatelocksGetRequest): Promise<runtime.ApiResponse<Array<UpdateLockTypeDto>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/updatelocks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UpdateLockTypeDtoFromJSON));
    }

    /**
     */
    async updatelocksGet(requestParameters: UpdatelocksGetRequest): Promise<Array<UpdateLockTypeDto>> {
        const response = await this.updatelocksGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async usegroupsAllGetRaw(requestParameters: UsegroupsAllGetRequest): Promise<runtime.ApiResponse<Array<UseGroupDto>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/usegroups/all`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UseGroupDtoFromJSON));
    }

    /**
     */
    async usegroupsAllGet(requestParameters: UsegroupsAllGetRequest): Promise<Array<UseGroupDto>> {
        const response = await this.usegroupsAllGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async usegroupsGetRaw(requestParameters: UsegroupsGetRequest): Promise<runtime.ApiResponse<Array<UseGroupDto>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/usegroups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UseGroupDtoFromJSON));
    }

    /**
     */
    async usegroupsGet(requestParameters: UsegroupsGetRequest): Promise<Array<UseGroupDto>> {
        const response = await this.usegroupsGetRaw(requestParameters);
        return await response.value();
    }

}
