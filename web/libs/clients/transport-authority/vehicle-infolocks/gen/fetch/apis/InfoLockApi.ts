/* tslint:disable */
/* eslint-disable */
/**
 * SGS Rest API
 * Vehicle infolocks API, developed in .Net6.0
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tolvuhjalp@samgongustofa.is
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    InfoLockDto,
    InfoLockDtoFromJSON,
    InfoLockDtoToJSON,
    PostInfoLockModel,
    PostInfoLockModelFromJSON,
    PostInfoLockModelToJSON,
    ProblemDetails,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    PutInfoLockModel,
    PutInfoLockModelFromJSON,
    PutInfoLockModelToJSON,
} from '../models';

export interface GetInfoLockRequest {
    persidno: string;
    infolocktype: string;
    apiVersion?: string;
    apiVersion2?: string;
}

export interface PersidnoGetRequest {
    persidno: string;
    apiVersion?: string;
    apiVersion2?: string;
}

export interface RootPostRequest {
    apiVersion?: string;
    apiVersion2?: string;
    postInfoLockModel?: PostInfoLockModel;
}

export interface RootPutRequest {
    apiVersion?: string;
    apiVersion2?: string;
    putInfoLockModel?: PutInfoLockModel;
}

/**
 * 
 */
export class InfoLockApi extends runtime.BaseAPI {

    /**
     */
    async getInfoLockRaw(requestParameters: GetInfoLockRequest): Promise<runtime.ApiResponse<InfoLockDto>> {
        if (requestParameters.persidno === null || requestParameters.persidno === undefined) {
            throw new runtime.RequiredError('persidno','Required parameter requestParameters.persidno was null or undefined when calling getInfoLock.');
        }

        if (requestParameters.infolocktype === null || requestParameters.infolocktype === undefined) {
            throw new runtime.RequiredError('infolocktype','Required parameter requestParameters.infolocktype was null or undefined when calling getInfoLock.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/{persidno}/lock/{infolocktype}`.replace(`{${"persidno"}}`, encodeURIComponent(String(requestParameters.persidno))).replace(`{${"infolocktype"}}`, encodeURIComponent(String(requestParameters.infolocktype))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InfoLockDtoFromJSON(jsonValue));
    }

    /**
     */
    async getInfoLock(requestParameters: GetInfoLockRequest): Promise<InfoLockDto> {
        const response = await this.getInfoLockRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async persidnoGetRaw(requestParameters: PersidnoGetRequest): Promise<runtime.ApiResponse<Array<InfoLockDto>>> {
        if (requestParameters.persidno === null || requestParameters.persidno === undefined) {
            throw new runtime.RequiredError('persidno','Required parameter requestParameters.persidno was null or undefined when calling persidnoGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/{persidno}`.replace(`{${"persidno"}}`, encodeURIComponent(String(requestParameters.persidno))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InfoLockDtoFromJSON));
    }

    /**
     */
    async persidnoGet(requestParameters: PersidnoGetRequest): Promise<Array<InfoLockDto>> {
        const response = await this.persidnoGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async rootPostRaw(requestParameters: RootPostRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostInfoLockModelToJSON(requestParameters.postInfoLockModel),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async rootPost(requestParameters: RootPostRequest): Promise<void> {
        await this.rootPostRaw(requestParameters);
    }

    /**
     */
    async rootPutRaw(requestParameters: RootPutRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutInfoLockModelToJSON(requestParameters.putInfoLockModel),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async rootPut(requestParameters: RootPutRequest): Promise<void> {
        await this.rootPutRaw(requestParameters);
    }

}
