/* tslint:disable */
/* eslint-disable */
/**
 * SGS Rest API
 * Operators API developed in .Net7.0 - Release-10 : 20231211.1
 *
 * The version of the OpenAPI document: 3.0
 * Contact: tolvuhjalp@samgongustofa.is
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AuthenticateModel,
    AuthenticateModelFromJSON,
    AuthenticateModelToJSON,
    ProblemDetails,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    User,
    UserFromJSON,
    UserToJSON,
} from '../models';

export interface AuthenticatePostRequest {
    apiVersion: string;
    apiVersion2: string;
    authenticateModel?: AuthenticateModel;
}

/**
 * 
 */
export class AuthenticationApi extends runtime.BaseAPI {

    /**
     */
    async authenticatePostRaw(requestParameters: AuthenticatePostRequest): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling authenticatePost.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling authenticatePost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/authenticate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthenticateModelToJSON(requestParameters.authenticateModel),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     */
    async authenticatePost(requestParameters: AuthenticatePostRequest): Promise<User> {
        const response = await this.authenticatePostRaw(requestParameters);
        return await response.value();
    }

}
