/* tslint:disable */
/* eslint-disable */
/**
 * SGS Rest API
 * Operators API developed in .Net7.0 - Release-10 : 20231211.1
 *
 * The version of the OpenAPI document: 3.0
 * Contact: tolvuhjalp@samgongustofa.is
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    OperatorDto,
    OperatorDtoFromJSON,
    OperatorDtoToJSON,
    PostCloseOperatorsWithBase64ContractModel,
    PostCloseOperatorsWithBase64ContractModelFromJSON,
    PostCloseOperatorsWithBase64ContractModelToJSON,
    PostCloseOperatorsWithoutContractModel,
    PostCloseOperatorsWithoutContractModelFromJSON,
    PostCloseOperatorsWithoutContractModelToJSON,
    PostOperatorsWithBase64ContractModel,
    PostOperatorsWithBase64ContractModelFromJSON,
    PostOperatorsWithBase64ContractModelToJSON,
    PostOperatorsWithoutContractModel,
    PostOperatorsWithoutContractModelFromJSON,
    PostOperatorsWithoutContractModelToJSON,
    ProblemDetails,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    ReturnTypeMessage,
    ReturnTypeMessageFromJSON,
    ReturnTypeMessageToJSON,
} from '../models';

export interface AllPermnoGetRequest {
    permno: string;
    apiVersion: string;
    apiVersion2: string;
}

export interface CloseWithcontractPostRequest {
    apiVersion: string;
    apiVersion2: string;
    postCloseOperatorsWithBase64ContractModel?: PostCloseOperatorsWithBase64ContractModel;
}

export interface CloseWithoutcontractPostRequest {
    apiVersion: string;
    apiVersion2: string;
    postCloseOperatorsWithoutContractModel?: PostCloseOperatorsWithoutContractModel;
}

export interface GetByPermnoAndSerialNumberRequest {
    permno: string;
    operatorserialnumber: number;
    apiVersion: string;
    apiVersion2: string;
}

export interface PermnoGetRequest {
    permno: string;
    apiVersion: string;
    apiVersion2: string;
}

export interface PermnoPersidnoOperatorserialnumberGetRequest {
    permno: string;
    persidno: string;
    operatorserialnumber: number;
    apiVersion: string;
    apiVersion2: string;
}

export interface WithcontractPostRequest {
    apiVersion: string;
    apiVersion2: string;
    postOperatorsWithBase64ContractModel?: PostOperatorsWithBase64ContractModel;
}

export interface WithoutcontractPostRequest {
    apiVersion: string;
    apiVersion2: string;
    postOperatorsWithoutContractModel?: PostOperatorsWithoutContractModel;
}

/**
 * 
 */
export class OperatorApi extends runtime.BaseAPI {

    /**
     */
    async allPermnoGetRaw(requestParameters: AllPermnoGetRequest): Promise<runtime.ApiResponse<Array<OperatorDto>>> {
        if (requestParameters.permno === null || requestParameters.permno === undefined) {
            throw new runtime.RequiredError('permno','Required parameter requestParameters.permno was null or undefined when calling allPermnoGet.');
        }

        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling allPermnoGet.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling allPermnoGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/all/{permno}`.replace(`{${"permno"}}`, encodeURIComponent(String(requestParameters.permno))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OperatorDtoFromJSON));
    }

    /**
     */
    async allPermnoGet(requestParameters: AllPermnoGetRequest): Promise<Array<OperatorDto>> {
        const response = await this.allPermnoGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async closeWithcontractPostRaw(requestParameters: CloseWithcontractPostRequest): Promise<runtime.ApiResponse<Array<ReturnTypeMessage>>> {
        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling closeWithcontractPost.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling closeWithcontractPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/close/withcontract`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostCloseOperatorsWithBase64ContractModelToJSON(requestParameters.postCloseOperatorsWithBase64ContractModel),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ReturnTypeMessageFromJSON));
    }

    /**
     */
    async closeWithcontractPost(requestParameters: CloseWithcontractPostRequest): Promise<Array<ReturnTypeMessage>> {
        const response = await this.closeWithcontractPostRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async closeWithoutcontractPostRaw(requestParameters: CloseWithoutcontractPostRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling closeWithoutcontractPost.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling closeWithoutcontractPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/close/withoutcontract`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostCloseOperatorsWithoutContractModelToJSON(requestParameters.postCloseOperatorsWithoutContractModel),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async closeWithoutcontractPost(requestParameters: CloseWithoutcontractPostRequest): Promise<void> {
        await this.closeWithoutcontractPostRaw(requestParameters);
    }

    /**
     */
    async getByPermnoAndSerialNumberRaw(requestParameters: GetByPermnoAndSerialNumberRequest): Promise<runtime.ApiResponse<Array<OperatorDto>>> {
        if (requestParameters.permno === null || requestParameters.permno === undefined) {
            throw new runtime.RequiredError('permno','Required parameter requestParameters.permno was null or undefined when calling getByPermnoAndSerialNumber.');
        }

        if (requestParameters.operatorserialnumber === null || requestParameters.operatorserialnumber === undefined) {
            throw new runtime.RequiredError('operatorserialnumber','Required parameter requestParameters.operatorserialnumber was null or undefined when calling getByPermnoAndSerialNumber.');
        }

        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling getByPermnoAndSerialNumber.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling getByPermnoAndSerialNumber.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/{permno}/{operatorserialnumber}`.replace(`{${"permno"}}`, encodeURIComponent(String(requestParameters.permno))).replace(`{${"operatorserialnumber"}}`, encodeURIComponent(String(requestParameters.operatorserialnumber))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OperatorDtoFromJSON));
    }

    /**
     */
    async getByPermnoAndSerialNumber(requestParameters: GetByPermnoAndSerialNumberRequest): Promise<Array<OperatorDto>> {
        const response = await this.getByPermnoAndSerialNumberRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async permnoGetRaw(requestParameters: PermnoGetRequest): Promise<runtime.ApiResponse<Array<OperatorDto>>> {
        if (requestParameters.permno === null || requestParameters.permno === undefined) {
            throw new runtime.RequiredError('permno','Required parameter requestParameters.permno was null or undefined when calling permnoGet.');
        }

        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling permnoGet.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling permnoGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/{permno}`.replace(`{${"permno"}}`, encodeURIComponent(String(requestParameters.permno))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OperatorDtoFromJSON));
    }

    /**
     */
    async permnoGet(requestParameters: PermnoGetRequest): Promise<Array<OperatorDto>> {
        const response = await this.permnoGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async permnoPersidnoOperatorserialnumberGetRaw(requestParameters: PermnoPersidnoOperatorserialnumberGetRequest): Promise<runtime.ApiResponse<OperatorDto>> {
        if (requestParameters.permno === null || requestParameters.permno === undefined) {
            throw new runtime.RequiredError('permno','Required parameter requestParameters.permno was null or undefined when calling permnoPersidnoOperatorserialnumberGet.');
        }

        if (requestParameters.persidno === null || requestParameters.persidno === undefined) {
            throw new runtime.RequiredError('persidno','Required parameter requestParameters.persidno was null or undefined when calling permnoPersidnoOperatorserialnumberGet.');
        }

        if (requestParameters.operatorserialnumber === null || requestParameters.operatorserialnumber === undefined) {
            throw new runtime.RequiredError('operatorserialnumber','Required parameter requestParameters.operatorserialnumber was null or undefined when calling permnoPersidnoOperatorserialnumberGet.');
        }

        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling permnoPersidnoOperatorserialnumberGet.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling permnoPersidnoOperatorserialnumberGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/{permno}/{persidno}/{operatorserialnumber}`.replace(`{${"permno"}}`, encodeURIComponent(String(requestParameters.permno))).replace(`{${"persidno"}}`, encodeURIComponent(String(requestParameters.persidno))).replace(`{${"operatorserialnumber"}}`, encodeURIComponent(String(requestParameters.operatorserialnumber))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OperatorDtoFromJSON(jsonValue));
    }

    /**
     */
    async permnoPersidnoOperatorserialnumberGet(requestParameters: PermnoPersidnoOperatorserialnumberGetRequest): Promise<OperatorDto> {
        const response = await this.permnoPersidnoOperatorserialnumberGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async withcontractPostRaw(requestParameters: WithcontractPostRequest): Promise<runtime.ApiResponse<Array<ReturnTypeMessage>>> {
        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling withcontractPost.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling withcontractPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/withcontract`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostOperatorsWithBase64ContractModelToJSON(requestParameters.postOperatorsWithBase64ContractModel),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ReturnTypeMessageFromJSON));
    }

    /**
     */
    async withcontractPost(requestParameters: WithcontractPostRequest): Promise<Array<ReturnTypeMessage>> {
        const response = await this.withcontractPostRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async withoutcontractPostRaw(requestParameters: WithoutcontractPostRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.apiVersion === null || requestParameters.apiVersion === undefined) {
            throw new runtime.RequiredError('apiVersion','Required parameter requestParameters.apiVersion was null or undefined when calling withoutcontractPost.');
        }

        if (requestParameters.apiVersion2 === null || requestParameters.apiVersion2 === undefined) {
            throw new runtime.RequiredError('apiVersion2','Required parameter requestParameters.apiVersion2 was null or undefined when calling withoutcontractPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/withoutcontract`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostOperatorsWithoutContractModelToJSON(requestParameters.postOperatorsWithoutContractModel),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async withoutcontractPost(requestParameters: WithoutcontractPostRequest): Promise<void> {
        await this.withoutcontractPostRaw(requestParameters);
    }

}
