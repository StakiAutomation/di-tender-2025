/* tslint:disable */
/* eslint-disable */
/**
 * TachoNet API
 * Vefþjónustur fyrir umsóknir um ökuritakort hjá island.is
 *
 * The version of the OpenAPI document: 1.2.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    CardIssueType,
    CardIssueTypeFromJSON,
    CardIssueTypeFromJSONTyped,
    CardIssueTypeToJSON,
    DeliveryMethodEnum,
    DeliveryMethodEnumFromJSON,
    DeliveryMethodEnumFromJSONTyped,
    DeliveryMethodEnumToJSON,
} from './';

/**
 * 
 * @export
 * @interface DriverCardApplicationRequest
 */
export interface DriverCardApplicationRequest {
    /**
     * 
     * @type {string}
     * @memberof DriverCardApplicationRequest
     */
    personIdNumber: string;
    /**
     * 
     * @type {string}
     * @memberof DriverCardApplicationRequest
     */
    fullName: string;
    /**
     * 
     * @type {string}
     * @memberof DriverCardApplicationRequest
     */
    address: string;
    /**
     * 
     * @type {string}
     * @memberof DriverCardApplicationRequest
     */
    postalCode: string;
    /**
     * 
     * @type {string}
     * @memberof DriverCardApplicationRequest
     */
    place: string;
    /**
     * 
     * @type {string}
     * @memberof DriverCardApplicationRequest
     */
    birthCountry: string;
    /**
     * 
     * @type {string}
     * @memberof DriverCardApplicationRequest
     */
    birthPlace: string;
    /**
     * 
     * @type {string}
     * @memberof DriverCardApplicationRequest
     */
    emailAddress?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DriverCardApplicationRequest
     */
    phoneNumber?: string | null;
    /**
     * 
     * @type {DeliveryMethodEnum}
     * @memberof DriverCardApplicationRequest
     */
    deliveryMethod: DeliveryMethodEnum;
    /**
     * 
     * @type {CardIssueType}
     * @memberof DriverCardApplicationRequest
     */
    cardIssueType?: CardIssueType;
    /**
     * 
     * @type {Date}
     * @memberof DriverCardApplicationRequest
     */
    paymentDatetime: Date;
    /**
     * 
     * @type {string}
     * @memberof DriverCardApplicationRequest
     */
    photo: string;
    /**
     * 
     * @type {string}
     * @memberof DriverCardApplicationRequest
     */
    signature: string;
    /**
     * 
     * @type {string}
     * @memberof DriverCardApplicationRequest
     */
    driverslicenceNumber: string;
    /**
     * 
     * @type {string}
     * @memberof DriverCardApplicationRequest
     */
    driverslicencePlaceOfPublication: string;
    /**
     * 
     * @type {Date}
     * @memberof DriverCardApplicationRequest
     */
    driverslicenceValidFrom: Date;
    /**
     * 
     * @type {Date}
     * @memberof DriverCardApplicationRequest
     */
    driverslicenceValidTo: Date;
}

export function DriverCardApplicationRequestFromJSON(json: any): DriverCardApplicationRequest {
    return DriverCardApplicationRequestFromJSONTyped(json, false);
}

export function DriverCardApplicationRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): DriverCardApplicationRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'personIdNumber': json['person_id_number'],
        'fullName': json['full_name'],
        'address': json['address'],
        'postalCode': json['postal_code'],
        'place': json['place'],
        'birthCountry': json['birth_country'],
        'birthPlace': json['birth_place'],
        'emailAddress': !exists(json, 'email_address') ? undefined : json['email_address'],
        'phoneNumber': !exists(json, 'phone_number') ? undefined : json['phone_number'],
        'deliveryMethod': DeliveryMethodEnumFromJSON(json['delivery_method']),
        'cardIssueType': !exists(json, 'card_issue_type') ? undefined : CardIssueTypeFromJSON(json['card_issue_type']),
        'paymentDatetime': (new Date(json['payment_datetime'])),
        'photo': json['photo'],
        'signature': json['signature'],
        'driverslicenceNumber': json['driverslicence_number'],
        'driverslicencePlaceOfPublication': json['driverslicence_place_of_publication'],
        'driverslicenceValidFrom': (new Date(json['driverslicence_valid_from'])),
        'driverslicenceValidTo': (new Date(json['driverslicence_valid_to'])),
    };
}

export function DriverCardApplicationRequestToJSON(value?: DriverCardApplicationRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'person_id_number': value.personIdNumber,
        'full_name': value.fullName,
        'address': value.address,
        'postal_code': value.postalCode,
        'place': value.place,
        'birth_country': value.birthCountry,
        'birth_place': value.birthPlace,
        'email_address': value.emailAddress,
        'phone_number': value.phoneNumber,
        'delivery_method': DeliveryMethodEnumToJSON(value.deliveryMethod),
        'card_issue_type': CardIssueTypeToJSON(value.cardIssueType),
        'payment_datetime': (value.paymentDatetime.toISOString()),
        'photo': value.photo,
        'signature': value.signature,
        'driverslicence_number': value.driverslicenceNumber,
        'driverslicence_place_of_publication': value.driverslicencePlaceOfPublication,
        'driverslicence_valid_from': (value.driverslicenceValidFrom.toISOString()),
        'driverslicence_valid_to': (value.driverslicenceValidTo.toISOString()),
    };
}


