/* tslint:disable */
/* eslint-disable */
/**
 * SGS Rest API
 * Printing API developed in .Net6.0
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tolvuhjalp@samgongustofa.is
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    PostPreRegistrationConfirmation,
    PostPreRegistrationConfirmationFromJSON,
    PostPreRegistrationConfirmationToJSON,
    ProblemDetails,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    SendPreRegistrationConfirmationDto,
    SendPreRegistrationConfirmationDtoFromJSON,
    SendPreRegistrationConfirmationDtoToJSON,
} from '../models';

export interface RegistrationPrintpreregistrationdonePostRequest {
    apiVersion?: string;
    apiVersion2?: string;
    postPreRegistrationConfirmation?: PostPreRegistrationConfirmation;
}

export interface RegistrationRequestregistrationcardprintPostRequest {
    permno?: string;
    apiVersion?: string;
    apiVersion2?: string;
}

/**
 * 
 */
export class RegistrationApi extends runtime.BaseAPI {

    /**
     */
    async registrationPrintpreregistrationdonePostRaw(requestParameters: RegistrationPrintpreregistrationdonePostRequest): Promise<runtime.ApiResponse<SendPreRegistrationConfirmationDto>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/registration/printpreregistrationdone`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostPreRegistrationConfirmationToJSON(requestParameters.postPreRegistrationConfirmation),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SendPreRegistrationConfirmationDtoFromJSON(jsonValue));
    }

    /**
     */
    async registrationPrintpreregistrationdonePost(requestParameters: RegistrationPrintpreregistrationdonePostRequest): Promise<SendPreRegistrationConfirmationDto> {
        const response = await this.registrationPrintpreregistrationdonePostRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async registrationRequestregistrationcardprintPostRaw(requestParameters: RegistrationRequestregistrationcardprintPostRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.permno !== undefined) {
            queryParameters['permno'] = requestParameters.permno;
        }

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/registration/requestregistrationcardprint`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async registrationRequestregistrationcardprintPost(requestParameters: RegistrationRequestregistrationcardprintPostRequest): Promise<void> {
        await this.registrationRequestregistrationcardprintPostRaw(requestParameters);
    }

}
