/* tslint:disable */
/* eslint-disable */
/**
 * IdentityServer Internal Delegation API
 * Internal API for IdentityServer to manage delegations.   The swagger document can be downloaded by appending `-json` to the last path segment.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    UpdateDelegationScopeDTO,
    UpdateDelegationScopeDTOFromJSON,
    UpdateDelegationScopeDTOFromJSONTyped,
    UpdateDelegationScopeDTOToJSON,
} from './';

/**
 * 
 * @export
 * @interface CreateDelegationDTO
 */
export interface CreateDelegationDTO {
    /**
     * National ID of the user receiving the delegation.
     * @type {string}
     * @memberof CreateDelegationDTO
     */
    toNationalId: string;
    /**
     * Name identifying the domain the delegation is given in.
     * @type {string}
     * @memberof CreateDelegationDTO
     */
    domainName?: string;
    /**
     * List of scopes the delegation authorizes.
     * @type {Array<UpdateDelegationScopeDTO>}
     * @memberof CreateDelegationDTO
     */
    scopes?: Array<UpdateDelegationScopeDTO>;
}

export function CreateDelegationDTOFromJSON(json: any): CreateDelegationDTO {
    return CreateDelegationDTOFromJSONTyped(json, false);
}

export function CreateDelegationDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateDelegationDTO {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'toNationalId': json['toNationalId'],
        'domainName': !exists(json, 'domainName') ? undefined : json['domainName'],
        'scopes': !exists(json, 'scopes') ? undefined : ((json['scopes'] as Array<any>).map(UpdateDelegationScopeDTOFromJSON)),
    };
}

export function CreateDelegationDTOToJSON(value?: CreateDelegationDTO | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'toNationalId': value.toNationalId,
        'domainName': value.domainName,
        'scopes': value.scopes === undefined ? undefined : ((value.scopes as Array<any>).map(UpdateDelegationScopeDTOToJSON)),
    };
}


