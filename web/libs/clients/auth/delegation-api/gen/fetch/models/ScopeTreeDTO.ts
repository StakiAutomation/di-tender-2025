/* tslint:disable */
/* eslint-disable */
/**
 * IdentityServer Internal Delegation API
 * Internal API for IdentityServer to manage delegations.   The swagger document can be downloaded by appending `-json` to the last path segment.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ScopeTreeDTO
 */
export interface ScopeTreeDTO {
    /**
     * Name of the api scope or api scope group.
     * @type {string}
     * @memberof ScopeTreeDTO
     */
    name: string;
    /**
     * Display name of the api scope or api scope group.
     * @type {string}
     * @memberof ScopeTreeDTO
     */
    displayName: string;
    /**
     * Description of the api scope or api scope group.
     * @type {string}
     * @memberof ScopeTreeDTO
     */
    description: string;
    /**
     * Domain name which the scope or group belongs to.
     * @type {string}
     * @memberof ScopeTreeDTO
     */
    domainName: string;
    /**
     * List of scopes belonging to the group. When children is undefined it represents a scope instead of a group.
     * @type {Array<ScopeTreeDTO>}
     * @memberof ScopeTreeDTO
     */
    children?: Array<ScopeTreeDTO>;
}

export function ScopeTreeDTOFromJSON(json: any): ScopeTreeDTO {
    return ScopeTreeDTOFromJSONTyped(json, false);
}

export function ScopeTreeDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): ScopeTreeDTO {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'displayName': json['displayName'],
        'description': json['description'],
        'domainName': json['domainName'],
        'children': !exists(json, 'children') ? undefined : ((json['children'] as Array<any>).map(ScopeTreeDTOFromJSON)),
    };
}

export function ScopeTreeDTOToJSON(value?: ScopeTreeDTO | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'displayName': value.displayName,
        'description': value.description,
        'domainName': value.domainName,
        'children': value.children === undefined ? undefined : ((value.children as Array<any>).map(ScopeTreeDTOToJSON)),
    };
}


