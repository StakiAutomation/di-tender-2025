/* tslint:disable */
/* eslint-disable */
/**
 * IdentityServer Internal Delegation API
 * Internal API for IdentityServer to manage delegations.   The swagger document can be downloaded by appending `-json` to the last path segment.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    AuthDelegationProvider,
    AuthDelegationProviderFromJSON,
    AuthDelegationProviderFromJSONTyped,
    AuthDelegationProviderToJSON,
    AuthDelegationType,
    AuthDelegationTypeFromJSON,
    AuthDelegationTypeFromJSONTyped,
    AuthDelegationTypeToJSON,
    DelegationScopeDTO,
    DelegationScopeDTOFromJSON,
    DelegationScopeDTOFromJSONTyped,
    DelegationScopeDTOToJSON,
} from './';

/**
 * 
 * @export
 * @interface DelegationDTO
 */
export interface DelegationDTO {
    /**
     * 
     * @type {string}
     * @memberof DelegationDTO
     */
    id?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DelegationDTO
     */
    fromNationalId: string;
    /**
     * 
     * @type {string}
     * @memberof DelegationDTO
     */
    fromName: string;
    /**
     * 
     * @type {string}
     * @memberof DelegationDTO
     */
    toNationalId: string;
    /**
     * 
     * @type {string}
     * @memberof DelegationDTO
     */
    toName?: string | null;
    /**
     * 
     * @type {Date}
     * @memberof DelegationDTO
     */
    validTo?: Date | null;
    /**
     * 
     * @type {AuthDelegationType}
     * @memberof DelegationDTO
     */
    type: AuthDelegationType;
    /**
     * 
     * @type {AuthDelegationProvider}
     * @memberof DelegationDTO
     */
    provider: AuthDelegationProvider;
    /**
     * 
     * @type {string}
     * @memberof DelegationDTO
     */
    referenceId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DelegationDTO
     */
    createdByNationalId?: string | null;
    /**
     * 
     * @type {Array<DelegationScopeDTO>}
     * @memberof DelegationDTO
     */
    scopes?: Array<DelegationScopeDTO>;
    /**
     * 
     * @type {string}
     * @memberof DelegationDTO
     */
    domainName?: string | null;
}

export function DelegationDTOFromJSON(json: any): DelegationDTO {
    return DelegationDTOFromJSONTyped(json, false);
}

export function DelegationDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): DelegationDTO {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'fromNationalId': json['fromNationalId'],
        'fromName': json['fromName'],
        'toNationalId': json['toNationalId'],
        'toName': !exists(json, 'toName') ? undefined : json['toName'],
        'validTo': !exists(json, 'validTo') ? undefined : (json['validTo'] === null ? null : new Date(json['validTo'])),
        'type': AuthDelegationTypeFromJSON(json['type']),
        'provider': AuthDelegationProviderFromJSON(json['provider']),
        'referenceId': !exists(json, 'referenceId') ? undefined : json['referenceId'],
        'createdByNationalId': !exists(json, 'createdByNationalId') ? undefined : json['createdByNationalId'],
        'scopes': !exists(json, 'scopes') ? undefined : ((json['scopes'] as Array<any>).map(DelegationScopeDTOFromJSON)),
        'domainName': !exists(json, 'domainName') ? undefined : json['domainName'],
    };
}

export function DelegationDTOToJSON(value?: DelegationDTO | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'fromNationalId': value.fromNationalId,
        'fromName': value.fromName,
        'toNationalId': value.toNationalId,
        'toName': value.toName,
        'validTo': value.validTo === undefined ? undefined : (value.validTo === null ? null : value.validTo.toISOString()),
        'type': AuthDelegationTypeToJSON(value.type),
        'provider': AuthDelegationProviderToJSON(value.provider),
        'referenceId': value.referenceId,
        'createdByNationalId': value.createdByNationalId,
        'scopes': value.scopes === undefined ? undefined : ((value.scopes as Array<any>).map(DelegationScopeDTOToJSON)),
        'domainName': value.domainName,
    };
}


