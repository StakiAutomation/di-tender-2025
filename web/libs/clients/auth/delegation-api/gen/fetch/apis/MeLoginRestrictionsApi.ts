/* tslint:disable */
/* eslint-disable */
/**
 * IdentityServer Internal Delegation API
 * Internal API for IdentityServer to manage delegations.   The swagger document can be downloaded by appending `-json` to the last path segment.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateLoginRestrictionDto,
    CreateLoginRestrictionDtoFromJSON,
    CreateLoginRestrictionDtoToJSON,
    HttpProblemResponse,
    HttpProblemResponseFromJSON,
    HttpProblemResponseToJSON,
    LoginRestriction,
    LoginRestrictionFromJSON,
    LoginRestrictionToJSON,
    LoginRestrictionsPaginatedDto,
    LoginRestrictionsPaginatedDtoFromJSON,
    LoginRestrictionsPaginatedDtoToJSON,
} from '../models';

export interface MeLoginRestrictionsControllerCreateRequest {
    createLoginRestrictionDto: CreateLoginRestrictionDto;
}

/**
 * 
 */
export class MeLoginRestrictionsApi extends runtime.BaseAPI {

    /**
     * Creates or updates a login restriction for the current user.
     */
    async meLoginRestrictionsControllerCreateRaw(requestParameters: MeLoginRestrictionsControllerCreateRequest): Promise<runtime.ApiResponse<LoginRestriction>> {
        if (requestParameters.createLoginRestrictionDto === null || requestParameters.createLoginRestrictionDto === undefined) {
            throw new runtime.RequiredError('createLoginRestrictionDto','Required parameter requestParameters.createLoginRestrictionDto was null or undefined when calling meLoginRestrictionsControllerCreate.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/me/login-restrictions`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CreateLoginRestrictionDtoToJSON(requestParameters.createLoginRestrictionDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => LoginRestrictionFromJSON(jsonValue));
    }

    /**
     * Creates or updates a login restriction for the current user.
     */
    async meLoginRestrictionsControllerCreate(requestParameters: MeLoginRestrictionsControllerCreateRequest): Promise<LoginRestriction> {
        const response = await this.meLoginRestrictionsControllerCreateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Deletes the current user login restriction.
     */
    async meLoginRestrictionsControllerDeleteRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/me/login-restrictions`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes the current user login restriction.
     */
    async meLoginRestrictionsControllerDelete(): Promise<void> {
        await this.meLoginRestrictionsControllerDeleteRaw();
    }

    /**
     * Gets the current user login restrictions.
     */
    async meLoginRestrictionsControllerFindAllRaw(): Promise<runtime.ApiResponse<LoginRestrictionsPaginatedDto>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/me/login-restrictions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => LoginRestrictionsPaginatedDtoFromJSON(jsonValue));
    }

    /**
     * Gets the current user login restrictions.
     */
    async meLoginRestrictionsControllerFindAll(): Promise<LoginRestrictionsPaginatedDto> {
        const response = await this.meLoginRestrictionsControllerFindAllRaw();
        return await response.value();
    }

}
