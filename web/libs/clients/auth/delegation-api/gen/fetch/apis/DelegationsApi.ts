/* tslint:disable */
/* eslint-disable */
/**
 * IdentityServer Internal Delegation API
 * Internal API for IdentityServer to manage delegations.   The swagger document can be downloaded by appending `-json` to the last path segment.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    HttpProblemResponse,
    HttpProblemResponseFromJSON,
    HttpProblemResponseToJSON,
    PaginatedDelegationRecordDTO,
    PaginatedDelegationRecordDTOFromJSON,
    PaginatedDelegationRecordDTOToJSON,
} from '../models';

export interface DelegationsControllerGetDelegationRecordsRequest {
    xQueryNationalId: string;
    scope: string;
    direction?: DelegationsControllerGetDelegationRecordsDirectionEnum;
}

/**
 * 
 */
export class DelegationsApi extends runtime.BaseAPI {

    /**
     * Fetch delegations from specific national id and scope from delegation index
     */
    async delegationsControllerGetDelegationRecordsRaw(requestParameters: DelegationsControllerGetDelegationRecordsRequest): Promise<runtime.ApiResponse<PaginatedDelegationRecordDTO>> {
        if (requestParameters.xQueryNationalId === null || requestParameters.xQueryNationalId === undefined) {
            throw new runtime.RequiredError('xQueryNationalId','Required parameter requestParameters.xQueryNationalId was null or undefined when calling delegationsControllerGetDelegationRecords.');
        }

        if (requestParameters.scope === null || requestParameters.scope === undefined) {
            throw new runtime.RequiredError('scope','Required parameter requestParameters.scope was null or undefined when calling delegationsControllerGetDelegationRecords.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.scope !== undefined) {
            queryParameters['scope'] = requestParameters.scope;
        }

        if (requestParameters.direction !== undefined) {
            queryParameters['direction'] = requestParameters.direction;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xQueryNationalId !== undefined && requestParameters.xQueryNationalId !== null) {
            headerParameters['X-Query-National-Id'] = String(requestParameters.xQueryNationalId);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("ias", ["@island.is/auth/delegations/index:system"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/v1/delegations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedDelegationRecordDTOFromJSON(jsonValue));
    }

    /**
     * Fetch delegations from specific national id and scope from delegation index
     */
    async delegationsControllerGetDelegationRecords(requestParameters: DelegationsControllerGetDelegationRecordsRequest): Promise<PaginatedDelegationRecordDTO> {
        const response = await this.delegationsControllerGetDelegationRecordsRaw(requestParameters);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum DelegationsControllerGetDelegationRecordsDirectionEnum {
    outgoing = 'outgoing',
    incoming = 'incoming'
}
