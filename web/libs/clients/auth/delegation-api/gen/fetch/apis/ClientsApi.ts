/* tslint:disable */
/* eslint-disable */
/**
 * IdentityServer Internal Delegation API
 * Internal API for IdentityServer to manage delegations.   The swagger document can be downloaded by appending `-json` to the last path segment.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ClientDto,
    ClientDtoFromJSON,
    ClientDtoToJSON,
    HttpProblemResponse,
    HttpProblemResponseFromJSON,
    HttpProblemResponseToJSON,
} from '../models';

export interface ClientsControllerFindAllRequest {
    lang?: string;
    clientId?: Array<string>;
}

/**
 * 
 */
export class ClientsApi extends runtime.BaseAPI {

    /**
     */
    async clientsControllerFindAllRaw(requestParameters: ClientsControllerFindAllRequest): Promise<runtime.ApiResponse<Array<ClientDto>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.lang !== undefined) {
            queryParameters['lang'] = requestParameters.lang;
        }

        if (requestParameters.clientId) {
            queryParameters['clientId'] = requestParameters.clientId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("ias", ["@island.is/auth/delegations:write"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/v1/clients`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ClientDtoFromJSON));
    }

    /**
     */
    async clientsControllerFindAll(requestParameters: ClientsControllerFindAllRequest): Promise<Array<ClientDto>> {
        const response = await this.clientsControllerFindAllRaw(requestParameters);
        return await response.value();
    }

}
