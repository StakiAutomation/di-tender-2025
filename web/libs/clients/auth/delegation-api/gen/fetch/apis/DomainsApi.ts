/* tslint:disable */
/* eslint-disable */
/**
 * IdentityServer Internal Delegation API
 * Internal API for IdentityServer to manage delegations.   The swagger document can be downloaded by appending `-json` to the last path segment.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ApiScopeListDTO,
    ApiScopeListDTOFromJSON,
    ApiScopeListDTOToJSON,
    DomainDTO,
    DomainDTOFromJSON,
    DomainDTOToJSON,
    HttpProblemResponse,
    HttpProblemResponseFromJSON,
    HttpProblemResponseToJSON,
    ScopeTreeDTO,
    ScopeTreeDTOFromJSON,
    ScopeTreeDTOToJSON,
} from '../models';

export interface DomainsControllerFindAllRequest {
    lang?: string;
    direction?: DomainsControllerFindAllDirectionEnum;
    domainName?: Array<string>;
    supportsDelegations?: boolean;
}

export interface DomainsControllerFindOneRequest {
    domainName: string;
    lang?: string;
}

export interface DomainsControllerFindScopeTreeRequest {
    domainName: string;
    lang?: string;
    direction?: DomainsControllerFindScopeTreeDirectionEnum;
}

export interface DomainsControllerFindScopesRequest {
    domainName: string;
    lang?: string;
    direction?: DomainsControllerFindScopesDirectionEnum;
}

/**
 * 
 */
export class DomainsApi extends runtime.BaseAPI {

    /**
     * Get all domains. Provides query parameters to filter domains       delegation support and/or specific delegation direction.
     */
    async domainsControllerFindAllRaw(requestParameters: DomainsControllerFindAllRequest): Promise<runtime.ApiResponse<Array<DomainDTO>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.lang !== undefined) {
            queryParameters['lang'] = requestParameters.lang;
        }

        if (requestParameters.direction !== undefined) {
            queryParameters['direction'] = requestParameters.direction;
        }

        if (requestParameters.domainName) {
            queryParameters['domainName'] = requestParameters.domainName;
        }

        if (requestParameters.supportsDelegations !== undefined) {
            queryParameters['supportsDelegations'] = requestParameters.supportsDelegations;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("ias", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/v1/domains`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DomainDTOFromJSON));
    }

    /**
     * Get all domains. Provides query parameters to filter domains       delegation support and/or specific delegation direction.
     */
    async domainsControllerFindAll(requestParameters: DomainsControllerFindAllRequest): Promise<Array<DomainDTO>> {
        const response = await this.domainsControllerFindAllRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns a single domain by name.
     */
    async domainsControllerFindOneRaw(requestParameters: DomainsControllerFindOneRequest): Promise<runtime.ApiResponse<DomainDTO>> {
        if (requestParameters.domainName === null || requestParameters.domainName === undefined) {
            throw new runtime.RequiredError('domainName','Required parameter requestParameters.domainName was null or undefined when calling domainsControllerFindOne.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.lang !== undefined) {
            queryParameters['lang'] = requestParameters.lang;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("ias", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/v1/domains/{domainName}`.replace(`{${"domainName"}}`, encodeURIComponent(String(requestParameters.domainName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainDTOFromJSON(jsonValue));
    }

    /**
     * Returns a single domain by name.
     */
    async domainsControllerFindOne(requestParameters: DomainsControllerFindOneRequest): Promise<DomainDTO> {
        const response = await this.domainsControllerFindOneRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns a sorted scope tree for the given domain.
     */
    async domainsControllerFindScopeTreeRaw(requestParameters: DomainsControllerFindScopeTreeRequest): Promise<runtime.ApiResponse<Array<ScopeTreeDTO>>> {
        if (requestParameters.domainName === null || requestParameters.domainName === undefined) {
            throw new runtime.RequiredError('domainName','Required parameter requestParameters.domainName was null or undefined when calling domainsControllerFindScopeTree.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.lang !== undefined) {
            queryParameters['lang'] = requestParameters.lang;
        }

        if (requestParameters.direction !== undefined) {
            queryParameters['direction'] = requestParameters.direction;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("ias", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/v1/domains/{domainName}/scope-tree`.replace(`{${"domainName"}}`, encodeURIComponent(String(requestParameters.domainName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ScopeTreeDTOFromJSON));
    }

    /**
     * Returns a sorted scope tree for the given domain.
     */
    async domainsControllerFindScopeTree(requestParameters: DomainsControllerFindScopeTreeRequest): Promise<Array<ScopeTreeDTO>> {
        const response = await this.domainsControllerFindScopeTreeRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns a list of scopes for the given domain.
     */
    async domainsControllerFindScopesRaw(requestParameters: DomainsControllerFindScopesRequest): Promise<runtime.ApiResponse<Array<ApiScopeListDTO>>> {
        if (requestParameters.domainName === null || requestParameters.domainName === undefined) {
            throw new runtime.RequiredError('domainName','Required parameter requestParameters.domainName was null or undefined when calling domainsControllerFindScopes.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.lang !== undefined) {
            queryParameters['lang'] = requestParameters.lang;
        }

        if (requestParameters.direction !== undefined) {
            queryParameters['direction'] = requestParameters.direction;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("ias", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/v1/domains/{domainName}/scopes`.replace(`{${"domainName"}}`, encodeURIComponent(String(requestParameters.domainName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ApiScopeListDTOFromJSON));
    }

    /**
     * Returns a list of scopes for the given domain.
     */
    async domainsControllerFindScopes(requestParameters: DomainsControllerFindScopesRequest): Promise<Array<ApiScopeListDTO>> {
        const response = await this.domainsControllerFindScopesRaw(requestParameters);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum DomainsControllerFindAllDirectionEnum {
    outgoing = 'outgoing'
}
/**
    * @export
    * @enum {string}
    */
export enum DomainsControllerFindScopeTreeDirectionEnum {
    outgoing = 'outgoing'
}
/**
    * @export
    * @enum {string}
    */
export enum DomainsControllerFindScopesDirectionEnum {
    outgoing = 'outgoing'
}
