/* tslint:disable */
/* eslint-disable */
/**
 * IdentityServer Internal Delegation API
 * Internal API for IdentityServer to manage delegations.   The swagger document can be downloaded by appending `-json` to the last path segment.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateDelegationRecordInputDTO,
    CreateDelegationRecordInputDTOFromJSON,
    CreateDelegationRecordInputDTOToJSON,
    DelegationRecordDTO,
    DelegationRecordDTOFromJSON,
    DelegationRecordDTOToJSON,
    HttpProblemResponse,
    HttpProblemResponseFromJSON,
    HttpProblemResponseToJSON,
} from '../models';

export interface DelegationIndexControllerCreateOrUpdateDelegationRecordRequest {
    xParamId: string;
    createDelegationRecordInputDTO: CreateDelegationRecordInputDTO;
}

export interface DelegationIndexControllerRemoveDelegationRecordRequest {
    xParamId: string;
}

/**
 * 
 */
export class DelegationIndexApi extends runtime.BaseAPI {

    /**
     * Create or update a delegation index record.
     */
    async delegationIndexControllerCreateOrUpdateDelegationRecordRaw(requestParameters: DelegationIndexControllerCreateOrUpdateDelegationRecordRequest): Promise<runtime.ApiResponse<DelegationRecordDTO>> {
        if (requestParameters.xParamId === null || requestParameters.xParamId === undefined) {
            throw new runtime.RequiredError('xParamId','Required parameter requestParameters.xParamId was null or undefined when calling delegationIndexControllerCreateOrUpdateDelegationRecord.');
        }

        if (requestParameters.createDelegationRecordInputDTO === null || requestParameters.createDelegationRecordInputDTO === undefined) {
            throw new runtime.RequiredError('createDelegationRecordInputDTO','Required parameter requestParameters.createDelegationRecordInputDTO was null or undefined when calling delegationIndexControllerCreateOrUpdateDelegationRecord.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xParamId !== undefined && requestParameters.xParamId !== null) {
            headerParameters['X-Param-Id'] = String(requestParameters.xParamId);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("ias", ["@island.is/auth/delegations/index:system-write"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/v1/delegation-index/.id`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CreateDelegationRecordInputDTOToJSON(requestParameters.createDelegationRecordInputDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DelegationRecordDTOFromJSON(jsonValue));
    }

    /**
     * Create or update a delegation index record.
     */
    async delegationIndexControllerCreateOrUpdateDelegationRecord(requestParameters: DelegationIndexControllerCreateOrUpdateDelegationRecordRequest): Promise<DelegationRecordDTO> {
        const response = await this.delegationIndexControllerCreateOrUpdateDelegationRecordRaw(requestParameters);
        return await response.value();
    }

    /**
     * Delete a delegation index record.
     */
    async delegationIndexControllerRemoveDelegationRecordRaw(requestParameters: DelegationIndexControllerRemoveDelegationRecordRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.xParamId === null || requestParameters.xParamId === undefined) {
            throw new runtime.RequiredError('xParamId','Required parameter requestParameters.xParamId was null or undefined when calling delegationIndexControllerRemoveDelegationRecord.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xParamId !== undefined && requestParameters.xParamId !== null) {
            headerParameters['X-Param-Id'] = String(requestParameters.xParamId);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("ias", ["@island.is/auth/delegations/index:system-write"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/v1/delegation-index/.id`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a delegation index record.
     */
    async delegationIndexControllerRemoveDelegationRecord(requestParameters: DelegationIndexControllerRemoveDelegationRecordRequest): Promise<void> {
        await this.delegationIndexControllerRemoveDelegationRecordRaw(requestParameters);
    }

}
