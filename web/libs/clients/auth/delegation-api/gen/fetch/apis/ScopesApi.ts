/* tslint:disable */
/* eslint-disable */
/**
 * IdentityServer Internal Delegation API
 * Internal API for IdentityServer to manage delegations.   The swagger document can be downloaded by appending `-json` to the last path segment.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    HttpProblemResponse,
    HttpProblemResponseFromJSON,
    HttpProblemResponseToJSON,
    ScopeTreeDTO,
    ScopeTreeDTOFromJSON,
    ScopeTreeDTOToJSON,
} from '../models';

export interface ScopesControllerFindScopeTreeRequest {
    requestedScopes: Array<string>;
    lang?: string;
}

/**
 * 
 */
export class ScopesApi extends runtime.BaseAPI {

    /**
     * Returns a sorted scope tree for the requested scopes.
     */
    async scopesControllerFindScopeTreeRaw(requestParameters: ScopesControllerFindScopeTreeRequest): Promise<runtime.ApiResponse<Array<ScopeTreeDTO>>> {
        if (requestParameters.requestedScopes === null || requestParameters.requestedScopes === undefined) {
            throw new runtime.RequiredError('requestedScopes','Required parameter requestParameters.requestedScopes was null or undefined when calling scopesControllerFindScopeTree.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.requestedScopes) {
            queryParameters['requestedScopes'] = requestParameters.requestedScopes;
        }

        if (requestParameters.lang !== undefined) {
            queryParameters['lang'] = requestParameters.lang;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("ias", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/v1/scopes/scope-tree`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ScopeTreeDTOFromJSON));
    }

    /**
     * Returns a sorted scope tree for the requested scopes.
     */
    async scopesControllerFindScopeTree(requestParameters: ScopesControllerFindScopeTreeRequest): Promise<Array<ScopeTreeDTO>> {
        const response = await this.scopesControllerFindScopeTreeRaw(requestParameters);
        return await response.value();
    }

}
