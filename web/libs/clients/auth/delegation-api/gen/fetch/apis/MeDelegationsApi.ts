/* tslint:disable */
/* eslint-disable */
/**
 * IdentityServer Internal Delegation API
 * Internal API for IdentityServer to manage delegations.   The swagger document can be downloaded by appending `-json` to the last path segment.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateDelegationDTO,
    CreateDelegationDTOFromJSON,
    CreateDelegationDTOToJSON,
    DelegationDTO,
    DelegationDTOFromJSON,
    DelegationDTOToJSON,
    HttpProblemResponse,
    HttpProblemResponseFromJSON,
    HttpProblemResponseToJSON,
    PatchDelegationDTO,
    PatchDelegationDTOFromJSON,
    PatchDelegationDTOToJSON,
} from '../models';

export interface MeDelegationsControllerCreateRequest {
    createDelegationDTO: CreateDelegationDTO;
}

export interface MeDelegationsControllerDeleteRequest {
    delegationId: string;
}

export interface MeDelegationsControllerFindAllRequest {
    domain?: string;
    direction?: MeDelegationsControllerFindAllDirectionEnum;
    validity?: MeDelegationsControllerFindAllValidityEnum;
    xQueryOtherUser?: string;
}

export interface MeDelegationsControllerFindOneRequest {
    delegationId: string;
}

export interface MeDelegationsControllerPatchRequest {
    delegationId: string;
    patchDelegationDTO: PatchDelegationDTO;
}

/**
 * 
 */
export class MeDelegationsApi extends runtime.BaseAPI {

    /**
     */
    async meDelegationsControllerCreateRaw(requestParameters: MeDelegationsControllerCreateRequest): Promise<runtime.ApiResponse<DelegationDTO>> {
        if (requestParameters.createDelegationDTO === null || requestParameters.createDelegationDTO === undefined) {
            throw new runtime.RequiredError('createDelegationDTO','Required parameter requestParameters.createDelegationDTO was null or undefined when calling meDelegationsControllerCreate.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("ias", ["@island.is/auth/delegations:write", "@admin.island.is/delegations"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/v1/me/delegations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateDelegationDTOToJSON(requestParameters.createDelegationDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DelegationDTOFromJSON(jsonValue));
    }

    /**
     */
    async meDelegationsControllerCreate(requestParameters: MeDelegationsControllerCreateRequest): Promise<DelegationDTO> {
        const response = await this.meDelegationsControllerCreateRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async meDelegationsControllerDeleteRaw(requestParameters: MeDelegationsControllerDeleteRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.delegationId === null || requestParameters.delegationId === undefined) {
            throw new runtime.RequiredError('delegationId','Required parameter requestParameters.delegationId was null or undefined when calling meDelegationsControllerDelete.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("ias", ["@island.is/auth/delegations:write", "@admin.island.is/delegations"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/v1/me/delegations/{delegationId}`.replace(`{${"delegationId"}}`, encodeURIComponent(String(requestParameters.delegationId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async meDelegationsControllerDelete(requestParameters: MeDelegationsControllerDeleteRequest): Promise<void> {
        await this.meDelegationsControllerDeleteRaw(requestParameters);
    }

    /**
     */
    async meDelegationsControllerFindAllRaw(requestParameters: MeDelegationsControllerFindAllRequest): Promise<runtime.ApiResponse<Array<DelegationDTO>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.domain !== undefined) {
            queryParameters['domain'] = requestParameters.domain;
        }

        if (requestParameters.direction !== undefined) {
            queryParameters['direction'] = requestParameters.direction;
        }

        if (requestParameters.validity !== undefined) {
            queryParameters['validity'] = requestParameters.validity;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xQueryOtherUser !== undefined && requestParameters.xQueryOtherUser !== null) {
            headerParameters['X-Query-OtherUser'] = String(requestParameters.xQueryOtherUser);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("ias", ["@island.is/auth/delegations:write", "@admin.island.is/delegations"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/v1/me/delegations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DelegationDTOFromJSON));
    }

    /**
     */
    async meDelegationsControllerFindAll(requestParameters: MeDelegationsControllerFindAllRequest): Promise<Array<DelegationDTO>> {
        const response = await this.meDelegationsControllerFindAllRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async meDelegationsControllerFindOneRaw(requestParameters: MeDelegationsControllerFindOneRequest): Promise<runtime.ApiResponse<DelegationDTO>> {
        if (requestParameters.delegationId === null || requestParameters.delegationId === undefined) {
            throw new runtime.RequiredError('delegationId','Required parameter requestParameters.delegationId was null or undefined when calling meDelegationsControllerFindOne.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("ias", ["@island.is/auth/delegations:write", "@admin.island.is/delegations"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/v1/me/delegations/{delegationId}`.replace(`{${"delegationId"}}`, encodeURIComponent(String(requestParameters.delegationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DelegationDTOFromJSON(jsonValue));
    }

    /**
     */
    async meDelegationsControllerFindOne(requestParameters: MeDelegationsControllerFindOneRequest): Promise<DelegationDTO> {
        const response = await this.meDelegationsControllerFindOneRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async meDelegationsControllerPatchRaw(requestParameters: MeDelegationsControllerPatchRequest): Promise<runtime.ApiResponse<DelegationDTO>> {
        if (requestParameters.delegationId === null || requestParameters.delegationId === undefined) {
            throw new runtime.RequiredError('delegationId','Required parameter requestParameters.delegationId was null or undefined when calling meDelegationsControllerPatch.');
        }

        if (requestParameters.patchDelegationDTO === null || requestParameters.patchDelegationDTO === undefined) {
            throw new runtime.RequiredError('patchDelegationDTO','Required parameter requestParameters.patchDelegationDTO was null or undefined when calling meDelegationsControllerPatch.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("ias", ["@island.is/auth/delegations:write", "@admin.island.is/delegations"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/v1/me/delegations/{delegationId}`.replace(`{${"delegationId"}}`, encodeURIComponent(String(requestParameters.delegationId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchDelegationDTOToJSON(requestParameters.patchDelegationDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DelegationDTOFromJSON(jsonValue));
    }

    /**
     */
    async meDelegationsControllerPatch(requestParameters: MeDelegationsControllerPatchRequest): Promise<DelegationDTO> {
        const response = await this.meDelegationsControllerPatchRaw(requestParameters);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum MeDelegationsControllerFindAllDirectionEnum {
    outgoing = 'outgoing',
    incoming = 'incoming'
}
/**
    * @export
    * @enum {string}
    */
export enum MeDelegationsControllerFindAllValidityEnum {
    all = 'all',
    now = 'now',
    past = 'past',
    includeFuture = 'includeFuture'
}
