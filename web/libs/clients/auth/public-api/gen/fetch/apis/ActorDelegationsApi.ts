/* tslint:disable */
/* eslint-disable */
/**
 * IdentityServer Public API
 * Public API for IdentityServer.   The swagger document can be downloaded by appending `-json` to the last path segment.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    HttpProblemResponse,
    HttpProblemResponseFromJSON,
    HttpProblemResponseToJSON,
    MergedDelegationDTO,
    MergedDelegationDTOFromJSON,
    MergedDelegationDTOToJSON,
} from '../models';

export interface ActorDelegationsControllerFindAllRequest {
    direction: ActorDelegationsControllerFindAllDirectionEnum;
    delegationTypes?: Array<string>;
    otherUser?: string;
}

/**
 * 
 */
export class ActorDelegationsApi extends runtime.BaseAPI {

    /**
     * Finds all incoming delegations for the signed in user or actor.    Including the custom delegations as well as natural delegations from NationalRegistry and CompanyRegistry.
     */
    async actorDelegationsControllerFindAllRaw(requestParameters: ActorDelegationsControllerFindAllRequest): Promise<runtime.ApiResponse<Array<MergedDelegationDTO>>> {
        if (requestParameters.direction === null || requestParameters.direction === undefined) {
            throw new runtime.RequiredError('direction','Required parameter requestParameters.direction was null or undefined when calling actorDelegationsControllerFindAll.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.direction !== undefined) {
            queryParameters['direction'] = requestParameters.direction;
        }

        if (requestParameters.delegationTypes) {
            queryParameters['delegationTypes'] = requestParameters.delegationTypes;
        }

        if (requestParameters.otherUser !== undefined) {
            queryParameters['otherUser'] = requestParameters.otherUser;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/actor/delegations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MergedDelegationDTOFromJSON));
    }

    /**
     * Finds all incoming delegations for the signed in user or actor.    Including the custom delegations as well as natural delegations from NationalRegistry and CompanyRegistry.
     */
    async actorDelegationsControllerFindAll(requestParameters: ActorDelegationsControllerFindAllRequest): Promise<Array<MergedDelegationDTO>> {
        const response = await this.actorDelegationsControllerFindAllRaw(requestParameters);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum ActorDelegationsControllerFindAllDirectionEnum {
    incoming = 'incoming'
}
