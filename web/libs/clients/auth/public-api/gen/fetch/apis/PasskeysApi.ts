/* tslint:disable */
/* eslint-disable */
/**
 * IdentityServer Public API
 * Public API for IdentityServer.   The swagger document can be downloaded by appending `-json` to the last path segment.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AuthenticationOptions,
    AuthenticationOptionsFromJSON,
    AuthenticationOptionsToJSON,
    HttpProblemResponse,
    HttpProblemResponseFromJSON,
    HttpProblemResponseToJSON,
    RegistrationOptions,
    RegistrationOptionsFromJSON,
    RegistrationOptionsToJSON,
    RegistrationResponse,
    RegistrationResponseFromJSON,
    RegistrationResponseToJSON,
    RegistrationResult,
    RegistrationResultFromJSON,
    RegistrationResultToJSON,
} from '../models';

export interface PasskeysControllerVerifyRegistrationRequest {
    registrationResponse: RegistrationResponse;
}

/**
 * 
 */
export class PasskeysApi extends runtime.BaseAPI {

    /**
     * Deletes passkey for the authenticated user.
     * Deletes passkey for the authenticated user.
     */
    async passkeysControllerDeletePasskeyRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/passkeys`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes passkey for the authenticated user.
     * Deletes passkey for the authenticated user.
     */
    async passkeysControllerDeletePasskey(): Promise<void> {
        await this.passkeysControllerDeletePasskeyRaw();
    }

    /**
     * Passkey authenticate options for the authenticated user.
     * Gets passkey authentication options for the authenticated user.
     */
    async passkeysControllerGetPasskeyAuthenticationOptionsRaw(): Promise<runtime.ApiResponse<AuthenticationOptions>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/passkeys/authenticate`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthenticationOptionsFromJSON(jsonValue));
    }

    /**
     * Passkey authenticate options for the authenticated user.
     * Gets passkey authentication options for the authenticated user.
     */
    async passkeysControllerGetPasskeyAuthenticationOptions(): Promise<AuthenticationOptions> {
        const response = await this.passkeysControllerGetPasskeyAuthenticationOptionsRaw();
        return await response.value();
    }

    /**
     * Passkey registration options for the authenticated user.
     * Gets passkey registration options for the authenicated user.
     */
    async passkeysControllerGetPasskeyRegistrationOptionsRaw(): Promise<runtime.ApiResponse<RegistrationOptions>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/passkeys/register`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RegistrationOptionsFromJSON(jsonValue));
    }

    /**
     * Passkey registration options for the authenticated user.
     * Gets passkey registration options for the authenicated user.
     */
    async passkeysControllerGetPasskeyRegistrationOptions(): Promise<RegistrationOptions> {
        const response = await this.passkeysControllerGetPasskeyRegistrationOptionsRaw();
        return await response.value();
    }

    /**
     * Verifies authenticated user passkey registration response.
     * Validates registration based on input from authenicated user.
     */
    async passkeysControllerVerifyRegistrationRaw(requestParameters: PasskeysControllerVerifyRegistrationRequest): Promise<runtime.ApiResponse<RegistrationResult>> {
        if (requestParameters.registrationResponse === null || requestParameters.registrationResponse === undefined) {
            throw new runtime.RequiredError('registrationResponse','Required parameter requestParameters.registrationResponse was null or undefined when calling passkeysControllerVerifyRegistration.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/passkeys/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RegistrationResponseToJSON(requestParameters.registrationResponse),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RegistrationResultFromJSON(jsonValue));
    }

    /**
     * Verifies authenticated user passkey registration response.
     * Validates registration based on input from authenicated user.
     */
    async passkeysControllerVerifyRegistration(requestParameters: PasskeysControllerVerifyRegistrationRequest): Promise<RegistrationResult> {
        const response = await this.passkeysControllerVerifyRegistrationRaw(requestParameters);
        return await response.value();
    }

}
