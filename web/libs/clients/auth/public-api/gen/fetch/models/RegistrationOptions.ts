/* tslint:disable */
/* eslint-disable */
/**
 * IdentityServer Public API
 * Public API for IdentityServer.   The swagger document can be downloaded by appending `-json` to the last path segment.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    RegistrationOptionsAuthenticatorSelection,
    RegistrationOptionsAuthenticatorSelectionFromJSON,
    RegistrationOptionsAuthenticatorSelectionFromJSONTyped,
    RegistrationOptionsAuthenticatorSelectionToJSON,
    RegistrationOptionsExtensions,
    RegistrationOptionsExtensionsFromJSON,
    RegistrationOptionsExtensionsFromJSONTyped,
    RegistrationOptionsExtensionsToJSON,
    RegistrationOptionsPublicKeyCredentialDescriptorJSON,
    RegistrationOptionsPublicKeyCredentialDescriptorJSONFromJSON,
    RegistrationOptionsPublicKeyCredentialDescriptorJSONFromJSONTyped,
    RegistrationOptionsPublicKeyCredentialDescriptorJSONToJSON,
    RegistrationOptionsPublicKeyCredentialOption,
    RegistrationOptionsPublicKeyCredentialOptionFromJSON,
    RegistrationOptionsPublicKeyCredentialOptionFromJSONTyped,
    RegistrationOptionsPublicKeyCredentialOptionToJSON,
    RegistrationOptionsRp,
    RegistrationOptionsRpFromJSON,
    RegistrationOptionsRpFromJSONTyped,
    RegistrationOptionsRpToJSON,
    RegistrationOptionsUser,
    RegistrationOptionsUserFromJSON,
    RegistrationOptionsUserFromJSONTyped,
    RegistrationOptionsUserToJSON,
} from './';

/**
 * 
 * @export
 * @interface RegistrationOptions
 */
export interface RegistrationOptions {
    /**
     * 
     * @type {string}
     * @memberof RegistrationOptions
     */
    challenge: string;
    /**
     * 
     * @type {RegistrationOptionsRp}
     * @memberof RegistrationOptions
     */
    rp: RegistrationOptionsRp;
    /**
     * 
     * @type {RegistrationOptionsUser}
     * @memberof RegistrationOptions
     */
    user: RegistrationOptionsUser;
    /**
     * 
     * @type {Array<RegistrationOptionsPublicKeyCredentialOption>}
     * @memberof RegistrationOptions
     */
    pubKeyCredParams: Array<RegistrationOptionsPublicKeyCredentialOption>;
    /**
     * 
     * @type {number}
     * @memberof RegistrationOptions
     */
    timeout?: number;
    /**
     * 
     * @type {string}
     * @memberof RegistrationOptions
     */
    attestation?: string;
    /**
     * 
     * @type {Array<RegistrationOptionsPublicKeyCredentialDescriptorJSON>}
     * @memberof RegistrationOptions
     */
    excludeCredentials?: Array<RegistrationOptionsPublicKeyCredentialDescriptorJSON>;
    /**
     * 
     * @type {RegistrationOptionsAuthenticatorSelection}
     * @memberof RegistrationOptions
     */
    authenticatorSelection?: RegistrationOptionsAuthenticatorSelection;
    /**
     * 
     * @type {RegistrationOptionsExtensions}
     * @memberof RegistrationOptions
     */
    extensions?: RegistrationOptionsExtensions;
}

export function RegistrationOptionsFromJSON(json: any): RegistrationOptions {
    return RegistrationOptionsFromJSONTyped(json, false);
}

export function RegistrationOptionsFromJSONTyped(json: any, ignoreDiscriminator: boolean): RegistrationOptions {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'challenge': json['challenge'],
        'rp': RegistrationOptionsRpFromJSON(json['rp']),
        'user': RegistrationOptionsUserFromJSON(json['user']),
        'pubKeyCredParams': ((json['pubKeyCredParams'] as Array<any>).map(RegistrationOptionsPublicKeyCredentialOptionFromJSON)),
        'timeout': !exists(json, 'timeout') ? undefined : json['timeout'],
        'attestation': !exists(json, 'attestation') ? undefined : json['attestation'],
        'excludeCredentials': !exists(json, 'excludeCredentials') ? undefined : ((json['excludeCredentials'] as Array<any>).map(RegistrationOptionsPublicKeyCredentialDescriptorJSONFromJSON)),
        'authenticatorSelection': !exists(json, 'authenticatorSelection') ? undefined : RegistrationOptionsAuthenticatorSelectionFromJSON(json['authenticatorSelection']),
        'extensions': !exists(json, 'extensions') ? undefined : RegistrationOptionsExtensionsFromJSON(json['extensions']),
    };
}

export function RegistrationOptionsToJSON(value?: RegistrationOptions | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'challenge': value.challenge,
        'rp': RegistrationOptionsRpToJSON(value.rp),
        'user': RegistrationOptionsUserToJSON(value.user),
        'pubKeyCredParams': ((value.pubKeyCredParams as Array<any>).map(RegistrationOptionsPublicKeyCredentialOptionToJSON)),
        'timeout': value.timeout,
        'attestation': value.attestation,
        'excludeCredentials': value.excludeCredentials === undefined ? undefined : ((value.excludeCredentials as Array<any>).map(RegistrationOptionsPublicKeyCredentialDescriptorJSONToJSON)),
        'authenticatorSelection': RegistrationOptionsAuthenticatorSelectionToJSON(value.authenticatorSelection),
        'extensions': RegistrationOptionsExtensionsToJSON(value.extensions),
    };
}


