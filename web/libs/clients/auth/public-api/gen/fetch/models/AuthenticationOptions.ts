/* tslint:disable */
/* eslint-disable */
/**
 * IdentityServer Public API
 * Public API for IdentityServer.   The swagger document can be downloaded by appending `-json` to the last path segment.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    AuthenticationOptionsExtensions,
    AuthenticationOptionsExtensionsFromJSON,
    AuthenticationOptionsExtensionsFromJSONTyped,
    AuthenticationOptionsExtensionsToJSON,
    AuthenticationOptionsPublicKeyCredentialDescriptor,
    AuthenticationOptionsPublicKeyCredentialDescriptorFromJSON,
    AuthenticationOptionsPublicKeyCredentialDescriptorFromJSONTyped,
    AuthenticationOptionsPublicKeyCredentialDescriptorToJSON,
} from './';

/**
 * 
 * @export
 * @interface AuthenticationOptions
 */
export interface AuthenticationOptions {
    /**
     * 
     * @type {string}
     * @memberof AuthenticationOptions
     */
    challenge: string;
    /**
     * 
     * @type {number}
     * @memberof AuthenticationOptions
     */
    timeout?: number;
    /**
     * 
     * @type {string}
     * @memberof AuthenticationOptions
     */
    rpId?: string;
    /**
     * 
     * @type {Array<AuthenticationOptionsPublicKeyCredentialDescriptor>}
     * @memberof AuthenticationOptions
     */
    allowCredentials?: Array<AuthenticationOptionsPublicKeyCredentialDescriptor>;
    /**
     * 
     * @type {string}
     * @memberof AuthenticationOptions
     */
    userVerification?: string;
    /**
     * 
     * @type {AuthenticationOptionsExtensions}
     * @memberof AuthenticationOptions
     */
    extensions?: AuthenticationOptionsExtensions;
}

export function AuthenticationOptionsFromJSON(json: any): AuthenticationOptions {
    return AuthenticationOptionsFromJSONTyped(json, false);
}

export function AuthenticationOptionsFromJSONTyped(json: any, ignoreDiscriminator: boolean): AuthenticationOptions {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'challenge': json['challenge'],
        'timeout': !exists(json, 'timeout') ? undefined : json['timeout'],
        'rpId': !exists(json, 'rpId') ? undefined : json['rpId'],
        'allowCredentials': !exists(json, 'allowCredentials') ? undefined : ((json['allowCredentials'] as Array<any>).map(AuthenticationOptionsPublicKeyCredentialDescriptorFromJSON)),
        'userVerification': !exists(json, 'userVerification') ? undefined : json['userVerification'],
        'extensions': !exists(json, 'extensions') ? undefined : AuthenticationOptionsExtensionsFromJSON(json['extensions']),
    };
}

export function AuthenticationOptionsToJSON(value?: AuthenticationOptions | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'challenge': value.challenge,
        'timeout': value.timeout,
        'rpId': value.rpId,
        'allowCredentials': value.allowCredentials === undefined ? undefined : ((value.allowCredentials as Array<any>).map(AuthenticationOptionsPublicKeyCredentialDescriptorToJSON)),
        'userVerification': value.userVerification,
        'extensions': AuthenticationOptionsExtensionsToJSON(value.extensions),
    };
}


