/* tslint:disable */
/* eslint-disable */
/**
 * IAS API
 * IAS API
 *
 * The version of the OpenAPI document: v1
 * Contact: island@island.is
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Consent,
    ConsentFromJSON,
    ConsentToJSON,
    ConsentUpdate,
    ConsentUpdateFromJSON,
    ConsentUpdateToJSON,
    ConsentsPaginatedResponse,
    ConsentsPaginatedResponseFromJSON,
    ConsentsPaginatedResponseToJSON,
} from '../models';

export interface V1ActorConsentsClientIdPatchRequest {
    clientId: string;
    consentUpdate?: ConsentUpdate;
}

/**
 * 
 */
export class ConsentsApi extends runtime.BaseAPI {

    /**
     */
    async v1ActorConsentsClientIdPatchRaw(requestParameters: V1ActorConsentsClientIdPatchRequest): Promise<runtime.ApiResponse<Consent>> {
        if (requestParameters.clientId === null || requestParameters.clientId === undefined) {
            throw new runtime.RequiredError('clientId','Required parameter requestParameters.clientId was null or undefined when calling v1ActorConsentsClientIdPatch.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/actor/consents/{clientId}`.replace(`{${"clientId"}}`, encodeURIComponent(String(requestParameters.clientId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ConsentUpdateToJSON(requestParameters.consentUpdate),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ConsentFromJSON(jsonValue));
    }

    /**
     */
    async v1ActorConsentsClientIdPatch(requestParameters: V1ActorConsentsClientIdPatchRequest): Promise<Consent> {
        const response = await this.v1ActorConsentsClientIdPatchRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async v1ActorConsentsGetRaw(): Promise<runtime.ApiResponse<ConsentsPaginatedResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/actor/consents`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ConsentsPaginatedResponseFromJSON(jsonValue));
    }

    /**
     */
    async v1ActorConsentsGet(): Promise<ConsentsPaginatedResponse> {
        const response = await this.v1ActorConsentsGetRaw();
        return await response.value();
    }

}
