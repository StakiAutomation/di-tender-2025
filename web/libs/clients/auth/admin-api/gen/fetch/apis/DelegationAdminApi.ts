/* tslint:disable */
/* eslint-disable */
/**
 * IdentityServer Admin api
 * Api for administration.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreatePaperDelegationDto,
    CreatePaperDelegationDtoFromJSON,
    CreatePaperDelegationDtoToJSON,
    DelegationAdminCustomDto,
    DelegationAdminCustomDtoFromJSON,
    DelegationAdminCustomDtoToJSON,
    DelegationDTO,
    DelegationDTOFromJSON,
    DelegationDTOToJSON,
    HttpProblemResponse,
    HttpProblemResponseFromJSON,
    HttpProblemResponseToJSON,
    ZendeskWebhookInputDto,
    ZendeskWebhookInputDtoFromJSON,
    ZendeskWebhookInputDtoToJSON,
} from '../models';

export interface DelegationAdminControllerCreateRequest {
    createPaperDelegationDto: CreatePaperDelegationDto;
}

export interface DelegationAdminControllerCreateByZendeskIdRequest {
    zendeskWebhookInputDto: ZendeskWebhookInputDto;
}

export interface DelegationAdminControllerDeleteRequest {
    delegationId: string;
}

export interface DelegationAdminControllerDeleteByZendeskIdRequest {
    zendeskWebhookInputDto: ZendeskWebhookInputDto;
}

export interface DelegationAdminControllerGetDelegationAdminRequest {
    xQueryNationalId: string;
}

/**
 * 
 */
export class DelegationAdminApi extends runtime.BaseAPI {

    /**
     */
    async delegationAdminControllerCreateRaw(requestParameters: DelegationAdminControllerCreateRequest): Promise<runtime.ApiResponse<DelegationDTO>> {
        if (requestParameters.createPaperDelegationDto === null || requestParameters.createPaperDelegationDto === undefined) {
            throw new runtime.RequiredError('createPaperDelegationDto','Required parameter requestParameters.createPaperDelegationDto was null or undefined when calling delegationAdminControllerCreate.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/delegation-admin`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreatePaperDelegationDtoToJSON(requestParameters.createPaperDelegationDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DelegationDTOFromJSON(jsonValue));
    }

    /**
     */
    async delegationAdminControllerCreate(requestParameters: DelegationAdminControllerCreateRequest): Promise<DelegationDTO> {
        const response = await this.delegationAdminControllerCreateRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async delegationAdminControllerCreateByZendeskIdRaw(requestParameters: DelegationAdminControllerCreateByZendeskIdRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.zendeskWebhookInputDto === null || requestParameters.zendeskWebhookInputDto === undefined) {
            throw new runtime.RequiredError('zendeskWebhookInputDto','Required parameter requestParameters.zendeskWebhookInputDto was null or undefined when calling delegationAdminControllerCreateByZendeskId.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/delegation-admin/zendesk`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ZendeskWebhookInputDtoToJSON(requestParameters.zendeskWebhookInputDto),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async delegationAdminControllerCreateByZendeskId(requestParameters: DelegationAdminControllerCreateByZendeskIdRequest): Promise<void> {
        await this.delegationAdminControllerCreateByZendeskIdRaw(requestParameters);
    }

    /**
     */
    async delegationAdminControllerDeleteRaw(requestParameters: DelegationAdminControllerDeleteRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.delegationId === null || requestParameters.delegationId === undefined) {
            throw new runtime.RequiredError('delegationId','Required parameter requestParameters.delegationId was null or undefined when calling delegationAdminControllerDelete.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/delegation-admin/{delegationId}`.replace(`{${"delegationId"}}`, encodeURIComponent(String(requestParameters.delegationId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async delegationAdminControllerDelete(requestParameters: DelegationAdminControllerDeleteRequest): Promise<void> {
        await this.delegationAdminControllerDeleteRaw(requestParameters);
    }

    /**
     */
    async delegationAdminControllerDeleteByZendeskIdRaw(requestParameters: DelegationAdminControllerDeleteByZendeskIdRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.zendeskWebhookInputDto === null || requestParameters.zendeskWebhookInputDto === undefined) {
            throw new runtime.RequiredError('zendeskWebhookInputDto','Required parameter requestParameters.zendeskWebhookInputDto was null or undefined when calling delegationAdminControllerDeleteByZendeskId.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/delegation-admin/revert-zendesk`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ZendeskWebhookInputDtoToJSON(requestParameters.zendeskWebhookInputDto),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async delegationAdminControllerDeleteByZendeskId(requestParameters: DelegationAdminControllerDeleteByZendeskIdRequest): Promise<void> {
        await this.delegationAdminControllerDeleteByZendeskIdRaw(requestParameters);
    }

    /**
     */
    async delegationAdminControllerGetDelegationAdminRaw(requestParameters: DelegationAdminControllerGetDelegationAdminRequest): Promise<runtime.ApiResponse<DelegationAdminCustomDto>> {
        if (requestParameters.xQueryNationalId === null || requestParameters.xQueryNationalId === undefined) {
            throw new runtime.RequiredError('xQueryNationalId','Required parameter requestParameters.xQueryNationalId was null or undefined when calling delegationAdminControllerGetDelegationAdmin.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xQueryNationalId !== undefined && requestParameters.xQueryNationalId !== null) {
            headerParameters['X-Query-National-Id'] = String(requestParameters.xQueryNationalId);
        }

        const response = await this.request({
            path: `/delegation-admin`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DelegationAdminCustomDtoFromJSON(jsonValue));
    }

    /**
     */
    async delegationAdminControllerGetDelegationAdmin(requestParameters: DelegationAdminControllerGetDelegationAdminRequest): Promise<DelegationAdminCustomDto> {
        const response = await this.delegationAdminControllerGetDelegationAdminRaw(requestParameters);
        return await response.value();
    }

}
