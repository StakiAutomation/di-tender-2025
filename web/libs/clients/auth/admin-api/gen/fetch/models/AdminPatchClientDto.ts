/* tslint:disable */
/* eslint-disable */
/**
 * IdentityServer Admin api
 * Api for administration.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    AdminClientClaimDto,
    AdminClientClaimDtoFromJSON,
    AdminClientClaimDtoFromJSONTyped,
    AdminClientClaimDtoToJSON,
    ClientSso,
    ClientSsoFromJSON,
    ClientSsoFromJSONTyped,
    ClientSsoToJSON,
    RefreshTokenExpiration,
    RefreshTokenExpirationFromJSON,
    RefreshTokenExpirationFromJSONTyped,
    RefreshTokenExpirationToJSON,
    TranslatedValueDto,
    TranslatedValueDtoFromJSON,
    TranslatedValueDtoFromJSONTyped,
    TranslatedValueDtoToJSON,
} from './';

/**
 * 
 * @export
 * @interface AdminPatchClientDto
 */
export interface AdminPatchClientDto {
    /**
     * 
     * @type {Array<TranslatedValueDto>}
     * @memberof AdminPatchClientDto
     */
    displayName?: Array<TranslatedValueDto>;
    /**
     * 
     * @type {Array<string>}
     * @memberof AdminPatchClientDto
     */
    redirectUris?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof AdminPatchClientDto
     */
    postLogoutRedirectUris?: Array<string>;
    /**
     * Absolute lifetime of refresh token in seconds
     * @type {number}
     * @memberof AdminPatchClientDto
     */
    absoluteRefreshTokenLifetime?: number;
    /**
     * Sliding lifetime of refresh token in seconds
     * @type {number}
     * @memberof AdminPatchClientDto
     */
    slidingRefreshTokenLifetime?: number;
    /**
     * 
     * @type {RefreshTokenExpiration}
     * @memberof AdminPatchClientDto
     */
    refreshTokenExpiration?: RefreshTokenExpiration;
    /**
     * Only super users can update this value.
     * @type {Array<string>}
     * @memberof AdminPatchClientDto
     */
    addedDelegationTypes?: Array<string>;
    /**
     * Only super users can update this value.
     * @type {Array<string>}
     * @memberof AdminPatchClientDto
     */
    removedDelegationTypes?: Array<string>;
    /**
     * Use addedDelegationTypes or removedDelegationTypes instead
     * @type {boolean}
     * @memberof AdminPatchClientDto
     */
    supportsCustomDelegation?: boolean;
    /**
     * Use addedDelegationTypes or removedDelegationTypes instead
     * @type {boolean}
     * @memberof AdminPatchClientDto
     */
    supportsLegalGuardians?: boolean;
    /**
     * Use addedDelegationTypes or removedDelegationTypes instead
     * @type {boolean}
     * @memberof AdminPatchClientDto
     */
    supportsProcuringHolders?: boolean;
    /**
     * Use addedDelegationTypes or removedDelegationTypes instead
     * @type {boolean}
     * @memberof AdminPatchClientDto
     */
    supportsPersonalRepresentatives?: boolean;
    /**
     * Only super users can update this value.
     * @type {boolean}
     * @memberof AdminPatchClientDto
     */
    promptDelegations?: boolean;
    /**
     * Only super users can update this value.
     * @type {boolean}
     * @memberof AdminPatchClientDto
     */
    requireApiScopes?: boolean;
    /**
     * Only super users can update this value.
     * @type {boolean}
     * @memberof AdminPatchClientDto
     */
    requireConsent?: boolean;
    /**
     * Only super users can update this value.
     * @type {boolean}
     * @memberof AdminPatchClientDto
     */
    allowOfflineAccess?: boolean;
    /**
     * Only super users can update this value.
     * @type {boolean}
     * @memberof AdminPatchClientDto
     */
    requirePkce?: boolean;
    /**
     * Indicates if the client supports token exchange grant. Only available for machine clients and only super users can update this value
     * @type {boolean}
     * @memberof AdminPatchClientDto
     */
    supportTokenExchange?: boolean;
    /**
     * Only super users can update this value.
     * @type {number}
     * @memberof AdminPatchClientDto
     */
    accessTokenLifetime?: number;
    /**
     * Only super users can update this value.
     * @type {boolean}
     * @memberof AdminPatchClientDto
     */
    singleSession?: boolean;
    /**
     * Dictionary of custom claims added to access tokens. Only super users can update this value.
     * @type {Array<AdminClientClaimDto>}
     * @memberof AdminPatchClientDto
     */
    customClaims?: Array<AdminClientClaimDto>;
    /**
     * Scopes to grant to client.
     * @type {Array<string>}
     * @memberof AdminPatchClientDto
     */
    addedScopes?: Array<string>;
    /**
     * Scopes to revoke from client.
     * @type {Array<string>}
     * @memberof AdminPatchClientDto
     */
    removedScopes?: Array<string>;
    /**
     * Contact email for owner
     * @type {string}
     * @memberof AdminPatchClientDto
     */
    contactEmail?: string;
    /**
     * Array of allowed acr values for the client.
     * @type {Array<string>}
     * @memberof AdminPatchClientDto
     */
    allowedAcr?: Array<string>;
    /**
     * 
     * @type {ClientSso}
     * @memberof AdminPatchClientDto
     */
    sso?: ClientSso;
}

export function AdminPatchClientDtoFromJSON(json: any): AdminPatchClientDto {
    return AdminPatchClientDtoFromJSONTyped(json, false);
}

export function AdminPatchClientDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): AdminPatchClientDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'displayName': !exists(json, 'displayName') ? undefined : ((json['displayName'] as Array<any>).map(TranslatedValueDtoFromJSON)),
        'redirectUris': !exists(json, 'redirectUris') ? undefined : json['redirectUris'],
        'postLogoutRedirectUris': !exists(json, 'postLogoutRedirectUris') ? undefined : json['postLogoutRedirectUris'],
        'absoluteRefreshTokenLifetime': !exists(json, 'absoluteRefreshTokenLifetime') ? undefined : json['absoluteRefreshTokenLifetime'],
        'slidingRefreshTokenLifetime': !exists(json, 'slidingRefreshTokenLifetime') ? undefined : json['slidingRefreshTokenLifetime'],
        'refreshTokenExpiration': !exists(json, 'refreshTokenExpiration') ? undefined : RefreshTokenExpirationFromJSON(json['refreshTokenExpiration']),
        'addedDelegationTypes': !exists(json, 'addedDelegationTypes') ? undefined : json['addedDelegationTypes'],
        'removedDelegationTypes': !exists(json, 'removedDelegationTypes') ? undefined : json['removedDelegationTypes'],
        'supportsCustomDelegation': !exists(json, 'supportsCustomDelegation') ? undefined : json['supportsCustomDelegation'],
        'supportsLegalGuardians': !exists(json, 'supportsLegalGuardians') ? undefined : json['supportsLegalGuardians'],
        'supportsProcuringHolders': !exists(json, 'supportsProcuringHolders') ? undefined : json['supportsProcuringHolders'],
        'supportsPersonalRepresentatives': !exists(json, 'supportsPersonalRepresentatives') ? undefined : json['supportsPersonalRepresentatives'],
        'promptDelegations': !exists(json, 'promptDelegations') ? undefined : json['promptDelegations'],
        'requireApiScopes': !exists(json, 'requireApiScopes') ? undefined : json['requireApiScopes'],
        'requireConsent': !exists(json, 'requireConsent') ? undefined : json['requireConsent'],
        'allowOfflineAccess': !exists(json, 'allowOfflineAccess') ? undefined : json['allowOfflineAccess'],
        'requirePkce': !exists(json, 'requirePkce') ? undefined : json['requirePkce'],
        'supportTokenExchange': !exists(json, 'supportTokenExchange') ? undefined : json['supportTokenExchange'],
        'accessTokenLifetime': !exists(json, 'accessTokenLifetime') ? undefined : json['accessTokenLifetime'],
        'singleSession': !exists(json, 'singleSession') ? undefined : json['singleSession'],
        'customClaims': !exists(json, 'customClaims') ? undefined : ((json['customClaims'] as Array<any>).map(AdminClientClaimDtoFromJSON)),
        'addedScopes': !exists(json, 'addedScopes') ? undefined : json['addedScopes'],
        'removedScopes': !exists(json, 'removedScopes') ? undefined : json['removedScopes'],
        'contactEmail': !exists(json, 'contactEmail') ? undefined : json['contactEmail'],
        'allowedAcr': !exists(json, 'allowedAcr') ? undefined : json['allowedAcr'],
        'sso': !exists(json, 'sso') ? undefined : ClientSsoFromJSON(json['sso']),
    };
}

export function AdminPatchClientDtoToJSON(value?: AdminPatchClientDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'displayName': value.displayName === undefined ? undefined : ((value.displayName as Array<any>).map(TranslatedValueDtoToJSON)),
        'redirectUris': value.redirectUris,
        'postLogoutRedirectUris': value.postLogoutRedirectUris,
        'absoluteRefreshTokenLifetime': value.absoluteRefreshTokenLifetime,
        'slidingRefreshTokenLifetime': value.slidingRefreshTokenLifetime,
        'refreshTokenExpiration': RefreshTokenExpirationToJSON(value.refreshTokenExpiration),
        'addedDelegationTypes': value.addedDelegationTypes,
        'removedDelegationTypes': value.removedDelegationTypes,
        'supportsCustomDelegation': value.supportsCustomDelegation,
        'supportsLegalGuardians': value.supportsLegalGuardians,
        'supportsProcuringHolders': value.supportsProcuringHolders,
        'supportsPersonalRepresentatives': value.supportsPersonalRepresentatives,
        'promptDelegations': value.promptDelegations,
        'requireApiScopes': value.requireApiScopes,
        'requireConsent': value.requireConsent,
        'allowOfflineAccess': value.allowOfflineAccess,
        'requirePkce': value.requirePkce,
        'supportTokenExchange': value.supportTokenExchange,
        'accessTokenLifetime': value.accessTokenLifetime,
        'singleSession': value.singleSession,
        'customClaims': value.customClaims === undefined ? undefined : ((value.customClaims as Array<any>).map(AdminClientClaimDtoToJSON)),
        'addedScopes': value.addedScopes,
        'removedScopes': value.removedScopes,
        'contactEmail': value.contactEmail,
        'allowedAcr': value.allowedAcr,
        'sso': ClientSsoToJSON(value.sso),
    };
}


