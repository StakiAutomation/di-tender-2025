/* tslint:disable */
/* eslint-disable */
/**
 * IdentityServer Admin api
 * Api for administration.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    AdminClientClaimDto,
    AdminClientClaimDtoFromJSON,
    AdminClientClaimDtoFromJSONTyped,
    AdminClientClaimDtoToJSON,
    ClientSso,
    ClientSsoFromJSON,
    ClientSsoFromJSONTyped,
    ClientSsoToJSON,
    ClientType,
    ClientTypeFromJSON,
    ClientTypeFromJSONTyped,
    ClientTypeToJSON,
    RefreshTokenExpiration,
    RefreshTokenExpirationFromJSON,
    RefreshTokenExpirationFromJSONTyped,
    RefreshTokenExpirationToJSON,
    TranslatedValueDto,
    TranslatedValueDtoFromJSON,
    TranslatedValueDtoFromJSONTyped,
    TranslatedValueDtoToJSON,
} from './';

/**
 * 
 * @export
 * @interface AdminClientDto
 */
export interface AdminClientDto {
    /**
     * 
     * @type {string}
     * @memberof AdminClientDto
     */
    clientId: string;
    /**
     * 
     * @type {ClientType}
     * @memberof AdminClientDto
     */
    clientType: ClientType;
    /**
     * 
     * @type {Array<TranslatedValueDto>}
     * @memberof AdminClientDto
     */
    displayName: Array<TranslatedValueDto>;
    /**
     * The id of the tenant that the client belongs to
     * @type {string}
     * @memberof AdminClientDto
     */
    tenantId: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof AdminClientDto
     */
    redirectUris: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof AdminClientDto
     */
    postLogoutRedirectUris: Array<string>;
    /**
     * Absolute lifetime of refresh token in seconds
     * @type {number}
     * @memberof AdminClientDto
     */
    absoluteRefreshTokenLifetime: number;
    /**
     * Sliding lifetime of refresh token in seconds
     * @type {number}
     * @memberof AdminClientDto
     */
    slidingRefreshTokenLifetime: number;
    /**
     * 
     * @type {RefreshTokenExpiration}
     * @memberof AdminClientDto
     */
    refreshTokenExpiration: RefreshTokenExpiration;
    /**
     * The supported delegation types for the client, will be used instead of support delegation type boolean fields
     * @type {Array<string>}
     * @memberof AdminClientDto
     */
    supportedDelegationTypes: Array<string>;
    /**
     * Use supportedDelegationTypes instead
     * @type {boolean}
     * @memberof AdminClientDto
     */
    supportsCustomDelegation: boolean;
    /**
     * Use supportedDelegationTypes instead
     * @type {boolean}
     * @memberof AdminClientDto
     */
    supportsLegalGuardians: boolean;
    /**
     * Use supportedDelegationTypes instead
     * @type {boolean}
     * @memberof AdminClientDto
     */
    supportsProcuringHolders: boolean;
    /**
     * Use supportedDelegationTypes instead
     * @type {boolean}
     * @memberof AdminClientDto
     */
    supportsPersonalRepresentatives: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AdminClientDto
     */
    promptDelegations: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AdminClientDto
     */
    requireApiScopes: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AdminClientDto
     */
    requireConsent: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AdminClientDto
     */
    allowOfflineAccess: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof AdminClientDto
     */
    requirePkce: boolean;
    /**
     * Indicates if the client supports token exchange grant. Only available for machine clients.
     * @type {boolean}
     * @memberof AdminClientDto
     */
    supportTokenExchange: boolean;
    /**
     * 
     * @type {number}
     * @memberof AdminClientDto
     */
    accessTokenLifetime: number;
    /**
     * 
     * @type {boolean}
     * @memberof AdminClientDto
     */
    singleSession: boolean;
    /**
     * Dictionary of custom claims added to access tokens.
     * @type {Array<AdminClientClaimDto>}
     * @memberof AdminClientDto
     */
    customClaims?: Array<AdminClientClaimDto>;
    /**
     * Array of allowed acr values for the client.
     * @type {Array<string>}
     * @memberof AdminClientDto
     */
    allowedAcr: Array<string>;
    /**
     * 
     * @type {ClientSso}
     * @memberof AdminClientDto
     */
    sso: ClientSso;
}

export function AdminClientDtoFromJSON(json: any): AdminClientDto {
    return AdminClientDtoFromJSONTyped(json, false);
}

export function AdminClientDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): AdminClientDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'clientId': json['clientId'],
        'clientType': ClientTypeFromJSON(json['clientType']),
        'displayName': ((json['displayName'] as Array<any>).map(TranslatedValueDtoFromJSON)),
        'tenantId': json['tenantId'],
        'redirectUris': json['redirectUris'],
        'postLogoutRedirectUris': json['postLogoutRedirectUris'],
        'absoluteRefreshTokenLifetime': json['absoluteRefreshTokenLifetime'],
        'slidingRefreshTokenLifetime': json['slidingRefreshTokenLifetime'],
        'refreshTokenExpiration': RefreshTokenExpirationFromJSON(json['refreshTokenExpiration']),
        'supportedDelegationTypes': json['supportedDelegationTypes'],
        'supportsCustomDelegation': json['supportsCustomDelegation'],
        'supportsLegalGuardians': json['supportsLegalGuardians'],
        'supportsProcuringHolders': json['supportsProcuringHolders'],
        'supportsPersonalRepresentatives': json['supportsPersonalRepresentatives'],
        'promptDelegations': json['promptDelegations'],
        'requireApiScopes': json['requireApiScopes'],
        'requireConsent': json['requireConsent'],
        'allowOfflineAccess': json['allowOfflineAccess'],
        'requirePkce': json['requirePkce'],
        'supportTokenExchange': json['supportTokenExchange'],
        'accessTokenLifetime': json['accessTokenLifetime'],
        'singleSession': json['singleSession'],
        'customClaims': !exists(json, 'customClaims') ? undefined : ((json['customClaims'] as Array<any>).map(AdminClientClaimDtoFromJSON)),
        'allowedAcr': json['allowedAcr'],
        'sso': ClientSsoFromJSON(json['sso']),
    };
}

export function AdminClientDtoToJSON(value?: AdminClientDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'clientId': value.clientId,
        'clientType': ClientTypeToJSON(value.clientType),
        'displayName': ((value.displayName as Array<any>).map(TranslatedValueDtoToJSON)),
        'tenantId': value.tenantId,
        'redirectUris': value.redirectUris,
        'postLogoutRedirectUris': value.postLogoutRedirectUris,
        'absoluteRefreshTokenLifetime': value.absoluteRefreshTokenLifetime,
        'slidingRefreshTokenLifetime': value.slidingRefreshTokenLifetime,
        'refreshTokenExpiration': RefreshTokenExpirationToJSON(value.refreshTokenExpiration),
        'supportedDelegationTypes': value.supportedDelegationTypes,
        'supportsCustomDelegation': value.supportsCustomDelegation,
        'supportsLegalGuardians': value.supportsLegalGuardians,
        'supportsProcuringHolders': value.supportsProcuringHolders,
        'supportsPersonalRepresentatives': value.supportsPersonalRepresentatives,
        'promptDelegations': value.promptDelegations,
        'requireApiScopes': value.requireApiScopes,
        'requireConsent': value.requireConsent,
        'allowOfflineAccess': value.allowOfflineAccess,
        'requirePkce': value.requirePkce,
        'supportTokenExchange': value.supportTokenExchange,
        'accessTokenLifetime': value.accessTokenLifetime,
        'singleSession': value.singleSession,
        'customClaims': value.customClaims === undefined ? undefined : ((value.customClaims as Array<any>).map(AdminClientClaimDtoToJSON)),
        'allowedAcr': value.allowedAcr,
        'sso': ClientSsoToJSON(value.sso),
    };
}


