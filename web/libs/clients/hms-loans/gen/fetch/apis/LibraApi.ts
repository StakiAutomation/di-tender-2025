/* tslint:disable */
/* eslint-disable */
/**
 * LibraAPI
 * LibraAPI gives information about loans in HMS.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    BadRequest,
    BadRequestFromJSON,
    BadRequestToJSON,
    FileReturnModel,
    FileReturnModelFromJSON,
    FileReturnModelToJSON,
    LoanHistoryReturnModel,
    LoanHistoryReturnModelFromJSON,
    LoanHistoryReturnModelToJSON,
    NoContent,
    NoContentFromJSON,
    NoContentToJSON,
    NotFound,
    NotFoundFromJSON,
    NotFoundToJSON,
    PaymentHistoryReturnModel,
    PaymentHistoryReturnModelFromJSON,
    PaymentHistoryReturnModelToJSON,
} from '../models';

export interface ApiVversionLibraLoanhistoryPostRequest {
    version: string;
}

export interface ApiVversionLibraLoanhistorypdfPostRequest {
    version: string;
}

export interface ApiVversionLibraPaymenthistoryPostRequest {
    version: string;
}

export interface ApiVversionLibraPaymenthistorybyloanidPostRequest {
    version: string;
    loanId?: number;
}

/**
 * 
 */
export class LibraApi extends runtime.BaseAPI {

    /**
     * Retrieves information about loan history for logged in individual in the Libra HMS loan system.
     */
    async apiVversionLibraLoanhistoryPostRaw(requestParameters: ApiVversionLibraLoanhistoryPostRequest): Promise<runtime.ApiResponse<Array<LoanHistoryReturnModel>>> {
        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling apiVversionLibraLoanhistoryPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v{version}/Libra/loanhistory`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LoanHistoryReturnModelFromJSON));
    }

    /**
     * Retrieves information about loan history for logged in individual in the Libra HMS loan system.
     */
    async apiVversionLibraLoanhistoryPost(requestParameters: ApiVversionLibraLoanhistoryPostRequest): Promise<Array<LoanHistoryReturnModel>> {
        const response = await this.apiVversionLibraLoanhistoryPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns loan history as pdf.
     */
    async apiVversionLibraLoanhistorypdfPostRaw(requestParameters: ApiVversionLibraLoanhistorypdfPostRequest): Promise<runtime.ApiResponse<FileReturnModel>> {
        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling apiVversionLibraLoanhistorypdfPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v{version}/Libra/loanhistorypdf`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => FileReturnModelFromJSON(jsonValue));
    }

    /**
     * Returns loan history as pdf.
     */
    async apiVversionLibraLoanhistorypdfPost(requestParameters: ApiVversionLibraLoanhistorypdfPostRequest): Promise<FileReturnModel> {
        const response = await this.apiVversionLibraLoanhistorypdfPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieves information about payment history for all loans for logged in individual in the Libra HMS loan system.
     */
    async apiVversionLibraPaymenthistoryPostRaw(requestParameters: ApiVversionLibraPaymenthistoryPostRequest): Promise<runtime.ApiResponse<Array<PaymentHistoryReturnModel>>> {
        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling apiVversionLibraPaymenthistoryPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v{version}/Libra/paymenthistory`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PaymentHistoryReturnModelFromJSON));
    }

    /**
     * Retrieves information about payment history for all loans for logged in individual in the Libra HMS loan system.
     */
    async apiVversionLibraPaymenthistoryPost(requestParameters: ApiVversionLibraPaymenthistoryPostRequest): Promise<Array<PaymentHistoryReturnModel>> {
        const response = await this.apiVversionLibraPaymenthistoryPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns a payment summary of loans for the relevant person that are in HMS\'s Libra system.
     */
    async apiVversionLibraPaymenthistorybyloanidPostRaw(requestParameters: ApiVversionLibraPaymenthistorybyloanidPostRequest): Promise<runtime.ApiResponse<Array<PaymentHistoryReturnModel>>> {
        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling apiVversionLibraPaymenthistorybyloanidPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.loanId !== undefined) {
            queryParameters['loanId'] = requestParameters.loanId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/v{version}/Libra/paymenthistorybyloanid`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PaymentHistoryReturnModelFromJSON));
    }

    /**
     * Returns a payment summary of loans for the relevant person that are in HMS\'s Libra system.
     */
    async apiVversionLibraPaymenthistorybyloanidPost(requestParameters: ApiVversionLibraPaymenthistorybyloanidPostRequest): Promise<Array<PaymentHistoryReturnModel>> {
        const response = await this.apiVversionLibraPaymenthistorybyloanidPostRaw(requestParameters);
        return await response.value();
    }

}
