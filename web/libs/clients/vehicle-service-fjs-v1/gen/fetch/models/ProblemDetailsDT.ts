/* tslint:disable */
/* eslint-disable */
/**
 * Vehicles FJS service v1
 * Service for vehicles debts,   get vehciles debts status, debtless and paid services.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Errors,
    ErrorsFromJSON,
    ErrorsFromJSONTyped,
    ErrorsToJSON,
} from './';

/**
 * 
 * @export
 * @interface ProblemDetailsDT
 */
export interface ProblemDetailsDT {
    /**
     * A URI reference [RFC3986] that identifies the problem type. This specification encourages that, when dereferenced, it provide human-readable documentation for the problem type (e.g., using HTML [W3C.REC-html5-20141028]). When this member is not present, its value is assumed to be "about:blank".
     * @type {string}
     * @memberof ProblemDetailsDT
     */
    type?: string;
    /**
     * A short, human-readable summary of the problem type.It SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization(e.g., using proactive content negotiation; see[RFC7231], Section 3.4).
     * @type {string}
     * @memberof ProblemDetailsDT
     */
    title: string;
    /**
     * The HTTP status code([RFC7231], Section 6) generated by the origin server for this occurrence of the problem.
     * @type {string}
     * @memberof ProblemDetailsDT
     */
    status: string;
    /**
     * A human-readable explanation specific to this occurrence of the problem.
     * @type {string}
     * @memberof ProblemDetailsDT
     */
    detail: string;
    /**
     * A URI reference that identifies the specific occurrence of the problem.It may or may not yield further information if dereferenced.
     * @type {string}
     * @memberof ProblemDetailsDT
     */
    instance?: string;
    /**
     * 
     * @type {Array<Errors>}
     * @memberof ProblemDetailsDT
     */
    errors?: Array<Errors>;
}

export function ProblemDetailsDTFromJSON(json: any): ProblemDetailsDT {
    return ProblemDetailsDTFromJSONTyped(json, false);
}

export function ProblemDetailsDTFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProblemDetailsDT {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': !exists(json, 'type') ? undefined : json['type'],
        'title': json['title'],
        'status': json['status'],
        'detail': json['detail'],
        'instance': !exists(json, 'instance') ? undefined : json['instance'],
        'errors': !exists(json, 'errors') ? undefined : ((json['errors'] as Array<any>).map(ErrorsFromJSON)),
    };
}

export function ProblemDetailsDTToJSON(value?: ProblemDetailsDT | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
        'title': value.title,
        'status': value.status,
        'detail': value.detail,
        'instance': value.instance,
        'errors': value.errors === undefined ? undefined : ((value.errors as Array<any>).map(ErrorsToJSON)),
    };
}


