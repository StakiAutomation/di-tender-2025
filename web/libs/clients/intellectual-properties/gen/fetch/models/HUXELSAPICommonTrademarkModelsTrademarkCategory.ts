/* tslint:disable */
/* eslint-disable */
/**
 * Hugverkastofan WebAPI
 * Hugverkastofan WebAPI v3
 *
 * The version of the OpenAPI document: v3
 * Contact: ut@hugverk.is
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface HUXELSAPICommonTrademarkModelsTrademarkCategory
 */
export interface HUXELSAPICommonTrademarkModelsTrademarkCategory {
    /**
     * 
     * @type {string}
     * @memberof HUXELSAPICommonTrademarkModelsTrademarkCategory
     */
    text?: string | null;
    /**
     * 
     * @type {number}
     * @memberof HUXELSAPICommonTrademarkModelsTrademarkCategory
     */
    number?: number;
    /**
     * 
     * @type {string}
     * @memberof HUXELSAPICommonTrademarkModelsTrademarkCategory
     */
    title?: string | null;
    /**
     * 
     * @type {string}
     * @memberof HUXELSAPICommonTrademarkModelsTrademarkCategory
     */
    overlap?: string | null;
}

export function HUXELSAPICommonTrademarkModelsTrademarkCategoryFromJSON(json: any): HUXELSAPICommonTrademarkModelsTrademarkCategory {
    return HUXELSAPICommonTrademarkModelsTrademarkCategoryFromJSONTyped(json, false);
}

export function HUXELSAPICommonTrademarkModelsTrademarkCategoryFromJSONTyped(json: any, ignoreDiscriminator: boolean): HUXELSAPICommonTrademarkModelsTrademarkCategory {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'text': !exists(json, 'text') ? undefined : json['text'],
        'number': !exists(json, 'number') ? undefined : json['number'],
        'title': !exists(json, 'title') ? undefined : json['title'],
        'overlap': !exists(json, 'overlap') ? undefined : json['overlap'],
    };
}

export function HUXELSAPICommonTrademarkModelsTrademarkCategoryToJSON(value?: HUXELSAPICommonTrademarkModelsTrademarkCategory | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'text': value.text,
        'number': value.number,
        'title': value.title,
        'overlap': value.overlap,
    };
}


