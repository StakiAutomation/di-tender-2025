/* tslint:disable */
/* eslint-disable */
/**
 * Hugverkastofan WebAPI
 * Hugverkastofan WebAPI v3
 *
 * The version of the OpenAPI document: v3
 * Contact: ut@hugverk.is
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    HUXELSAPICommonPatentModelsPatent,
    HUXELSAPICommonPatentModelsPatentFromJSON,
    HUXELSAPICommonPatentModelsPatentToJSON,
    HUXELSAPICommonPatentModelsPatentCase,
    HUXELSAPICommonPatentModelsPatentCaseFromJSON,
    HUXELSAPICommonPatentModelsPatentCaseToJSON,
    HUXELSAPICommonPatentModelsPatentIds,
    HUXELSAPICommonPatentModelsPatentIdsFromJSON,
    HUXELSAPICommonPatentModelsPatentIdsToJSON,
    HUXELSAPICommonPatentModelsWrapper,
    HUXELSAPICommonPatentModelsWrapperFromJSON,
    HUXELSAPICommonPatentModelsWrapperToJSON,
    InternalClientEPConfirmationWrapper,
    InternalClientEPConfirmationWrapperFromJSON,
    InternalClientEPConfirmationWrapperToJSON,
    InternalClientInvolvedParty,
    InternalClientInvolvedPartyFromJSON,
    InternalClientInvolvedPartyToJSON,
    InternalClientSPCApplicationWrapper,
    InternalClientSPCApplicationWrapperFromJSON,
    InternalClientSPCApplicationWrapperToJSON,
} from '../models';

export interface PatentEPConfirmationPostRequest {
    internalClientEPConfirmationWrapper?: InternalClientEPConfirmationWrapper;
}

export interface PatentGetAgentBySSNGetRequest {
    ssn?: string;
    origin?: PatentGetAgentBySSNGetOriginEnum;
}

export interface PatentGetInvolvedPartyBySSNGetRequest {
    ssn?: string;
    origin?: PatentGetInvolvedPartyBySSNGetOriginEnum;
}

export interface PatentGetListByIdListPostRequest {
    hUXELSAPICommonPatentModelsPatentIds?: HUXELSAPICommonPatentModelsPatentIds;
}

export interface PatentIdGetRequest {
    id: string;
    searchType?: PatentIdGetSearchTypeEnum;
    confirmType?: string;
}

export interface PatentRenewalRequestPostRequest {
    hUXELSAPICommonPatentModelsWrapper?: HUXELSAPICommonPatentModelsWrapper;
}

export interface PatentSPCApplicationPostRequest {
    internalClientSPCApplicationWrapper?: InternalClientSPCApplicationWrapper;
}

export interface PatentSubmitCasePostRequest {
    hUXELSAPICommonPatentModelsPatentCase?: HUXELSAPICommonPatentModelsPatentCase;
}

/**
 * 
 */
export class PatentApi extends runtime.BaseAPI {

    /**
     */
    async patentEPConfirmationPostRaw(requestParameters: PatentEPConfirmationPostRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/Patent/EPConfirmation`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InternalClientEPConfirmationWrapperToJSON(requestParameters.internalClientEPConfirmationWrapper),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async patentEPConfirmationPost(requestParameters: PatentEPConfirmationPostRequest): Promise<void> {
        await this.patentEPConfirmationPostRaw(requestParameters);
    }

    /**
     */
    async patentGetAgentBySSNGetRaw(requestParameters: PatentGetAgentBySSNGetRequest): Promise<runtime.ApiResponse<InternalClientInvolvedParty>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.ssn !== undefined) {
            queryParameters['ssn'] = requestParameters.ssn;
        }

        if (requestParameters.origin !== undefined) {
            queryParameters['origin'] = requestParameters.origin;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Patent/GetAgentBySSN`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InternalClientInvolvedPartyFromJSON(jsonValue));
    }

    /**
     */
    async patentGetAgentBySSNGet(requestParameters: PatentGetAgentBySSNGetRequest): Promise<InternalClientInvolvedParty> {
        const response = await this.patentGetAgentBySSNGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async patentGetInvolvedPartyBySSNGetRaw(requestParameters: PatentGetInvolvedPartyBySSNGetRequest): Promise<runtime.ApiResponse<InternalClientInvolvedParty>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.ssn !== undefined) {
            queryParameters['ssn'] = requestParameters.ssn;
        }

        if (requestParameters.origin !== undefined) {
            queryParameters['origin'] = requestParameters.origin;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Patent/getInvolvedPartyBySSN`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InternalClientInvolvedPartyFromJSON(jsonValue));
    }

    /**
     */
    async patentGetInvolvedPartyBySSNGet(requestParameters: PatentGetInvolvedPartyBySSNGetRequest): Promise<InternalClientInvolvedParty> {
        const response = await this.patentGetInvolvedPartyBySSNGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async patentGetListByIdListPostRaw(requestParameters: PatentGetListByIdListPostRequest): Promise<runtime.ApiResponse<Array<HUXELSAPICommonPatentModelsPatent>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/Patent/GetListByIdList`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: HUXELSAPICommonPatentModelsPatentIdsToJSON(requestParameters.hUXELSAPICommonPatentModelsPatentIds),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(HUXELSAPICommonPatentModelsPatentFromJSON));
    }

    /**
     */
    async patentGetListByIdListPost(requestParameters: PatentGetListByIdListPostRequest): Promise<Array<HUXELSAPICommonPatentModelsPatent>> {
        const response = await this.patentGetListByIdListPostRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async patentIdGetRaw(requestParameters: PatentIdGetRequest): Promise<runtime.ApiResponse<HUXELSAPICommonPatentModelsPatent>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling patentIdGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.searchType !== undefined) {
            queryParameters['searchType'] = requestParameters.searchType;
        }

        if (requestParameters.confirmType !== undefined) {
            queryParameters['confirmType'] = requestParameters.confirmType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Patent/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => HUXELSAPICommonPatentModelsPatentFromJSON(jsonValue));
    }

    /**
     */
    async patentIdGet(requestParameters: PatentIdGetRequest): Promise<HUXELSAPICommonPatentModelsPatent> {
        const response = await this.patentIdGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async patentRenewalRequestPostRaw(requestParameters: PatentRenewalRequestPostRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/Patent/RenewalRequest`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: HUXELSAPICommonPatentModelsWrapperToJSON(requestParameters.hUXELSAPICommonPatentModelsWrapper),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async patentRenewalRequestPost(requestParameters: PatentRenewalRequestPostRequest): Promise<void> {
        await this.patentRenewalRequestPostRaw(requestParameters);
    }

    /**
     */
    async patentSPCApplicationPostRaw(requestParameters: PatentSPCApplicationPostRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/Patent/SPCApplication`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InternalClientSPCApplicationWrapperToJSON(requestParameters.internalClientSPCApplicationWrapper),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async patentSPCApplicationPost(requestParameters: PatentSPCApplicationPostRequest): Promise<void> {
        await this.patentSPCApplicationPostRaw(requestParameters);
    }

    /**
     */
    async patentSubmitCasePostRaw(requestParameters: PatentSubmitCasePostRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/Patent/SubmitCase`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: HUXELSAPICommonPatentModelsPatentCaseToJSON(requestParameters.hUXELSAPICommonPatentModelsPatentCase),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async patentSubmitCasePost(requestParameters: PatentSubmitCasePostRequest): Promise<void> {
        await this.patentSubmitCasePostRaw(requestParameters);
    }

}

/**
    * @export
    * @enum {string}
    */
export enum PatentGetAgentBySSNGetOriginEnum {
    Allt = 'Allt',
    Thjodskra = 'Thjodskra',
    Fyrirtaekjaskra = 'Fyrirtaekjaskra',
    Umbodsmenn = 'Umbodsmenn',
    Eigendur = 'Eigendur'
}
/**
    * @export
    * @enum {string}
    */
export enum PatentGetInvolvedPartyBySSNGetOriginEnum {
    Allt = 'Allt',
    Thjodskra = 'Thjodskra',
    Fyrirtaekjaskra = 'Fyrirtaekjaskra',
    Umbodsmenn = 'Umbodsmenn',
    Eigendur = 'Eigendur'
}
/**
    * @export
    * @enum {string}
    */
export enum PatentIdGetSearchTypeEnum {
    SPCApplication = 'SPCApplication',
    RenewalApplication = 'RenewalApplication',
    EPConfirmation = 'EPConfirmation',
    GeneralQuery = 'GeneralQuery',
    IslandIS = 'IslandIS',
    IslandISAgent = 'IslandISAgent'
}
