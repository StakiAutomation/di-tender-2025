/* tslint:disable */
/* eslint-disable */
/**
 * Hugverkastofan WebAPI
 * Hugverkastofan WebAPI v3
 *
 * The version of the OpenAPI document: v3
 * Contact: ut@hugverk.is
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface CertificateCreateDesignCertificateBatchGetRequest {
    applicationNumber?: string;
    email?: string;
    addToLibrary?: boolean;
    type?: CertificateCreateDesignCertificateBatchGetTypeEnum;
    language?: CertificateCreateDesignCertificateBatchGetLanguageEnum;
}

export interface CertificateCreateDesignCertificateGetRequest {
    applicationNumber?: string;
    email?: string;
    addToLibrary?: boolean;
    type?: CertificateCreateDesignCertificateGetTypeEnum;
    language?: CertificateCreateDesignCertificateGetLanguageEnum;
}

export interface CertificateCreatePatentCertificateGetRequest {
    applicationNumber?: string;
    email?: string;
    type?: CertificateCreatePatentCertificateGetTypeEnum;
    language?: CertificateCreatePatentCertificateGetLanguageEnum;
}

export interface CertificateCreateTrademarkCertificateGetRequest {
    vmid?: string;
    email?: string;
    type?: CertificateCreateTrademarkCertificateGetTypeEnum;
    language?: CertificateCreateTrademarkCertificateGetLanguageEnum;
}

/**
 * 
 */
export class CertificateApi extends runtime.BaseAPI {

    /**
     */
    async certificateCreateDesignCertificateBatchGetRaw(requestParameters: CertificateCreateDesignCertificateBatchGetRequest): Promise<runtime.ApiResponse<string>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.applicationNumber !== undefined) {
            queryParameters['applicationNumber'] = requestParameters.applicationNumber;
        }

        if (requestParameters.email !== undefined) {
            queryParameters['email'] = requestParameters.email;
        }

        if (requestParameters.addToLibrary !== undefined) {
            queryParameters['addToLibrary'] = requestParameters.addToLibrary;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.language !== undefined) {
            queryParameters['language'] = requestParameters.language;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Certificate/CreateDesignCertificateBatch`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async certificateCreateDesignCertificateBatchGet(requestParameters: CertificateCreateDesignCertificateBatchGetRequest): Promise<string> {
        const response = await this.certificateCreateDesignCertificateBatchGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async certificateCreateDesignCertificateGetRaw(requestParameters: CertificateCreateDesignCertificateGetRequest): Promise<runtime.ApiResponse<string>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.applicationNumber !== undefined) {
            queryParameters['applicationNumber'] = requestParameters.applicationNumber;
        }

        if (requestParameters.email !== undefined) {
            queryParameters['email'] = requestParameters.email;
        }

        if (requestParameters.addToLibrary !== undefined) {
            queryParameters['addToLibrary'] = requestParameters.addToLibrary;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.language !== undefined) {
            queryParameters['language'] = requestParameters.language;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Certificate/CreateDesignCertificate`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async certificateCreateDesignCertificateGet(requestParameters: CertificateCreateDesignCertificateGetRequest): Promise<string> {
        const response = await this.certificateCreateDesignCertificateGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async certificateCreatePatentCertificateGetRaw(requestParameters: CertificateCreatePatentCertificateGetRequest): Promise<runtime.ApiResponse<string>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.applicationNumber !== undefined) {
            queryParameters['applicationNumber'] = requestParameters.applicationNumber;
        }

        if (requestParameters.email !== undefined) {
            queryParameters['email'] = requestParameters.email;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.language !== undefined) {
            queryParameters['language'] = requestParameters.language;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Certificate/CreatePatentCertificate`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async certificateCreatePatentCertificateGet(requestParameters: CertificateCreatePatentCertificateGetRequest): Promise<string> {
        const response = await this.certificateCreatePatentCertificateGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async certificateCreateTrademarkCertificateGetRaw(requestParameters: CertificateCreateTrademarkCertificateGetRequest): Promise<runtime.ApiResponse<string>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.vmid !== undefined) {
            queryParameters['vmid'] = requestParameters.vmid;
        }

        if (requestParameters.email !== undefined) {
            queryParameters['email'] = requestParameters.email;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.language !== undefined) {
            queryParameters['language'] = requestParameters.language;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Certificate/CreateTrademarkCertificate`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async certificateCreateTrademarkCertificateGet(requestParameters: CertificateCreateTrademarkCertificateGetRequest): Promise<string> {
        const response = await this.certificateCreateTrademarkCertificateGetRaw(requestParameters);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum CertificateCreateDesignCertificateBatchGetTypeEnum {
    Renewed = 'Renewed',
    Registered = 'Registered',
    Confirmation = 'Confirmation'
}
/**
    * @export
    * @enum {string}
    */
export enum CertificateCreateDesignCertificateBatchGetLanguageEnum {
    Icelandic = 'Icelandic',
    English = 'English'
}
/**
    * @export
    * @enum {string}
    */
export enum CertificateCreateDesignCertificateGetTypeEnum {
    Renewed = 'Renewed',
    Registered = 'Registered',
    Confirmation = 'Confirmation'
}
/**
    * @export
    * @enum {string}
    */
export enum CertificateCreateDesignCertificateGetLanguageEnum {
    Icelandic = 'Icelandic',
    English = 'English'
}
/**
    * @export
    * @enum {string}
    */
export enum CertificateCreatePatentCertificateGetTypeEnum {
    AnnualFee = 'AnnualFee',
    Granted = 'Granted'
}
/**
    * @export
    * @enum {string}
    */
export enum CertificateCreatePatentCertificateGetLanguageEnum {
    Icelandic = 'Icelandic',
    English = 'English'
}
/**
    * @export
    * @enum {string}
    */
export enum CertificateCreateTrademarkCertificateGetTypeEnum {
    Renewal = 'Renewal',
    Confirmation = 'Confirmation',
    Registered = 'Registered'
}
/**
    * @export
    * @enum {string}
    */
export enum CertificateCreateTrademarkCertificateGetLanguageEnum {
    Icelandic = 'Icelandic',
    English = 'English'
}
