/* tslint:disable */
/* eslint-disable */
/**
 * Hugverkastofan WebAPI
 * Hugverkastofan WebAPI v3
 *
 * The version of the OpenAPI document: v3
 * Contact: ut@hugverk.is
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface TBRFeeRenewalGetRequest {
    systemName?: string;
    operationType?: string;
    hannanirCount?: number;
    yearCount?: number;
    adilaskipti?: number;
    innfaersla?: number;
}

export interface TBRFeeRenewalIdTypeGetRequest {
    id: string;
    type: string;
    designid?: number;
}

/**
 * 
 */
export class TBRFeeRenewalApi extends runtime.BaseAPI {

    /**
     */
    async tBRFeeRenewalGetRaw(requestParameters: TBRFeeRenewalGetRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.systemName !== undefined) {
            queryParameters['systemName'] = requestParameters.systemName;
        }

        if (requestParameters.operationType !== undefined) {
            queryParameters['operationType'] = requestParameters.operationType;
        }

        if (requestParameters.hannanirCount !== undefined) {
            queryParameters['hannanirCount'] = requestParameters.hannanirCount;
        }

        if (requestParameters.yearCount !== undefined) {
            queryParameters['yearCount'] = requestParameters.yearCount;
        }

        if (requestParameters.adilaskipti !== undefined) {
            queryParameters['adilaskipti'] = requestParameters.adilaskipti;
        }

        if (requestParameters.innfaersla !== undefined) {
            queryParameters['innfaersla'] = requestParameters.innfaersla;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/TBRFeeRenewal`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async tBRFeeRenewalGet(requestParameters: TBRFeeRenewalGetRequest): Promise<void> {
        await this.tBRFeeRenewalGetRaw(requestParameters);
    }

    /**
     */
    async tBRFeeRenewalIdTypeGetRaw(requestParameters: TBRFeeRenewalIdTypeGetRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling tBRFeeRenewalIdTypeGet.');
        }

        if (requestParameters.type === null || requestParameters.type === undefined) {
            throw new runtime.RequiredError('type','Required parameter requestParameters.type was null or undefined when calling tBRFeeRenewalIdTypeGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.designid !== undefined) {
            queryParameters['designid'] = requestParameters.designid;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/TBRFeeRenewal/{id}/{type}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"type"}}`, encodeURIComponent(String(requestParameters.type))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async tBRFeeRenewalIdTypeGet(requestParameters: TBRFeeRenewalIdTypeGetRequest): Promise<void> {
        await this.tBRFeeRenewalIdTypeGetRaw(requestParameters);
    }

}
