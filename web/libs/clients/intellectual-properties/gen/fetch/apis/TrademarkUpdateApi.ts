/* tslint:disable */
/* eslint-disable */
/**
 * Hugverkastofan WebAPI
 * Hugverkastofan WebAPI v3
 *
 * The version of the OpenAPI document: v3
 * Contact: ut@hugverk.is
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    HUXELSAPICommonTrademarkModelsTrademarks,
    HUXELSAPICommonTrademarkModelsTrademarksFromJSON,
    HUXELSAPICommonTrademarkModelsTrademarksToJSON,
    HUXELSAPIv2ControllersCategoriesList,
    HUXELSAPIv2ControllersCategoriesListFromJSON,
    HUXELSAPIv2ControllersCategoriesListToJSON,
    SharePointAPIUpdateOwner,
    SharePointAPIUpdateOwnerFromJSON,
    SharePointAPIUpdateOwnerToJSON,
} from '../models';

export interface TrademarkUpdateGetTrademarksByInspectorGetRequest {
    inspectorSSN?: string;
    userName?: string;
}

export interface TrademarkUpdateRegisterTrademarkInspectorPostRequest {
    vmid?: string;
    inspectorName?: string;
    inspectorSSN?: string;
    userName?: string;
}

export interface TrademarkUpdateUpdateTrademarStatusPostRequest {
    vmid?: string;
    newStatus?: string;
    userName?: string;
}

export interface TrademarkUpdateUpdateTrademarkCategoriesPostRequest {
    vmid?: string;
    userName?: string;
    hUXELSAPIv2ControllersCategoriesList?: HUXELSAPIv2ControllersCategoriesList;
}

export interface TrademarkUpdateUpdateTrademarkImageCategoriesPostRequest {
    vmid?: string;
    userName?: string;
    requestBody?: Array<string>;
}

export interface TrademarkUpdateUpdateTrademarkOwnerPostRequest {
    vmid?: string;
    ownerID?: string;
    userName?: string;
    sharePointAPIUpdateOwner?: SharePointAPIUpdateOwner;
}

/**
 * 
 */
export class TrademarkUpdateApi extends runtime.BaseAPI {

    /**
     */
    async trademarkUpdateGetTrademarksByInspectorGetRaw(requestParameters: TrademarkUpdateGetTrademarksByInspectorGetRequest): Promise<runtime.ApiResponse<Array<HUXELSAPICommonTrademarkModelsTrademarks>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.inspectorSSN !== undefined) {
            queryParameters['inspectorSSN'] = requestParameters.inspectorSSN;
        }

        if (requestParameters.userName !== undefined) {
            queryParameters['userName'] = requestParameters.userName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/TrademarkUpdate/GetTrademarksByInspector`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(HUXELSAPICommonTrademarkModelsTrademarksFromJSON));
    }

    /**
     */
    async trademarkUpdateGetTrademarksByInspectorGet(requestParameters: TrademarkUpdateGetTrademarksByInspectorGetRequest): Promise<Array<HUXELSAPICommonTrademarkModelsTrademarks>> {
        const response = await this.trademarkUpdateGetTrademarksByInspectorGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async trademarkUpdateRegisterTrademarkInspectorPostRaw(requestParameters: TrademarkUpdateRegisterTrademarkInspectorPostRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.vmid !== undefined) {
            queryParameters['vmid'] = requestParameters.vmid;
        }

        if (requestParameters.inspectorName !== undefined) {
            queryParameters['inspectorName'] = requestParameters.inspectorName;
        }

        if (requestParameters.inspectorSSN !== undefined) {
            queryParameters['inspectorSSN'] = requestParameters.inspectorSSN;
        }

        if (requestParameters.userName !== undefined) {
            queryParameters['userName'] = requestParameters.userName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/TrademarkUpdate/RegisterTrademarkInspector`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async trademarkUpdateRegisterTrademarkInspectorPost(requestParameters: TrademarkUpdateRegisterTrademarkInspectorPostRequest): Promise<void> {
        await this.trademarkUpdateRegisterTrademarkInspectorPostRaw(requestParameters);
    }

    /**
     */
    async trademarkUpdateUpdateTrademarStatusPostRaw(requestParameters: TrademarkUpdateUpdateTrademarStatusPostRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.vmid !== undefined) {
            queryParameters['vmid'] = requestParameters.vmid;
        }

        if (requestParameters.newStatus !== undefined) {
            queryParameters['newStatus'] = requestParameters.newStatus;
        }

        if (requestParameters.userName !== undefined) {
            queryParameters['userName'] = requestParameters.userName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/TrademarkUpdate/UpdateTrademarStatus`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async trademarkUpdateUpdateTrademarStatusPost(requestParameters: TrademarkUpdateUpdateTrademarStatusPostRequest): Promise<void> {
        await this.trademarkUpdateUpdateTrademarStatusPostRaw(requestParameters);
    }

    /**
     */
    async trademarkUpdateUpdateTrademarkCategoriesPostRaw(requestParameters: TrademarkUpdateUpdateTrademarkCategoriesPostRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.vmid !== undefined) {
            queryParameters['vmid'] = requestParameters.vmid;
        }

        if (requestParameters.userName !== undefined) {
            queryParameters['userName'] = requestParameters.userName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/TrademarkUpdate/UpdateTrademarkCategories`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: HUXELSAPIv2ControllersCategoriesListToJSON(requestParameters.hUXELSAPIv2ControllersCategoriesList),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async trademarkUpdateUpdateTrademarkCategoriesPost(requestParameters: TrademarkUpdateUpdateTrademarkCategoriesPostRequest): Promise<void> {
        await this.trademarkUpdateUpdateTrademarkCategoriesPostRaw(requestParameters);
    }

    /**
     */
    async trademarkUpdateUpdateTrademarkImageCategoriesPostRaw(requestParameters: TrademarkUpdateUpdateTrademarkImageCategoriesPostRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.vmid !== undefined) {
            queryParameters['vmid'] = requestParameters.vmid;
        }

        if (requestParameters.userName !== undefined) {
            queryParameters['userName'] = requestParameters.userName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/TrademarkUpdate/UpdateTrademarkImageCategories`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async trademarkUpdateUpdateTrademarkImageCategoriesPost(requestParameters: TrademarkUpdateUpdateTrademarkImageCategoriesPostRequest): Promise<void> {
        await this.trademarkUpdateUpdateTrademarkImageCategoriesPostRaw(requestParameters);
    }

    /**
     */
    async trademarkUpdateUpdateTrademarkOwnerPostRaw(requestParameters: TrademarkUpdateUpdateTrademarkOwnerPostRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.vmid !== undefined) {
            queryParameters['vmid'] = requestParameters.vmid;
        }

        if (requestParameters.ownerID !== undefined) {
            queryParameters['ownerID'] = requestParameters.ownerID;
        }

        if (requestParameters.userName !== undefined) {
            queryParameters['userName'] = requestParameters.userName;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/TrademarkUpdate/UpdateTrademarkOwner`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SharePointAPIUpdateOwnerToJSON(requestParameters.sharePointAPIUpdateOwner),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async trademarkUpdateUpdateTrademarkOwnerPost(requestParameters: TrademarkUpdateUpdateTrademarkOwnerPostRequest): Promise<void> {
        await this.trademarkUpdateUpdateTrademarkOwnerPostRaw(requestParameters);
    }

}
