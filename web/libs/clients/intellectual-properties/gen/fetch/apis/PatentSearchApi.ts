/* tslint:disable */
/* eslint-disable */
/**
 * Hugverkastofan WebAPI
 * Hugverkastofan WebAPI v3
 *
 * The version of the OpenAPI document: v3
 * Contact: ut@hugverk.is
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    HUXELSAPICommonPatentModelsPatent,
    HUXELSAPICommonPatentModelsPatentFromJSON,
    HUXELSAPICommonPatentModelsPatentToJSON,
    HUXELSAPICommonPatentModelsPatentApplicationNumber,
    HUXELSAPICommonPatentModelsPatentApplicationNumberFromJSON,
    HUXELSAPICommonPatentModelsPatentApplicationNumberToJSON,
    HUXELSAPICommonPatentModelsPatentIS,
    HUXELSAPICommonPatentModelsPatentISFromJSON,
    HUXELSAPICommonPatentModelsPatentISToJSON,
    InternalClientElectronicCaseType,
    InternalClientElectronicCaseTypeFromJSON,
    InternalClientElectronicCaseTypeToJSON,
} from '../models';

export interface ApiPatentSearchAllApplicationNumbersGetRequest {
    pager?: number;
}

export interface ApiPatentSearchAllPatentsGetRequest {
    pager?: number;
}

export interface ApiPatentSearchByDateGetRequest {
    from?: string;
    to?: string;
    pager?: number;
}

export interface ApiPatentSearchPatentsBySSNGetRequest {
    ssn?: string;
}

export interface ApiPatentSearchSearchGetRequest {
    inventor?: string;
    applicant?: string;
    applicationNr?: string;
    patentName?: string;
    patentNumber?: string;
}

/**
 * 
 */
export class PatentSearchApi extends runtime.BaseAPI {

    /**
     */
    async apiPatentSearchAllApplicationNumbersGetRaw(requestParameters: ApiPatentSearchAllApplicationNumbersGetRequest): Promise<runtime.ApiResponse<Array<HUXELSAPICommonPatentModelsPatentApplicationNumber>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pager !== undefined) {
            queryParameters['pager'] = requestParameters.pager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/PatentSearch/allApplicationNumbers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(HUXELSAPICommonPatentModelsPatentApplicationNumberFromJSON));
    }

    /**
     */
    async apiPatentSearchAllApplicationNumbersGet(requestParameters: ApiPatentSearchAllApplicationNumbersGetRequest): Promise<Array<HUXELSAPICommonPatentModelsPatentApplicationNumber>> {
        const response = await this.apiPatentSearchAllApplicationNumbersGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiPatentSearchAllPatentsGetRaw(requestParameters: ApiPatentSearchAllPatentsGetRequest): Promise<runtime.ApiResponse<Array<HUXELSAPICommonPatentModelsPatent>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pager !== undefined) {
            queryParameters['pager'] = requestParameters.pager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/PatentSearch/allPatents`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(HUXELSAPICommonPatentModelsPatentFromJSON));
    }

    /**
     */
    async apiPatentSearchAllPatentsGet(requestParameters: ApiPatentSearchAllPatentsGetRequest): Promise<Array<HUXELSAPICommonPatentModelsPatent>> {
        const response = await this.apiPatentSearchAllPatentsGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiPatentSearchByDateGetRaw(requestParameters: ApiPatentSearchByDateGetRequest): Promise<runtime.ApiResponse<Array<HUXELSAPICommonPatentModelsPatent>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.from !== undefined) {
            queryParameters['from'] = requestParameters.from;
        }

        if (requestParameters.to !== undefined) {
            queryParameters['to'] = requestParameters.to;
        }

        if (requestParameters.pager !== undefined) {
            queryParameters['pager'] = requestParameters.pager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/PatentSearch/byDate`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(HUXELSAPICommonPatentModelsPatentFromJSON));
    }

    /**
     */
    async apiPatentSearchByDateGet(requestParameters: ApiPatentSearchByDateGetRequest): Promise<Array<HUXELSAPICommonPatentModelsPatent>> {
        const response = await this.apiPatentSearchByDateGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiPatentSearchGetElectronicCaseTypesForPatentGetRaw(): Promise<runtime.ApiResponse<Array<InternalClientElectronicCaseType>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/PatentSearch/getElectronicCaseTypesForPatent`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InternalClientElectronicCaseTypeFromJSON));
    }

    /**
     */
    async apiPatentSearchGetElectronicCaseTypesForPatentGet(): Promise<Array<InternalClientElectronicCaseType>> {
        const response = await this.apiPatentSearchGetElectronicCaseTypesForPatentGetRaw();
        return await response.value();
    }

    /**
     */
    async apiPatentSearchPatentsBySSNGetRaw(requestParameters: ApiPatentSearchPatentsBySSNGetRequest): Promise<runtime.ApiResponse<Array<HUXELSAPICommonPatentModelsPatentIS>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.ssn !== undefined) {
            queryParameters['ssn'] = requestParameters.ssn;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/PatentSearch/PatentsBySSN`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(HUXELSAPICommonPatentModelsPatentISFromJSON));
    }

    /**
     */
    async apiPatentSearchPatentsBySSNGet(requestParameters: ApiPatentSearchPatentsBySSNGetRequest): Promise<Array<HUXELSAPICommonPatentModelsPatentIS>> {
        const response = await this.apiPatentSearchPatentsBySSNGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiPatentSearchSearchGetRaw(requestParameters: ApiPatentSearchSearchGetRequest): Promise<runtime.ApiResponse<Array<HUXELSAPICommonPatentModelsPatent>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.inventor !== undefined) {
            queryParameters['inventor'] = requestParameters.inventor;
        }

        if (requestParameters.applicant !== undefined) {
            queryParameters['applicant'] = requestParameters.applicant;
        }

        if (requestParameters.applicationNr !== undefined) {
            queryParameters['applicationNr'] = requestParameters.applicationNr;
        }

        if (requestParameters.patentName !== undefined) {
            queryParameters['patentName'] = requestParameters.patentName;
        }

        if (requestParameters.patentNumber !== undefined) {
            queryParameters['patentNumber'] = requestParameters.patentNumber;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/PatentSearch/Search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(HUXELSAPICommonPatentModelsPatentFromJSON));
    }

    /**
     */
    async apiPatentSearchSearchGet(requestParameters: ApiPatentSearchSearchGetRequest): Promise<Array<HUXELSAPICommonPatentModelsPatent>> {
        const response = await this.apiPatentSearchSearchGetRaw(requestParameters);
        return await response.value();
    }

}
