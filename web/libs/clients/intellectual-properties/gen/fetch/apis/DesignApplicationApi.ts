/* tslint:disable */
/* eslint-disable */
/**
 * Hugverkastofan WebAPI
 * Hugverkastofan WebAPI v3
 *
 * The version of the OpenAPI document: v3
 * Contact: ut@hugverk.is
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    HUXELSAPICommonDesignApplicationModelsDesignApplication,
    HUXELSAPICommonDesignApplicationModelsDesignApplicationFromJSON,
    HUXELSAPICommonDesignApplicationModelsDesignApplicationToJSON,
    HUXELSAPICommonDesignApplicationModelsDesignCase,
    HUXELSAPICommonDesignApplicationModelsDesignCaseFromJSON,
    HUXELSAPICommonDesignApplicationModelsDesignCaseToJSON,
    HUXELSAPICommonDesignRenewalModelsDesignRenewalApplication,
    HUXELSAPICommonDesignRenewalModelsDesignRenewalApplicationFromJSON,
    HUXELSAPICommonDesignRenewalModelsDesignRenewalApplicationToJSON,
} from '../models';

export interface DesignApplicationIdGetRequest {
    id: number;
}

export interface DesignApplicationIdTypeGetRequest {
    id: string;
    type: string;
    designid?: number;
}

export interface DesignApplicationPostDesignApplicationPostRequest {
    hUXELSAPICommonDesignApplicationModelsDesignApplication?: HUXELSAPICommonDesignApplicationModelsDesignApplication;
}

export interface DesignApplicationPostDesignRenewalPostRequest {
    hUXELSAPICommonDesignRenewalModelsDesignRenewalApplication?: HUXELSAPICommonDesignRenewalModelsDesignRenewalApplication;
}

export interface DesignApplicationSubmitCasePostRequest {
    hUXELSAPICommonDesignApplicationModelsDesignCase?: HUXELSAPICommonDesignApplicationModelsDesignCase;
}

/**
 * 
 */
export class DesignApplicationApi extends runtime.BaseAPI {

    /**
     */
    async designApplicationIdGetRaw(requestParameters: DesignApplicationIdGetRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling designApplicationIdGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/DesignApplication/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async designApplicationIdGet(requestParameters: DesignApplicationIdGetRequest): Promise<void> {
        await this.designApplicationIdGetRaw(requestParameters);
    }

    /**
     */
    async designApplicationIdTypeGetRaw(requestParameters: DesignApplicationIdTypeGetRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling designApplicationIdTypeGet.');
        }

        if (requestParameters.type === null || requestParameters.type === undefined) {
            throw new runtime.RequiredError('type','Required parameter requestParameters.type was null or undefined when calling designApplicationIdTypeGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.designid !== undefined) {
            queryParameters['designid'] = requestParameters.designid;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/DesignApplication/{id}/{type}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"type"}}`, encodeURIComponent(String(requestParameters.type))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async designApplicationIdTypeGet(requestParameters: DesignApplicationIdTypeGetRequest): Promise<void> {
        await this.designApplicationIdTypeGetRaw(requestParameters);
    }

    /**
     */
    async designApplicationPostDesignApplicationPostRaw(requestParameters: DesignApplicationPostDesignApplicationPostRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/DesignApplication/postDesignApplication`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: HUXELSAPICommonDesignApplicationModelsDesignApplicationToJSON(requestParameters.hUXELSAPICommonDesignApplicationModelsDesignApplication),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async designApplicationPostDesignApplicationPost(requestParameters: DesignApplicationPostDesignApplicationPostRequest): Promise<void> {
        await this.designApplicationPostDesignApplicationPostRaw(requestParameters);
    }

    /**
     */
    async designApplicationPostDesignRenewalPostRaw(requestParameters: DesignApplicationPostDesignRenewalPostRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/DesignApplication/postDesignRenewal`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: HUXELSAPICommonDesignRenewalModelsDesignRenewalApplicationToJSON(requestParameters.hUXELSAPICommonDesignRenewalModelsDesignRenewalApplication),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async designApplicationPostDesignRenewalPost(requestParameters: DesignApplicationPostDesignRenewalPostRequest): Promise<void> {
        await this.designApplicationPostDesignRenewalPostRaw(requestParameters);
    }

    /**
     */
    async designApplicationSubmitCasePostRaw(requestParameters: DesignApplicationSubmitCasePostRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        const response = await this.request({
            path: `/DesignApplication/SubmitCase`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: HUXELSAPICommonDesignApplicationModelsDesignCaseToJSON(requestParameters.hUXELSAPICommonDesignApplicationModelsDesignCase),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async designApplicationSubmitCasePost(requestParameters: DesignApplicationSubmitCasePostRequest): Promise<void> {
        await this.designApplicationSubmitCasePostRaw(requestParameters);
    }

}
