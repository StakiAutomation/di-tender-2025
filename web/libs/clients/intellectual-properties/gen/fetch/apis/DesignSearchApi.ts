/* tslint:disable */
/* eslint-disable */
/**
 * Hugverkastofan WebAPI
 * Hugverkastofan WebAPI v3
 *
 * The version of the OpenAPI document: v3
 * Contact: ut@hugverk.is
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    HUXELSAPICommonDesignModelsDesignIS,
    HUXELSAPICommonDesignModelsDesignISFromJSON,
    HUXELSAPICommonDesignModelsDesignISToJSON,
    HUXELSAPICommonDesignModelsDesignSearchDesign,
    HUXELSAPICommonDesignModelsDesignSearchDesignFromJSON,
    HUXELSAPICommonDesignModelsDesignSearchDesignToJSON,
    HUXELSAPICommonDesignModelsDesignSearchModel,
    HUXELSAPICommonDesignModelsDesignSearchModelFromJSON,
    HUXELSAPICommonDesignModelsDesignSearchModelToJSON,
    InternalClientElectronicCaseType,
    InternalClientElectronicCaseTypeFromJSON,
    InternalClientElectronicCaseTypeToJSON,
    InternalClientInvolvedParty,
    InternalClientInvolvedPartyFromJSON,
    InternalClientInvolvedPartyToJSON,
} from '../models';

export interface DesignSearchByDateGetRequest {
    from?: string;
    to?: string;
    pager?: number;
}

export interface DesignSearchGetRequest {
    selectedCommand?: string;
    searchText?: string;
    formateForDataTable?: boolean;
}

export interface DesignSearchGetAllGetRequest {
    pager?: number;
}

export interface DesignSearchGetByHIDGetRequest {
    hid?: string;
}

export interface DesignSearchGetDesignBySSNGetRequest {
    ssn?: string;
}

export interface DesignSearchGetDesignImageGetRequest {
    hid?: string;
    designNumber?: string;
    imageNumber?: string;
    size?: string;
}

export interface DesignSearchGetDesignInvolvedPartyBySSNGetRequest {
    ssn?: string;
    origin?: DesignSearchGetDesignInvolvedPartyBySSNGetOriginEnum;
}

export interface DesignSearchGetDesignsGetRequest {
    hid?: string;
}

/**
 * 
 */
export class DesignSearchApi extends runtime.BaseAPI {

    /**
     */
    async designSearchByDateGetRaw(requestParameters: DesignSearchByDateGetRequest): Promise<runtime.ApiResponse<Array<HUXELSAPICommonDesignModelsDesignSearchModel>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.from !== undefined) {
            queryParameters['from'] = requestParameters.from;
        }

        if (requestParameters.to !== undefined) {
            queryParameters['to'] = requestParameters.to;
        }

        if (requestParameters.pager !== undefined) {
            queryParameters['pager'] = requestParameters.pager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/DesignSearch/byDate`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(HUXELSAPICommonDesignModelsDesignSearchModelFromJSON));
    }

    /**
     */
    async designSearchByDateGet(requestParameters: DesignSearchByDateGetRequest): Promise<Array<HUXELSAPICommonDesignModelsDesignSearchModel>> {
        const response = await this.designSearchByDateGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async designSearchGetRaw(requestParameters: DesignSearchGetRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.selectedCommand !== undefined) {
            queryParameters['selectedCommand'] = requestParameters.selectedCommand;
        }

        if (requestParameters.searchText !== undefined) {
            queryParameters['searchText'] = requestParameters.searchText;
        }

        if (requestParameters.formateForDataTable !== undefined) {
            queryParameters['formateForDataTable'] = requestParameters.formateForDataTable;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/DesignSearch`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async designSearchGet(requestParameters: DesignSearchGetRequest): Promise<void> {
        await this.designSearchGetRaw(requestParameters);
    }

    /**
     */
    async designSearchGetAllGetRaw(requestParameters: DesignSearchGetAllGetRequest): Promise<runtime.ApiResponse<Array<HUXELSAPICommonDesignModelsDesignSearchModel>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pager !== undefined) {
            queryParameters['pager'] = requestParameters.pager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/DesignSearch/getAll`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(HUXELSAPICommonDesignModelsDesignSearchModelFromJSON));
    }

    /**
     */
    async designSearchGetAllGet(requestParameters: DesignSearchGetAllGetRequest): Promise<Array<HUXELSAPICommonDesignModelsDesignSearchModel>> {
        const response = await this.designSearchGetAllGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async designSearchGetByHIDGetRaw(requestParameters: DesignSearchGetByHIDGetRequest): Promise<runtime.ApiResponse<HUXELSAPICommonDesignModelsDesignSearchModel>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.hid !== undefined) {
            queryParameters['hid'] = requestParameters.hid;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/DesignSearch/GetByHID`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => HUXELSAPICommonDesignModelsDesignSearchModelFromJSON(jsonValue));
    }

    /**
     */
    async designSearchGetByHIDGet(requestParameters: DesignSearchGetByHIDGetRequest): Promise<HUXELSAPICommonDesignModelsDesignSearchModel> {
        const response = await this.designSearchGetByHIDGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async designSearchGetDesignBySSNGetRaw(requestParameters: DesignSearchGetDesignBySSNGetRequest): Promise<runtime.ApiResponse<Array<HUXELSAPICommonDesignModelsDesignIS>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.ssn !== undefined) {
            queryParameters['ssn'] = requestParameters.ssn;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/DesignSearch/getDesignBySSN`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(HUXELSAPICommonDesignModelsDesignISFromJSON));
    }

    /**
     */
    async designSearchGetDesignBySSNGet(requestParameters: DesignSearchGetDesignBySSNGetRequest): Promise<Array<HUXELSAPICommonDesignModelsDesignIS>> {
        const response = await this.designSearchGetDesignBySSNGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async designSearchGetDesignImageGetRaw(requestParameters: DesignSearchGetDesignImageGetRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.hid !== undefined) {
            queryParameters['hid'] = requestParameters.hid;
        }

        if (requestParameters.designNumber !== undefined) {
            queryParameters['designNumber'] = requestParameters.designNumber;
        }

        if (requestParameters.imageNumber !== undefined) {
            queryParameters['imageNumber'] = requestParameters.imageNumber;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/DesignSearch/getDesignImage`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async designSearchGetDesignImageGet(requestParameters: DesignSearchGetDesignImageGetRequest): Promise<void> {
        await this.designSearchGetDesignImageGetRaw(requestParameters);
    }

    /**
     */
    async designSearchGetDesignInvolvedPartyBySSNGetRaw(requestParameters: DesignSearchGetDesignInvolvedPartyBySSNGetRequest): Promise<runtime.ApiResponse<InternalClientInvolvedParty>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.ssn !== undefined) {
            queryParameters['ssn'] = requestParameters.ssn;
        }

        if (requestParameters.origin !== undefined) {
            queryParameters['origin'] = requestParameters.origin;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/DesignSearch/getDesignInvolvedPartyBySSN`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InternalClientInvolvedPartyFromJSON(jsonValue));
    }

    /**
     */
    async designSearchGetDesignInvolvedPartyBySSNGet(requestParameters: DesignSearchGetDesignInvolvedPartyBySSNGetRequest): Promise<InternalClientInvolvedParty> {
        const response = await this.designSearchGetDesignInvolvedPartyBySSNGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async designSearchGetDesignsGetRaw(requestParameters: DesignSearchGetDesignsGetRequest): Promise<runtime.ApiResponse<Array<HUXELSAPICommonDesignModelsDesignSearchDesign>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.hid !== undefined) {
            queryParameters['hid'] = requestParameters.hid;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/DesignSearch/getDesigns`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(HUXELSAPICommonDesignModelsDesignSearchDesignFromJSON));
    }

    /**
     */
    async designSearchGetDesignsGet(requestParameters: DesignSearchGetDesignsGetRequest): Promise<Array<HUXELSAPICommonDesignModelsDesignSearchDesign>> {
        const response = await this.designSearchGetDesignsGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async designSearchGetElectronicCaseTypesForDesignGetRaw(): Promise<runtime.ApiResponse<Array<InternalClientElectronicCaseType>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/DesignSearch/getElectronicCaseTypesForDesign`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InternalClientElectronicCaseTypeFromJSON));
    }

    /**
     */
    async designSearchGetElectronicCaseTypesForDesignGet(): Promise<Array<InternalClientElectronicCaseType>> {
        const response = await this.designSearchGetElectronicCaseTypesForDesignGetRaw();
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum DesignSearchGetDesignInvolvedPartyBySSNGetOriginEnum {
    Allt = 'Allt',
    Thjodskra = 'Thjodskra',
    Fyrirtaekjaskra = 'Fyrirtaekjaskra',
    Umbodsmenn = 'Umbodsmenn',
    Eigendur = 'Eigendur'
}
