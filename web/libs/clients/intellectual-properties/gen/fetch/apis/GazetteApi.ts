/* tslint:disable */
/* eslint-disable */
/**
 * Hugverkastofan WebAPI
 * Hugverkastofan WebAPI v3
 *
 * The version of the OpenAPI document: v3
 * Contact: ut@hugverk.is
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    HUXELSAPIGazetteCoreGazetteModelsTrademarkGazetteSimple,
    HUXELSAPIGazetteCoreGazetteModelsTrademarkGazetteSimpleFromJSON,
    HUXELSAPIGazetteCoreGazetteModelsTrademarkGazetteSimpleToJSON,
    HUXELSAPIGazetteCoreGazetteModelsTrademarks,
    HUXELSAPIGazetteCoreGazetteModelsTrademarksFromJSON,
    HUXELSAPIGazetteCoreGazetteModelsTrademarksToJSON,
} from '../models';

export interface GazetteIdGetRequest {
    id: number;
}

export interface GazetteIdTypeGetRequest {
    id: number;
    type: string;
}

/**
 * 
 */
export class GazetteApi extends runtime.BaseAPI {

    /**
     */
    async gazetteGetRaw(): Promise<runtime.ApiResponse<Array<HUXELSAPIGazetteCoreGazetteModelsTrademarkGazetteSimple>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Gazette`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(HUXELSAPIGazetteCoreGazetteModelsTrademarkGazetteSimpleFromJSON));
    }

    /**
     */
    async gazetteGet(): Promise<Array<HUXELSAPIGazetteCoreGazetteModelsTrademarkGazetteSimple>> {
        const response = await this.gazetteGetRaw();
        return await response.value();
    }

    /**
     */
    async gazetteIdGetRaw(requestParameters: GazetteIdGetRequest): Promise<runtime.ApiResponse<Array<HUXELSAPIGazetteCoreGazetteModelsTrademarks>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gazetteIdGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Gazette/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(HUXELSAPIGazetteCoreGazetteModelsTrademarksFromJSON));
    }

    /**
     */
    async gazetteIdGet(requestParameters: GazetteIdGetRequest): Promise<Array<HUXELSAPIGazetteCoreGazetteModelsTrademarks>> {
        const response = await this.gazetteIdGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async gazetteIdTypeGetRaw(requestParameters: GazetteIdTypeGetRequest): Promise<runtime.ApiResponse<Array<HUXELSAPIGazetteCoreGazetteModelsTrademarks>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling gazetteIdTypeGet.');
        }

        if (requestParameters.type === null || requestParameters.type === undefined) {
            throw new runtime.RequiredError('type','Required parameter requestParameters.type was null or undefined when calling gazetteIdTypeGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Gazette/{id}/{type}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"type"}}`, encodeURIComponent(String(requestParameters.type))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(HUXELSAPIGazetteCoreGazetteModelsTrademarksFromJSON));
    }

    /**
     */
    async gazetteIdTypeGet(requestParameters: GazetteIdTypeGetRequest): Promise<Array<HUXELSAPIGazetteCoreGazetteModelsTrademarks>> {
        const response = await this.gazetteIdTypeGetRaw(requestParameters);
        return await response.value();
    }

}
