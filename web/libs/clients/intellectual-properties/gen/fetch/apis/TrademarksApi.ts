/* tslint:disable */
/* eslint-disable */
/**
 * Hugverkastofan WebAPI
 * Hugverkastofan WebAPI v3
 *
 * The version of the OpenAPI document: v3
 * Contact: ut@hugverk.is
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    HUXELSAPICommonTMApplicationModelsPriceList,
    HUXELSAPICommonTMApplicationModelsPriceListFromJSON,
    HUXELSAPICommonTMApplicationModelsPriceListToJSON,
    HUXELSAPICommonTrademarkModelsInvolvedParty,
    HUXELSAPICommonTrademarkModelsInvolvedPartyFromJSON,
    HUXELSAPICommonTrademarkModelsInvolvedPartyToJSON,
    HUXELSAPICommonTrademarkModelsTrademarkCategory,
    HUXELSAPICommonTrademarkModelsTrademarkCategoryFromJSON,
    HUXELSAPICommonTrademarkModelsTrademarkCategoryToJSON,
    HUXELSAPICommonTrademarkModelsTrademarkImageCategory,
    HUXELSAPICommonTrademarkModelsTrademarkImageCategoryFromJSON,
    HUXELSAPICommonTrademarkModelsTrademarkImageCategoryToJSON,
    HUXELSAPICommonTrademarkModelsTrademarks,
    HUXELSAPICommonTrademarkModelsTrademarksFromJSON,
    HUXELSAPICommonTrademarkModelsTrademarksToJSON,
    HUXELSAPICommonTrademarkModelsTrademarksIS,
    HUXELSAPICommonTrademarkModelsTrademarksISFromJSON,
    HUXELSAPICommonTrademarkModelsTrademarksISToJSON,
    HUXELSAPICommonTrademarkModelsTrademarksUIDs,
    HUXELSAPICommonTrademarkModelsTrademarksUIDsFromJSON,
    HUXELSAPICommonTrademarkModelsTrademarksUIDsToJSON,
    InternalClientElectronicCaseType,
    InternalClientElectronicCaseTypeFromJSON,
    InternalClientElectronicCaseTypeToJSON,
    InternalClientTermInfo,
    InternalClientTermInfoFromJSON,
    InternalClientTermInfoToJSON,
} from '../models';

export interface TrademarksGetAllGetRequest {
    pager?: number;
}

export interface TrademarksGetAllUIDsGetRequest {
    pager?: number;
}

export interface TrademarksGetByDateGetRequest {
    from?: string;
    to?: string;
    pager?: number;
}

export interface TrademarksGetByIdGetRequest {
    key?: string;
}

export interface TrademarksGetImageCategoryGetRequest {
    category?: string;
}

export interface TrademarksGetInvolvedPartyBySSNGetRequest {
    ssn?: string;
    origin?: TrademarksGetInvolvedPartyBySSNGetOriginEnum;
}

export interface TrademarksGetMediaGetRequest {
    vmid?: string;
}

export interface TrademarksGetPriceListGetRequest {
    code?: string;
}

export interface TrademarksGetThumbnailGetRequest {
    path?: string;
}

export interface TrademarksGetTrademarksBySSNGetRequest {
    ssn?: string;
}

export interface TrademarksGetWordCategoryGetRequest {
    category?: string;
}

/**
 * 
 */
export class TrademarksApi extends runtime.BaseAPI {

    /**
     */
    async trademarksGetAllAvailableStatusesGetRaw(): Promise<runtime.ApiResponse<Array<InternalClientTermInfo>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Trademarks/getAllAvailableStatuses`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InternalClientTermInfoFromJSON));
    }

    /**
     */
    async trademarksGetAllAvailableStatusesGet(): Promise<Array<InternalClientTermInfo>> {
        const response = await this.trademarksGetAllAvailableStatusesGetRaw();
        return await response.value();
    }

    /**
     */
    async trademarksGetAllGetRaw(requestParameters: TrademarksGetAllGetRequest): Promise<runtime.ApiResponse<Array<HUXELSAPICommonTrademarkModelsTrademarks>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pager !== undefined) {
            queryParameters['pager'] = requestParameters.pager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Trademarks/getAll`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(HUXELSAPICommonTrademarkModelsTrademarksFromJSON));
    }

    /**
     */
    async trademarksGetAllGet(requestParameters: TrademarksGetAllGetRequest): Promise<Array<HUXELSAPICommonTrademarkModelsTrademarks>> {
        const response = await this.trademarksGetAllGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async trademarksGetAllImageCategoriesGetRaw(): Promise<runtime.ApiResponse<Array<HUXELSAPICommonTrademarkModelsTrademarkImageCategory>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Trademarks/getAllImageCategories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(HUXELSAPICommonTrademarkModelsTrademarkImageCategoryFromJSON));
    }

    /**
     */
    async trademarksGetAllImageCategoriesGet(): Promise<Array<HUXELSAPICommonTrademarkModelsTrademarkImageCategory>> {
        const response = await this.trademarksGetAllImageCategoriesGetRaw();
        return await response.value();
    }

    /**
     */
    async trademarksGetAllUIDsGetRaw(requestParameters: TrademarksGetAllUIDsGetRequest): Promise<runtime.ApiResponse<Array<HUXELSAPICommonTrademarkModelsTrademarksUIDs>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.pager !== undefined) {
            queryParameters['pager'] = requestParameters.pager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Trademarks/getAllUIDs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(HUXELSAPICommonTrademarkModelsTrademarksUIDsFromJSON));
    }

    /**
     */
    async trademarksGetAllUIDsGet(requestParameters: TrademarksGetAllUIDsGetRequest): Promise<Array<HUXELSAPICommonTrademarkModelsTrademarksUIDs>> {
        const response = await this.trademarksGetAllUIDsGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async trademarksGetAllWordCategoriesGetRaw(): Promise<runtime.ApiResponse<Array<HUXELSAPICommonTrademarkModelsTrademarkCategory>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Trademarks/getAllWordCategories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(HUXELSAPICommonTrademarkModelsTrademarkCategoryFromJSON));
    }

    /**
     */
    async trademarksGetAllWordCategoriesGet(): Promise<Array<HUXELSAPICommonTrademarkModelsTrademarkCategory>> {
        const response = await this.trademarksGetAllWordCategoriesGetRaw();
        return await response.value();
    }

    /**
     */
    async trademarksGetByDateGetRaw(requestParameters: TrademarksGetByDateGetRequest): Promise<runtime.ApiResponse<Array<HUXELSAPICommonTrademarkModelsTrademarks>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.from !== undefined) {
            queryParameters['from'] = requestParameters.from;
        }

        if (requestParameters.to !== undefined) {
            queryParameters['to'] = requestParameters.to;
        }

        if (requestParameters.pager !== undefined) {
            queryParameters['pager'] = requestParameters.pager;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Trademarks/getByDate`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(HUXELSAPICommonTrademarkModelsTrademarksFromJSON));
    }

    /**
     */
    async trademarksGetByDateGet(requestParameters: TrademarksGetByDateGetRequest): Promise<Array<HUXELSAPICommonTrademarkModelsTrademarks>> {
        const response = await this.trademarksGetByDateGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async trademarksGetByIdGetRaw(requestParameters: TrademarksGetByIdGetRequest): Promise<runtime.ApiResponse<HUXELSAPICommonTrademarkModelsTrademarks>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.key !== undefined) {
            queryParameters['key'] = requestParameters.key;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Trademarks/getById`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => HUXELSAPICommonTrademarkModelsTrademarksFromJSON(jsonValue));
    }

    /**
     */
    async trademarksGetByIdGet(requestParameters: TrademarksGetByIdGetRequest): Promise<HUXELSAPICommonTrademarkModelsTrademarks> {
        const response = await this.trademarksGetByIdGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async trademarksGetElectronicCaseTypesGetRaw(): Promise<runtime.ApiResponse<Array<InternalClientElectronicCaseType>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Trademarks/getElectronicCaseTypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InternalClientElectronicCaseTypeFromJSON));
    }

    /**
     */
    async trademarksGetElectronicCaseTypesGet(): Promise<Array<InternalClientElectronicCaseType>> {
        const response = await this.trademarksGetElectronicCaseTypesGetRaw();
        return await response.value();
    }

    /**
     */
    async trademarksGetImageCategoryGetRaw(requestParameters: TrademarksGetImageCategoryGetRequest): Promise<runtime.ApiResponse<HUXELSAPICommonTrademarkModelsTrademarkImageCategory>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.category !== undefined) {
            queryParameters['category'] = requestParameters.category;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Trademarks/getImageCategory`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => HUXELSAPICommonTrademarkModelsTrademarkImageCategoryFromJSON(jsonValue));
    }

    /**
     */
    async trademarksGetImageCategoryGet(requestParameters: TrademarksGetImageCategoryGetRequest): Promise<HUXELSAPICommonTrademarkModelsTrademarkImageCategory> {
        const response = await this.trademarksGetImageCategoryGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async trademarksGetInvolvedPartyBySSNGetRaw(requestParameters: TrademarksGetInvolvedPartyBySSNGetRequest): Promise<runtime.ApiResponse<HUXELSAPICommonTrademarkModelsInvolvedParty>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.ssn !== undefined) {
            queryParameters['ssn'] = requestParameters.ssn;
        }

        if (requestParameters.origin !== undefined) {
            queryParameters['origin'] = requestParameters.origin;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Trademarks/getInvolvedPartyBySSN`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => HUXELSAPICommonTrademarkModelsInvolvedPartyFromJSON(jsonValue));
    }

    /**
     */
    async trademarksGetInvolvedPartyBySSNGet(requestParameters: TrademarksGetInvolvedPartyBySSNGetRequest): Promise<HUXELSAPICommonTrademarkModelsInvolvedParty> {
        const response = await this.trademarksGetInvolvedPartyBySSNGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async trademarksGetMediaGetRaw(requestParameters: TrademarksGetMediaGetRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.vmid !== undefined) {
            queryParameters['vmid'] = requestParameters.vmid;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Trademarks/getMedia`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async trademarksGetMediaGet(requestParameters: TrademarksGetMediaGetRequest): Promise<void> {
        await this.trademarksGetMediaGetRaw(requestParameters);
    }

    /**
     */
    async trademarksGetPriceListGetRaw(requestParameters: TrademarksGetPriceListGetRequest): Promise<runtime.ApiResponse<HUXELSAPICommonTMApplicationModelsPriceList>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.code !== undefined) {
            queryParameters['code'] = requestParameters.code;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Trademarks/getPriceList`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => HUXELSAPICommonTMApplicationModelsPriceListFromJSON(jsonValue));
    }

    /**
     */
    async trademarksGetPriceListGet(requestParameters: TrademarksGetPriceListGetRequest): Promise<HUXELSAPICommonTMApplicationModelsPriceList> {
        const response = await this.trademarksGetPriceListGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async trademarksGetThumbnailGetRaw(requestParameters: TrademarksGetThumbnailGetRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.path !== undefined) {
            queryParameters['path'] = requestParameters.path;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Trademarks/getThumbnail`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async trademarksGetThumbnailGet(requestParameters: TrademarksGetThumbnailGetRequest): Promise<void> {
        await this.trademarksGetThumbnailGetRaw(requestParameters);
    }

    /**
     */
    async trademarksGetTrademarksBySSNGetRaw(requestParameters: TrademarksGetTrademarksBySSNGetRequest): Promise<runtime.ApiResponse<Array<HUXELSAPICommonTrademarkModelsTrademarksIS>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.ssn !== undefined) {
            queryParameters['ssn'] = requestParameters.ssn;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Trademarks/getTrademarksBySSN`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(HUXELSAPICommonTrademarkModelsTrademarksISFromJSON));
    }

    /**
     */
    async trademarksGetTrademarksBySSNGet(requestParameters: TrademarksGetTrademarksBySSNGetRequest): Promise<Array<HUXELSAPICommonTrademarkModelsTrademarksIS>> {
        const response = await this.trademarksGetTrademarksBySSNGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async trademarksGetWordCategoryGetRaw(requestParameters: TrademarksGetWordCategoryGetRequest): Promise<runtime.ApiResponse<HUXELSAPICommonTrademarkModelsTrademarkCategory>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.category !== undefined) {
            queryParameters['category'] = requestParameters.category;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Trademarks/getWordCategory`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => HUXELSAPICommonTrademarkModelsTrademarkCategoryFromJSON(jsonValue));
    }

    /**
     */
    async trademarksGetWordCategoryGet(requestParameters: TrademarksGetWordCategoryGetRequest): Promise<HUXELSAPICommonTrademarkModelsTrademarkCategory> {
        const response = await this.trademarksGetWordCategoryGetRaw(requestParameters);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum TrademarksGetInvolvedPartyBySSNGetOriginEnum {
    Allt = 'Allt',
    Thjodskra = 'Thjodskra',
    Fyrirtaekjaskra = 'Fyrirtaekjaskra',
    Umbodsmenn = 'Umbodsmenn',
    Eigendur = 'Eigendur'
}
