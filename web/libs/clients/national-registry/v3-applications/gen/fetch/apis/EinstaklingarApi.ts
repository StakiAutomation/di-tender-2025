/* tslint:disable */
/* eslint-disable */
/**
 * Midlun umsoknir Rest API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AdseturDTO,
    AdseturDTOFromJSON,
    AdseturDTOToJSON,
    BusetaDTO,
    BusetaDTOFromJSON,
    BusetaDTOToJSON,
    EinstaklingurDTO,
    EinstaklingurDTOFromJSON,
    EinstaklingurDTOToJSON,
    FaedingarstadurDTO,
    FaedingarstadurDTOFromJSON,
    FaedingarstadurDTOToJSON,
    ForsjaAdiliDTO,
    ForsjaAdiliDTOFromJSON,
    ForsjaAdiliDTOToJSON,
    ForsjaBarnDTO,
    ForsjaBarnDTOFromJSON,
    ForsjaBarnDTOToJSON,
    HjuskapurDTO,
    HjuskapurDTOFromJSON,
    HjuskapurDTOToJSON,
    LogheimiliDTO,
    LogheimiliDTOFromJSON,
    LogheimiliDTOToJSON,
    LogheimilistengslDTO,
    LogheimilistengslDTOFromJSON,
    LogheimilistengslDTOToJSON,
    LogheimilistengslItarDTO,
    LogheimilistengslItarDTOFromJSON,
    LogheimilistengslItarDTOToJSON,
    ProblemDetails,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    RikisfangDTO,
    RikisfangDTOFromJSON,
    RikisfangDTOToJSON,
} from '../models';

export interface EinstaklingarKennitalaAdseturGetRequest {
    kennitala: string;
}

export interface EinstaklingarKennitalaBusetuforeldriGetRequest {
    kennitala: string;
}

export interface EinstaklingarKennitalaBusetusagaGetRequest {
    kennitala: string;
}

export interface EinstaklingarKennitalaFaedingarstadurGetRequest {
    kennitala: string;
}

export interface EinstaklingarKennitalaForsjaUndirGetRequest {
    kennitala: string;
}

export interface EinstaklingarKennitalaForsjaYfirGetRequest {
    kennitala: string;
}

export interface EinstaklingarKennitalaGetRequest {
    kennitala: string;
}

export interface EinstaklingarKennitalaHjuskapurGetRequest {
    kennitala: string;
}

export interface EinstaklingarKennitalaLogheimiliGetRequest {
    kennitala: string;
}

export interface EinstaklingarKennitalaLogheimilisforeldriGetRequest {
    kennitala: string;
}

export interface EinstaklingarKennitalaLogheimilistengslGetRequest {
    kennitala: string;
}

export interface EinstaklingarKennitalaLogheimilistengslItarGetRequest {
    kennitala: string;
}

export interface EinstaklingarKennitalaRikisfangGetRequest {
    kennitala: string;
}

/**
 * 
 */
export class EinstaklingarApi extends runtime.BaseAPI {

    /**
     * Skilar upplýsingum um raunskráningu aðseturs einstaklings í þjóðskrá út frá kennitölu ef viðkomandi er með skráð aðsetur í þjóðskrá, skilar annars tómu.
     * Sækir upplýsingar um aðsetur fyrir innsenda kennitölu.
     */
    async einstaklingarKennitalaAdseturGetRaw(requestParameters: EinstaklingarKennitalaAdseturGetRequest): Promise<runtime.ApiResponse<AdseturDTO>> {
        if (requestParameters.kennitala === null || requestParameters.kennitala === undefined) {
            throw new runtime.RequiredError('kennitala','Required parameter requestParameters.kennitala was null or undefined when calling einstaklingarKennitalaAdseturGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Einstaklingar/{kennitala}/adsetur`.replace(`{${"kennitala"}}`, encodeURIComponent(String(requestParameters.kennitala))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AdseturDTOFromJSON(jsonValue));
    }

    /**
     * Skilar upplýsingum um raunskráningu aðseturs einstaklings í þjóðskrá út frá kennitölu ef viðkomandi er með skráð aðsetur í þjóðskrá, skilar annars tómu.
     * Sækir upplýsingar um aðsetur fyrir innsenda kennitölu.
     */
    async einstaklingarKennitalaAdseturGet(requestParameters: EinstaklingarKennitalaAdseturGetRequest): Promise<AdseturDTO> {
        const response = await this.einstaklingarKennitalaAdseturGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Endapunkturinn er læstur á notendur + börn.<para />  Tekur inn kennitölu barns og skilar upplýsingum um skráða forsjáraðila barnsins sem eru skráðir búsetuforeldrar þess.  Ef skráður forsjáraðili barnsins er með annarskonar forsjárskráningu skilar kallið ekki þeim forsjáraðila.
     * Sækir upplýsingar um einstakling/a sem eru skráðir búsetuforeldrar barns.
     */
    async einstaklingarKennitalaBusetuforeldriGetRaw(requestParameters: EinstaklingarKennitalaBusetuforeldriGetRequest): Promise<runtime.ApiResponse<ForsjaBarnDTO>> {
        if (requestParameters.kennitala === null || requestParameters.kennitala === undefined) {
            throw new runtime.RequiredError('kennitala','Required parameter requestParameters.kennitala was null or undefined when calling einstaklingarKennitalaBusetuforeldriGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Einstaklingar/{kennitala}/busetuforeldri`.replace(`{${"kennitala"}}`, encodeURIComponent(String(requestParameters.kennitala))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ForsjaBarnDTOFromJSON(jsonValue));
    }

    /**
     * Endapunkturinn er læstur á notendur + börn.<para />  Tekur inn kennitölu barns og skilar upplýsingum um skráða forsjáraðila barnsins sem eru skráðir búsetuforeldrar þess.  Ef skráður forsjáraðili barnsins er með annarskonar forsjárskráningu skilar kallið ekki þeim forsjáraðila.
     * Sækir upplýsingar um einstakling/a sem eru skráðir búsetuforeldrar barns.
     */
    async einstaklingarKennitalaBusetuforeldriGet(requestParameters: EinstaklingarKennitalaBusetuforeldriGetRequest): Promise<ForsjaBarnDTO> {
        const response = await this.einstaklingarKennitalaBusetuforeldriGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Endapunkturinn skilar lögheimilissögu einstaklings út frá kennitölu.              Svæðið „breytt“ er dagsetninginn þegar einstaklingurinn flutti lögheimili sitt á tiltekið lögheimili. \\n              Skráning einstaklinga niður á íbúðir hefst ekki fyrr en um 2015/2016, \\n              Rafræn skráning nær ekki lengra aftur en til 1986 ef flutningur einstaklings átti sér stað fyrir þann tíma þá kemur það ekki fram hér.Hægt er að sjá núverandi skráð lögheimili einstakling með endapunktinum:/ api/v1/einstaklingar/{ kennitala}/ logheimili
     * Skilar búsetusögu, þ.e. lista af heimilisföngum/lögheimilum sem viðkomandi hefur verið skráður á.
     */
    async einstaklingarKennitalaBusetusagaGetRaw(requestParameters: EinstaklingarKennitalaBusetusagaGetRequest): Promise<runtime.ApiResponse<Array<BusetaDTO>>> {
        if (requestParameters.kennitala === null || requestParameters.kennitala === undefined) {
            throw new runtime.RequiredError('kennitala','Required parameter requestParameters.kennitala was null or undefined when calling einstaklingarKennitalaBusetusagaGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Einstaklingar/{kennitala}/busetusaga`.replace(`{${"kennitala"}}`, encodeURIComponent(String(requestParameters.kennitala))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BusetaDTOFromJSON));
    }

    /**
     * Endapunkturinn skilar lögheimilissögu einstaklings út frá kennitölu.              Svæðið „breytt“ er dagsetninginn þegar einstaklingurinn flutti lögheimili sitt á tiltekið lögheimili. \\n              Skráning einstaklinga niður á íbúðir hefst ekki fyrr en um 2015/2016, \\n              Rafræn skráning nær ekki lengra aftur en til 1986 ef flutningur einstaklings átti sér stað fyrir þann tíma þá kemur það ekki fram hér.Hægt er að sjá núverandi skráð lögheimili einstakling með endapunktinum:/ api/v1/einstaklingar/{ kennitala}/ logheimili
     * Skilar búsetusögu, þ.e. lista af heimilisföngum/lögheimilum sem viðkomandi hefur verið skráður á.
     */
    async einstaklingarKennitalaBusetusagaGet(requestParameters: EinstaklingarKennitalaBusetusagaGetRequest): Promise<Array<BusetaDTO>> {
        const response = await this.einstaklingarKennitalaBusetusagaGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Skilar upplýsingum um sveitarfélag/land sem einstaklingur fæðist í ásamt upplýsingum um fæðingardag einstaklings.<para />  Fæðingarstaður einstaklings segir í mörgum tilfellum ekkert um upprunaland einstaklings.<para />  Einstaklingar geta fæðst í landi sem þeir eru ekki búsettir í og hafa aldrei búið í, hafa enga aðra tengingu við landið en að hafa fæðst þar af einhverjum ástæðum.
     * GET fyrir fæðingarstað.
     */
    async einstaklingarKennitalaFaedingarstadurGetRaw(requestParameters: EinstaklingarKennitalaFaedingarstadurGetRequest): Promise<runtime.ApiResponse<FaedingarstadurDTO>> {
        if (requestParameters.kennitala === null || requestParameters.kennitala === undefined) {
            throw new runtime.RequiredError('kennitala','Required parameter requestParameters.kennitala was null or undefined when calling einstaklingarKennitalaFaedingarstadurGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Einstaklingar/{kennitala}/faedingarstadur`.replace(`{${"kennitala"}}`, encodeURIComponent(String(requestParameters.kennitala))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => FaedingarstadurDTOFromJSON(jsonValue));
    }

    /**
     * Skilar upplýsingum um sveitarfélag/land sem einstaklingur fæðist í ásamt upplýsingum um fæðingardag einstaklings.<para />  Fæðingarstaður einstaklings segir í mörgum tilfellum ekkert um upprunaland einstaklings.<para />  Einstaklingar geta fæðst í landi sem þeir eru ekki búsettir í og hafa aldrei búið í, hafa enga aðra tengingu við landið en að hafa fæðst þar af einhverjum ástæðum.
     * GET fyrir fæðingarstað.
     */
    async einstaklingarKennitalaFaedingarstadurGet(requestParameters: EinstaklingarKennitalaFaedingarstadurGetRequest): Promise<FaedingarstadurDTO> {
        const response = await this.einstaklingarKennitalaFaedingarstadurGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Endapunkturinn er læstur á notendur + börn.<para />              Tekur inn kennitölu forsjáraðila og skilar upplýsingum um barn/börn sem forsjáraðili fer með forsjá yfir.
     * Sækir upplýsingar um börn sem einstaklingur hefur forsjá yfir.
     */
    async einstaklingarKennitalaForsjaUndirGetRaw(requestParameters: EinstaklingarKennitalaForsjaUndirGetRequest): Promise<runtime.ApiResponse<ForsjaAdiliDTO>> {
        if (requestParameters.kennitala === null || requestParameters.kennitala === undefined) {
            throw new runtime.RequiredError('kennitala','Required parameter requestParameters.kennitala was null or undefined when calling einstaklingarKennitalaForsjaUndirGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Einstaklingar/{kennitala}/forsjaUndir`.replace(`{${"kennitala"}}`, encodeURIComponent(String(requestParameters.kennitala))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ForsjaAdiliDTOFromJSON(jsonValue));
    }

    /**
     * Endapunkturinn er læstur á notendur + börn.<para />              Tekur inn kennitölu forsjáraðila og skilar upplýsingum um barn/börn sem forsjáraðili fer með forsjá yfir.
     * Sækir upplýsingar um börn sem einstaklingur hefur forsjá yfir.
     */
    async einstaklingarKennitalaForsjaUndirGet(requestParameters: EinstaklingarKennitalaForsjaUndirGetRequest): Promise<ForsjaAdiliDTO> {
        const response = await this.einstaklingarKennitalaForsjaUndirGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Endapunkturinn er læstur á notendur + börn.<para />  Tekur inn kennitölu barns og skilar upplýsingum um skráða forsjáraðila barnsins.
     * Sækir upplýsingar um einstakling/a hefur/hafa forsjá yfir barni.
     */
    async einstaklingarKennitalaForsjaYfirGetRaw(requestParameters: EinstaklingarKennitalaForsjaYfirGetRequest): Promise<runtime.ApiResponse<ForsjaBarnDTO>> {
        if (requestParameters.kennitala === null || requestParameters.kennitala === undefined) {
            throw new runtime.RequiredError('kennitala','Required parameter requestParameters.kennitala was null or undefined when calling einstaklingarKennitalaForsjaYfirGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Einstaklingar/{kennitala}/forsjaYfir`.replace(`{${"kennitala"}}`, encodeURIComponent(String(requestParameters.kennitala))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ForsjaBarnDTOFromJSON(jsonValue));
    }

    /**
     * Endapunkturinn er læstur á notendur + börn.<para />  Tekur inn kennitölu barns og skilar upplýsingum um skráða forsjáraðila barnsins.
     * Sækir upplýsingar um einstakling/a hefur/hafa forsjá yfir barni.
     */
    async einstaklingarKennitalaForsjaYfirGet(requestParameters: EinstaklingarKennitalaForsjaYfirGetRequest): Promise<ForsjaBarnDTO> {
        const response = await this.einstaklingarKennitalaForsjaYfirGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Skilar grunnupplýsingum um raunskráningu einstaklings í þjóðskrá út frá kennitölu.<para />  Undir lögheimili - Ættu alltaf að birtast einhverjar upplýsingar, ef einstaklingur er ekki með skráð lögheimili á Íslandi þá birtist í flestum tilfellum það land sem viðkomandi hefur upplýst Þjóðskrá Íslands um að flutt hafi verið til.<para />  Undir aðsetur - Ef einstaklingur er með skráð aðsetur í þjóðskrá þá birtast upplýsingar undir aðsetur, annars birtast engar upplýsingar.
     * GET fyrir einstaklinga.
     */
    async einstaklingarKennitalaGetRaw(requestParameters: EinstaklingarKennitalaGetRequest): Promise<runtime.ApiResponse<EinstaklingurDTO>> {
        if (requestParameters.kennitala === null || requestParameters.kennitala === undefined) {
            throw new runtime.RequiredError('kennitala','Required parameter requestParameters.kennitala was null or undefined when calling einstaklingarKennitalaGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Einstaklingar/{kennitala}`.replace(`{${"kennitala"}}`, encodeURIComponent(String(requestParameters.kennitala))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EinstaklingurDTOFromJSON(jsonValue));
    }

    /**
     * Skilar grunnupplýsingum um raunskráningu einstaklings í þjóðskrá út frá kennitölu.<para />  Undir lögheimili - Ættu alltaf að birtast einhverjar upplýsingar, ef einstaklingur er ekki með skráð lögheimili á Íslandi þá birtist í flestum tilfellum það land sem viðkomandi hefur upplýst Þjóðskrá Íslands um að flutt hafi verið til.<para />  Undir aðsetur - Ef einstaklingur er með skráð aðsetur í þjóðskrá þá birtast upplýsingar undir aðsetur, annars birtast engar upplýsingar.
     * GET fyrir einstaklinga.
     */
    async einstaklingarKennitalaGet(requestParameters: EinstaklingarKennitalaGetRequest): Promise<EinstaklingurDTO> {
        const response = await this.einstaklingarKennitalaGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Skilar upplýsingum um skráða hjúskaparstöðu einstaklings í þjóðskrá, allir einstaklingar í þjóðskrá eru með skráða hjúskaparstöðu. <para />              Undir sambud – Ef einstaklingur er í skráðri sambúð birtast upplýsingar um skráðan sambúðaraðilia, kennitala, nafn og dagsetning skráðrar sambúðar, skilar annars tómu.
     * Sækir upplýsingar um hjúskap fyrir innsenda kennitölu.
     */
    async einstaklingarKennitalaHjuskapurGetRaw(requestParameters: EinstaklingarKennitalaHjuskapurGetRequest): Promise<runtime.ApiResponse<HjuskapurDTO>> {
        if (requestParameters.kennitala === null || requestParameters.kennitala === undefined) {
            throw new runtime.RequiredError('kennitala','Required parameter requestParameters.kennitala was null or undefined when calling einstaklingarKennitalaHjuskapurGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Einstaklingar/{kennitala}/hjuskapur`.replace(`{${"kennitala"}}`, encodeURIComponent(String(requestParameters.kennitala))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => HjuskapurDTOFromJSON(jsonValue));
    }

    /**
     * Skilar upplýsingum um skráða hjúskaparstöðu einstaklings í þjóðskrá, allir einstaklingar í þjóðskrá eru með skráða hjúskaparstöðu. <para />              Undir sambud – Ef einstaklingur er í skráðri sambúð birtast upplýsingar um skráðan sambúðaraðilia, kennitala, nafn og dagsetning skráðrar sambúðar, skilar annars tómu.
     * Sækir upplýsingar um hjúskap fyrir innsenda kennitölu.
     */
    async einstaklingarKennitalaHjuskapurGet(requestParameters: EinstaklingarKennitalaHjuskapurGetRequest): Promise<HjuskapurDTO> {
        const response = await this.einstaklingarKennitalaHjuskapurGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Skilar upplýsingum um raunskráningu á lögheimili einstaklings í þjóðskrá út frá kennitölu.<para />              Svæðið „breytt“ er dagsetninginn þegar einstaklingurinn flutti lögheimili sitt á á skráð lögheimili.<para />              Ef engar upplýsingar koma í „breytt“ þá hefur einstaklingurinn að öllum líkindum verið með sama lögheimili frá því áður en rafræn skráning hófst 1986.
     * Skilar lögheimilisupplýsingum fyrir innsenda kennitölu.
     */
    async einstaklingarKennitalaLogheimiliGetRaw(requestParameters: EinstaklingarKennitalaLogheimiliGetRequest): Promise<runtime.ApiResponse<LogheimiliDTO>> {
        if (requestParameters.kennitala === null || requestParameters.kennitala === undefined) {
            throw new runtime.RequiredError('kennitala','Required parameter requestParameters.kennitala was null or undefined when calling einstaklingarKennitalaLogheimiliGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Einstaklingar/{kennitala}/logheimili`.replace(`{${"kennitala"}}`, encodeURIComponent(String(requestParameters.kennitala))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => LogheimiliDTOFromJSON(jsonValue));
    }

    /**
     * Skilar upplýsingum um raunskráningu á lögheimili einstaklings í þjóðskrá út frá kennitölu.<para />              Svæðið „breytt“ er dagsetninginn þegar einstaklingurinn flutti lögheimili sitt á á skráð lögheimili.<para />              Ef engar upplýsingar koma í „breytt“ þá hefur einstaklingurinn að öllum líkindum verið með sama lögheimili frá því áður en rafræn skráning hófst 1986.
     * Skilar lögheimilisupplýsingum fyrir innsenda kennitölu.
     */
    async einstaklingarKennitalaLogheimiliGet(requestParameters: EinstaklingarKennitalaLogheimiliGetRequest): Promise<LogheimiliDTO> {
        const response = await this.einstaklingarKennitalaLogheimiliGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Endapunkturinn er læstur á notendur + börn.<para />  Tekur inn kennitölu barns og skilar upplýsingum um skráða forsjáraðila barnsins sem eru skráðir lögheimilisforeldrar þess.  Ef skráður forsjáraðili barnsins er með annarskonar forsjárskráningu skilar kallið ekki þeim forsjáraðila.
     * Sækir upplýsingar um einstakling/a sem eru skráðir lögheimilisforeldrar barns.
     */
    async einstaklingarKennitalaLogheimilisforeldriGetRaw(requestParameters: EinstaklingarKennitalaLogheimilisforeldriGetRequest): Promise<runtime.ApiResponse<ForsjaBarnDTO>> {
        if (requestParameters.kennitala === null || requestParameters.kennitala === undefined) {
            throw new runtime.RequiredError('kennitala','Required parameter requestParameters.kennitala was null or undefined when calling einstaklingarKennitalaLogheimilisforeldriGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Einstaklingar/{kennitala}/logheimilisforeldri`.replace(`{${"kennitala"}}`, encodeURIComponent(String(requestParameters.kennitala))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ForsjaBarnDTOFromJSON(jsonValue));
    }

    /**
     * Endapunkturinn er læstur á notendur + börn.<para />  Tekur inn kennitölu barns og skilar upplýsingum um skráða forsjáraðila barnsins sem eru skráðir lögheimilisforeldrar þess.  Ef skráður forsjáraðili barnsins er með annarskonar forsjárskráningu skilar kallið ekki þeim forsjáraðila.
     * Sækir upplýsingar um einstakling/a sem eru skráðir lögheimilisforeldrar barns.
     */
    async einstaklingarKennitalaLogheimilisforeldriGet(requestParameters: EinstaklingarKennitalaLogheimilisforeldriGetRequest): Promise<ForsjaBarnDTO> {
        const response = await this.einstaklingarKennitalaLogheimilisforeldriGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Skilar upplýsingum um raunskráningu einstaklinga í þjóðskrá sem eru skráðir með sömu lögheimilistengsl þeirrar kennitölu sem kallað er í.<para />              Ef innsend kennitala er ekki skráða lögheimilistengsla kennitalan þá eru samt sem áður lögheimilistengslin fundin og öllum aðilum með sömu lögheimilistengsl skilað í kallinu.
     * Skilar lögheimilistengslum fyrir innsenda kennitölu.
     */
    async einstaklingarKennitalaLogheimilistengslGetRaw(requestParameters: EinstaklingarKennitalaLogheimilistengslGetRequest): Promise<runtime.ApiResponse<LogheimilistengslDTO>> {
        if (requestParameters.kennitala === null || requestParameters.kennitala === undefined) {
            throw new runtime.RequiredError('kennitala','Required parameter requestParameters.kennitala was null or undefined when calling einstaklingarKennitalaLogheimilistengslGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Einstaklingar/{kennitala}/logheimilistengsl`.replace(`{${"kennitala"}}`, encodeURIComponent(String(requestParameters.kennitala))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => LogheimilistengslDTOFromJSON(jsonValue));
    }

    /**
     * Skilar upplýsingum um raunskráningu einstaklinga í þjóðskrá sem eru skráðir með sömu lögheimilistengsl þeirrar kennitölu sem kallað er í.<para />              Ef innsend kennitala er ekki skráða lögheimilistengsla kennitalan þá eru samt sem áður lögheimilistengslin fundin og öllum aðilum með sömu lögheimilistengsl skilað í kallinu.
     * Skilar lögheimilistengslum fyrir innsenda kennitölu.
     */
    async einstaklingarKennitalaLogheimilistengslGet(requestParameters: EinstaklingarKennitalaLogheimilistengslGetRequest): Promise<LogheimilistengslDTO> {
        const response = await this.einstaklingarKennitalaLogheimilistengslGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Skilar grunnupplýsingum um raunskráningu einstaklinga sem eru með sömu lögheimilistengsl þeirrar kennitölu sem kallað er í.<para />              Ef innsend kennitala er ekki lögheimilistengsla kennitalan þá eru lögheimilistengslin samt sem áður fundin og öllum aðilum með sömu lögheimilistengs skilað í kallinu.<para />              Undir lögheimili - Ættu alltaf að birtast einhverjar upplýsingar, ef einstaklingur er ekki með skráð lögheimili á Íslandi þá birtist í flestum tilfellum það land sem viðkomandi er búsettur í.<para />              Undir aðsetur - Ef einstaklingur er með skráð aðsetur í þjóðskrá þá birtast upplýsingar undir aðsetur, annars birtast engar upplýsingar.
     * Skilar ítarlegum upplýsingum um fjölskyldumeðlimi með lögheimilistengsl fyrir innsenda kennitölu.
     */
    async einstaklingarKennitalaLogheimilistengslItarGetRaw(requestParameters: EinstaklingarKennitalaLogheimilistengslItarGetRequest): Promise<runtime.ApiResponse<LogheimilistengslItarDTO>> {
        if (requestParameters.kennitala === null || requestParameters.kennitala === undefined) {
            throw new runtime.RequiredError('kennitala','Required parameter requestParameters.kennitala was null or undefined when calling einstaklingarKennitalaLogheimilistengslItarGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Einstaklingar/{kennitala}/logheimilistengslItar`.replace(`{${"kennitala"}}`, encodeURIComponent(String(requestParameters.kennitala))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => LogheimilistengslItarDTOFromJSON(jsonValue));
    }

    /**
     * Skilar grunnupplýsingum um raunskráningu einstaklinga sem eru með sömu lögheimilistengsl þeirrar kennitölu sem kallað er í.<para />              Ef innsend kennitala er ekki lögheimilistengsla kennitalan þá eru lögheimilistengslin samt sem áður fundin og öllum aðilum með sömu lögheimilistengs skilað í kallinu.<para />              Undir lögheimili - Ættu alltaf að birtast einhverjar upplýsingar, ef einstaklingur er ekki með skráð lögheimili á Íslandi þá birtist í flestum tilfellum það land sem viðkomandi er búsettur í.<para />              Undir aðsetur - Ef einstaklingur er með skráð aðsetur í þjóðskrá þá birtast upplýsingar undir aðsetur, annars birtast engar upplýsingar.
     * Skilar ítarlegum upplýsingum um fjölskyldumeðlimi með lögheimilistengsl fyrir innsenda kennitölu.
     */
    async einstaklingarKennitalaLogheimilistengslItarGet(requestParameters: EinstaklingarKennitalaLogheimilistengslItarGetRequest): Promise<LogheimilistengslItarDTO> {
        const response = await this.einstaklingarKennitalaLogheimilistengslItarGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Skilar upplýsingum um skráð ríkisfang einstaklings í þjóðskrá.<para />              Einungi eitt ríkisfang er skráð í þjóðskrá þó svo að einstaklingur geti verið með tvöfalt ríkisfang.
     * Sækir upplýsingar um ríkisfang fyrir innsenda kennitölu.
     */
    async einstaklingarKennitalaRikisfangGetRaw(requestParameters: EinstaklingarKennitalaRikisfangGetRequest): Promise<runtime.ApiResponse<RikisfangDTO>> {
        if (requestParameters.kennitala === null || requestParameters.kennitala === undefined) {
            throw new runtime.RequiredError('kennitala','Required parameter requestParameters.kennitala was null or undefined when calling einstaklingarKennitalaRikisfangGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Einstaklingar/{kennitala}/rikisfang`.replace(`{${"kennitala"}}`, encodeURIComponent(String(requestParameters.kennitala))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RikisfangDTOFromJSON(jsonValue));
    }

    /**
     * Skilar upplýsingum um skráð ríkisfang einstaklings í þjóðskrá.<para />              Einungi eitt ríkisfang er skráð í þjóðskrá þó svo að einstaklingur geti verið með tvöfalt ríkisfang.
     * Sækir upplýsingar um ríkisfang fyrir innsenda kennitölu.
     */
    async einstaklingarKennitalaRikisfangGet(requestParameters: EinstaklingarKennitalaRikisfangGetRequest): Promise<RikisfangDTO> {
        const response = await this.einstaklingarKennitalaRikisfangGetRaw(requestParameters);
        return await response.value();
    }

}
