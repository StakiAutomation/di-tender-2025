/* tslint:disable */
/* eslint-disable */
/**
 * Einstaklingur
 * The API retrieves information about individuals stored in the Icelandic registry.
 *
 * The version of the OpenAPI document: v1
 * Contact: skra@skra.is
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Kodar,
    KodarFromJSON,
    KodarToJSON,
    Lyklar,
    LyklarFromJSON,
    LyklarToJSON,
    Sveitarfelag,
    SveitarfelagFromJSON,
    SveitarfelagToJSON,
} from '../models';

export interface LyklarGetHjuskaparRequest {
    id: string | null;
    kyn: string | null;
    tungumal?: string | null;
}

export interface LyklarGetKynRequest {
    id: string | null;
    tungumal?: string | null;
}

export interface LyklarGetLyklarRequest {
    tungumal?: string | null;
}

export interface LyklarGetSveitarfelagRequest {
    id: string | null;
}

export interface LyklarGetTrufelagRequest {
    id: string | null;
}

/**
 * 
 */
export class LyklarApi extends runtime.BaseAPI {

    /**
     * Get details of cohabition code by id.
     */
    async lyklarGetHjuskaparRaw(requestParameters: LyklarGetHjuskaparRequest): Promise<runtime.ApiResponse<Kodar>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling lyklarGetHjuskapar.');
        }

        if (requestParameters.kyn === null || requestParameters.kyn === undefined) {
            throw new runtime.RequiredError('kyn','Required parameter requestParameters.kyn was null or undefined when calling lyklarGetHjuskapar.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.tungumal !== undefined) {
            queryParameters['tungumal'] = requestParameters.tungumal;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // auth authentication
        }

        const response = await this.request({
            path: `/api/v1/lyklar/hjuskaparkodar/{id}/{kyn}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"kyn"}}`, encodeURIComponent(String(requestParameters.kyn))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => KodarFromJSON(jsonValue));
    }

    /**
     * Get details of cohabition code by id.
     */
    async lyklarGetHjuskapar(requestParameters: LyklarGetHjuskaparRequest): Promise<Kodar> {
        const response = await this.lyklarGetHjuskaparRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get details for gender code by id.
     */
    async lyklarGetKynRaw(requestParameters: LyklarGetKynRequest): Promise<runtime.ApiResponse<Kodar>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling lyklarGetKyn.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.tungumal !== undefined) {
            queryParameters['tungumal'] = requestParameters.tungumal;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // auth authentication
        }

        const response = await this.request({
            path: `/api/v1/lyklar/kyn/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => KodarFromJSON(jsonValue));
    }

    /**
     * Get details for gender code by id.
     */
    async lyklarGetKyn(requestParameters: LyklarGetKynRequest): Promise<Kodar> {
        const response = await this.lyklarGetKynRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get all available gender and cohabition codes.
     */
    async lyklarGetLyklarRaw(requestParameters: LyklarGetLyklarRequest): Promise<runtime.ApiResponse<Lyklar>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.tungumal !== undefined) {
            queryParameters['tungumal'] = requestParameters.tungumal;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // auth authentication
        }

        const response = await this.request({
            path: `/api/v1/lyklar`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => LyklarFromJSON(jsonValue));
    }

    /**
     * Get all available gender and cohabition codes.
     */
    async lyklarGetLyklar(requestParameters: LyklarGetLyklarRequest): Promise<Lyklar> {
        const response = await this.lyklarGetLyklarRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get the details for municipality by id.
     */
    async lyklarGetSveitarfelagRaw(requestParameters: LyklarGetSveitarfelagRequest): Promise<runtime.ApiResponse<Sveitarfelag>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling lyklarGetSveitarfelag.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // auth authentication
        }

        const response = await this.request({
            path: `/api/v1/lyklar/sveitarfelog/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SveitarfelagFromJSON(jsonValue));
    }

    /**
     * Get the details for municipality by id.
     */
    async lyklarGetSveitarfelag(requestParameters: LyklarGetSveitarfelagRequest): Promise<Sveitarfelag> {
        const response = await this.lyklarGetSveitarfelagRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get all available municipality codes.
     */
    async lyklarGetSveitarfelogRaw(): Promise<runtime.ApiResponse<Array<Kodar>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // auth authentication
        }

        const response = await this.request({
            path: `/api/v1/lyklar/sveitarfelog`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(KodarFromJSON));
    }

    /**
     * Get all available municipality codes.
     */
    async lyklarGetSveitarfelog(): Promise<Array<Kodar>> {
        const response = await this.lyklarGetSveitarfelogRaw();
        return await response.value();
    }

    /**
     * Get details for religion code by id.
     */
    async lyklarGetTrufelagRaw(requestParameters: LyklarGetTrufelagRequest): Promise<runtime.ApiResponse<Kodar>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling lyklarGetTrufelag.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // auth authentication
        }

        const response = await this.request({
            path: `/api/v1/lyklar/trufelog/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => KodarFromJSON(jsonValue));
    }

    /**
     * Get details for religion code by id.
     */
    async lyklarGetTrufelag(requestParameters: LyklarGetTrufelagRequest): Promise<Kodar> {
        const response = await this.lyklarGetTrufelagRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get all available religion codes.
     */
    async lyklarGetTrufelogRaw(): Promise<runtime.ApiResponse<Array<Kodar>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // auth authentication
        }

        const response = await this.request({
            path: `/api/v1/lyklar/trufelog`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(KodarFromJSON));
    }

    /**
     * Get all available religion codes.
     */
    async lyklarGetTrufelog(): Promise<Array<Kodar>> {
        const response = await this.lyklarGetTrufelogRaw();
        return await response.value();
    }

}
