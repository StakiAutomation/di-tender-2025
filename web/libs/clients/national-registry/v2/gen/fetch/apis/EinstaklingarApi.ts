/* tslint:disable */
/* eslint-disable */
/**
 * Einstaklingur
 * The API retrieves information about individuals stored in the Icelandic registry.
 *
 * The version of the OpenAPI document: v1
 * Contact: skra@skra.is
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Adsetur,
    AdseturFromJSON,
    AdseturToJSON,
    Einstaklingsupplysingar,
    EinstaklingsupplysingarFromJSON,
    EinstaklingsupplysingarToJSON,
    Faedingarstadur,
    FaedingarstadurFromJSON,
    FaedingarstadurToJSON,
    Fjolskylda,
    FjolskyldaFromJSON,
    FjolskyldaToJSON,
    Fjolskyldumedlimir,
    FjolskyldumedlimirFromJSON,
    FjolskyldumedlimirToJSON,
    Heimili,
    HeimiliFromJSON,
    HeimiliToJSON,
    Hjuskapur,
    HjuskapurFromJSON,
    HjuskapurToJSON,
    Lograda,
    LogradaFromJSON,
    LogradaToJSON,
    ProblemDetails,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    Rikisfang,
    RikisfangFromJSON,
    RikisfangToJSON,
    Trufelagsskraning,
    TrufelagsskraningFromJSON,
    TrufelagsskraningToJSON,
} from '../models';

export interface EinstaklingarGetAdseturRequest {
    id: string | null;
}

export interface EinstaklingarGetBusetaRequest {
    id: string | null;
}

export interface EinstaklingarGetBusetuForeldriRequest {
    barn: string | null;
}

export interface EinstaklingarGetEinstaklingurRequest {
    id: string | null;
}

export interface EinstaklingarGetFaedingarstadurRequest {
    id: string | null;
}

export interface EinstaklingarGetFjolskyldaRequest {
    id: string | null;
}

export interface EinstaklingarGetFjolskyldumedlimirRequest {
    id: string | null;
}

export interface EinstaklingarGetForsjaRequest {
    id: string | null;
}

export interface EinstaklingarGetForsjaForeldriRequest {
    id: string | null;
    barn: string | null;
}

export interface EinstaklingarGetHjuskapurRequest {
    id: string | null;
}

export interface EinstaklingarGetLogbornRequest {
    id: string | null;
}

export interface EinstaklingarGetLogforeldrarRequest {
    id: string | null;
}

export interface EinstaklingarGetLogheimiliRequest {
    id: string | null;
}

export interface EinstaklingarGetLogheimilisForeldriRequest {
    barn: string | null;
}

export interface EinstaklingarGetLogradaRequest {
    id: string | null;
}

export interface EinstaklingarGetRikisfangRequest {
    id: string | null;
}

export interface EinstaklingarGetSamibuarRequest {
    id: string | null;
}

export interface EinstaklingarGetTrufelagRequest {
    id: string | null;
}

/**
 * 
 */
export class EinstaklingarApi extends runtime.BaseAPI {

    /**
     * Get the residence information for an individual.
     */
    async einstaklingarGetAdseturRaw(requestParameters: EinstaklingarGetAdseturRequest): Promise<runtime.ApiResponse<Adsetur>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling einstaklingarGetAdsetur.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // auth authentication
        }

        const response = await this.request({
            path: `/api/v1/einstaklingar/{id}/adsetur`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AdseturFromJSON(jsonValue));
    }

    /**
     * Get the residence information for an individual.
     */
    async einstaklingarGetAdsetur(requestParameters: EinstaklingarGetAdseturRequest): Promise<Adsetur> {
        const response = await this.einstaklingarGetAdseturRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get the residence history for an individual.
     */
    async einstaklingarGetBusetaRaw(requestParameters: EinstaklingarGetBusetaRequest): Promise<runtime.ApiResponse<Array<Heimili>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling einstaklingarGetBuseta.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // auth authentication
        }

        const response = await this.request({
            path: `/api/v1/einstaklingar/{id}/buseta`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(HeimiliFromJSON));
    }

    /**
     * Get the residence history for an individual.
     */
    async einstaklingarGetBuseta(requestParameters: EinstaklingarGetBusetaRequest): Promise<Array<Heimili>> {
        const response = await this.einstaklingarGetBusetaRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get the list of resident parents
     */
    async einstaklingarGetBusetuForeldriRaw(requestParameters: EinstaklingarGetBusetuForeldriRequest): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters.barn === null || requestParameters.barn === undefined) {
            throw new runtime.RequiredError('barn','Required parameter requestParameters.barn was null or undefined when calling einstaklingarGetBusetuForeldri.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // auth authentication
        }

        const response = await this.request({
            path: `/api/v1/einstaklingar/{barn}/busetuforeldri`.replace(`{${"barn"}}`, encodeURIComponent(String(requestParameters.barn))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get the list of resident parents
     */
    async einstaklingarGetBusetuForeldri(requestParameters: EinstaklingarGetBusetuForeldriRequest): Promise<Array<string>> {
        const response = await this.einstaklingarGetBusetuForeldriRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get the basic information for an individual.
     */
    async einstaklingarGetEinstaklingurRaw(requestParameters: EinstaklingarGetEinstaklingurRequest): Promise<runtime.ApiResponse<Einstaklingsupplysingar>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling einstaklingarGetEinstaklingur.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // auth authentication
        }

        const response = await this.request({
            path: `/api/v1/einstaklingar/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EinstaklingsupplysingarFromJSON(jsonValue));
    }

    /**
     * Get the basic information for an individual.
     */
    async einstaklingarGetEinstaklingur(requestParameters: EinstaklingarGetEinstaklingurRequest): Promise<Einstaklingsupplysingar> {
        const response = await this.einstaklingarGetEinstaklingurRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get the registered birthplace for an individual.
     */
    async einstaklingarGetFaedingarstadurRaw(requestParameters: EinstaklingarGetFaedingarstadurRequest): Promise<runtime.ApiResponse<Faedingarstadur>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling einstaklingarGetFaedingarstadur.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // auth authentication
        }

        const response = await this.request({
            path: `/api/v1/einstaklingar/{id}/faedingarstadur`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => FaedingarstadurFromJSON(jsonValue));
    }

    /**
     * Get the registered birthplace for an individual.
     */
    async einstaklingarGetFaedingarstadur(requestParameters: EinstaklingarGetFaedingarstadurRequest): Promise<Faedingarstadur> {
        const response = await this.einstaklingarGetFaedingarstadurRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get a list of family members for an individual.
     */
    async einstaklingarGetFjolskyldaRaw(requestParameters: EinstaklingarGetFjolskyldaRequest): Promise<runtime.ApiResponse<Fjolskylda>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling einstaklingarGetFjolskylda.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // auth authentication
        }

        const response = await this.request({
            path: `/api/v1/einstaklingar/{id}/fjolskylda`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => FjolskyldaFromJSON(jsonValue));
    }

    /**
     * Get a list of family members for an individual.
     */
    async einstaklingarGetFjolskylda(requestParameters: EinstaklingarGetFjolskyldaRequest): Promise<Fjolskylda> {
        const response = await this.einstaklingarGetFjolskyldaRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get a list of family members with detailed information for each family member.
     */
    async einstaklingarGetFjolskyldumedlimirRaw(requestParameters: EinstaklingarGetFjolskyldumedlimirRequest): Promise<runtime.ApiResponse<Fjolskyldumedlimir>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling einstaklingarGetFjolskyldumedlimir.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // auth authentication
        }

        const response = await this.request({
            path: `/api/v1/einstaklingar/{id}/fjolskyldumedlimir`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => FjolskyldumedlimirFromJSON(jsonValue));
    }

    /**
     * Get a list of family members with detailed information for each family member.
     */
    async einstaklingarGetFjolskyldumedlimir(requestParameters: EinstaklingarGetFjolskyldumedlimirRequest): Promise<Fjolskyldumedlimir> {
        const response = await this.einstaklingarGetFjolskyldumedlimirRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get the list of childrens the individual has custody of.
     */
    async einstaklingarGetForsjaRaw(requestParameters: EinstaklingarGetForsjaRequest): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling einstaklingarGetForsja.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // auth authentication
        }

        const response = await this.request({
            path: `/api/v1/einstaklingar/{id}/forsja`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get the list of childrens the individual has custody of.
     */
    async einstaklingarGetForsja(requestParameters: EinstaklingarGetForsjaRequest): Promise<Array<string>> {
        const response = await this.einstaklingarGetForsjaRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get the parents that have custody of the child.
     */
    async einstaklingarGetForsjaForeldriRaw(requestParameters: EinstaklingarGetForsjaForeldriRequest): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling einstaklingarGetForsjaForeldri.');
        }

        if (requestParameters.barn === null || requestParameters.barn === undefined) {
            throw new runtime.RequiredError('barn','Required parameter requestParameters.barn was null or undefined when calling einstaklingarGetForsjaForeldri.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // auth authentication
        }

        const response = await this.request({
            path: `/api/v1/einstaklingar/{id}/forsja/{barn}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"barn"}}`, encodeURIComponent(String(requestParameters.barn))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get the parents that have custody of the child.
     */
    async einstaklingarGetForsjaForeldri(requestParameters: EinstaklingarGetForsjaForeldriRequest): Promise<Array<string>> {
        const response = await this.einstaklingarGetForsjaForeldriRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get the cohabitation information for an individual.
     */
    async einstaklingarGetHjuskapurRaw(requestParameters: EinstaklingarGetHjuskapurRequest): Promise<runtime.ApiResponse<Hjuskapur>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling einstaklingarGetHjuskapur.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // auth authentication
        }

        const response = await this.request({
            path: `/api/v1/einstaklingar/{id}/hjuskapur`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => HjuskapurFromJSON(jsonValue));
    }

    /**
     * Get the cohabitation information for an individual.
     */
    async einstaklingarGetHjuskapur(requestParameters: EinstaklingarGetHjuskapurRequest): Promise<Hjuskapur> {
        const response = await this.einstaklingarGetHjuskapurRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get all the children the individual is a legal parent of.
     */
    async einstaklingarGetLogbornRaw(requestParameters: EinstaklingarGetLogbornRequest): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling einstaklingarGetLogborn.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // auth authentication
        }

        const response = await this.request({
            path: `/api/v1/einstaklingar/{id}/logborn`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get all the children the individual is a legal parent of.
     */
    async einstaklingarGetLogborn(requestParameters: EinstaklingarGetLogbornRequest): Promise<Array<string>> {
        const response = await this.einstaklingarGetLogbornRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get the legal parents of an individual.
     */
    async einstaklingarGetLogforeldrarRaw(requestParameters: EinstaklingarGetLogforeldrarRequest): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling einstaklingarGetLogforeldrar.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // auth authentication
        }

        const response = await this.request({
            path: `/api/v1/einstaklingar/{id}/logforeldrar`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get the legal parents of an individual.
     */
    async einstaklingarGetLogforeldrar(requestParameters: EinstaklingarGetLogforeldrarRequest): Promise<Array<string>> {
        const response = await this.einstaklingarGetLogforeldrarRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get the legal domicile for an individual.
     */
    async einstaklingarGetLogheimiliRaw(requestParameters: EinstaklingarGetLogheimiliRequest): Promise<runtime.ApiResponse<Heimili>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling einstaklingarGetLogheimili.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // auth authentication
        }

        const response = await this.request({
            path: `/api/v1/einstaklingar/{id}/logheimili`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => HeimiliFromJSON(jsonValue));
    }

    /**
     * Get the legal domicile for an individual.
     */
    async einstaklingarGetLogheimili(requestParameters: EinstaklingarGetLogheimiliRequest): Promise<Heimili> {
        const response = await this.einstaklingarGetLogheimiliRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get the list of legal domicile parents
     */
    async einstaklingarGetLogheimilisForeldriRaw(requestParameters: EinstaklingarGetLogheimilisForeldriRequest): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters.barn === null || requestParameters.barn === undefined) {
            throw new runtime.RequiredError('barn','Required parameter requestParameters.barn was null or undefined when calling einstaklingarGetLogheimilisForeldri.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // auth authentication
        }

        const response = await this.request({
            path: `/api/v1/einstaklingar/{barn}/logheimilisforeldri`.replace(`{${"barn"}}`, encodeURIComponent(String(requestParameters.barn))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get the list of legal domicile parents
     */
    async einstaklingarGetLogheimilisForeldri(requestParameters: EinstaklingarGetLogheimilisForeldriRequest): Promise<Array<string>> {
        const response = await this.einstaklingarGetLogheimilisForeldriRaw(requestParameters);
        return await response.value();
    }

    /**
     * Is the individual of legal age.
     */
    async einstaklingarGetLogradaRaw(requestParameters: EinstaklingarGetLogradaRequest): Promise<runtime.ApiResponse<Lograda>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling einstaklingarGetLograda.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // auth authentication
        }

        const response = await this.request({
            path: `/api/v1/einstaklingar/{id}/lograda`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => LogradaFromJSON(jsonValue));
    }

    /**
     * Is the individual of legal age.
     */
    async einstaklingarGetLograda(requestParameters: EinstaklingarGetLogradaRequest): Promise<Lograda> {
        const response = await this.einstaklingarGetLogradaRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get the citizenship for an individual.
     */
    async einstaklingarGetRikisfangRaw(requestParameters: EinstaklingarGetRikisfangRequest): Promise<runtime.ApiResponse<Rikisfang>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling einstaklingarGetRikisfang.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // auth authentication
        }

        const response = await this.request({
            path: `/api/v1/einstaklingar/{id}/rikisfang`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RikisfangFromJSON(jsonValue));
    }

    /**
     * Get the citizenship for an individual.
     */
    async einstaklingarGetRikisfang(requestParameters: EinstaklingarGetRikisfangRequest): Promise<Rikisfang> {
        const response = await this.einstaklingarGetRikisfangRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get the list of residents that live with the individual.
     */
    async einstaklingarGetSamibuarRaw(requestParameters: EinstaklingarGetSamibuarRequest): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling einstaklingarGetSamibuar.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // auth authentication
        }

        const response = await this.request({
            path: `/api/v1/einstaklingar/{id}/samibuar`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get the list of residents that live with the individual.
     */
    async einstaklingarGetSamibuar(requestParameters: EinstaklingarGetSamibuarRequest): Promise<Array<string>> {
        const response = await this.einstaklingarGetSamibuarRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get the religion registration for an individual.
     */
    async einstaklingarGetTrufelagRaw(requestParameters: EinstaklingarGetTrufelagRequest): Promise<runtime.ApiResponse<Trufelagsskraning>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling einstaklingarGetTrufelag.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // auth authentication
        }

        const response = await this.request({
            path: `/api/v1/einstaklingar/{id}/trufelag`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TrufelagsskraningFromJSON(jsonValue));
    }

    /**
     * Get the religion registration for an individual.
     */
    async einstaklingarGetTrufelag(requestParameters: EinstaklingarGetTrufelagRequest): Promise<Trufelagsskraning> {
        const response = await this.einstaklingarGetTrufelagRaw(requestParameters);
        return await response.value();
    }

}
