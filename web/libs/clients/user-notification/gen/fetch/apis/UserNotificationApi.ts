/* tslint:disable */
/* eslint-disable */
/**
 * Notification Service
 * Creates and stores notifications AND sends as mobile push notifications and emails
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    HttpProblemResponse,
    HttpProblemResponseFromJSON,
    HttpProblemResponseToJSON,
    PaginatedNotificationDto,
    PaginatedNotificationDtoFromJSON,
    PaginatedNotificationDtoToJSON,
    RenderedNotificationDto,
    RenderedNotificationDtoFromJSON,
    RenderedNotificationDtoToJSON,
    UnreadNotificationsCountDto,
    UnreadNotificationsCountDtoFromJSON,
    UnreadNotificationsCountDtoToJSON,
    UnseenNotificationsCountDto,
    UnseenNotificationsCountDtoFromJSON,
    UnseenNotificationsCountDtoToJSON,
    UpdateNotificationDto,
    UpdateNotificationDtoFromJSON,
    UpdateNotificationDtoToJSON,
} from '../models';

export interface MeNotificationsControllerFindManyRequest {
    limit?: number;
    before?: string;
    after?: string;
    locale?: string;
}

export interface MeNotificationsControllerFindOneRequest {
    id: number;
    locale: string;
}

export interface MeNotificationsControllerUpdateRequest {
    id: number;
    locale: string;
    updateNotificationDto: UpdateNotificationDto;
}

/**
 * 
 */
export class UserNotificationApi extends runtime.BaseAPI {

    /**
     * Returns a paginated list of current user notifications
     */
    async meNotificationsControllerFindManyRaw(requestParameters: MeNotificationsControllerFindManyRequest): Promise<runtime.ApiResponse<PaginatedNotificationDto>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.before !== undefined) {
            queryParameters['before'] = requestParameters.before;
        }

        if (requestParameters.after !== undefined) {
            queryParameters['after'] = requestParameters.after;
        }

        if (requestParameters.locale !== undefined) {
            queryParameters['locale'] = requestParameters.locale;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", ["@island.is/documents"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/v1/me/notifications`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedNotificationDtoFromJSON(jsonValue));
    }

    /**
     * Returns a paginated list of current user notifications
     */
    async meNotificationsControllerFindMany(requestParameters: MeNotificationsControllerFindManyRequest): Promise<PaginatedNotificationDto> {
        const response = await this.meNotificationsControllerFindManyRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns current user specific notification
     */
    async meNotificationsControllerFindOneRaw(requestParameters: MeNotificationsControllerFindOneRequest): Promise<runtime.ApiResponse<RenderedNotificationDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling meNotificationsControllerFindOne.');
        }

        if (requestParameters.locale === null || requestParameters.locale === undefined) {
            throw new runtime.RequiredError('locale','Required parameter requestParameters.locale was null or undefined when calling meNotificationsControllerFindOne.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.locale !== undefined) {
            queryParameters['locale'] = requestParameters.locale;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", ["@island.is/documents"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/v1/me/notifications/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RenderedNotificationDtoFromJSON(jsonValue));
    }

    /**
     * Returns current user specific notification
     */
    async meNotificationsControllerFindOne(requestParameters: MeNotificationsControllerFindOneRequest): Promise<RenderedNotificationDto> {
        const response = await this.meNotificationsControllerFindOneRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns a count of unread notifications for the current user
     */
    async meNotificationsControllerGetUnreadNotificationsCountRaw(): Promise<runtime.ApiResponse<UnreadNotificationsCountDto>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", ["@island.is/documents"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/v1/me/notifications/unread-count`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UnreadNotificationsCountDtoFromJSON(jsonValue));
    }

    /**
     * Returns a count of unread notifications for the current user
     */
    async meNotificationsControllerGetUnreadNotificationsCount(): Promise<UnreadNotificationsCountDto> {
        const response = await this.meNotificationsControllerGetUnreadNotificationsCountRaw();
        return await response.value();
    }

    /**
     * Returns a count of unseen notifications for the current user
     */
    async meNotificationsControllerGetUnseenNotificationsCountRaw(): Promise<runtime.ApiResponse<UnseenNotificationsCountDto>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", ["@island.is/documents"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/v1/me/notifications/unseen-count`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UnseenNotificationsCountDtoFromJSON(jsonValue));
    }

    /**
     * Returns a count of unseen notifications for the current user
     */
    async meNotificationsControllerGetUnseenNotificationsCount(): Promise<UnseenNotificationsCountDto> {
        const response = await this.meNotificationsControllerGetUnseenNotificationsCountRaw();
        return await response.value();
    }

    /**
     * Updates all of  current user notifications as read
     */
    async meNotificationsControllerMarkAllAsReadRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", ["@island.is/documents"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/v1/me/notifications/mark-all-as-read`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates all of  current user notifications as read
     */
    async meNotificationsControllerMarkAllAsRead(): Promise<void> {
        await this.meNotificationsControllerMarkAllAsReadRaw();
    }

    /**
     * Updates all of  current user notifications as seen
     */
    async meNotificationsControllerMarkAllAsSeenRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", ["@island.is/documents"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/v1/me/notifications/mark-all-as-seen`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates all of  current user notifications as seen
     */
    async meNotificationsControllerMarkAllAsSeen(): Promise<void> {
        await this.meNotificationsControllerMarkAllAsSeenRaw();
    }

    /**
     * Updates current user specific notification
     */
    async meNotificationsControllerUpdateRaw(requestParameters: MeNotificationsControllerUpdateRequest): Promise<runtime.ApiResponse<RenderedNotificationDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling meNotificationsControllerUpdate.');
        }

        if (requestParameters.locale === null || requestParameters.locale === undefined) {
            throw new runtime.RequiredError('locale','Required parameter requestParameters.locale was null or undefined when calling meNotificationsControllerUpdate.');
        }

        if (requestParameters.updateNotificationDto === null || requestParameters.updateNotificationDto === undefined) {
            throw new runtime.RequiredError('updateNotificationDto','Required parameter requestParameters.updateNotificationDto was null or undefined when calling meNotificationsControllerUpdate.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.locale !== undefined) {
            queryParameters['locale'] = requestParameters.locale;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", ["@island.is/documents"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/v1/me/notifications/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateNotificationDtoToJSON(requestParameters.updateNotificationDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RenderedNotificationDtoFromJSON(jsonValue));
    }

    /**
     * Updates current user specific notification
     */
    async meNotificationsControllerUpdate(requestParameters: MeNotificationsControllerUpdateRequest): Promise<RenderedNotificationDto> {
        const response = await this.meNotificationsControllerUpdateRaw(requestParameters);
        return await response.value();
    }

}
