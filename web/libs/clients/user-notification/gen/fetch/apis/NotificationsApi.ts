/* tslint:disable */
/* eslint-disable */
/**
 * Notification Service
 * Creates and stores notifications AND sends as mobile push notifications and emails
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateHnippNotificationDto,
    CreateHnippNotificationDtoFromJSON,
    CreateHnippNotificationDtoToJSON,
    CreateNotificationResponse,
    CreateNotificationResponseFromJSON,
    CreateNotificationResponseToJSON,
    HnippTemplate,
    HnippTemplateFromJSON,
    HnippTemplateToJSON,
    HttpProblemResponse,
    HttpProblemResponseFromJSON,
    HttpProblemResponseToJSON,
    PaginatedNotificationDto,
    PaginatedNotificationDtoFromJSON,
    PaginatedNotificationDtoToJSON,
} from '../models';

export interface NotificationsControllerCreateHnippNotificationRequest {
    createHnippNotificationDto: CreateHnippNotificationDto;
}

export interface NotificationsControllerFindManyRequest {
    xQueryNationalId: string;
    limit?: number;
    before?: string;
    after?: string;
    locale?: string;
}

export interface NotificationsControllerGetNotificationTemplateRequest {
    templateId: string;
    locale?: string;
}

export interface NotificationsControllerGetNotificationTemplatesRequest {
    locale?: string;
}

/**
 * 
 */
export class NotificationsApi extends runtime.BaseAPI {

    /**
     * Creates a new notification and adds to queue
     */
    async notificationsControllerCreateHnippNotificationRaw(requestParameters: NotificationsControllerCreateHnippNotificationRequest): Promise<runtime.ApiResponse<CreateNotificationResponse>> {
        if (requestParameters.createHnippNotificationDto === null || requestParameters.createHnippNotificationDto === undefined) {
            throw new runtime.RequiredError('createHnippNotificationDto','Required parameter requestParameters.createHnippNotificationDto was null or undefined when calling notificationsControllerCreateHnippNotification.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/notifications`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateHnippNotificationDtoToJSON(requestParameters.createHnippNotificationDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateNotificationResponseFromJSON(jsonValue));
    }

    /**
     * Creates a new notification and adds to queue
     */
    async notificationsControllerCreateHnippNotification(requestParameters: NotificationsControllerCreateHnippNotificationRequest): Promise<CreateNotificationResponse> {
        const response = await this.notificationsControllerCreateHnippNotificationRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns a paginated list of notifications for a national id
     */
    async notificationsControllerFindManyRaw(requestParameters: NotificationsControllerFindManyRequest): Promise<runtime.ApiResponse<PaginatedNotificationDto>> {
        if (requestParameters.xQueryNationalId === null || requestParameters.xQueryNationalId === undefined) {
            throw new runtime.RequiredError('xQueryNationalId','Required parameter requestParameters.xQueryNationalId was null or undefined when calling notificationsControllerFindMany.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.before !== undefined) {
            queryParameters['before'] = requestParameters.before;
        }

        if (requestParameters.after !== undefined) {
            queryParameters['after'] = requestParameters.after;
        }

        if (requestParameters.locale !== undefined) {
            queryParameters['locale'] = requestParameters.locale;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xQueryNationalId !== undefined && requestParameters.xQueryNationalId !== null) {
            headerParameters['X-Query-National-Id'] = String(requestParameters.xQueryNationalId);
        }

        const response = await this.request({
            path: `/notifications`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedNotificationDtoFromJSON(jsonValue));
    }

    /**
     * Returns a paginated list of notifications for a national id
     */
    async notificationsControllerFindMany(requestParameters: NotificationsControllerFindManyRequest): Promise<PaginatedNotificationDto> {
        const response = await this.notificationsControllerFindManyRaw(requestParameters);
        return await response.value();
    }

    /**
     * Fetches a single notification template
     */
    async notificationsControllerGetNotificationTemplateRaw(requestParameters: NotificationsControllerGetNotificationTemplateRequest): Promise<runtime.ApiResponse<HnippTemplate>> {
        if (requestParameters.templateId === null || requestParameters.templateId === undefined) {
            throw new runtime.RequiredError('templateId','Required parameter requestParameters.templateId was null or undefined when calling notificationsControllerGetNotificationTemplate.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.locale !== undefined) {
            queryParameters['locale'] = requestParameters.locale;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/notifications/template/{templateId}`.replace(`{${"templateId"}}`, encodeURIComponent(String(requestParameters.templateId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => HnippTemplateFromJSON(jsonValue));
    }

    /**
     * Fetches a single notification template
     */
    async notificationsControllerGetNotificationTemplate(requestParameters: NotificationsControllerGetNotificationTemplateRequest): Promise<HnippTemplate> {
        const response = await this.notificationsControllerGetNotificationTemplateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Fetches all notification templates
     */
    async notificationsControllerGetNotificationTemplatesRaw(requestParameters: NotificationsControllerGetNotificationTemplatesRequest): Promise<runtime.ApiResponse<Array<HnippTemplate>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.locale !== undefined) {
            queryParameters['locale'] = requestParameters.locale;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/notifications/templates`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(HnippTemplateFromJSON));
    }

    /**
     * Fetches all notification templates
     */
    async notificationsControllerGetNotificationTemplates(requestParameters: NotificationsControllerGetNotificationTemplatesRequest): Promise<Array<HnippTemplate>> {
        const response = await this.notificationsControllerGetNotificationTemplatesRaw(requestParameters);
        return await response.value();
    }

}
