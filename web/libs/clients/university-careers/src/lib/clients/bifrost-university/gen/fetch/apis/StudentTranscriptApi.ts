/* tslint:disable */
/* eslint-disable */
/**
 * Útskriftargögn nemenda
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: help@hi.is
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    StudentTrackOverview,
    StudentTrackOverviewFromJSON,
    StudentTrackOverviewToJSON,
    Transcripts,
    TranscriptsFromJSON,
    TranscriptsToJSON,
} from '../models';

export interface NemandiFerillFerillFileTranscriptGetRequest {
    ferill: number;
    locale?: NemandiFerillFerillFileTranscriptGetLocaleEnum;
}

export interface NemandiFerillFerillGetRequest {
    ferill: number;
    locale?: NemandiFerillFerillGetLocaleEnum;
}

export interface NemandiGetRequest {
    locale?: NemandiGetLocaleEnum;
}

/**
 * 
 */
export class StudentTranscriptApi extends runtime.BaseAPI {

    /**
     * Skilar útskriftargögnum á pdf formi
     */
    async nemandiFerillFerillFileTranscriptGetRaw(requestParameters: NemandiFerillFerillFileTranscriptGetRequest): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters.ferill === null || requestParameters.ferill === undefined) {
            throw new runtime.RequiredError('ferill','Required parameter requestParameters.ferill was null or undefined when calling nemandiFerillFerillFileTranscriptGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.locale !== undefined) {
            queryParameters['locale'] = requestParameters.locale;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/nemandi/ferill/{ferill}/file/transcript`.replace(`{${"ferill"}}`, encodeURIComponent(String(requestParameters.ferill))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Skilar útskriftargögnum á pdf formi
     */
    async nemandiFerillFerillFileTranscriptGet(requestParameters: NemandiFerillFerillFileTranscriptGetRequest): Promise<Blob> {
        const response = await this.nemandiFerillFerillFileTranscriptGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Ferill nemanda með brautskráningu, ásamt listi af fælum tengt brauskráningaryfirliti
     */
    async nemandiFerillFerillGetRaw(requestParameters: NemandiFerillFerillGetRequest): Promise<runtime.ApiResponse<StudentTrackOverview>> {
        if (requestParameters.ferill === null || requestParameters.ferill === undefined) {
            throw new runtime.RequiredError('ferill','Required parameter requestParameters.ferill was null or undefined when calling nemandiFerillFerillGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.locale !== undefined) {
            queryParameters['locale'] = requestParameters.locale;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/nemandi/ferill/{ferill}`.replace(`{${"ferill"}}`, encodeURIComponent(String(requestParameters.ferill))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => StudentTrackOverviewFromJSON(jsonValue));
    }

    /**
     * Ferill nemanda með brautskráningu, ásamt listi af fælum tengt brauskráningaryfirliti
     */
    async nemandiFerillFerillGet(requestParameters: NemandiFerillFerillGetRequest): Promise<StudentTrackOverview> {
        const response = await this.nemandiFerillFerillGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Listi yfir ferla sem nemandi hefur brauskrást af
     */
    async nemandiGetRaw(requestParameters: NemandiGetRequest): Promise<runtime.ApiResponse<Transcripts>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.locale !== undefined) {
            queryParameters['locale'] = requestParameters.locale;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/nemandi`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TranscriptsFromJSON(jsonValue));
    }

    /**
     * Listi yfir ferla sem nemandi hefur brauskrást af
     */
    async nemandiGet(requestParameters: NemandiGetRequest): Promise<Transcripts> {
        const response = await this.nemandiGetRaw(requestParameters);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum NemandiFerillFerillFileTranscriptGetLocaleEnum {
    Is = 'is',
    En = 'en'
}
/**
    * @export
    * @enum {string}
    */
export enum NemandiFerillFerillGetLocaleEnum {
    Is = 'is',
    En = 'en'
}
/**
    * @export
    * @enum {string}
    */
export enum NemandiGetLocaleEnum {
    Is = 'is',
    En = 'en'
}
