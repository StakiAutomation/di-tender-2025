/* tslint:disable */
/* eslint-disable */
/**
 * Samradsgatt.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    SubscriptionType,
    SubscriptionTypeFromJSON,
    SubscriptionTypeFromJSONTyped,
    SubscriptionTypeToJSON,
    UserCaseSubscriptionResult,
    UserCaseSubscriptionResultFromJSON,
    UserCaseSubscriptionResultFromJSONTyped,
    UserCaseSubscriptionResultToJSON,
    UserSubscriptionResult,
    UserSubscriptionResultFromJSON,
    UserSubscriptionResultFromJSONTyped,
    UserSubscriptionResultToJSON,
} from './';

/**
 * 
 * @export
 * @interface UserSubscriptionsAggregate
 */
export interface UserSubscriptionsAggregate {
    /**
     * 
     * @type {boolean}
     * @memberof UserSubscriptionsAggregate
     */
    subscribedToAll?: boolean;
    /**
     * 
     * @type {SubscriptionType}
     * @memberof UserSubscriptionsAggregate
     */
    subscribedToAllType?: SubscriptionType;
    /**
     * 
     * @type {Array<UserCaseSubscriptionResult>}
     * @memberof UserSubscriptionsAggregate
     */
    cases?: Array<UserCaseSubscriptionResult> | null;
    /**
     * 
     * @type {Array<UserSubscriptionResult>}
     * @memberof UserSubscriptionsAggregate
     */
    institutions?: Array<UserSubscriptionResult> | null;
    /**
     * 
     * @type {Array<UserSubscriptionResult>}
     * @memberof UserSubscriptionsAggregate
     */
    policyAreas?: Array<UserSubscriptionResult> | null;
}

export function UserSubscriptionsAggregateFromJSON(json: any): UserSubscriptionsAggregate {
    return UserSubscriptionsAggregateFromJSONTyped(json, false);
}

export function UserSubscriptionsAggregateFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserSubscriptionsAggregate {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'subscribedToAll': !exists(json, 'subscribedToAll') ? undefined : json['subscribedToAll'],
        'subscribedToAllType': !exists(json, 'subscribedToAllType') ? undefined : SubscriptionTypeFromJSON(json['subscribedToAllType']),
        'cases': !exists(json, 'cases') ? undefined : (json['cases'] === null ? null : (json['cases'] as Array<any>).map(UserCaseSubscriptionResultFromJSON)),
        'institutions': !exists(json, 'institutions') ? undefined : (json['institutions'] === null ? null : (json['institutions'] as Array<any>).map(UserSubscriptionResultFromJSON)),
        'policyAreas': !exists(json, 'policyAreas') ? undefined : (json['policyAreas'] === null ? null : (json['policyAreas'] as Array<any>).map(UserSubscriptionResultFromJSON)),
    };
}

export function UserSubscriptionsAggregateToJSON(value?: UserSubscriptionsAggregate | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'subscribedToAll': value.subscribedToAll,
        'subscribedToAllType': SubscriptionTypeToJSON(value.subscribedToAllType),
        'cases': value.cases === undefined ? undefined : (value.cases === null ? null : (value.cases as Array<any>).map(UserCaseSubscriptionResultToJSON)),
        'institutions': value.institutions === undefined ? undefined : (value.institutions === null ? null : (value.institutions as Array<any>).map(UserSubscriptionResultToJSON)),
        'policyAreas': value.policyAreas === undefined ? undefined : (value.policyAreas === null ? null : (value.policyAreas as Array<any>).map(UserSubscriptionResultToJSON)),
    };
}


