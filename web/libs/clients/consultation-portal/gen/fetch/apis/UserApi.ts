/* tslint:disable */
/* eslint-disable */
/**
 * Samradsgatt.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    PostEmailCommand,
    PostEmailCommandFromJSON,
    PostEmailCommandToJSON,
    PostUserSubscriptionsCommand,
    PostUserSubscriptionsCommandFromJSON,
    PostUserSubscriptionsCommandToJSON,
    UserAdviceAggregate,
    UserAdviceAggregateFromJSON,
    UserAdviceAggregateToJSON,
    UserEmailResult,
    UserEmailResultFromJSON,
    UserEmailResultToJSON,
    UserSubscriptionsAggregate,
    UserSubscriptionsAggregateFromJSON,
    UserSubscriptionsAggregateToJSON,
} from '../models';

export interface ApiUserAdvicesGetRequest {
    oldestFirst?: boolean;
    searchQuery?: string;
    pageNumber?: number;
    pageSize?: number;
}

export interface ApiUserEmailPostRequest {
    postEmailCommand?: PostEmailCommand;
}

export interface ApiUserSubscriptionsPostRequest {
    postUserSubscriptionsCommand?: PostUserSubscriptionsCommand;
}

/**
 * 
 */
export class UserApi extends runtime.BaseAPI {

    /**
     */
    async apiUserAdvicesGetRaw(requestParameters: ApiUserAdvicesGetRequest): Promise<runtime.ApiResponse<UserAdviceAggregate>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.oldestFirst !== undefined) {
            queryParameters['OldestFirst'] = requestParameters.oldestFirst;
        }

        if (requestParameters.searchQuery !== undefined) {
            queryParameters['SearchQuery'] = requestParameters.searchQuery;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['PageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['PageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/User/Advices`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserAdviceAggregateFromJSON(jsonValue));
    }

    /**
     */
    async apiUserAdvicesGet(requestParameters: ApiUserAdvicesGetRequest): Promise<UserAdviceAggregate> {
        const response = await this.apiUserAdvicesGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiUserEmailGetRaw(): Promise<runtime.ApiResponse<UserEmailResult>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/User/Email`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserEmailResultFromJSON(jsonValue));
    }

    /**
     */
    async apiUserEmailGet(): Promise<UserEmailResult> {
        const response = await this.apiUserEmailGetRaw();
        return await response.value();
    }

    /**
     */
    async apiUserEmailPostRaw(requestParameters: ApiUserEmailPostRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/User/Email`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostEmailCommandToJSON(requestParameters.postEmailCommand),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiUserEmailPost(requestParameters: ApiUserEmailPostRequest): Promise<void> {
        await this.apiUserEmailPostRaw(requestParameters);
    }

    /**
     */
    async apiUserSubscriptionsGetRaw(): Promise<runtime.ApiResponse<UserSubscriptionsAggregate>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/User/Subscriptions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserSubscriptionsAggregateFromJSON(jsonValue));
    }

    /**
     */
    async apiUserSubscriptionsGet(): Promise<UserSubscriptionsAggregate> {
        const response = await this.apiUserSubscriptionsGetRaw();
        return await response.value();
    }

    /**
     */
    async apiUserSubscriptionsPostRaw(requestParameters: ApiUserSubscriptionsPostRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/User/Subscriptions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostUserSubscriptionsCommandToJSON(requestParameters.postUserSubscriptionsCommand),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiUserSubscriptionsPost(requestParameters: ApiUserSubscriptionsPostRequest): Promise<void> {
        await this.apiUserSubscriptionsPostRaw(requestParameters);
    }

}
