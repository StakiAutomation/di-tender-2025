/* tslint:disable */
/* eslint-disable */
/**
 * Samradsgatt.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CaseSubscriptionResult,
    CaseSubscriptionResultFromJSON,
    CaseSubscriptionResultToJSON,
    PostCaseSubscriptionCommand,
    PostCaseSubscriptionCommandFromJSON,
    PostCaseSubscriptionCommandToJSON,
} from '../models';

export interface ApiCaseSubscriptionCaseIdDeleteRequest {
    caseId: number;
}

export interface ApiCaseSubscriptionCaseIdGetRequest {
    caseId: number;
}

export interface ApiCaseSubscriptionCaseIdPostRequest {
    caseId: number;
    postCaseSubscriptionCommand?: PostCaseSubscriptionCommand;
}

/**
 * 
 */
export class CaseSubscriptionApi extends runtime.BaseAPI {

    /**
     */
    async apiCaseSubscriptionCaseIdDeleteRaw(requestParameters: ApiCaseSubscriptionCaseIdDeleteRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.caseId === null || requestParameters.caseId === undefined) {
            throw new runtime.RequiredError('caseId','Required parameter requestParameters.caseId was null or undefined when calling apiCaseSubscriptionCaseIdDelete.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/CaseSubscription/{caseId}`.replace(`{${"caseId"}}`, encodeURIComponent(String(requestParameters.caseId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiCaseSubscriptionCaseIdDelete(requestParameters: ApiCaseSubscriptionCaseIdDeleteRequest): Promise<void> {
        await this.apiCaseSubscriptionCaseIdDeleteRaw(requestParameters);
    }

    /**
     */
    async apiCaseSubscriptionCaseIdGetRaw(requestParameters: ApiCaseSubscriptionCaseIdGetRequest): Promise<runtime.ApiResponse<CaseSubscriptionResult>> {
        if (requestParameters.caseId === null || requestParameters.caseId === undefined) {
            throw new runtime.RequiredError('caseId','Required parameter requestParameters.caseId was null or undefined when calling apiCaseSubscriptionCaseIdGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/CaseSubscription/{caseId}`.replace(`{${"caseId"}}`, encodeURIComponent(String(requestParameters.caseId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CaseSubscriptionResultFromJSON(jsonValue));
    }

    /**
     */
    async apiCaseSubscriptionCaseIdGet(requestParameters: ApiCaseSubscriptionCaseIdGetRequest): Promise<CaseSubscriptionResult> {
        const response = await this.apiCaseSubscriptionCaseIdGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiCaseSubscriptionCaseIdPostRaw(requestParameters: ApiCaseSubscriptionCaseIdPostRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.caseId === null || requestParameters.caseId === undefined) {
            throw new runtime.RequiredError('caseId','Required parameter requestParameters.caseId was null or undefined when calling apiCaseSubscriptionCaseIdPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/CaseSubscription/{caseId}`.replace(`{${"caseId"}}`, encodeURIComponent(String(requestParameters.caseId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostCaseSubscriptionCommandToJSON(requestParameters.postCaseSubscriptionCommand),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiCaseSubscriptionCaseIdPost(requestParameters: ApiCaseSubscriptionCaseIdPostRequest): Promise<void> {
        await this.apiCaseSubscriptionCaseIdPostRaw(requestParameters);
    }

}
