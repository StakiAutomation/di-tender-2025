/* tslint:disable */
/* eslint-disable */
/**
 * Samradsgatt.Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AdviceResult,
    AdviceResultFromJSON,
    AdviceResultToJSON,
    CaseResult,
    CaseResultFromJSON,
    CaseResultToJSON,
    CasesAggregateResult,
    CasesAggregateResultFromJSON,
    CasesAggregateResultToJSON,
    CasesOrderBy,
    CasesOrderByFromJSON,
    CasesOrderByToJSON,
    PostCaseAdviceCommand,
    PostCaseAdviceCommandFromJSON,
    PostCaseAdviceCommandToJSON,
    ValidationResult,
    ValidationResultFromJSON,
    ValidationResultToJSON,
} from '../models';

export interface ApiCasesCaseIdAdvicesGetRequest {
    caseId: number;
}

export interface ApiCasesCaseIdAdvicesPostRequest {
    caseId: number;
    postCaseAdviceCommand?: PostCaseAdviceCommand;
}

export interface ApiCasesCaseIdGetRequest {
    caseId: number;
}

export interface ApiCasesGetRequest {
    searchQuery?: string;
    policyAreas?: Array<number>;
    institutions?: Array<number>;
    caseStatuses?: Array<number>;
    caseTypes?: Array<number>;
    dateFrom?: Date;
    dateTo?: Date;
    orderBy?: CasesOrderBy;
    pageNumber?: number;
    pageSize?: number;
}

/**
 * 
 */
export class CasesApi extends runtime.BaseAPI {

    /**
     */
    async apiCasesCaseIdAdvicesGetRaw(requestParameters: ApiCasesCaseIdAdvicesGetRequest): Promise<runtime.ApiResponse<Array<AdviceResult>>> {
        if (requestParameters.caseId === null || requestParameters.caseId === undefined) {
            throw new runtime.RequiredError('caseId','Required parameter requestParameters.caseId was null or undefined when calling apiCasesCaseIdAdvicesGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Cases/{caseId}/Advices`.replace(`{${"caseId"}}`, encodeURIComponent(String(requestParameters.caseId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AdviceResultFromJSON));
    }

    /**
     */
    async apiCasesCaseIdAdvicesGet(requestParameters: ApiCasesCaseIdAdvicesGetRequest): Promise<Array<AdviceResult>> {
        const response = await this.apiCasesCaseIdAdvicesGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiCasesCaseIdAdvicesPostRaw(requestParameters: ApiCasesCaseIdAdvicesPostRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.caseId === null || requestParameters.caseId === undefined) {
            throw new runtime.RequiredError('caseId','Required parameter requestParameters.caseId was null or undefined when calling apiCasesCaseIdAdvicesPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Cases/{caseId}/Advices`.replace(`{${"caseId"}}`, encodeURIComponent(String(requestParameters.caseId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostCaseAdviceCommandToJSON(requestParameters.postCaseAdviceCommand),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiCasesCaseIdAdvicesPost(requestParameters: ApiCasesCaseIdAdvicesPostRequest): Promise<void> {
        await this.apiCasesCaseIdAdvicesPostRaw(requestParameters);
    }

    /**
     */
    async apiCasesCaseIdGetRaw(requestParameters: ApiCasesCaseIdGetRequest): Promise<runtime.ApiResponse<CaseResult>> {
        if (requestParameters.caseId === null || requestParameters.caseId === undefined) {
            throw new runtime.RequiredError('caseId','Required parameter requestParameters.caseId was null or undefined when calling apiCasesCaseIdGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Cases/{caseId}`.replace(`{${"caseId"}}`, encodeURIComponent(String(requestParameters.caseId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CaseResultFromJSON(jsonValue));
    }

    /**
     */
    async apiCasesCaseIdGet(requestParameters: ApiCasesCaseIdGetRequest): Promise<CaseResult> {
        const response = await this.apiCasesCaseIdGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiCasesGetRaw(requestParameters: ApiCasesGetRequest): Promise<runtime.ApiResponse<CasesAggregateResult>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.searchQuery !== undefined) {
            queryParameters['SearchQuery'] = requestParameters.searchQuery;
        }

        if (requestParameters.policyAreas) {
            queryParameters['PolicyAreas'] = requestParameters.policyAreas;
        }

        if (requestParameters.institutions) {
            queryParameters['Institutions'] = requestParameters.institutions;
        }

        if (requestParameters.caseStatuses) {
            queryParameters['CaseStatuses'] = requestParameters.caseStatuses;
        }

        if (requestParameters.caseTypes) {
            queryParameters['CaseTypes'] = requestParameters.caseTypes;
        }

        if (requestParameters.dateFrom !== undefined) {
            queryParameters['DateFrom'] = (requestParameters.dateFrom as any).toISOString();
        }

        if (requestParameters.dateTo !== undefined) {
            queryParameters['DateTo'] = (requestParameters.dateTo as any).toISOString();
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['OrderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['PageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['PageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Cases`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CasesAggregateResultFromJSON(jsonValue));
    }

    /**
     */
    async apiCasesGet(requestParameters: ApiCasesGetRequest): Promise<CasesAggregateResult> {
        const response = await this.apiCasesGetRaw(requestParameters);
        return await response.value();
    }

}
