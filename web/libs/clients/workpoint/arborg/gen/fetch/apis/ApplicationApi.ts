/* tslint:disable */
/* eslint-disable */
/**
 * Tengill Application API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ApplicationFilesContent,
    ApplicationFilesContentFromJSON,
    ApplicationFilesContentToJSON,
    ApplicationSystemInput,
    ApplicationSystemInputFromJSON,
    ApplicationSystemInputToJSON,
    GetApplicationNumberResponse,
    GetApplicationNumberResponseFromJSON,
    GetApplicationNumberResponseToJSON,
    PostApplicationResponse,
    PostApplicationResponseFromJSON,
    PostApplicationResponseToJSON,
} from '../models';

export interface ApplicationIdGetRequest {
    id: string;
}

export interface ApplicationPostRequest {
    applicationSystemInput?: ApplicationSystemInput;
}

export interface ApplicationUploadPostRequest {
    applicationFilesContent?: ApplicationFilesContent;
}

/**
 * 
 */
export class ApplicationApi extends runtime.BaseAPI {

    /**
     */
    async applicationGetRaw(): Promise<runtime.ApiResponse<GetApplicationNumberResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/application`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetApplicationNumberResponseFromJSON(jsonValue));
    }

    /**
     */
    async applicationGet(): Promise<GetApplicationNumberResponse> {
        const response = await this.applicationGetRaw();
        return await response.value();
    }

    /**
     */
    async applicationIdGetRaw(requestParameters: ApplicationIdGetRequest): Promise<runtime.ApiResponse<GetApplicationNumberResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling applicationIdGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/application/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetApplicationNumberResponseFromJSON(jsonValue));
    }

    /**
     */
    async applicationIdGet(requestParameters: ApplicationIdGetRequest): Promise<GetApplicationNumberResponse> {
        const response = await this.applicationIdGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async applicationPostRaw(requestParameters: ApplicationPostRequest): Promise<runtime.ApiResponse<PostApplicationResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/application`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApplicationSystemInputToJSON(requestParameters.applicationSystemInput),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PostApplicationResponseFromJSON(jsonValue));
    }

    /**
     */
    async applicationPost(requestParameters: ApplicationPostRequest): Promise<PostApplicationResponse> {
        const response = await this.applicationPostRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async applicationUploadPostRaw(requestParameters: ApplicationUploadPostRequest): Promise<runtime.ApiResponse<PostApplicationResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/application/upload`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApplicationFilesContentToJSON(requestParameters.applicationFilesContent),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PostApplicationResponseFromJSON(jsonValue));
    }

    /**
     */
    async applicationUploadPost(requestParameters: ApplicationUploadPostRequest): Promise<PostApplicationResponse> {
        const response = await this.applicationUploadPostRaw(requestParameters);
        return await response.value();
    }

}
