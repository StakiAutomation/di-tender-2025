/* tslint:disable */
/* eslint-disable */
/**
 * Session log API
 * Session log to track user sessions.   The swagger document can be downloaded by appending `-json` to the last path segment.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateSessionDto,
    CreateSessionDtoFromJSON,
    CreateSessionDtoToJSON,
    HttpProblemResponse,
    HttpProblemResponseFromJSON,
    HttpProblemResponseToJSON,
    Order,
    OrderFromJSON,
    OrderToJSON,
    SessionsResultDto,
    SessionsResultDtoFromJSON,
    SessionsResultDtoToJSON,
} from '../models';

export interface SessionsControllerCreateRequest {
    createSessionDto: CreateSessionDto;
}

export interface SessionsControllerFindAllRequest {
    limit?: number;
    before?: string;
    after?: string;
    from?: Date;
    to?: Date;
    order?: Order;
    xQueryOtherUser?: string;
}

/**
 * 
 */
export class SessionsApi extends runtime.BaseAPI {

    /**
     * Register a user session.
     */
    async sessionsControllerCreateRaw(requestParameters: SessionsControllerCreateRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.createSessionDto === null || requestParameters.createSessionDto === undefined) {
            throw new runtime.RequiredError('createSessionDto','Required parameter requestParameters.createSessionDto was null or undefined when calling sessionsControllerCreate.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("ias", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/v1/me/sessions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateSessionDtoToJSON(requestParameters.createSessionDto),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Register a user session.
     */
    async sessionsControllerCreate(requestParameters: SessionsControllerCreateRequest): Promise<void> {
        await this.sessionsControllerCreateRaw(requestParameters);
    }

    /**
     * Get all sessions for the authenticated user.
     */
    async sessionsControllerFindAllRaw(requestParameters: SessionsControllerFindAllRequest): Promise<runtime.ApiResponse<SessionsResultDto>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.before !== undefined) {
            queryParameters['before'] = requestParameters.before;
        }

        if (requestParameters.after !== undefined) {
            queryParameters['after'] = requestParameters.after;
        }

        if (requestParameters.from !== undefined) {
            queryParameters['from'] = (requestParameters.from as any).toISOString();
        }

        if (requestParameters.to !== undefined) {
            queryParameters['to'] = (requestParameters.to as any).toISOString();
        }

        if (requestParameters.order !== undefined) {
            queryParameters['order'] = requestParameters.order;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xQueryOtherUser !== undefined && requestParameters.xQueryOtherUser !== null) {
            headerParameters['X-Query-OtherUser'] = String(requestParameters.xQueryOtherUser);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("ias", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/v1/me/sessions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SessionsResultDtoFromJSON(jsonValue));
    }

    /**
     * Get all sessions for the authenticated user.
     */
    async sessionsControllerFindAll(requestParameters: SessionsControllerFindAllRequest): Promise<SessionsResultDto> {
        const response = await this.sessionsControllerFindAllRaw(requestParameters);
        return await response.value();
    }

}
