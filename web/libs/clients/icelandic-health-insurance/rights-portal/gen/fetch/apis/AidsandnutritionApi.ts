/* tslint:disable */
/* eslint-disable */
/**
 * Minarsidur
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    MinarsidurAPIModelsAidsAndNutritionAidsAndNutritionDTO,
    MinarsidurAPIModelsAidsAndNutritionAidsAndNutritionDTOFromJSON,
    MinarsidurAPIModelsAidsAndNutritionAidsAndNutritionDTOToJSON,
} from '../models';

export interface RenewAidOrNutritionRequest {
    iso: string;
}

/**
 * 
 */
export class AidsandnutritionApi extends runtime.BaseAPI {

    /**
     */
    async getAidsAndNutritionRaw(): Promise<runtime.ApiResponse<MinarsidurAPIModelsAidsAndNutritionAidsAndNutritionDTO>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/aidsandnutrition`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MinarsidurAPIModelsAidsAndNutritionAidsAndNutritionDTOFromJSON(jsonValue));
    }

    /**
     */
    async getAidsAndNutrition(): Promise<MinarsidurAPIModelsAidsAndNutritionAidsAndNutritionDTO> {
        const response = await this.getAidsAndNutritionRaw();
        return await response.value();
    }

    /**
     */
    async renewAidOrNutritionRaw(requestParameters: RenewAidOrNutritionRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.iso === null || requestParameters.iso === undefined) {
            throw new runtime.RequiredError('iso','Required parameter requestParameters.iso was null or undefined when calling renewAidOrNutrition.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/aidsandnutrition/{iso}/renew`.replace(`{${"iso"}}`, encodeURIComponent(String(requestParameters.iso))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async renewAidOrNutrition(requestParameters: RenewAidOrNutritionRequest): Promise<void> {
        await this.renewAidOrNutritionRaw(requestParameters);
    }

}
