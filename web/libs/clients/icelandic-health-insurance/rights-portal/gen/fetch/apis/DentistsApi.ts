/* tslint:disable */
/* eslint-disable */
/**
 * Minarsidur
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    MinarsidurAPIModelsDentistsCurrentDentistDTO,
    MinarsidurAPIModelsDentistsCurrentDentistDTOFromJSON,
    MinarsidurAPIModelsDentistsCurrentDentistDTOToJSON,
    MinarsidurAPIModelsDentistsDentistBillDTO,
    MinarsidurAPIModelsDentistsDentistBillDTOFromJSON,
    MinarsidurAPIModelsDentistsDentistBillDTOToJSON,
    MinarsidurAPIModelsDentistsDentistStatusDTO,
    MinarsidurAPIModelsDentistsDentistStatusDTOFromJSON,
    MinarsidurAPIModelsDentistsDentistStatusDTOToJSON,
    MinarsidurAPIModelsDentistsGetDentistsResponseDTO,
    MinarsidurAPIModelsDentistsGetDentistsResponseDTOFromJSON,
    MinarsidurAPIModelsDentistsGetDentistsResponseDTOToJSON,
} from '../models';

export interface GetDentistBillsRequest {
    dateFrom: Date;
    dateTo: Date;
}

export interface GetDentistsRequest {
    contractType: string;
    nameStartsWith?: string;
    limit?: number;
    pageNumber?: number;
    before?: string;
    after?: string;
}

export interface RegisterDentistRequest {
    id: number;
}

/**
 * 
 */
export class DentistsApi extends runtime.BaseAPI {

    /**
     */
    async dentiststatusRaw(): Promise<runtime.ApiResponse<MinarsidurAPIModelsDentistsDentistStatusDTO>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/dentists/status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MinarsidurAPIModelsDentistsDentistStatusDTOFromJSON(jsonValue));
    }

    /**
     */
    async dentiststatus(): Promise<MinarsidurAPIModelsDentistsDentistStatusDTO> {
        const response = await this.dentiststatusRaw();
        return await response.value();
    }

    /**
     */
    async getCurrentDentistRaw(): Promise<runtime.ApiResponse<MinarsidurAPIModelsDentistsCurrentDentistDTO>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/dentists/current`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MinarsidurAPIModelsDentistsCurrentDentistDTOFromJSON(jsonValue));
    }

    /**
     */
    async getCurrentDentist(): Promise<MinarsidurAPIModelsDentistsCurrentDentistDTO> {
        const response = await this.getCurrentDentistRaw();
        return await response.value();
    }

    /**
     */
    async getDentistBillsRaw(requestParameters: GetDentistBillsRequest): Promise<runtime.ApiResponse<Array<MinarsidurAPIModelsDentistsDentistBillDTO>>> {
        if (requestParameters.dateFrom === null || requestParameters.dateFrom === undefined) {
            throw new runtime.RequiredError('dateFrom','Required parameter requestParameters.dateFrom was null or undefined when calling getDentistBills.');
        }

        if (requestParameters.dateTo === null || requestParameters.dateTo === undefined) {
            throw new runtime.RequiredError('dateTo','Required parameter requestParameters.dateTo was null or undefined when calling getDentistBills.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.dateFrom !== undefined) {
            queryParameters['dateFrom'] = (requestParameters.dateFrom as any).toISOString().substr(0,10);
        }

        if (requestParameters.dateTo !== undefined) {
            queryParameters['dateTo'] = (requestParameters.dateTo as any).toISOString().substr(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/dentists/bills`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MinarsidurAPIModelsDentistsDentistBillDTOFromJSON));
    }

    /**
     */
    async getDentistBills(requestParameters: GetDentistBillsRequest): Promise<Array<MinarsidurAPIModelsDentistsDentistBillDTO>> {
        const response = await this.getDentistBillsRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getDentistsRaw(requestParameters: GetDentistsRequest): Promise<runtime.ApiResponse<MinarsidurAPIModelsDentistsGetDentistsResponseDTO>> {
        if (requestParameters.contractType === null || requestParameters.contractType === undefined) {
            throw new runtime.RequiredError('contractType','Required parameter requestParameters.contractType was null or undefined when calling getDentists.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.contractType !== undefined) {
            queryParameters['contractType'] = requestParameters.contractType;
        }

        if (requestParameters.nameStartsWith !== undefined) {
            queryParameters['nameStartsWith'] = requestParameters.nameStartsWith;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['pageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.before !== undefined) {
            queryParameters['before'] = requestParameters.before;
        }

        if (requestParameters.after !== undefined) {
            queryParameters['after'] = requestParameters.after;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/dentists`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MinarsidurAPIModelsDentistsGetDentistsResponseDTOFromJSON(jsonValue));
    }

    /**
     */
    async getDentists(requestParameters: GetDentistsRequest): Promise<MinarsidurAPIModelsDentistsGetDentistsResponseDTO> {
        const response = await this.getDentistsRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async registerDentistRaw(requestParameters: RegisterDentistRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling registerDentist.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/dentists/{id}/register`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async registerDentist(requestParameters: RegisterDentistRequest): Promise<void> {
        await this.registerDentistRaw(requestParameters);
    }

}
