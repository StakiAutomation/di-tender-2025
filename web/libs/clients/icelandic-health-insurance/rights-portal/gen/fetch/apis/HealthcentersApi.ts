/* tslint:disable */
/* eslint-disable */
/**
 * Minarsidur
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    MinarsidurAPIModelsHealthCentersCurrentHealthCenterDTO,
    MinarsidurAPIModelsHealthCentersCurrentHealthCenterDTOFromJSON,
    MinarsidurAPIModelsHealthCentersCurrentHealthCenterDTOToJSON,
    MinarsidurAPIModelsHealthCentersDoctorDTO,
    MinarsidurAPIModelsHealthCentersDoctorDTOFromJSON,
    MinarsidurAPIModelsHealthCentersDoctorDTOToJSON,
    MinarsidurAPIModelsHealthCentersGetHealthCentersResponseDTO,
    MinarsidurAPIModelsHealthCentersGetHealthCentersResponseDTOFromJSON,
    MinarsidurAPIModelsHealthCentersGetHealthCentersResponseDTOToJSON,
    MinarsidurAPIModelsHealthCentersHealthCenterHistoryEntryDTO,
    MinarsidurAPIModelsHealthCentersHealthCenterHistoryEntryDTOFromJSON,
    MinarsidurAPIModelsHealthCentersHealthCenterHistoryEntryDTOToJSON,
} from '../models';

export interface GetHealthCenterDoctorsRequest {
    id: string;
}

export interface GetHealthCenterHistoryRequest {
    dateFrom: Date;
    dateTo: Date;
}

export interface GetHealthCentersRequest {
    limit?: number;
    pageNumber?: number;
    before?: string;
    after?: string;
}

export interface RegisterHealthCenterRequest {
    id: string;
    doctorId?: number;
}

/**
 * 
 */
export class HealthcentersApi extends runtime.BaseAPI {

    /**
     */
    async getCurrentHealthCenterRaw(): Promise<runtime.ApiResponse<MinarsidurAPIModelsHealthCentersCurrentHealthCenterDTO>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/healthcenters/current`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MinarsidurAPIModelsHealthCentersCurrentHealthCenterDTOFromJSON(jsonValue));
    }

    /**
     */
    async getCurrentHealthCenter(): Promise<MinarsidurAPIModelsHealthCentersCurrentHealthCenterDTO> {
        const response = await this.getCurrentHealthCenterRaw();
        return await response.value();
    }

    /**
     */
    async getHealthCenterDoctorsRaw(requestParameters: GetHealthCenterDoctorsRequest): Promise<runtime.ApiResponse<Array<MinarsidurAPIModelsHealthCentersDoctorDTO>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getHealthCenterDoctors.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/healthcenters/{id}/doctors`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MinarsidurAPIModelsHealthCentersDoctorDTOFromJSON));
    }

    /**
     */
    async getHealthCenterDoctors(requestParameters: GetHealthCenterDoctorsRequest): Promise<Array<MinarsidurAPIModelsHealthCentersDoctorDTO>> {
        const response = await this.getHealthCenterDoctorsRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getHealthCenterHistoryRaw(requestParameters: GetHealthCenterHistoryRequest): Promise<runtime.ApiResponse<Array<MinarsidurAPIModelsHealthCentersHealthCenterHistoryEntryDTO>>> {
        if (requestParameters.dateFrom === null || requestParameters.dateFrom === undefined) {
            throw new runtime.RequiredError('dateFrom','Required parameter requestParameters.dateFrom was null or undefined when calling getHealthCenterHistory.');
        }

        if (requestParameters.dateTo === null || requestParameters.dateTo === undefined) {
            throw new runtime.RequiredError('dateTo','Required parameter requestParameters.dateTo was null or undefined when calling getHealthCenterHistory.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.dateFrom !== undefined) {
            queryParameters['dateFrom'] = (requestParameters.dateFrom as any).toISOString().substr(0,10);
        }

        if (requestParameters.dateTo !== undefined) {
            queryParameters['dateTo'] = (requestParameters.dateTo as any).toISOString().substr(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/healthcenters/history`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MinarsidurAPIModelsHealthCentersHealthCenterHistoryEntryDTOFromJSON));
    }

    /**
     */
    async getHealthCenterHistory(requestParameters: GetHealthCenterHistoryRequest): Promise<Array<MinarsidurAPIModelsHealthCentersHealthCenterHistoryEntryDTO>> {
        const response = await this.getHealthCenterHistoryRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getHealthCentersRaw(requestParameters: GetHealthCentersRequest): Promise<runtime.ApiResponse<MinarsidurAPIModelsHealthCentersGetHealthCentersResponseDTO>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['pageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.before !== undefined) {
            queryParameters['before'] = requestParameters.before;
        }

        if (requestParameters.after !== undefined) {
            queryParameters['after'] = requestParameters.after;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/healthcenters`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MinarsidurAPIModelsHealthCentersGetHealthCentersResponseDTOFromJSON(jsonValue));
    }

    /**
     */
    async getHealthCenters(requestParameters: GetHealthCentersRequest): Promise<MinarsidurAPIModelsHealthCentersGetHealthCentersResponseDTO> {
        const response = await this.getHealthCentersRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async registerHealthCenterRaw(requestParameters: RegisterHealthCenterRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling registerHealthCenter.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.doctorId !== undefined) {
            queryParameters['doctorId'] = requestParameters.doctorId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/healthcenters/{id}/register`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async registerHealthCenter(requestParameters: RegisterHealthCenterRequest): Promise<void> {
        await this.registerHealthCenterRaw(requestParameters);
    }

}
