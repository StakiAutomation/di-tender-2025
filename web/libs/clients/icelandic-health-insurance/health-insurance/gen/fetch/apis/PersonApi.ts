/* tslint:disable */
/* eslint-disable */
/**
 * Icelandic Health Insurance (IHI) - Island.is
 * Webservices for the X-Road serveces for Island.is
 *
 * The version of the OpenAPI document: v1
 * Contact: hjalp@sjukra.is
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    GetHealthInsuranceApplicationType,
    GetHealthInsuranceApplicationTypeFromJSON,
    GetHealthInsuranceApplicationTypeToJSON,
    IsHealthInsuredType,
    IsHealthInsuredTypeFromJSON,
    IsHealthInsuredTypeToJSON,
    SIRestHeader,
    SIRestHeaderFromJSON,
    SIRestHeaderToJSON,
} from '../models';

export interface PersonGetHealthInsuranceApplicationsRequest {
    nationalID: string | null;
    authHeader?: SIRestHeader | null;
}

export interface PersonIsHealthInsuredRequest {
    nationalID: string | null;
    date: string;
    authHeader?: SIRestHeader | null;
}

/**
 * 
 */
export class PersonApi extends runtime.BaseAPI {

    /**
     * This service returns all the person\'s health insurance applications.
     */
    async personGetHealthInsuranceApplicationsRaw(requestParameters: PersonGetHealthInsuranceApplicationsRequest): Promise<runtime.ApiResponse<GetHealthInsuranceApplicationType>> {
        if (requestParameters.nationalID === null || requestParameters.nationalID === undefined) {
            throw new runtime.RequiredError('nationalID','Required parameter requestParameters.nationalID was null or undefined when calling personGetHealthInsuranceApplications.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authHeader !== undefined && requestParameters.authHeader !== null) {
            headerParameters['authHeader'] = String(requestParameters.authHeader);
        }

        const response = await this.request({
            path: `/v1/person/{nationalID}/gethealthinsuranceapplications`.replace(`{${"nationalID"}}`, encodeURIComponent(String(requestParameters.nationalID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetHealthInsuranceApplicationTypeFromJSON(jsonValue));
    }

    /**
     * This service returns all the person\'s health insurance applications.
     */
    async personGetHealthInsuranceApplications(requestParameters: PersonGetHealthInsuranceApplicationsRequest): Promise<GetHealthInsuranceApplicationType> {
        const response = await this.personGetHealthInsuranceApplicationsRaw(requestParameters);
        return await response.value();
    }

    /**
     * sefsef
     */
    async personIsHealthInsuredRaw(requestParameters: PersonIsHealthInsuredRequest): Promise<runtime.ApiResponse<IsHealthInsuredType>> {
        if (requestParameters.nationalID === null || requestParameters.nationalID === undefined) {
            throw new runtime.RequiredError('nationalID','Required parameter requestParameters.nationalID was null or undefined when calling personIsHealthInsured.');
        }

        if (requestParameters.date === null || requestParameters.date === undefined) {
            throw new runtime.RequiredError('date','Required parameter requestParameters.date was null or undefined when calling personIsHealthInsured.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authHeader !== undefined && requestParameters.authHeader !== null) {
            headerParameters['authHeader'] = String(requestParameters.authHeader);
        }

        const response = await this.request({
            path: `/v1/person/{nationalID}/ishealthinsured/{date}`.replace(`{${"nationalID"}}`, encodeURIComponent(String(requestParameters.nationalID))).replace(`{${"date"}}`, encodeURIComponent(String(requestParameters.date))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IsHealthInsuredTypeFromJSON(jsonValue));
    }

    /**
     * sefsef
     */
    async personIsHealthInsured(requestParameters: PersonIsHealthInsuredRequest): Promise<IsHealthInsuredType> {
        const response = await this.personIsHealthInsuredRaw(requestParameters);
        return await response.value();
    }

}
