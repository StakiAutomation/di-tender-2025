/* tslint:disable */
/* eslint-disable */
/**
 * Icelandic Health Insurance (IHI) - Island.is
 * Webservices for the X-Road serveces for Island.is
 *
 * The version of the OpenAPI document: v1
 * Contact: hjalp@sjukra.is
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ConfirmationIN,
    ConfirmationINFromJSON,
    ConfirmationINToJSON,
    Document,
    DocumentFromJSON,
    DocumentToJSON,
    DocumentAttachment,
    DocumentAttachmentFromJSON,
    DocumentAttachmentToJSON,
    DocumentAttachmentType,
    DocumentAttachmentTypeFromJSON,
    DocumentAttachmentTypeToJSON,
    DocumentType,
    DocumentTypeFromJSON,
    DocumentTypeToJSON,
    GetAccidentStatusType,
    GetAccidentStatusTypeFromJSON,
    GetAccidentStatusTypeToJSON,
    PingType,
    PingTypeFromJSON,
    PingTypeToJSON,
    SIRestHeader,
    SIRestHeaderFromJSON,
    SIRestHeaderToJSON,
} from '../models';

export interface DocumentDocumentAttachmentRequest {
    ihiDocumentID: number;
    documentAttachment: DocumentAttachment;
    authHeader?: SIRestHeader | null;
}

export interface DocumentGetAccidentStatusRequest {
    ihiDocumentID: number;
    authHeader?: SIRestHeader | null;
}

export interface DocumentPostRequest {
    document: Document;
    authHeader?: SIRestHeader | null;
}

export interface DocumentSendConfirmationRequest {
    ihiDocumentID: number;
    confirmationIN: ConfirmationIN;
    authHeader?: SIRestHeader | null;
}

/**
 * 
 */
export class DocumentApi extends runtime.BaseAPI {

    /**
     * Post function for attachment.
     */
    async documentDocumentAttachmentRaw(requestParameters: DocumentDocumentAttachmentRequest): Promise<runtime.ApiResponse<DocumentAttachmentType>> {
        if (requestParameters.ihiDocumentID === null || requestParameters.ihiDocumentID === undefined) {
            throw new runtime.RequiredError('ihiDocumentID','Required parameter requestParameters.ihiDocumentID was null or undefined when calling documentDocumentAttachment.');
        }

        if (requestParameters.documentAttachment === null || requestParameters.documentAttachment === undefined) {
            throw new runtime.RequiredError('documentAttachment','Required parameter requestParameters.documentAttachment was null or undefined when calling documentDocumentAttachment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authHeader !== undefined && requestParameters.authHeader !== null) {
            headerParameters['authHeader'] = String(requestParameters.authHeader);
        }

        const response = await this.request({
            path: `/v1/document/{ihiDocumentID}/documentattachment`.replace(`{${"ihiDocumentID"}}`, encodeURIComponent(String(requestParameters.ihiDocumentID))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DocumentAttachmentToJSON(requestParameters.documentAttachment),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentAttachmentTypeFromJSON(jsonValue));
    }

    /**
     * Post function for attachment.
     */
    async documentDocumentAttachment(requestParameters: DocumentDocumentAttachmentRequest): Promise<DocumentAttachmentType> {
        const response = await this.documentDocumentAttachmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * Service returns the status of certain accident report.
     */
    async documentGetAccidentStatusRaw(requestParameters: DocumentGetAccidentStatusRequest): Promise<runtime.ApiResponse<GetAccidentStatusType>> {
        if (requestParameters.ihiDocumentID === null || requestParameters.ihiDocumentID === undefined) {
            throw new runtime.RequiredError('ihiDocumentID','Required parameter requestParameters.ihiDocumentID was null or undefined when calling documentGetAccidentStatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authHeader !== undefined && requestParameters.authHeader !== null) {
            headerParameters['authHeader'] = String(requestParameters.authHeader);
        }

        const response = await this.request({
            path: `/v1/document/{ihiDocumentID}/getaccidentstatus`.replace(`{${"ihiDocumentID"}}`, encodeURIComponent(String(requestParameters.ihiDocumentID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAccidentStatusTypeFromJSON(jsonValue));
    }

    /**
     * Service returns the status of certain accident report.
     */
    async documentGetAccidentStatus(requestParameters: DocumentGetAccidentStatusRequest): Promise<GetAccidentStatusType> {
        const response = await this.documentGetAccidentStatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * Post function for invoices. This function creates new document in IHI systems.
     */
    async documentPostRaw(requestParameters: DocumentPostRequest): Promise<runtime.ApiResponse<DocumentType>> {
        if (requestParameters.document === null || requestParameters.document === undefined) {
            throw new runtime.RequiredError('document','Required parameter requestParameters.document was null or undefined when calling documentPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authHeader !== undefined && requestParameters.authHeader !== null) {
            headerParameters['authHeader'] = String(requestParameters.authHeader);
        }

        const response = await this.request({
            path: `/v1/document`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DocumentToJSON(requestParameters.document),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentTypeFromJSON(jsonValue));
    }

    /**
     * Post function for invoices. This function creates new document in IHI systems.
     */
    async documentPost(requestParameters: DocumentPostRequest): Promise<DocumentType> {
        const response = await this.documentPostRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async documentSendConfirmationRaw(requestParameters: DocumentSendConfirmationRequest): Promise<runtime.ApiResponse<PingType>> {
        if (requestParameters.ihiDocumentID === null || requestParameters.ihiDocumentID === undefined) {
            throw new runtime.RequiredError('ihiDocumentID','Required parameter requestParameters.ihiDocumentID was null or undefined when calling documentSendConfirmation.');
        }

        if (requestParameters.confirmationIN === null || requestParameters.confirmationIN === undefined) {
            throw new runtime.RequiredError('confirmationIN','Required parameter requestParameters.confirmationIN was null or undefined when calling documentSendConfirmation.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authHeader !== undefined && requestParameters.authHeader !== null) {
            headerParameters['authHeader'] = String(requestParameters.authHeader);
        }

        const response = await this.request({
            path: `/v1/document/{ihiDocumentID}/sendconfirmation`.replace(`{${"ihiDocumentID"}}`, encodeURIComponent(String(requestParameters.ihiDocumentID))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConfirmationINToJSON(requestParameters.confirmationIN),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PingTypeFromJSON(jsonValue));
    }

    /**
     */
    async documentSendConfirmation(requestParameters: DocumentSendConfirmationRequest): Promise<PingType> {
        const response = await this.documentSendConfirmationRaw(requestParameters);
        return await response.value();
    }

}
