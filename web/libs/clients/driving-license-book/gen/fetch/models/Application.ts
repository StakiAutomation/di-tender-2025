/* tslint:disable */
/* eslint-disable */
/**
 * Digital DrivingLicenceBook API
 * Vefþjónusta fyrir rafræna ökunámsbók - f9a51338fc6bb51bf829cfc1123ddd104a8439cd-20240530.1
 *
 * The version of the OpenAPI document: v1
 * Contact: samgongustofa@samgongustofa.is
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Data Transfer Object for driving license book applications
 * @export
 * @interface Application
 */
export interface Application {
    /**
     * Unique id for a driving license book
     * @type {string}
     * @memberof Application
     */
    id?: string | null;
    /**
     * Social security number of the student
     * @type {string}
     * @memberof Application
     */
    studentSSN?: string | null;
    /**
     * Registration date
     * @type {Date}
     * @memberof Application
     */
    dateOfApplication?: Date;
    /**
     * License category
     * @type {string}
     * @memberof Application
     */
    licenseCategory?: string | null;
    /**
     * Status id of the application (0=New, 1=In Progress, 2=Finished, 3=Rejected, 9=Canceled)
     * @type {number}
     * @memberof Application
     */
    statusId?: number;
    /**
     * Name of the book status
     * @type {string}
     * @memberof Application
     */
    statusName?: string | null;
    /**
     * Student's postcode
     * @type {number}
     * @memberof Application
     */
    postCode?: number;
    /**
     * Teacher's social security number
     * @type {string}
     * @memberof Application
     */
    teacherSSN?: string | null;
    /**
     * School's social security number
     * @type {string}
     * @memberof Application
     */
    schoolSSN?: string | null;
    /**
     * Application Number
     * @type {string}
     * @memberof Application
     */
    applicationNumber?: string | null;
    /**
     * Driver license number
     * @type {number}
     * @memberof Application
     */
    licenseNumber?: number | null;
    /**
     * Datetime when the book was last modified
     * @type {Date}
     * @memberof Application
     */
    dateModified?: Date | null;
}

export function ApplicationFromJSON(json: any): Application {
    return ApplicationFromJSONTyped(json, false);
}

export function ApplicationFromJSONTyped(json: any, ignoreDiscriminator: boolean): Application {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'studentSSN': !exists(json, 'studentSSN') ? undefined : json['studentSSN'],
        'dateOfApplication': !exists(json, 'dateOfApplication') ? undefined : (new Date(json['dateOfApplication'])),
        'licenseCategory': !exists(json, 'licenseCategory') ? undefined : json['licenseCategory'],
        'statusId': !exists(json, 'statusId') ? undefined : json['statusId'],
        'statusName': !exists(json, 'statusName') ? undefined : json['statusName'],
        'postCode': !exists(json, 'postCode') ? undefined : json['postCode'],
        'teacherSSN': !exists(json, 'teacherSSN') ? undefined : json['teacherSSN'],
        'schoolSSN': !exists(json, 'schoolSSN') ? undefined : json['schoolSSN'],
        'applicationNumber': !exists(json, 'applicationNumber') ? undefined : json['applicationNumber'],
        'licenseNumber': !exists(json, 'licenseNumber') ? undefined : json['licenseNumber'],
        'dateModified': !exists(json, 'dateModified') ? undefined : (json['dateModified'] === null ? null : new Date(json['dateModified'])),
    };
}

export function ApplicationToJSON(value?: Application | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'studentSSN': value.studentSSN,
        'dateOfApplication': value.dateOfApplication === undefined ? undefined : (value.dateOfApplication.toISOString()),
        'licenseCategory': value.licenseCategory,
        'statusId': value.statusId,
        'statusName': value.statusName,
        'postCode': value.postCode,
        'teacherSSN': value.teacherSSN,
        'schoolSSN': value.schoolSSN,
        'applicationNumber': value.applicationNumber,
        'licenseNumber': value.licenseNumber,
        'dateModified': value.dateModified === undefined ? undefined : (value.dateModified === null ? null : value.dateModified.toISOString()),
    };
}


