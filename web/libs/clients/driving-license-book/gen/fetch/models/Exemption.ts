/* tslint:disable */
/* eslint-disable */
/**
 * Digital DrivingLicenceBook API
 * Vefþjónusta fyrir rafræna ökunámsbók - f9a51338fc6bb51bf829cfc1123ddd104a8439cd-20240530.1
 *
 * The version of the OpenAPI document: v1
 * Contact: samgongustofa@samgongustofa.is
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Represents a data transfer object for exemptions.
 * @export
 * @interface Exemption
 */
export interface Exemption {
    /**
     * Gets or sets the unique ID for the digital driving license book.
     * @type {string}
     * @memberof Exemption
     */
    bookId?: string | null;
    /**
     * Gets or sets the unique ID for the exemption application.
     * @type {string}
     * @memberof Exemption
     */
    id?: string | null;
    /**
     * Gets or sets the exemption type ID.
     * @type {number}
     * @memberof Exemption
     */
    exemptionTypeId?: number;
    /**
     * Gets or sets the name of the exemption type.
     * @type {string}
     * @memberof Exemption
     */
    exemptionTypeName?: string | null;
    /**
     * Gets or sets the description of the exemption type.
     * @type {string}
     * @memberof Exemption
     */
    exemptionTypeDescription?: string | null;
    /**
     * Gets or sets the student's social security number.
     * @type {string}
     * @memberof Exemption
     */
    studentSsn?: string | null;
    /**
     * Gets or sets the name of the student.
     * @type {string}
     * @memberof Exemption
     */
    studentName?: string | null;
    /**
     * Gets or sets the driving license category.
     * @type {string}
     * @memberof Exemption
     */
    licenseCategory?: string | null;
    /**
     * Gets or sets the driving instructor's social security number.
     * @type {string}
     * @memberof Exemption
     */
    teacherSsn?: string | null;
    /**
     * Gets or sets the name of the driving instructor.
     * @type {string}
     * @memberof Exemption
     */
    teacherName?: string | null;
    /**
     * Gets or sets the reason for applying for exemption.
     * @type {string}
     * @memberof Exemption
     */
    reasonForApplication?: string | null;
    /**
     * Gets or sets the date when the exemption application was registered (yyyy-MM-dd).
     * @type {string}
     * @memberof Exemption
     */
    createdOn?: string | null;
    /**
     * Gets or sets whether the exemption is active.
     * @type {boolean}
     * @memberof Exemption
     */
    isActive?: boolean;
    /**
     * Gets or sets whether the application has a result (either approved or denied).
     * @type {boolean}
     * @memberof Exemption
     */
    hasResult?: boolean | null;
    /**
     * Gets or sets whether the application for exemption has been approved or denied.
     * @type {boolean}
     * @memberof Exemption
     */
    resultIsApproved?: boolean | null;
    /**
     * Gets or sets the date when the approved exemption expires (yyyy-MM-dd), empty if the exemption never expires.
     * @type {string}
     * @memberof Exemption
     */
    resultApprovedExpireDate?: string | null;
    /**
     * Gets or sets the social security number for the employee of SGS that approved/denied the application.
     * @type {string}
     * @memberof Exemption
     */
    resultBySsn?: string | null;
    /**
     * Gets or sets the name of the employee of SGS that approved/denied the application.
     * @type {string}
     * @memberof Exemption
     */
    resultByName?: string | null;
    /**
     * Gets or sets comments about the registration for approval/denial.
     * @type {string}
     * @memberof Exemption
     */
    resultComments?: string | null;
}

export function ExemptionFromJSON(json: any): Exemption {
    return ExemptionFromJSONTyped(json, false);
}

export function ExemptionFromJSONTyped(json: any, ignoreDiscriminator: boolean): Exemption {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'bookId': !exists(json, 'bookId') ? undefined : json['bookId'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'exemptionTypeId': !exists(json, 'exemptionTypeId') ? undefined : json['exemptionTypeId'],
        'exemptionTypeName': !exists(json, 'exemptionTypeName') ? undefined : json['exemptionTypeName'],
        'exemptionTypeDescription': !exists(json, 'exemptionTypeDescription') ? undefined : json['exemptionTypeDescription'],
        'studentSsn': !exists(json, 'studentSsn') ? undefined : json['studentSsn'],
        'studentName': !exists(json, 'studentName') ? undefined : json['studentName'],
        'licenseCategory': !exists(json, 'licenseCategory') ? undefined : json['licenseCategory'],
        'teacherSsn': !exists(json, 'teacherSsn') ? undefined : json['teacherSsn'],
        'teacherName': !exists(json, 'teacherName') ? undefined : json['teacherName'],
        'reasonForApplication': !exists(json, 'reasonForApplication') ? undefined : json['reasonForApplication'],
        'createdOn': !exists(json, 'createdOn') ? undefined : json['createdOn'],
        'isActive': !exists(json, 'isActive') ? undefined : json['isActive'],
        'hasResult': !exists(json, 'hasResult') ? undefined : json['hasResult'],
        'resultIsApproved': !exists(json, 'resultIsApproved') ? undefined : json['resultIsApproved'],
        'resultApprovedExpireDate': !exists(json, 'resultApprovedExpireDate') ? undefined : json['resultApprovedExpireDate'],
        'resultBySsn': !exists(json, 'resultBySsn') ? undefined : json['resultBySsn'],
        'resultByName': !exists(json, 'resultByName') ? undefined : json['resultByName'],
        'resultComments': !exists(json, 'resultComments') ? undefined : json['resultComments'],
    };
}

export function ExemptionToJSON(value?: Exemption | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'bookId': value.bookId,
        'id': value.id,
        'exemptionTypeId': value.exemptionTypeId,
        'exemptionTypeName': value.exemptionTypeName,
        'exemptionTypeDescription': value.exemptionTypeDescription,
        'studentSsn': value.studentSsn,
        'studentName': value.studentName,
        'licenseCategory': value.licenseCategory,
        'teacherSsn': value.teacherSsn,
        'teacherName': value.teacherName,
        'reasonForApplication': value.reasonForApplication,
        'createdOn': value.createdOn,
        'isActive': value.isActive,
        'hasResult': value.hasResult,
        'resultIsApproved': value.resultIsApproved,
        'resultApprovedExpireDate': value.resultApprovedExpireDate,
        'resultBySsn': value.resultBySsn,
        'resultByName': value.resultByName,
        'resultComments': value.resultComments,
    };
}


