/* tslint:disable */
/* eslint-disable */
/**
 * Digital DrivingLicenceBook API
 * Vefþjónusta fyrir rafræna ökunámsbók - f9a51338fc6bb51bf829cfc1123ddd104a8439cd-20240530.1
 *
 * The version of the OpenAPI document: v1
 * Contact: samgongustofa@samgongustofa.is
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Represents the type of a driving license test.
 * @export
 * @interface TestResultType
 */
export interface TestResultType {
    /**
     * Gets or sets the type ID of the test (1, 2, 3).
     * @type {number}
     * @memberof TestResultType
     */
    typeId?: number;
    /**
     * Gets or sets the name of the test type.
     * @type {string}
     * @memberof TestResultType
     */
    typeName?: string | null;
    /**
     * Gets or sets the short code for the test type.
     * @type {string}
     * @memberof TestResultType
     */
    typeCode?: string | null;
    /**
     * Gets or sets the license category that support the test type.
     * @type {string}
     * @memberof TestResultType
     */
    licenseCategory?: string | null;
}

export function TestResultTypeFromJSON(json: any): TestResultType {
    return TestResultTypeFromJSONTyped(json, false);
}

export function TestResultTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): TestResultType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'typeId': !exists(json, 'typeId') ? undefined : json['typeId'],
        'typeName': !exists(json, 'typeName') ? undefined : json['typeName'],
        'typeCode': !exists(json, 'typeCode') ? undefined : json['typeCode'],
        'licenseCategory': !exists(json, 'licenseCategory') ? undefined : json['licenseCategory'],
    };
}

export function TestResultTypeToJSON(value?: TestResultType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'typeId': value.typeId,
        'typeName': value.typeName,
        'typeCode': value.typeCode,
        'licenseCategory': value.licenseCategory,
    };
}


