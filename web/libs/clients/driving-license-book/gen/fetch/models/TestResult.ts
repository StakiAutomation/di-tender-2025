/* tslint:disable */
/* eslint-disable */
/**
 * Digital DrivingLicenceBook API
 * Vefþjónusta fyrir rafræna ökunámsbók - f9a51338fc6bb51bf829cfc1123ddd104a8439cd-20240530.1
 *
 * The version of the OpenAPI document: v1
 * Contact: samgongustofa@samgongustofa.is
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    TestFactorScoreOverview,
    TestFactorScoreOverviewFromJSON,
    TestFactorScoreOverviewFromJSONTyped,
    TestFactorScoreOverviewToJSON,
} from './';

/**
 * Represents a test result for a student's driving license exam.
 * @export
 * @interface TestResult
 */
export interface TestResult {
    /**
     * Gets or sets the unique identifier for the digital driving license book.
     * @type {string}
     * @memberof TestResult
     */
    bookId?: string | null;
    /**
     * Gets or sets the unique identifier for the test result.
     * @type {string}
     * @memberof TestResult
     */
    id?: string | null;
    /**
     * Gets or sets the student's social security number.
     * @type {string}
     * @memberof TestResult
     */
    studentSsn?: string | null;
    /**
     * Gets or sets the student's name.
     * @type {string}
     * @memberof TestResult
     */
    studentName?: string | null;
    /**
     * Gets or sets the type of driving license.
     * @type {string}
     * @memberof TestResult
     */
    licenseCategory?: string | null;
    /**
     * Gets or sets the type of test (1, 2, 3).
     * @type {number}
     * @memberof TestResult
     */
    testTypeId?: number;
    /**
     * Gets or sets the name of the test type.
     * @type {string}
     * @memberof TestResult
     */
    testTypeName?: string | null;
    /**
     * Gets or sets the code for the test type.
     * @type {string}
     * @memberof TestResult
     */
    testTypeCode?: string | null;
    /**
     * Gets or sets the social security number of the test center.
     * @type {string}
     * @memberof TestResult
     */
    testCenterSsn?: string | null;
    /**
     * Gets or sets the name of the test center.
     * @type {string}
     * @memberof TestResult
     */
    testCenterName?: string | null;
    /**
     * Gets or sets the social security number of the test examiner.
     * @type {string}
     * @memberof TestResult
     */
    testExaminerSsn?: string | null;
    /**
     * Gets or sets the name of the test examiner.
     * @type {string}
     * @memberof TestResult
     */
    testExaminerName?: string | null;
    /**
     * Gets or sets a value indicating whether the test has been passed or failed.
     * @type {boolean}
     * @memberof TestResult
     */
    hasPassed?: boolean;
    /**
     * Gets or sets the date when the test was registered (yyyy-MM-dd).
     * @type {string}
     * @memberof TestResult
     */
    createdOn?: string | null;
    /**
     * Gets or sets comments about the test registration.
     * @type {string}
     * @memberof TestResult
     */
    comments?: string | null;
    /**
     * Gets or sets how many points the student got in the test.
     * @type {number}
     * @memberof TestResult
     */
    score?: number;
    /**
     * Gets or sets how many points the student got from part 1 (only applies to written tests).
     * @type {number}
     * @memberof TestResult
     */
    scorePart1?: number | null;
    /**
     * Gets or sets how many points the student got from part 2 (only applies to written tests).
     * @type {number}
     * @memberof TestResult
     */
    scorePart2?: number | null;
    /**
     * Gets or sets the list of TestFactorScores
     * @type {Array<TestFactorScoreOverview>}
     * @memberof TestResult
     */
    testFactorScores?: Array<TestFactorScoreOverview> | null;
}

export function TestResultFromJSON(json: any): TestResult {
    return TestResultFromJSONTyped(json, false);
}

export function TestResultFromJSONTyped(json: any, ignoreDiscriminator: boolean): TestResult {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'bookId': !exists(json, 'bookId') ? undefined : json['bookId'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'studentSsn': !exists(json, 'studentSsn') ? undefined : json['studentSsn'],
        'studentName': !exists(json, 'studentName') ? undefined : json['studentName'],
        'licenseCategory': !exists(json, 'licenseCategory') ? undefined : json['licenseCategory'],
        'testTypeId': !exists(json, 'testTypeId') ? undefined : json['testTypeId'],
        'testTypeName': !exists(json, 'testTypeName') ? undefined : json['testTypeName'],
        'testTypeCode': !exists(json, 'testTypeCode') ? undefined : json['testTypeCode'],
        'testCenterSsn': !exists(json, 'testCenterSsn') ? undefined : json['testCenterSsn'],
        'testCenterName': !exists(json, 'testCenterName') ? undefined : json['testCenterName'],
        'testExaminerSsn': !exists(json, 'testExaminerSsn') ? undefined : json['testExaminerSsn'],
        'testExaminerName': !exists(json, 'testExaminerName') ? undefined : json['testExaminerName'],
        'hasPassed': !exists(json, 'hasPassed') ? undefined : json['hasPassed'],
        'createdOn': !exists(json, 'createdOn') ? undefined : json['createdOn'],
        'comments': !exists(json, 'comments') ? undefined : json['comments'],
        'score': !exists(json, 'score') ? undefined : json['score'],
        'scorePart1': !exists(json, 'scorePart1') ? undefined : json['scorePart1'],
        'scorePart2': !exists(json, 'scorePart2') ? undefined : json['scorePart2'],
        'testFactorScores': !exists(json, 'testFactorScores') ? undefined : (json['testFactorScores'] === null ? null : (json['testFactorScores'] as Array<any>).map(TestFactorScoreOverviewFromJSON)),
    };
}

export function TestResultToJSON(value?: TestResult | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'bookId': value.bookId,
        'id': value.id,
        'studentSsn': value.studentSsn,
        'studentName': value.studentName,
        'licenseCategory': value.licenseCategory,
        'testTypeId': value.testTypeId,
        'testTypeName': value.testTypeName,
        'testTypeCode': value.testTypeCode,
        'testCenterSsn': value.testCenterSsn,
        'testCenterName': value.testCenterName,
        'testExaminerSsn': value.testExaminerSsn,
        'testExaminerName': value.testExaminerName,
        'hasPassed': value.hasPassed,
        'createdOn': value.createdOn,
        'comments': value.comments,
        'score': value.score,
        'scorePart1': value.scorePart1,
        'scorePart2': value.scorePart2,
        'testFactorScores': value.testFactorScores === undefined ? undefined : (value.testFactorScores === null ? null : (value.testFactorScores as Array<any>).map(TestFactorScoreOverviewToJSON)),
    };
}


