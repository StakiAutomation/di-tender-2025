/* tslint:disable */
/* eslint-disable */
/**
 * Digital DrivingLicenceBook API
 * Vefþjónusta fyrir rafræna ökunámsbók - f9a51338fc6bb51bf829cfc1123ddd104a8439cd-20240530.1
 *
 * The version of the OpenAPI document: v1
 * Contact: samgongustofa@samgongustofa.is
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Represents a digital driving license book data transfer object.
 * @export
 * @interface DigitalBook
 */
export interface DigitalBook {
    /**
     * Gets or sets the unique ID for the digital driving license book.
     * @type {string}
     * @memberof DigitalBook
     */
    id?: string | null;
    /**
     * Gets or sets the type of driving license.
     * @type {string}
     * @memberof DigitalBook
     */
    licenseCategory?: string | null;
    /**
     * Gets or sets the date when the digital book was registered (yyyy-MM-dd).
     * @type {string}
     * @memberof DigitalBook
     */
    createdOn?: string | null;
    /**
     * Gets or sets the status ID of the application (0=New, 1=In Progress, ...).
     * @type {number}
     * @memberof DigitalBook
     */
    status?: number;
    /**
     * Gets or sets whether the application is expired.
     * @type {boolean}
     * @memberof DigitalBook
     */
    isExpired?: boolean;
    /**
     * Gets or sets the status name of the application.
     * @type {string}
     * @memberof DigitalBook
     */
    statusName?: string | null;
    /**
     * Gets or sets the actorId for student
     * @type {string}
     * @memberof DigitalBook
     */
    studentId?: string | null;
    /**
     * Gets or sets the student's social security number.
     * @type {string}
     * @memberof DigitalBook
     */
    studentSsn?: string | null;
    /**
     * Gets or sets the name of the student.
     * @type {string}
     * @memberof DigitalBook
     */
    studentName?: string | null;
    /**
     * Gets or sets the student's postcode.
     * @type {number}
     * @memberof DigitalBook
     */
    studentZipCode?: number | null;
    /**
     * Gets or sets the student's address.
     * @type {string}
     * @memberof DigitalBook
     */
    studentAddress?: string | null;
    /**
     * Gets or sets the student's email.
     * @type {string}
     * @memberof DigitalBook
     */
    studentEmail?: string | null;
    /**
     * Gets or sets the student's primary phone number.
     * @type {string}
     * @memberof DigitalBook
     */
    studentPrimaryPhoneNumber?: string | null;
    /**
     * Gets or sets the student's secondary phone number.
     * @type {string}
     * @memberof DigitalBook
     */
    studentSecondaryPhoneNumber?: string | null;
    /**
     * Gets or sets the driving instructor's social security number.
     * @type {string}
     * @memberof DigitalBook
     */
    teacherSsn?: string | null;
    /**
     * Gets or sets the name of the driving instructor.
     * @type {string}
     * @memberof DigitalBook
     */
    teacherName?: string | null;
    /**
     * Gets or sets the driving school's social security number.
     * @type {string}
     * @memberof DigitalBook
     */
    schoolSsn?: string | null;
    /**
     * Gets or sets the name of the driving school.
     * @type {string}
     * @memberof DigitalBook
     */
    schoolName?: string | null;
    /**
     * Gets or sets whether the driving license book is digital or not (else on paper).
     * @type {boolean}
     * @memberof DigitalBook
     */
    isDigital?: boolean;
    /**
     * Gets or sets the application number.
     * @type {string}
     * @memberof DigitalBook
     */
    applicationNumber?: string | null;
    /**
     * Gets or sets the license number.
     * @type {number}
     * @memberof DigitalBook
     */
    licenseNumber?: number | null;
    /**
     * Gets or sets when the driving license was ordered from RLS.
     * @type {string}
     * @memberof DigitalBook
     */
    licenseOrdered?: string | null;
    /**
     * Gets or sets whether the student can do practice driving.
     * @type {boolean}
     * @memberof DigitalBook
     */
    practiceDriving?: boolean;
    /**
     * Gets or sets when practice driving was granted on the driving license digital book.
     * @type {Date}
     * @memberof DigitalBook
     */
    practiceDrivingGranted?: Date | null;
    /**
     * Gets or sets when practice driving expires on the driving license digital book.
     * @type {Date}
     * @memberof DigitalBook
     */
    practiceDrivingExpires?: Date | null;
}

export function DigitalBookFromJSON(json: any): DigitalBook {
    return DigitalBookFromJSONTyped(json, false);
}

export function DigitalBookFromJSONTyped(json: any, ignoreDiscriminator: boolean): DigitalBook {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'licenseCategory': !exists(json, 'licenseCategory') ? undefined : json['licenseCategory'],
        'createdOn': !exists(json, 'createdOn') ? undefined : json['createdOn'],
        'status': !exists(json, 'status') ? undefined : json['status'],
        'isExpired': !exists(json, 'isExpired') ? undefined : json['isExpired'],
        'statusName': !exists(json, 'statusName') ? undefined : json['statusName'],
        'studentId': !exists(json, 'studentId') ? undefined : json['studentId'],
        'studentSsn': !exists(json, 'studentSsn') ? undefined : json['studentSsn'],
        'studentName': !exists(json, 'studentName') ? undefined : json['studentName'],
        'studentZipCode': !exists(json, 'studentZipCode') ? undefined : json['studentZipCode'],
        'studentAddress': !exists(json, 'studentAddress') ? undefined : json['studentAddress'],
        'studentEmail': !exists(json, 'studentEmail') ? undefined : json['studentEmail'],
        'studentPrimaryPhoneNumber': !exists(json, 'studentPrimaryPhoneNumber') ? undefined : json['studentPrimaryPhoneNumber'],
        'studentSecondaryPhoneNumber': !exists(json, 'studentSecondaryPhoneNumber') ? undefined : json['studentSecondaryPhoneNumber'],
        'teacherSsn': !exists(json, 'teacherSsn') ? undefined : json['teacherSsn'],
        'teacherName': !exists(json, 'teacherName') ? undefined : json['teacherName'],
        'schoolSsn': !exists(json, 'schoolSsn') ? undefined : json['schoolSsn'],
        'schoolName': !exists(json, 'schoolName') ? undefined : json['schoolName'],
        'isDigital': !exists(json, 'isDigital') ? undefined : json['isDigital'],
        'applicationNumber': !exists(json, 'applicationNumber') ? undefined : json['applicationNumber'],
        'licenseNumber': !exists(json, 'licenseNumber') ? undefined : json['licenseNumber'],
        'licenseOrdered': !exists(json, 'licenseOrdered') ? undefined : json['licenseOrdered'],
        'practiceDriving': !exists(json, 'practiceDriving') ? undefined : json['practiceDriving'],
        'practiceDrivingGranted': !exists(json, 'practiceDrivingGranted') ? undefined : (json['practiceDrivingGranted'] === null ? null : new Date(json['practiceDrivingGranted'])),
        'practiceDrivingExpires': !exists(json, 'practiceDrivingExpires') ? undefined : (json['practiceDrivingExpires'] === null ? null : new Date(json['practiceDrivingExpires'])),
    };
}

export function DigitalBookToJSON(value?: DigitalBook | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'licenseCategory': value.licenseCategory,
        'createdOn': value.createdOn,
        'status': value.status,
        'isExpired': value.isExpired,
        'statusName': value.statusName,
        'studentId': value.studentId,
        'studentSsn': value.studentSsn,
        'studentName': value.studentName,
        'studentZipCode': value.studentZipCode,
        'studentAddress': value.studentAddress,
        'studentEmail': value.studentEmail,
        'studentPrimaryPhoneNumber': value.studentPrimaryPhoneNumber,
        'studentSecondaryPhoneNumber': value.studentSecondaryPhoneNumber,
        'teacherSsn': value.teacherSsn,
        'teacherName': value.teacherName,
        'schoolSsn': value.schoolSsn,
        'schoolName': value.schoolName,
        'isDigital': value.isDigital,
        'applicationNumber': value.applicationNumber,
        'licenseNumber': value.licenseNumber,
        'licenseOrdered': value.licenseOrdered,
        'practiceDriving': value.practiceDriving,
        'practiceDrivingGranted': value.practiceDrivingGranted === undefined ? undefined : (value.practiceDrivingGranted === null ? null : value.practiceDrivingGranted.toISOString()),
        'practiceDrivingExpires': value.practiceDrivingExpires === undefined ? undefined : (value.practiceDrivingExpires === null ? null : value.practiceDrivingExpires.toISOString()),
    };
}


