/* tslint:disable */
/* eslint-disable */
/**
 * Digital DrivingLicenceBook API
 * Vefþjónusta fyrir rafræna ökunámsbók - f9a51338fc6bb51bf829cfc1123ddd104a8439cd-20240530.1
 *
 * The version of the OpenAPI document: v1
 * Contact: samgongustofa@samgongustofa.is
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    TestScoreCreateRequestBody,
    TestScoreCreateRequestBodyFromJSON,
    TestScoreCreateRequestBodyFromJSONTyped,
    TestScoreCreateRequestBodyToJSON,
} from './';

/**
 * Represents the request body for updating test results.
 * @export
 * @interface TestResultUpdateRequestBody
 */
export interface TestResultUpdateRequestBody {
    /**
     * Gets or sets whether the test has been passed or failed.
     * @type {boolean}
     * @memberof TestResultUpdateRequestBody
     */
    hasPassed: boolean;
    /**
     * Gets or sets the date when the test result was registered (yyyy-MM-dd).
     * @type {Date}
     * @memberof TestResultUpdateRequestBody
     */
    createdOn: Date;
    /**
     * Gets or sets how many points the student got in the test.
     * @type {number}
     * @memberof TestResultUpdateRequestBody
     */
    score?: number;
    /**
     * Gets or sets how many points the student got from part 1 (only applies to written tests).
     * @type {number}
     * @memberof TestResultUpdateRequestBody
     */
    scorePart1?: number | null;
    /**
     * Gets or sets how many points the student got from part 2 (only applies to written tests).
     * @type {number}
     * @memberof TestResultUpdateRequestBody
     */
    scorePart2?: number | null;
    /**
     * Gets or sets comments about the registration.
     * @type {string}
     * @memberof TestResultUpdateRequestBody
     */
    comments?: string | null;
    /**
     * Gets or sets the list of TestFactorScores
     * @type {Array<TestScoreCreateRequestBody>}
     * @memberof TestResultUpdateRequestBody
     */
    testFactorScores?: Array<TestScoreCreateRequestBody> | null;
}

export function TestResultUpdateRequestBodyFromJSON(json: any): TestResultUpdateRequestBody {
    return TestResultUpdateRequestBodyFromJSONTyped(json, false);
}

export function TestResultUpdateRequestBodyFromJSONTyped(json: any, ignoreDiscriminator: boolean): TestResultUpdateRequestBody {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'hasPassed': json['hasPassed'],
        'createdOn': (new Date(json['createdOn'])),
        'score': !exists(json, 'score') ? undefined : json['score'],
        'scorePart1': !exists(json, 'scorePart1') ? undefined : json['scorePart1'],
        'scorePart2': !exists(json, 'scorePart2') ? undefined : json['scorePart2'],
        'comments': !exists(json, 'comments') ? undefined : json['comments'],
        'testFactorScores': !exists(json, 'testFactorScores') ? undefined : (json['testFactorScores'] === null ? null : (json['testFactorScores'] as Array<any>).map(TestScoreCreateRequestBodyFromJSON)),
    };
}

export function TestResultUpdateRequestBodyToJSON(value?: TestResultUpdateRequestBody | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'hasPassed': value.hasPassed,
        'createdOn': (value.createdOn.toISOString()),
        'score': value.score,
        'scorePart1': value.scorePart1,
        'scorePart2': value.scorePart2,
        'comments': value.comments,
        'testFactorScores': value.testFactorScores === undefined ? undefined : (value.testFactorScores === null ? null : (value.testFactorScores as Array<any>).map(TestScoreCreateRequestBodyToJSON)),
    };
}


