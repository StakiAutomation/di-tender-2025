/* tslint:disable */
/* eslint-disable */
/**
 * Digital DrivingLicenceBook API
 * Vefþjónusta fyrir rafræna ökunámsbók - f9a51338fc6bb51bf829cfc1123ddd104a8439cd-20240530.1
 *
 * The version of the OpenAPI document: v1
 * Contact: samgongustofa@samgongustofa.is
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AuthenticateModel,
    AuthenticateModelFromJSON,
    AuthenticateModelToJSON,
    AuthenticateResponse,
    AuthenticateResponseFromJSON,
    AuthenticateResponseToJSON,
    CanStartDrivingSchoolThree,
    CanStartDrivingSchoolThreeFromJSON,
    CanStartDrivingSchoolThreeToJSON,
    CreateAllowedPractieDrivingRequestBody,
    CreateAllowedPractieDrivingRequestBodyFromJSON,
    CreateAllowedPractieDrivingRequestBodyToJSON,
    DigitalBookCreateRequestBody,
    DigitalBookCreateRequestBodyFromJSON,
    DigitalBookCreateRequestBodyToJSON,
    DigitalBookCreateResponse,
    DigitalBookCreateResponseFromJSON,
    DigitalBookCreateResponseToJSON,
    DigitalBookGetResponse,
    DigitalBookGetResponseFromJSON,
    DigitalBookGetResponseToJSON,
    DigitalBookListGetResponse,
    DigitalBookListGetResponseFromJSON,
    DigitalBookListGetResponseToJSON,
    DigitalBookUpdateRequestBody,
    DigitalBookUpdateRequestBodyFromJSON,
    DigitalBookUpdateRequestBodyToJSON,
    DigitalBooksResponse,
    DigitalBooksResponseFromJSON,
    DigitalBooksResponseToJSON,
    ExemptionCreateRequestBody,
    ExemptionCreateRequestBodyFromJSON,
    ExemptionCreateRequestBodyToJSON,
    ExemptionCreateResponse,
    ExemptionCreateResponseFromJSON,
    ExemptionCreateResponseToJSON,
    ExemptionTypeGetResponse,
    ExemptionTypeGetResponseFromJSON,
    ExemptionTypeGetResponseToJSON,
    ExemptionUpdateRequestBody,
    ExemptionUpdateRequestBodyFromJSON,
    ExemptionUpdateRequestBodyToJSON,
    ExemptionsGetResponse,
    ExemptionsGetResponseFromJSON,
    ExemptionsGetResponseToJSON,
    GetStudentLicenseNumberResponse,
    GetStudentLicenseNumberResponseFromJSON,
    GetStudentLicenseNumberResponseToJSON,
    GetStudentOverviewForTeacherResponse,
    GetStudentOverviewForTeacherResponseFromJSON,
    GetStudentOverviewForTeacherResponseToJSON,
    GetStudentsForTeacherResponse,
    GetStudentsForTeacherResponseFromJSON,
    GetStudentsForTeacherResponseToJSON,
    LicenseCategoryGetResponse,
    LicenseCategoryGetResponseFromJSON,
    LicenseCategoryGetResponseToJSON,
    Organization,
    OrganizationFromJSON,
    OrganizationToJSON,
    PracticalDrivingLessonCreateRequestBody,
    PracticalDrivingLessonCreateRequestBodyFromJSON,
    PracticalDrivingLessonCreateRequestBodyToJSON,
    PracticalDrivingLessonCreateResponse,
    PracticalDrivingLessonCreateResponseFromJSON,
    PracticalDrivingLessonCreateResponseToJSON,
    PracticalDrivingLessonGetResponse,
    PracticalDrivingLessonGetResponseFromJSON,
    PracticalDrivingLessonGetResponseToJSON,
    PracticalDrivingLessonUpdateRequestBody,
    PracticalDrivingLessonUpdateRequestBodyFromJSON,
    PracticalDrivingLessonUpdateRequestBodyToJSON,
    ProblemDetails,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    SchoolTestResultCreateRequestBody,
    SchoolTestResultCreateRequestBodyFromJSON,
    SchoolTestResultCreateRequestBodyToJSON,
    SchoolTestResultCreateResponse,
    SchoolTestResultCreateResponseFromJSON,
    SchoolTestResultCreateResponseToJSON,
    SchoolTestResultGetResponse,
    SchoolTestResultGetResponseFromJSON,
    SchoolTestResultGetResponseToJSON,
    SchoolTestResultUpdateRequestBody,
    SchoolTestResultUpdateRequestBodyFromJSON,
    SchoolTestResultUpdateRequestBodyToJSON,
    SchoolTestResultsGetResponse,
    SchoolTestResultsGetResponseFromJSON,
    SchoolTestResultsGetResponseToJSON,
    SchoolTypeGetResponse,
    SchoolTypeGetResponseFromJSON,
    SchoolTypeGetResponseToJSON,
    StudentBookIdGetResponse,
    StudentBookIdGetResponseFromJSON,
    StudentBookIdGetResponseToJSON,
    StudentDrivingSchoolProgress,
    StudentDrivingSchoolProgressFromJSON,
    StudentDrivingSchoolProgressToJSON,
    StudentListGetResponse,
    StudentListGetResponseFromJSON,
    StudentListGetResponseToJSON,
    StudentOverviewGetResponse,
    StudentOverviewGetResponseFromJSON,
    StudentOverviewGetResponseToJSON,
    TeacherDetailsGetResponse,
    TeacherDetailsGetResponseFromJSON,
    TeacherDetailsGetResponseToJSON,
    TestExamRightsGetResponse,
    TestExamRightsGetResponseFromJSON,
    TestExamRightsGetResponseToJSON,
    TestGetResponse,
    TestGetResponseFromJSON,
    TestGetResponseToJSON,
    TestResultCreateRequestBody,
    TestResultCreateRequestBodyFromJSON,
    TestResultCreateRequestBodyToJSON,
    TestResultCreateResponse,
    TestResultCreateResponseFromJSON,
    TestResultCreateResponseToJSON,
    TestResultGetResponse,
    TestResultGetResponseFromJSON,
    TestResultGetResponseToJSON,
    TestResultUpdateRequestBody,
    TestResultUpdateRequestBodyFromJSON,
    TestResultUpdateRequestBodyToJSON,
    TestTypeGetResponse,
    TestTypeGetResponseFromJSON,
    TestTypeGetResponseToJSON,
} from '../models';

export interface ApiAuthenticationAuthenticatePostRequest {
    authenticateModel?: AuthenticateModel;
}

export interface ApiDLBGetLicenseCategoriesGetRequest {
    onlyActive?: boolean;
}

export interface ApiSchoolCreateSchoolTestResultPostRequest {
    schoolTestResultCreateRequestBody?: SchoolTestResultCreateRequestBody;
}

export interface ApiSchoolDeleteSchoolTestResultIdDeleteRequest {
    id: string;
    reason?: string;
}

export interface ApiSchoolGetSchoolForSchoolStaffUserSsnGetRequest {
    userSsn: string;
}

export interface ApiSchoolGetSchoolTestResultIdGetRequest {
    id: string;
}

export interface ApiSchoolGetSchoolTestResultsBookIdGetRequest {
    bookId: string;
    id?: string;
    showInactive?: boolean;
}

export interface ApiSchoolGetSchoolTypesGetRequest {
    licenseCategory?: string;
}

export interface ApiSchoolUpdateSchoolTestResultIdPutRequest {
    id: string;
    schoolTestResultUpdateRequestBody?: SchoolTestResultUpdateRequestBody;
}

export interface ApiStudentCanStartDrivingSchoolThreeSsnGetRequest {
    ssn: string;
}

export interface ApiStudentCreateLicenseBookPostRequest {
    digitalBookCreateRequestBody?: DigitalBookCreateRequestBody;
}

export interface ApiStudentDeleteLicenseBookIdDeleteRequest {
    id: string;
    reason?: string;
}

export interface ApiStudentGetLicenseBookIdGetRequest {
    id: string;
}

export interface ApiStudentGetLicenseBookListSsnGetRequest {
    ssn: string;
}

export interface ApiStudentGetStudentActiveBookIdSsnGetRequest {
    ssn: string;
    licenseCategory: string;
    includeCompleted?: boolean;
}

export interface ApiStudentGetStudentActiveLicenseBookBySsnSsnGetRequest {
    ssn: string;
    licenseCategory?: string;
}

export interface ApiStudentGetStudentDrivingSchoolProgressSsnGetRequest {
    ssn: string;
    licenseCategory: string;
}

export interface ApiStudentGetStudentListGetRequest {
    key?: string;
    licenseCategory?: string;
    cursor?: string;
    limit?: number;
}

export interface ApiStudentGetStudentOverviewSsnGetRequest {
    ssn: string;
    showInactiveBooks?: boolean;
}

export interface ApiStudentUpdateLicenseBookIdPutRequest {
    id: string;
    digitalBookUpdateRequestBody?: DigitalBookUpdateRequestBody;
}

export interface ApiTeacherCanAllowStudentToPracticeDrivingSsnGetRequest {
    ssn: string;
}

export interface ApiTeacherCreateAllowedPracticeDrivingPostRequest {
    createAllowedPractieDrivingRequestBody?: CreateAllowedPractieDrivingRequestBody;
}

export interface ApiTeacherCreateExemptionPostRequest {
    exemptionCreateRequestBody?: ExemptionCreateRequestBody;
}

export interface ApiTeacherCreatePracticalDrivingLessonPostRequest {
    practicalDrivingLessonCreateRequestBody?: PracticalDrivingLessonCreateRequestBody;
}

export interface ApiTeacherDeleteAllowedPracticeDrivingDeleteRequest {
    ssn?: string;
}

export interface ApiTeacherDeleteExemptionIdDeleteRequest {
    id: string;
    reason?: string;
}

export interface ApiTeacherDeletePracticalDrivingLessonIdDeleteRequest {
    id: string;
    reason?: string;
}

export interface ApiTeacherGetExemptionGetRequest {
    bookId?: string;
    teacherSsn?: string;
    exemptionTypeId?: number;
    id?: string;
}

export interface ApiTeacherGetExemptionTypesGetRequest {
    licenseCategory?: string;
}

export interface ApiTeacherGetPracticalDrivingLessonsBookIdGetRequest {
    bookId: string;
    id?: string;
}

export interface ApiTeacherGetStudentOverviewForTeacherTeacherSsnGetRequest {
    teacherSsn: string;
    licenseCategory?: string;
    cursor?: string;
    limit?: number;
    showExpired?: boolean;
}

export interface ApiTeacherGetStudentsForTeacherTeacherSsnGetRequest {
    teacherSsn: string;
    licenseCategory?: string;
    cursor?: string;
    limit?: number;
    showInactive?: boolean;
}

export interface ApiTeacherGetTeacherSsnGetRequest {
    ssn: string;
}

export interface ApiTeacherUpdateExemptionIdPutRequest {
    id: string;
    exemptionUpdateRequestBody?: ExemptionUpdateRequestBody;
}

export interface ApiTeacherUpdatePracticalDrivingLessonIdPutRequest {
    id: string;
    practicalDrivingLessonUpdateRequestBody?: PracticalDrivingLessonUpdateRequestBody;
}

export interface ApiTestCenterCreateTestResultPostRequest {
    testResultCreateRequestBody?: TestResultCreateRequestBody;
}

export interface ApiTestCenterDeleteTestResultIdDeleteRequest {
    id: string;
    reason?: string;
}

export interface ApiTestCenterGetDigitalBooksGetRequest {
    dateFrom?: Date;
    dateTo?: Date;
    licenseCategory?: string;
    showInactive?: boolean;
}

export interface ApiTestCenterGetTestExamRightsSsnGetRequest {
    ssn: string;
    testTypeId: number;
}

export interface ApiTestCenterGetTestResultBookIdGetRequest {
    bookId: string;
    testTypeId?: number;
    id?: string;
}

export interface ApiTestCenterGetTestTestTypeIdGetRequest {
    testTypeId: number;
}

export interface ApiTestCenterGetTestTypesGetRequest {
    licenseCategory?: string;
}

export interface ApiTestCenterStudentLicenseNumberGetRequest {
    ssn?: string;
    licenseCategory?: string;
}

export interface ApiTestCenterUpdateTestResultIdPutRequest {
    id: string;
    testResultUpdateRequestBody?: TestResultUpdateRequestBody;
}

/**
 * 
 */
export class DrivingLicenseBookApi extends runtime.BaseAPI {

    /**
     */
    async apiAuthenticationAuthenticatePostRaw(requestParameters: ApiAuthenticationAuthenticatePostRequest): Promise<runtime.ApiResponse<AuthenticateResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Authentication/Authenticate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthenticateModelToJSON(requestParameters.authenticateModel),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthenticateResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiAuthenticationAuthenticatePost(requestParameters: ApiAuthenticationAuthenticatePostRequest): Promise<AuthenticateResponse> {
        const response = await this.apiAuthenticationAuthenticatePostRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiDLBGetLicenseCategoriesGetRaw(requestParameters: ApiDLBGetLicenseCategoriesGetRequest): Promise<runtime.ApiResponse<LicenseCategoryGetResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.onlyActive !== undefined) {
            queryParameters['onlyActive'] = requestParameters.onlyActive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/DLB/GetLicenseCategories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => LicenseCategoryGetResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiDLBGetLicenseCategoriesGet(requestParameters: ApiDLBGetLicenseCategoriesGetRequest): Promise<LicenseCategoryGetResponse> {
        const response = await this.apiDLBGetLicenseCategoriesGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiSchoolCreateSchoolTestResultPostRaw(requestParameters: ApiSchoolCreateSchoolTestResultPostRequest): Promise<runtime.ApiResponse<SchoolTestResultCreateResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/School/CreateSchoolTestResult`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SchoolTestResultCreateRequestBodyToJSON(requestParameters.schoolTestResultCreateRequestBody),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SchoolTestResultCreateResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiSchoolCreateSchoolTestResultPost(requestParameters: ApiSchoolCreateSchoolTestResultPostRequest): Promise<SchoolTestResultCreateResponse> {
        const response = await this.apiSchoolCreateSchoolTestResultPostRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiSchoolDeleteSchoolTestResultIdDeleteRaw(requestParameters: ApiSchoolDeleteSchoolTestResultIdDeleteRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiSchoolDeleteSchoolTestResultIdDelete.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.reason !== undefined) {
            queryParameters['reason'] = requestParameters.reason;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/School/DeleteSchoolTestResult/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiSchoolDeleteSchoolTestResultIdDelete(requestParameters: ApiSchoolDeleteSchoolTestResultIdDeleteRequest): Promise<void> {
        await this.apiSchoolDeleteSchoolTestResultIdDeleteRaw(requestParameters);
    }

    /**
     */
    async apiSchoolGetSchoolForSchoolStaffUserSsnGetRaw(requestParameters: ApiSchoolGetSchoolForSchoolStaffUserSsnGetRequest): Promise<runtime.ApiResponse<Organization>> {
        if (requestParameters.userSsn === null || requestParameters.userSsn === undefined) {
            throw new runtime.RequiredError('userSsn','Required parameter requestParameters.userSsn was null or undefined when calling apiSchoolGetSchoolForSchoolStaffUserSsnGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/School/GetSchoolForSchoolStaff/{userSsn}`.replace(`{${"userSsn"}}`, encodeURIComponent(String(requestParameters.userSsn))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganizationFromJSON(jsonValue));
    }

    /**
     */
    async apiSchoolGetSchoolForSchoolStaffUserSsnGet(requestParameters: ApiSchoolGetSchoolForSchoolStaffUserSsnGetRequest): Promise<Organization> {
        const response = await this.apiSchoolGetSchoolForSchoolStaffUserSsnGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiSchoolGetSchoolTestResultIdGetRaw(requestParameters: ApiSchoolGetSchoolTestResultIdGetRequest): Promise<runtime.ApiResponse<SchoolTestResultGetResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiSchoolGetSchoolTestResultIdGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/School/GetSchoolTestResult/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SchoolTestResultGetResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiSchoolGetSchoolTestResultIdGet(requestParameters: ApiSchoolGetSchoolTestResultIdGetRequest): Promise<SchoolTestResultGetResponse> {
        const response = await this.apiSchoolGetSchoolTestResultIdGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiSchoolGetSchoolTestResultsBookIdGetRaw(requestParameters: ApiSchoolGetSchoolTestResultsBookIdGetRequest): Promise<runtime.ApiResponse<SchoolTestResultsGetResponse>> {
        if (requestParameters.bookId === null || requestParameters.bookId === undefined) {
            throw new runtime.RequiredError('bookId','Required parameter requestParameters.bookId was null or undefined when calling apiSchoolGetSchoolTestResultsBookIdGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.showInactive !== undefined) {
            queryParameters['showInactive'] = requestParameters.showInactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/School/GetSchoolTestResults/{bookId}`.replace(`{${"bookId"}}`, encodeURIComponent(String(requestParameters.bookId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SchoolTestResultsGetResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiSchoolGetSchoolTestResultsBookIdGet(requestParameters: ApiSchoolGetSchoolTestResultsBookIdGetRequest): Promise<SchoolTestResultsGetResponse> {
        const response = await this.apiSchoolGetSchoolTestResultsBookIdGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiSchoolGetSchoolTypesGetRaw(requestParameters: ApiSchoolGetSchoolTypesGetRequest): Promise<runtime.ApiResponse<SchoolTypeGetResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.licenseCategory !== undefined) {
            queryParameters['licenseCategory'] = requestParameters.licenseCategory;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/School/GetSchoolTypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SchoolTypeGetResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiSchoolGetSchoolTypesGet(requestParameters: ApiSchoolGetSchoolTypesGetRequest): Promise<SchoolTypeGetResponse> {
        const response = await this.apiSchoolGetSchoolTypesGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiSchoolUpdateSchoolTestResultIdPutRaw(requestParameters: ApiSchoolUpdateSchoolTestResultIdPutRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiSchoolUpdateSchoolTestResultIdPut.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/School/UpdateSchoolTestResult/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SchoolTestResultUpdateRequestBodyToJSON(requestParameters.schoolTestResultUpdateRequestBody),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiSchoolUpdateSchoolTestResultIdPut(requestParameters: ApiSchoolUpdateSchoolTestResultIdPutRequest): Promise<void> {
        await this.apiSchoolUpdateSchoolTestResultIdPutRaw(requestParameters);
    }

    /**
     */
    async apiStudentCanStartDrivingSchoolThreeSsnGetRaw(requestParameters: ApiStudentCanStartDrivingSchoolThreeSsnGetRequest): Promise<runtime.ApiResponse<CanStartDrivingSchoolThree>> {
        if (requestParameters.ssn === null || requestParameters.ssn === undefined) {
            throw new runtime.RequiredError('ssn','Required parameter requestParameters.ssn was null or undefined when calling apiStudentCanStartDrivingSchoolThreeSsnGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Student/CanStartDrivingSchoolThree/{ssn}`.replace(`{${"ssn"}}`, encodeURIComponent(String(requestParameters.ssn))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CanStartDrivingSchoolThreeFromJSON(jsonValue));
    }

    /**
     */
    async apiStudentCanStartDrivingSchoolThreeSsnGet(requestParameters: ApiStudentCanStartDrivingSchoolThreeSsnGetRequest): Promise<CanStartDrivingSchoolThree> {
        const response = await this.apiStudentCanStartDrivingSchoolThreeSsnGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiStudentCreateLicenseBookPostRaw(requestParameters: ApiStudentCreateLicenseBookPostRequest): Promise<runtime.ApiResponse<DigitalBookCreateResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Student/CreateLicenseBook`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DigitalBookCreateRequestBodyToJSON(requestParameters.digitalBookCreateRequestBody),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DigitalBookCreateResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiStudentCreateLicenseBookPost(requestParameters: ApiStudentCreateLicenseBookPostRequest): Promise<DigitalBookCreateResponse> {
        const response = await this.apiStudentCreateLicenseBookPostRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiStudentDeleteLicenseBookIdDeleteRaw(requestParameters: ApiStudentDeleteLicenseBookIdDeleteRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiStudentDeleteLicenseBookIdDelete.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.reason !== undefined) {
            queryParameters['reason'] = requestParameters.reason;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Student/DeleteLicenseBook/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiStudentDeleteLicenseBookIdDelete(requestParameters: ApiStudentDeleteLicenseBookIdDeleteRequest): Promise<void> {
        await this.apiStudentDeleteLicenseBookIdDeleteRaw(requestParameters);
    }

    /**
     */
    async apiStudentGetLicenseBookIdGetRaw(requestParameters: ApiStudentGetLicenseBookIdGetRequest): Promise<runtime.ApiResponse<DigitalBookGetResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiStudentGetLicenseBookIdGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Student/GetLicenseBook/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DigitalBookGetResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiStudentGetLicenseBookIdGet(requestParameters: ApiStudentGetLicenseBookIdGetRequest): Promise<DigitalBookGetResponse> {
        const response = await this.apiStudentGetLicenseBookIdGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiStudentGetLicenseBookListSsnGetRaw(requestParameters: ApiStudentGetLicenseBookListSsnGetRequest): Promise<runtime.ApiResponse<DigitalBookListGetResponse>> {
        if (requestParameters.ssn === null || requestParameters.ssn === undefined) {
            throw new runtime.RequiredError('ssn','Required parameter requestParameters.ssn was null or undefined when calling apiStudentGetLicenseBookListSsnGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Student/GetLicenseBookList/{ssn}`.replace(`{${"ssn"}}`, encodeURIComponent(String(requestParameters.ssn))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DigitalBookListGetResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiStudentGetLicenseBookListSsnGet(requestParameters: ApiStudentGetLicenseBookListSsnGetRequest): Promise<DigitalBookListGetResponse> {
        const response = await this.apiStudentGetLicenseBookListSsnGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiStudentGetStudentActiveBookIdSsnGetRaw(requestParameters: ApiStudentGetStudentActiveBookIdSsnGetRequest): Promise<runtime.ApiResponse<StudentBookIdGetResponse>> {
        if (requestParameters.ssn === null || requestParameters.ssn === undefined) {
            throw new runtime.RequiredError('ssn','Required parameter requestParameters.ssn was null or undefined when calling apiStudentGetStudentActiveBookIdSsnGet.');
        }

        if (requestParameters.licenseCategory === null || requestParameters.licenseCategory === undefined) {
            throw new runtime.RequiredError('licenseCategory','Required parameter requestParameters.licenseCategory was null or undefined when calling apiStudentGetStudentActiveBookIdSsnGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.licenseCategory !== undefined) {
            queryParameters['licenseCategory'] = requestParameters.licenseCategory;
        }

        if (requestParameters.includeCompleted !== undefined) {
            queryParameters['includeCompleted'] = requestParameters.includeCompleted;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Student/GetStudentActiveBookId/{ssn}`.replace(`{${"ssn"}}`, encodeURIComponent(String(requestParameters.ssn))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => StudentBookIdGetResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiStudentGetStudentActiveBookIdSsnGet(requestParameters: ApiStudentGetStudentActiveBookIdSsnGetRequest): Promise<StudentBookIdGetResponse> {
        const response = await this.apiStudentGetStudentActiveBookIdSsnGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiStudentGetStudentActiveLicenseBookBySsnSsnGetRaw(requestParameters: ApiStudentGetStudentActiveLicenseBookBySsnSsnGetRequest): Promise<runtime.ApiResponse<DigitalBookGetResponse>> {
        if (requestParameters.ssn === null || requestParameters.ssn === undefined) {
            throw new runtime.RequiredError('ssn','Required parameter requestParameters.ssn was null or undefined when calling apiStudentGetStudentActiveLicenseBookBySsnSsnGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.licenseCategory !== undefined) {
            queryParameters['licenseCategory'] = requestParameters.licenseCategory;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Student/GetStudentActiveLicenseBookBySsn/{ssn}`.replace(`{${"ssn"}}`, encodeURIComponent(String(requestParameters.ssn))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DigitalBookGetResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiStudentGetStudentActiveLicenseBookBySsnSsnGet(requestParameters: ApiStudentGetStudentActiveLicenseBookBySsnSsnGetRequest): Promise<DigitalBookGetResponse> {
        const response = await this.apiStudentGetStudentActiveLicenseBookBySsnSsnGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiStudentGetStudentDrivingSchoolProgressSsnGetRaw(requestParameters: ApiStudentGetStudentDrivingSchoolProgressSsnGetRequest): Promise<runtime.ApiResponse<StudentDrivingSchoolProgress>> {
        if (requestParameters.ssn === null || requestParameters.ssn === undefined) {
            throw new runtime.RequiredError('ssn','Required parameter requestParameters.ssn was null or undefined when calling apiStudentGetStudentDrivingSchoolProgressSsnGet.');
        }

        if (requestParameters.licenseCategory === null || requestParameters.licenseCategory === undefined) {
            throw new runtime.RequiredError('licenseCategory','Required parameter requestParameters.licenseCategory was null or undefined when calling apiStudentGetStudentDrivingSchoolProgressSsnGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.licenseCategory !== undefined) {
            queryParameters['licenseCategory'] = requestParameters.licenseCategory;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Student/GetStudentDrivingSchoolProgress/{ssn}`.replace(`{${"ssn"}}`, encodeURIComponent(String(requestParameters.ssn))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => StudentDrivingSchoolProgressFromJSON(jsonValue));
    }

    /**
     */
    async apiStudentGetStudentDrivingSchoolProgressSsnGet(requestParameters: ApiStudentGetStudentDrivingSchoolProgressSsnGetRequest): Promise<StudentDrivingSchoolProgress> {
        const response = await this.apiStudentGetStudentDrivingSchoolProgressSsnGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiStudentGetStudentListGetRaw(requestParameters: ApiStudentGetStudentListGetRequest): Promise<runtime.ApiResponse<StudentListGetResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.key !== undefined) {
            queryParameters['key'] = requestParameters.key;
        }

        if (requestParameters.licenseCategory !== undefined) {
            queryParameters['licenseCategory'] = requestParameters.licenseCategory;
        }

        if (requestParameters.cursor !== undefined) {
            queryParameters['cursor'] = requestParameters.cursor;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Student/GetStudentList`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => StudentListGetResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiStudentGetStudentListGet(requestParameters: ApiStudentGetStudentListGetRequest): Promise<StudentListGetResponse> {
        const response = await this.apiStudentGetStudentListGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiStudentGetStudentOverviewSsnGetRaw(requestParameters: ApiStudentGetStudentOverviewSsnGetRequest): Promise<runtime.ApiResponse<StudentOverviewGetResponse>> {
        if (requestParameters.ssn === null || requestParameters.ssn === undefined) {
            throw new runtime.RequiredError('ssn','Required parameter requestParameters.ssn was null or undefined when calling apiStudentGetStudentOverviewSsnGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.showInactiveBooks !== undefined) {
            queryParameters['showInactiveBooks'] = requestParameters.showInactiveBooks;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Student/GetStudentOverview/{ssn}`.replace(`{${"ssn"}}`, encodeURIComponent(String(requestParameters.ssn))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => StudentOverviewGetResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiStudentGetStudentOverviewSsnGet(requestParameters: ApiStudentGetStudentOverviewSsnGetRequest): Promise<StudentOverviewGetResponse> {
        const response = await this.apiStudentGetStudentOverviewSsnGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiStudentUpdateLicenseBookIdPutRaw(requestParameters: ApiStudentUpdateLicenseBookIdPutRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiStudentUpdateLicenseBookIdPut.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Student/UpdateLicenseBook/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DigitalBookUpdateRequestBodyToJSON(requestParameters.digitalBookUpdateRequestBody),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiStudentUpdateLicenseBookIdPut(requestParameters: ApiStudentUpdateLicenseBookIdPutRequest): Promise<void> {
        await this.apiStudentUpdateLicenseBookIdPutRaw(requestParameters);
    }

    /**
     */
    async apiTeacherCanAllowStudentToPracticeDrivingSsnGetRaw(requestParameters: ApiTeacherCanAllowStudentToPracticeDrivingSsnGetRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.ssn === null || requestParameters.ssn === undefined) {
            throw new runtime.RequiredError('ssn','Required parameter requestParameters.ssn was null or undefined when calling apiTeacherCanAllowStudentToPracticeDrivingSsnGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Teacher/CanAllowStudentToPracticeDriving/{ssn}`.replace(`{${"ssn"}}`, encodeURIComponent(String(requestParameters.ssn))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiTeacherCanAllowStudentToPracticeDrivingSsnGet(requestParameters: ApiTeacherCanAllowStudentToPracticeDrivingSsnGetRequest): Promise<void> {
        await this.apiTeacherCanAllowStudentToPracticeDrivingSsnGetRaw(requestParameters);
    }

    /**
     */
    async apiTeacherCreateAllowedPracticeDrivingPostRaw(requestParameters: ApiTeacherCreateAllowedPracticeDrivingPostRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Teacher/CreateAllowedPracticeDriving`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateAllowedPractieDrivingRequestBodyToJSON(requestParameters.createAllowedPractieDrivingRequestBody),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiTeacherCreateAllowedPracticeDrivingPost(requestParameters: ApiTeacherCreateAllowedPracticeDrivingPostRequest): Promise<void> {
        await this.apiTeacherCreateAllowedPracticeDrivingPostRaw(requestParameters);
    }

    /**
     */
    async apiTeacherCreateExemptionPostRaw(requestParameters: ApiTeacherCreateExemptionPostRequest): Promise<runtime.ApiResponse<ExemptionCreateResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Teacher/CreateExemption`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ExemptionCreateRequestBodyToJSON(requestParameters.exemptionCreateRequestBody),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ExemptionCreateResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiTeacherCreateExemptionPost(requestParameters: ApiTeacherCreateExemptionPostRequest): Promise<ExemptionCreateResponse> {
        const response = await this.apiTeacherCreateExemptionPostRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiTeacherCreatePracticalDrivingLessonPostRaw(requestParameters: ApiTeacherCreatePracticalDrivingLessonPostRequest): Promise<runtime.ApiResponse<PracticalDrivingLessonCreateResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Teacher/CreatePracticalDrivingLesson`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PracticalDrivingLessonCreateRequestBodyToJSON(requestParameters.practicalDrivingLessonCreateRequestBody),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PracticalDrivingLessonCreateResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiTeacherCreatePracticalDrivingLessonPost(requestParameters: ApiTeacherCreatePracticalDrivingLessonPostRequest): Promise<PracticalDrivingLessonCreateResponse> {
        const response = await this.apiTeacherCreatePracticalDrivingLessonPostRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiTeacherDeleteAllowedPracticeDrivingDeleteRaw(requestParameters: ApiTeacherDeleteAllowedPracticeDrivingDeleteRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.ssn !== undefined) {
            queryParameters['ssn'] = requestParameters.ssn;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Teacher/DeleteAllowedPracticeDriving`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiTeacherDeleteAllowedPracticeDrivingDelete(requestParameters: ApiTeacherDeleteAllowedPracticeDrivingDeleteRequest): Promise<void> {
        await this.apiTeacherDeleteAllowedPracticeDrivingDeleteRaw(requestParameters);
    }

    /**
     */
    async apiTeacherDeleteExemptionIdDeleteRaw(requestParameters: ApiTeacherDeleteExemptionIdDeleteRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiTeacherDeleteExemptionIdDelete.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.reason !== undefined) {
            queryParameters['reason'] = requestParameters.reason;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Teacher/DeleteExemption/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiTeacherDeleteExemptionIdDelete(requestParameters: ApiTeacherDeleteExemptionIdDeleteRequest): Promise<void> {
        await this.apiTeacherDeleteExemptionIdDeleteRaw(requestParameters);
    }

    /**
     */
    async apiTeacherDeletePracticalDrivingLessonIdDeleteRaw(requestParameters: ApiTeacherDeletePracticalDrivingLessonIdDeleteRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiTeacherDeletePracticalDrivingLessonIdDelete.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.reason !== undefined) {
            queryParameters['reason'] = requestParameters.reason;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Teacher/DeletePracticalDrivingLesson/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiTeacherDeletePracticalDrivingLessonIdDelete(requestParameters: ApiTeacherDeletePracticalDrivingLessonIdDeleteRequest): Promise<void> {
        await this.apiTeacherDeletePracticalDrivingLessonIdDeleteRaw(requestParameters);
    }

    /**
     */
    async apiTeacherGetExemptionGetRaw(requestParameters: ApiTeacherGetExemptionGetRequest): Promise<runtime.ApiResponse<ExemptionsGetResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.bookId !== undefined) {
            queryParameters['bookId'] = requestParameters.bookId;
        }

        if (requestParameters.teacherSsn !== undefined) {
            queryParameters['teacherSsn'] = requestParameters.teacherSsn;
        }

        if (requestParameters.exemptionTypeId !== undefined) {
            queryParameters['exemptionTypeId'] = requestParameters.exemptionTypeId;
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Teacher/GetExemption`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ExemptionsGetResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiTeacherGetExemptionGet(requestParameters: ApiTeacherGetExemptionGetRequest): Promise<ExemptionsGetResponse> {
        const response = await this.apiTeacherGetExemptionGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiTeacherGetExemptionTypesGetRaw(requestParameters: ApiTeacherGetExemptionTypesGetRequest): Promise<runtime.ApiResponse<ExemptionTypeGetResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.licenseCategory !== undefined) {
            queryParameters['licenseCategory'] = requestParameters.licenseCategory;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Teacher/GetExemptionTypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ExemptionTypeGetResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiTeacherGetExemptionTypesGet(requestParameters: ApiTeacherGetExemptionTypesGetRequest): Promise<ExemptionTypeGetResponse> {
        const response = await this.apiTeacherGetExemptionTypesGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiTeacherGetPracticalDrivingLessonsBookIdGetRaw(requestParameters: ApiTeacherGetPracticalDrivingLessonsBookIdGetRequest): Promise<runtime.ApiResponse<PracticalDrivingLessonGetResponse>> {
        if (requestParameters.bookId === null || requestParameters.bookId === undefined) {
            throw new runtime.RequiredError('bookId','Required parameter requestParameters.bookId was null or undefined when calling apiTeacherGetPracticalDrivingLessonsBookIdGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Teacher/GetPracticalDrivingLessons/{bookId}`.replace(`{${"bookId"}}`, encodeURIComponent(String(requestParameters.bookId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PracticalDrivingLessonGetResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiTeacherGetPracticalDrivingLessonsBookIdGet(requestParameters: ApiTeacherGetPracticalDrivingLessonsBookIdGetRequest): Promise<PracticalDrivingLessonGetResponse> {
        const response = await this.apiTeacherGetPracticalDrivingLessonsBookIdGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiTeacherGetStudentOverviewForTeacherTeacherSsnGetRaw(requestParameters: ApiTeacherGetStudentOverviewForTeacherTeacherSsnGetRequest): Promise<runtime.ApiResponse<GetStudentOverviewForTeacherResponse>> {
        if (requestParameters.teacherSsn === null || requestParameters.teacherSsn === undefined) {
            throw new runtime.RequiredError('teacherSsn','Required parameter requestParameters.teacherSsn was null or undefined when calling apiTeacherGetStudentOverviewForTeacherTeacherSsnGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.licenseCategory !== undefined) {
            queryParameters['licenseCategory'] = requestParameters.licenseCategory;
        }

        if (requestParameters.cursor !== undefined) {
            queryParameters['cursor'] = requestParameters.cursor;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.showExpired !== undefined) {
            queryParameters['showExpired'] = requestParameters.showExpired;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Teacher/GetStudentOverviewForTeacher/{teacherSsn}`.replace(`{${"teacherSsn"}}`, encodeURIComponent(String(requestParameters.teacherSsn))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetStudentOverviewForTeacherResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiTeacherGetStudentOverviewForTeacherTeacherSsnGet(requestParameters: ApiTeacherGetStudentOverviewForTeacherTeacherSsnGetRequest): Promise<GetStudentOverviewForTeacherResponse> {
        const response = await this.apiTeacherGetStudentOverviewForTeacherTeacherSsnGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiTeacherGetStudentsForTeacherTeacherSsnGetRaw(requestParameters: ApiTeacherGetStudentsForTeacherTeacherSsnGetRequest): Promise<runtime.ApiResponse<GetStudentsForTeacherResponse>> {
        if (requestParameters.teacherSsn === null || requestParameters.teacherSsn === undefined) {
            throw new runtime.RequiredError('teacherSsn','Required parameter requestParameters.teacherSsn was null or undefined when calling apiTeacherGetStudentsForTeacherTeacherSsnGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.licenseCategory !== undefined) {
            queryParameters['licenseCategory'] = requestParameters.licenseCategory;
        }

        if (requestParameters.cursor !== undefined) {
            queryParameters['cursor'] = requestParameters.cursor;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.showInactive !== undefined) {
            queryParameters['showInactive'] = requestParameters.showInactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Teacher/GetStudentsForTeacher/{teacherSsn}`.replace(`{${"teacherSsn"}}`, encodeURIComponent(String(requestParameters.teacherSsn))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetStudentsForTeacherResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiTeacherGetStudentsForTeacherTeacherSsnGet(requestParameters: ApiTeacherGetStudentsForTeacherTeacherSsnGetRequest): Promise<GetStudentsForTeacherResponse> {
        const response = await this.apiTeacherGetStudentsForTeacherTeacherSsnGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiTeacherGetTeacherSsnGetRaw(requestParameters: ApiTeacherGetTeacherSsnGetRequest): Promise<runtime.ApiResponse<TeacherDetailsGetResponse>> {
        if (requestParameters.ssn === null || requestParameters.ssn === undefined) {
            throw new runtime.RequiredError('ssn','Required parameter requestParameters.ssn was null or undefined when calling apiTeacherGetTeacherSsnGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Teacher/GetTeacher/{ssn}`.replace(`{${"ssn"}}`, encodeURIComponent(String(requestParameters.ssn))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TeacherDetailsGetResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiTeacherGetTeacherSsnGet(requestParameters: ApiTeacherGetTeacherSsnGetRequest): Promise<TeacherDetailsGetResponse> {
        const response = await this.apiTeacherGetTeacherSsnGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiTeacherUpdateExemptionIdPutRaw(requestParameters: ApiTeacherUpdateExemptionIdPutRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiTeacherUpdateExemptionIdPut.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Teacher/UpdateExemption/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ExemptionUpdateRequestBodyToJSON(requestParameters.exemptionUpdateRequestBody),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiTeacherUpdateExemptionIdPut(requestParameters: ApiTeacherUpdateExemptionIdPutRequest): Promise<void> {
        await this.apiTeacherUpdateExemptionIdPutRaw(requestParameters);
    }

    /**
     */
    async apiTeacherUpdatePracticalDrivingLessonIdPutRaw(requestParameters: ApiTeacherUpdatePracticalDrivingLessonIdPutRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiTeacherUpdatePracticalDrivingLessonIdPut.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Teacher/UpdatePracticalDrivingLesson/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PracticalDrivingLessonUpdateRequestBodyToJSON(requestParameters.practicalDrivingLessonUpdateRequestBody),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiTeacherUpdatePracticalDrivingLessonIdPut(requestParameters: ApiTeacherUpdatePracticalDrivingLessonIdPutRequest): Promise<void> {
        await this.apiTeacherUpdatePracticalDrivingLessonIdPutRaw(requestParameters);
    }

    /**
     */
    async apiTestCenterCreateTestResultPostRaw(requestParameters: ApiTestCenterCreateTestResultPostRequest): Promise<runtime.ApiResponse<TestResultCreateResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/TestCenter/CreateTestResult`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TestResultCreateRequestBodyToJSON(requestParameters.testResultCreateRequestBody),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TestResultCreateResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiTestCenterCreateTestResultPost(requestParameters: ApiTestCenterCreateTestResultPostRequest): Promise<TestResultCreateResponse> {
        const response = await this.apiTestCenterCreateTestResultPostRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiTestCenterDeleteTestResultIdDeleteRaw(requestParameters: ApiTestCenterDeleteTestResultIdDeleteRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiTestCenterDeleteTestResultIdDelete.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.reason !== undefined) {
            queryParameters['reason'] = requestParameters.reason;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/TestCenter/DeleteTestResult/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiTestCenterDeleteTestResultIdDelete(requestParameters: ApiTestCenterDeleteTestResultIdDeleteRequest): Promise<void> {
        await this.apiTestCenterDeleteTestResultIdDeleteRaw(requestParameters);
    }

    /**
     */
    async apiTestCenterGetDigitalBooksGetRaw(requestParameters: ApiTestCenterGetDigitalBooksGetRequest): Promise<runtime.ApiResponse<DigitalBooksResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.dateFrom !== undefined) {
            queryParameters['dateFrom'] = (requestParameters.dateFrom as any).toISOString();
        }

        if (requestParameters.dateTo !== undefined) {
            queryParameters['dateTo'] = (requestParameters.dateTo as any).toISOString();
        }

        if (requestParameters.licenseCategory !== undefined) {
            queryParameters['licenseCategory'] = requestParameters.licenseCategory;
        }

        if (requestParameters.showInactive !== undefined) {
            queryParameters['showInactive'] = requestParameters.showInactive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/TestCenter/GetDigitalBooks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DigitalBooksResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiTestCenterGetDigitalBooksGet(requestParameters: ApiTestCenterGetDigitalBooksGetRequest): Promise<DigitalBooksResponse> {
        const response = await this.apiTestCenterGetDigitalBooksGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiTestCenterGetTestExamRightsSsnGetRaw(requestParameters: ApiTestCenterGetTestExamRightsSsnGetRequest): Promise<runtime.ApiResponse<TestExamRightsGetResponse>> {
        if (requestParameters.ssn === null || requestParameters.ssn === undefined) {
            throw new runtime.RequiredError('ssn','Required parameter requestParameters.ssn was null or undefined when calling apiTestCenterGetTestExamRightsSsnGet.');
        }

        if (requestParameters.testTypeId === null || requestParameters.testTypeId === undefined) {
            throw new runtime.RequiredError('testTypeId','Required parameter requestParameters.testTypeId was null or undefined when calling apiTestCenterGetTestExamRightsSsnGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.testTypeId !== undefined) {
            queryParameters['testTypeId'] = requestParameters.testTypeId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/TestCenter/GetTestExamRights/{ssn}`.replace(`{${"ssn"}}`, encodeURIComponent(String(requestParameters.ssn))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TestExamRightsGetResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiTestCenterGetTestExamRightsSsnGet(requestParameters: ApiTestCenterGetTestExamRightsSsnGetRequest): Promise<TestExamRightsGetResponse> {
        const response = await this.apiTestCenterGetTestExamRightsSsnGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiTestCenterGetTestResultBookIdGetRaw(requestParameters: ApiTestCenterGetTestResultBookIdGetRequest): Promise<runtime.ApiResponse<TestResultGetResponse>> {
        if (requestParameters.bookId === null || requestParameters.bookId === undefined) {
            throw new runtime.RequiredError('bookId','Required parameter requestParameters.bookId was null or undefined when calling apiTestCenterGetTestResultBookIdGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.testTypeId !== undefined) {
            queryParameters['testTypeId'] = requestParameters.testTypeId;
        }

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/TestCenter/GetTestResult/{bookId}`.replace(`{${"bookId"}}`, encodeURIComponent(String(requestParameters.bookId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TestResultGetResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiTestCenterGetTestResultBookIdGet(requestParameters: ApiTestCenterGetTestResultBookIdGetRequest): Promise<TestResultGetResponse> {
        const response = await this.apiTestCenterGetTestResultBookIdGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiTestCenterGetTestTestTypeIdGetRaw(requestParameters: ApiTestCenterGetTestTestTypeIdGetRequest): Promise<runtime.ApiResponse<TestGetResponse>> {
        if (requestParameters.testTypeId === null || requestParameters.testTypeId === undefined) {
            throw new runtime.RequiredError('testTypeId','Required parameter requestParameters.testTypeId was null or undefined when calling apiTestCenterGetTestTestTypeIdGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/TestCenter/GetTest/{testTypeId}`.replace(`{${"testTypeId"}}`, encodeURIComponent(String(requestParameters.testTypeId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TestGetResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiTestCenterGetTestTestTypeIdGet(requestParameters: ApiTestCenterGetTestTestTypeIdGetRequest): Promise<TestGetResponse> {
        const response = await this.apiTestCenterGetTestTestTypeIdGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiTestCenterGetTestTypesGetRaw(requestParameters: ApiTestCenterGetTestTypesGetRequest): Promise<runtime.ApiResponse<TestTypeGetResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.licenseCategory !== undefined) {
            queryParameters['licenseCategory'] = requestParameters.licenseCategory;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/TestCenter/GetTestTypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TestTypeGetResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiTestCenterGetTestTypesGet(requestParameters: ApiTestCenterGetTestTypesGetRequest): Promise<TestTypeGetResponse> {
        const response = await this.apiTestCenterGetTestTypesGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiTestCenterStudentLicenseNumberGetRaw(requestParameters: ApiTestCenterStudentLicenseNumberGetRequest): Promise<runtime.ApiResponse<GetStudentLicenseNumberResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.ssn !== undefined) {
            queryParameters['ssn'] = requestParameters.ssn;
        }

        if (requestParameters.licenseCategory !== undefined) {
            queryParameters['licenseCategory'] = requestParameters.licenseCategory;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/TestCenter/StudentLicenseNumber`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetStudentLicenseNumberResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiTestCenterStudentLicenseNumberGet(requestParameters: ApiTestCenterStudentLicenseNumberGetRequest): Promise<GetStudentLicenseNumberResponse> {
        const response = await this.apiTestCenterStudentLicenseNumberGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiTestCenterUpdateTestResultIdPutRaw(requestParameters: ApiTestCenterUpdateTestResultIdPutRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiTestCenterUpdateTestResultIdPut.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/TestCenter/UpdateTestResult/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TestResultUpdateRequestBodyToJSON(requestParameters.testResultUpdateRequestBody),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiTestCenterUpdateTestResultIdPut(requestParameters: ApiTestCenterUpdateTestResultIdPutRequest): Promise<void> {
        await this.apiTestCenterUpdateTestResultIdPutRaw(requestParameters);
    }

}
