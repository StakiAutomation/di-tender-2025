/* tslint:disable */
/* eslint-disable */
/**
 * SGS - Aircraft Registry API
 * Vefþjónusta fyrir Loftfaraskrá
 *
 * The version of the OpenAPI document: v1
 * Contact: tolvuhjalp@samgongustofa.is
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AircraftGetResponseDto,
    AircraftGetResponseDtoFromJSON,
    AircraftGetResponseDtoToJSON,
    AircraftsGetResponseDto,
    AircraftsGetResponseDtoFromJSON,
    AircraftsGetResponseDtoToJSON,
    AircraftsPaginationGetResponseDto,
    AircraftsPaginationGetResponseDtoFromJSON,
    AircraftsPaginationGetResponseDtoToJSON,
    OwnerWithAircraftsGetResponseDto,
    OwnerWithAircraftsGetResponseDtoFromJSON,
    OwnerWithAircraftsGetResponseDtoToJSON,
    ProblemDetails,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
} from '../models';

export interface GetAircraftByLettersLettersGetRequest {
    letters: string;
    apiVersion?: string;
    apiVersion2?: string;
}

export interface GetAircraftBySerialNumberSerialNumberGetRequest {
    serialNumber: string;
    apiVersion?: string;
    apiVersion2?: string;
}

export interface GetAircraftRegistrationNumberGetRequest {
    registrationNumber: number;
    apiVersion?: string;
    apiVersion2?: string;
}

export interface GetAircraftsByTypeTypeGetRequest {
    type: string;
    includeInactive?: boolean;
    apiVersion?: string;
    apiVersion2?: string;
}

export interface GetAllAircraftsGetRequest {
    searchTerm?: string;
    pageNumber?: number;
    pageSize?: number;
    includeInactive?: boolean;
    apiVersion?: string;
    apiVersion2?: string;
}

export interface GetOperatorWithAircraftsBySSNSsnGetRequest {
    ssn: string;
    includeInactive?: boolean;
    apiVersion?: string;
    apiVersion2?: string;
}

export interface GetOwnerWithAircraftsBySSNSsnGetRequest {
    ssn: string;
    includeInactive?: boolean;
    apiVersion?: string;
    apiVersion2?: string;
}

/**
 * 
 */
export class AircraftRegistryApi extends runtime.BaseAPI {

    /**
     */
    async getAircraftByLettersLettersGetRaw(requestParameters: GetAircraftByLettersLettersGetRequest): Promise<runtime.ApiResponse<AircraftGetResponseDto>> {
        if (requestParameters.letters === null || requestParameters.letters === undefined) {
            throw new runtime.RequiredError('letters','Required parameter requestParameters.letters was null or undefined when calling getAircraftByLettersLettersGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/GetAircraftByLetters/{letters}`.replace(`{${"letters"}}`, encodeURIComponent(String(requestParameters.letters))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AircraftGetResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async getAircraftByLettersLettersGet(requestParameters: GetAircraftByLettersLettersGetRequest): Promise<AircraftGetResponseDto> {
        const response = await this.getAircraftByLettersLettersGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getAircraftBySerialNumberSerialNumberGetRaw(requestParameters: GetAircraftBySerialNumberSerialNumberGetRequest): Promise<runtime.ApiResponse<AircraftGetResponseDto>> {
        if (requestParameters.serialNumber === null || requestParameters.serialNumber === undefined) {
            throw new runtime.RequiredError('serialNumber','Required parameter requestParameters.serialNumber was null or undefined when calling getAircraftBySerialNumberSerialNumberGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/GetAircraftBySerialNumber/{serialNumber}`.replace(`{${"serialNumber"}}`, encodeURIComponent(String(requestParameters.serialNumber))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AircraftGetResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async getAircraftBySerialNumberSerialNumberGet(requestParameters: GetAircraftBySerialNumberSerialNumberGetRequest): Promise<AircraftGetResponseDto> {
        const response = await this.getAircraftBySerialNumberSerialNumberGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getAircraftRegistrationNumberGetRaw(requestParameters: GetAircraftRegistrationNumberGetRequest): Promise<runtime.ApiResponse<AircraftGetResponseDto>> {
        if (requestParameters.registrationNumber === null || requestParameters.registrationNumber === undefined) {
            throw new runtime.RequiredError('registrationNumber','Required parameter requestParameters.registrationNumber was null or undefined when calling getAircraftRegistrationNumberGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/GetAircraft/{registrationNumber}`.replace(`{${"registrationNumber"}}`, encodeURIComponent(String(requestParameters.registrationNumber))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AircraftGetResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async getAircraftRegistrationNumberGet(requestParameters: GetAircraftRegistrationNumberGetRequest): Promise<AircraftGetResponseDto> {
        const response = await this.getAircraftRegistrationNumberGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getAircraftsByTypeTypeGetRaw(requestParameters: GetAircraftsByTypeTypeGetRequest): Promise<runtime.ApiResponse<AircraftsGetResponseDto>> {
        if (requestParameters.type === null || requestParameters.type === undefined) {
            throw new runtime.RequiredError('type','Required parameter requestParameters.type was null or undefined when calling getAircraftsByTypeTypeGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/GetAircraftsByType/{type}`.replace(`{${"type"}}`, encodeURIComponent(String(requestParameters.type))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AircraftsGetResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async getAircraftsByTypeTypeGet(requestParameters: GetAircraftsByTypeTypeGetRequest): Promise<AircraftsGetResponseDto> {
        const response = await this.getAircraftsByTypeTypeGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getAllAircraftsGetRaw(requestParameters: GetAllAircraftsGetRequest): Promise<runtime.ApiResponse<AircraftsPaginationGetResponseDto>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.searchTerm !== undefined) {
            queryParameters['searchTerm'] = requestParameters.searchTerm;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['pageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/GetAllAircrafts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AircraftsPaginationGetResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async getAllAircraftsGet(requestParameters: GetAllAircraftsGetRequest): Promise<AircraftsPaginationGetResponseDto> {
        const response = await this.getAllAircraftsGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getOperatorWithAircraftsBySSNSsnGetRaw(requestParameters: GetOperatorWithAircraftsBySSNSsnGetRequest): Promise<runtime.ApiResponse<AircraftsGetResponseDto>> {
        if (requestParameters.ssn === null || requestParameters.ssn === undefined) {
            throw new runtime.RequiredError('ssn','Required parameter requestParameters.ssn was null or undefined when calling getOperatorWithAircraftsBySSNSsnGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/GetOperatorWithAircraftsBySSN/{ssn}`.replace(`{${"ssn"}}`, encodeURIComponent(String(requestParameters.ssn))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AircraftsGetResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async getOperatorWithAircraftsBySSNSsnGet(requestParameters: GetOperatorWithAircraftsBySSNSsnGetRequest): Promise<AircraftsGetResponseDto> {
        const response = await this.getOperatorWithAircraftsBySSNSsnGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getOwnerWithAircraftsBySSNSsnGetRaw(requestParameters: GetOwnerWithAircraftsBySSNSsnGetRequest): Promise<runtime.ApiResponse<OwnerWithAircraftsGetResponseDto>> {
        if (requestParameters.ssn === null || requestParameters.ssn === undefined) {
            throw new runtime.RequiredError('ssn','Required parameter requestParameters.ssn was null or undefined when calling getOwnerWithAircraftsBySSNSsnGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.includeInactive !== undefined) {
            queryParameters['includeInactive'] = requestParameters.includeInactive;
        }

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        const response = await this.request({
            path: `/GetOwnerWithAircraftsBySSN/{ssn}`.replace(`{${"ssn"}}`, encodeURIComponent(String(requestParameters.ssn))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OwnerWithAircraftsGetResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async getOwnerWithAircraftsBySSNSsnGet(requestParameters: GetOwnerWithAircraftsBySSNSsnGetRequest): Promise<OwnerWithAircraftsGetResponseDto> {
        const response = await this.getOwnerWithAircraftsBySSNSsnGetRaw(requestParameters);
        return await response.value();
    }

}
