/* tslint:disable */
/* eslint-disable */
/**
 * GoPro.EIR.Rest
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface AuthenticateRequest {
    username: string;
    password: string;
    token?: string;
}

/**
 * 
 */
export class SecurityApi extends runtime.BaseAPI {

    /**
     * Authenticate with username and password. Returns authenticationToken that is used when calling other API methods.
     */
    async authenticateRaw(requestParameters: AuthenticateRequest): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.username === null || requestParameters.username === undefined) {
            throw new runtime.RequiredError('username','Required parameter requestParameters.username was null or undefined when calling authenticate.');
        }

        if (requestParameters.password === null || requestParameters.password === undefined) {
            throw new runtime.RequiredError('password','Required parameter requestParameters.password was null or undefined when calling authenticate.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.username !== undefined) {
            queryParameters['username'] = requestParameters.username;
        }

        if (requestParameters.password !== undefined) {
            queryParameters['password'] = requestParameters.password;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        const response = await this.request({
            path: `/Authenticate`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Authenticate with username and password. Returns authenticationToken that is used when calling other API methods.
     */
    async authenticate(requestParameters: AuthenticateRequest): Promise<string> {
        const response = await this.authenticateRaw(requestParameters);
        return await response.value();
    }

}
