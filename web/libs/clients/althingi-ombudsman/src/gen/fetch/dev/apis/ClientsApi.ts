/* tslint:disable */
/* eslint-disable */
/**
 * GoPro.EIR.Rest
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Company,
    CompanyFromJSON,
    CompanyToJSON,
    Contact,
    ContactFromJSON,
    ContactToJSON,
    GetCompanyResponse,
    GetCompanyResponseFromJSON,
    GetCompanyResponseToJSON,
    GetContactResponse,
    GetContactResponseFromJSON,
    GetContactResponseToJSON,
    GetIndividualResponse,
    GetIndividualResponseFromJSON,
    GetIndividualResponseToJSON,
    Individual,
    IndividualFromJSON,
    IndividualToJSON,
    ReferenceResponse,
    ReferenceResponseFromJSON,
    ReferenceResponseToJSON,
    SearchKeyRequest,
    SearchKeyRequestFromJSON,
    SearchKeyRequestToJSON,
} from '../models';

export interface CreateCompanyRequest {
    requestData: Company;
    token?: string;
}

export interface CreateContactRequest {
    requestData: Contact;
    token?: string;
}

export interface CreateIndividualRequest {
    requestData: Individual;
    token?: string;
}

export interface GetCompanyRequest {
    requestData: SearchKeyRequest;
    token?: string;
}

export interface GetContactRequest {
    requestData: SearchKeyRequest;
    token?: string;
}

export interface GetIndividualRequest {
    requestData: SearchKeyRequest;
    token?: string;
}

/**
 * 
 */
export class ClientsApi extends runtime.BaseAPI {

    /**
     */
    async createCompanyRaw(requestParameters: CreateCompanyRequest): Promise<runtime.ApiResponse<ReferenceResponse>> {
        if (requestParameters.requestData === null || requestParameters.requestData === undefined) {
            throw new runtime.RequiredError('requestData','Required parameter requestParameters.requestData was null or undefined when calling createCompany.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        const response = await this.request({
            path: `/Clients/CreateCompany`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CompanyToJSON(requestParameters.requestData),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ReferenceResponseFromJSON(jsonValue));
    }

    /**
     */
    async createCompany(requestParameters: CreateCompanyRequest): Promise<ReferenceResponse> {
        const response = await this.createCompanyRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async createContactRaw(requestParameters: CreateContactRequest): Promise<runtime.ApiResponse<ReferenceResponse>> {
        if (requestParameters.requestData === null || requestParameters.requestData === undefined) {
            throw new runtime.RequiredError('requestData','Required parameter requestParameters.requestData was null or undefined when calling createContact.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        const response = await this.request({
            path: `/Clients/CreateContact`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ContactToJSON(requestParameters.requestData),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ReferenceResponseFromJSON(jsonValue));
    }

    /**
     */
    async createContact(requestParameters: CreateContactRequest): Promise<ReferenceResponse> {
        const response = await this.createContactRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async createIndividualRaw(requestParameters: CreateIndividualRequest): Promise<runtime.ApiResponse<ReferenceResponse>> {
        if (requestParameters.requestData === null || requestParameters.requestData === undefined) {
            throw new runtime.RequiredError('requestData','Required parameter requestParameters.requestData was null or undefined when calling createIndividual.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        const response = await this.request({
            path: `/Clients/CreateIndividual`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IndividualToJSON(requestParameters.requestData),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ReferenceResponseFromJSON(jsonValue));
    }

    /**
     */
    async createIndividual(requestParameters: CreateIndividualRequest): Promise<ReferenceResponse> {
        const response = await this.createIndividualRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getCompanyRaw(requestParameters: GetCompanyRequest): Promise<runtime.ApiResponse<GetCompanyResponse>> {
        if (requestParameters.requestData === null || requestParameters.requestData === undefined) {
            throw new runtime.RequiredError('requestData','Required parameter requestParameters.requestData was null or undefined when calling getCompany.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        const response = await this.request({
            path: `/Clients/GetCompany`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchKeyRequestToJSON(requestParameters.requestData),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCompanyResponseFromJSON(jsonValue));
    }

    /**
     */
    async getCompany(requestParameters: GetCompanyRequest): Promise<GetCompanyResponse> {
        const response = await this.getCompanyRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getContactRaw(requestParameters: GetContactRequest): Promise<runtime.ApiResponse<GetContactResponse>> {
        if (requestParameters.requestData === null || requestParameters.requestData === undefined) {
            throw new runtime.RequiredError('requestData','Required parameter requestParameters.requestData was null or undefined when calling getContact.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        const response = await this.request({
            path: `/Clients/GetContact`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchKeyRequestToJSON(requestParameters.requestData),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetContactResponseFromJSON(jsonValue));
    }

    /**
     */
    async getContact(requestParameters: GetContactRequest): Promise<GetContactResponse> {
        const response = await this.getContactRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getIndividualRaw(requestParameters: GetIndividualRequest): Promise<runtime.ApiResponse<GetIndividualResponse>> {
        if (requestParameters.requestData === null || requestParameters.requestData === undefined) {
            throw new runtime.RequiredError('requestData','Required parameter requestParameters.requestData was null or undefined when calling getIndividual.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        const response = await this.request({
            path: `/Clients/GetIndividual`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchKeyRequestToJSON(requestParameters.requestData),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetIndividualResponseFromJSON(jsonValue));
    }

    /**
     */
    async getIndividual(requestParameters: GetIndividualRequest): Promise<GetIndividualResponse> {
        const response = await this.getIndividualRaw(requestParameters);
        return await response.value();
    }

}
