/* tslint:disable */
/* eslint-disable */
/**
 * SGS Rest API
 * Mileage reading API developed in .Net8.0 - Release-24 : 20250306.1
 *
 * The version of the OpenAPI document: 1.0
 * Contact: tolvuhjalp@samgongustofa.is
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    BulkMileageReadingRequestDetailDto,
    BulkMileageReadingRequestDetailDtoFromJSON,
    BulkMileageReadingRequestDetailDtoToJSON,
    BulkMileageReadingRequestDto,
    BulkMileageReadingRequestDtoFromJSON,
    BulkMileageReadingRequestDtoToJSON,
    BulkMileageReadingRequestResultDto,
    BulkMileageReadingRequestResultDtoFromJSON,
    BulkMileageReadingRequestResultDtoToJSON,
    BulkMileageReadingStatusDto,
    BulkMileageReadingStatusDtoFromJSON,
    BulkMileageReadingStatusDtoToJSON,
    DeleteMileageReadingNoErrorCheckModel,
    DeleteMileageReadingNoErrorCheckModelFromJSON,
    DeleteMileageReadingNoErrorCheckModelToJSON,
    MileageReadingDto,
    MileageReadingDtoFromJSON,
    MileageReadingDtoToJSON,
    PostBulkMileageReadingModel,
    PostBulkMileageReadingModelFromJSON,
    PostBulkMileageReadingModelToJSON,
    PostMileageReadingModel,
    PostMileageReadingModelFromJSON,
    PostMileageReadingModelToJSON,
    ProblemDetails,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    PutMileageReadingModel,
    PutMileageReadingModelFromJSON,
    PutMileageReadingModelToJSON,
} from '../models';

export interface CanregistermileagePermnoGetRequest {
    permno: string;
    apiVersion?: string;
    apiVersion2?: string;
}

export interface GetMileageReadingRequest {
    permno: string;
    apiVersion?: string;
    apiVersion2?: string;
}

export interface GetMileageReadingWithInternalIdRequest {
    permno: string;
    internalId: number;
    apiVersion?: string;
    apiVersion2?: string;
}

export interface GetbulkmileagereadingrequestdetailsGuidGetRequest {
    guid: string;
    apiVersion?: string;
    apiVersion2?: string;
}

export interface GetbulkmileagereadingrequestsGetRequest {
    persidno?: string;
    apiVersion?: string;
    apiVersion2?: string;
}

export interface GetbulkmileagereadingrequeststatusGuidGetRequest {
    guid: string;
    apiVersion?: string;
    apiVersion2?: string;
}

export interface NextavailablemileageregistrationPermnoGetRequest {
    permno: string;
    apiVersion?: string;
    apiVersion2?: string;
}

export interface RequestbulkmileagereadingPostRequest {
    apiVersion?: string;
    apiVersion2?: string;
    postBulkMileageReadingModel?: PostBulkMileageReadingModel;
}

export interface RequiresmileageregistrationPermnoGetRequest {
    permno: string;
    apiVersion?: string;
    apiVersion2?: string;
}

export interface RootDeleteRequest {
    apiVersion?: string;
    apiVersion2?: string;
    deleteMileageReadingNoErrorCheckModel?: DeleteMileageReadingNoErrorCheckModel;
}

export interface RootPostRequest {
    apiVersion?: string;
    apiVersion2?: string;
    postMileageReadingModel?: PostMileageReadingModel;
}

export interface RootPutRequest {
    apiVersion?: string;
    apiVersion2?: string;
    putMileageReadingModel?: PutMileageReadingModel;
}

/**
 * 
 */
export class MileageReadingApi extends runtime.BaseAPI {

    /**
     * Can vehicle register mileage
     */
    async canregistermileagePermnoGetRaw(requestParameters: CanregistermileagePermnoGetRequest): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.permno === null || requestParameters.permno === undefined) {
            throw new runtime.RequiredError('permno','Required parameter requestParameters.permno was null or undefined when calling canregistermileagePermnoGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/canregistermileage/{permno}`.replace(`{${"permno"}}`, encodeURIComponent(String(requestParameters.permno))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Can vehicle register mileage
     */
    async canregistermileagePermnoGet(requestParameters: CanregistermileagePermnoGetRequest): Promise<boolean> {
        const response = await this.canregistermileagePermnoGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Populate all mileage readings for a vehicle
     */
    async getMileageReadingRaw(requestParameters: GetMileageReadingRequest): Promise<runtime.ApiResponse<Array<MileageReadingDto>>> {
        if (requestParameters.permno === null || requestParameters.permno === undefined) {
            throw new runtime.RequiredError('permno','Required parameter requestParameters.permno was null or undefined when calling getMileageReading.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/{permno}`.replace(`{${"permno"}}`, encodeURIComponent(String(requestParameters.permno))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MileageReadingDtoFromJSON));
    }

    /**
     * Populate all mileage readings for a vehicle
     */
    async getMileageReading(requestParameters: GetMileageReadingRequest): Promise<Array<MileageReadingDto>> {
        const response = await this.getMileageReadingRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieves a mileage reading by vehicle permno and internal ID
     */
    async getMileageReadingWithInternalIdRaw(requestParameters: GetMileageReadingWithInternalIdRequest): Promise<runtime.ApiResponse<MileageReadingDto>> {
        if (requestParameters.permno === null || requestParameters.permno === undefined) {
            throw new runtime.RequiredError('permno','Required parameter requestParameters.permno was null or undefined when calling getMileageReadingWithInternalId.');
        }

        if (requestParameters.internalId === null || requestParameters.internalId === undefined) {
            throw new runtime.RequiredError('internalId','Required parameter requestParameters.internalId was null or undefined when calling getMileageReadingWithInternalId.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/{permno}/internalid/{internalId}`.replace(`{${"permno"}}`, encodeURIComponent(String(requestParameters.permno))).replace(`{${"internalId"}}`, encodeURIComponent(String(requestParameters.internalId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MileageReadingDtoFromJSON(jsonValue));
    }

    /**
     * Retrieves a mileage reading by vehicle permno and internal ID
     */
    async getMileageReadingWithInternalId(requestParameters: GetMileageReadingWithInternalIdRequest): Promise<MileageReadingDto> {
        const response = await this.getMileageReadingWithInternalIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Populate all mileage readings for a vehicle
     */
    async getbulkmileagereadingrequestdetailsGuidGetRaw(requestParameters: GetbulkmileagereadingrequestdetailsGuidGetRequest): Promise<runtime.ApiResponse<Array<BulkMileageReadingRequestDetailDto>>> {
        if (requestParameters.guid === null || requestParameters.guid === undefined) {
            throw new runtime.RequiredError('guid','Required parameter requestParameters.guid was null or undefined when calling getbulkmileagereadingrequestdetailsGuidGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/getbulkmileagereadingrequestdetails/{guid}`.replace(`{${"guid"}}`, encodeURIComponent(String(requestParameters.guid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BulkMileageReadingRequestDetailDtoFromJSON));
    }

    /**
     * Populate all mileage readings for a vehicle
     */
    async getbulkmileagereadingrequestdetailsGuidGet(requestParameters: GetbulkmileagereadingrequestdetailsGuidGetRequest): Promise<Array<BulkMileageReadingRequestDetailDto>> {
        const response = await this.getbulkmileagereadingrequestdetailsGuidGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Populate all mileage readings for a vehicle
     */
    async getbulkmileagereadingrequestsGetRaw(requestParameters: GetbulkmileagereadingrequestsGetRequest): Promise<runtime.ApiResponse<Array<BulkMileageReadingRequestDto>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.persidno !== undefined) {
            queryParameters['persidno'] = requestParameters.persidno;
        }

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/getbulkmileagereadingrequests`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BulkMileageReadingRequestDtoFromJSON));
    }

    /**
     * Populate all mileage readings for a vehicle
     */
    async getbulkmileagereadingrequestsGet(requestParameters: GetbulkmileagereadingrequestsGetRequest): Promise<Array<BulkMileageReadingRequestDto>> {
        const response = await this.getbulkmileagereadingrequestsGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get status of bulk mileage request by guid
     */
    async getbulkmileagereadingrequeststatusGuidGetRaw(requestParameters: GetbulkmileagereadingrequeststatusGuidGetRequest): Promise<runtime.ApiResponse<BulkMileageReadingStatusDto>> {
        if (requestParameters.guid === null || requestParameters.guid === undefined) {
            throw new runtime.RequiredError('guid','Required parameter requestParameters.guid was null or undefined when calling getbulkmileagereadingrequeststatusGuidGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/getbulkmileagereadingrequeststatus/{guid}`.replace(`{${"guid"}}`, encodeURIComponent(String(requestParameters.guid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => BulkMileageReadingStatusDtoFromJSON(jsonValue));
    }

    /**
     * Get status of bulk mileage request by guid
     */
    async getbulkmileagereadingrequeststatusGuidGet(requestParameters: GetbulkmileagereadingrequeststatusGuidGetRequest): Promise<BulkMileageReadingStatusDto> {
        const response = await this.getbulkmileagereadingrequeststatusGuidGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get next available mileage registration
     */
    async nextavailablemileageregistrationPermnoGetRaw(requestParameters: NextavailablemileageregistrationPermnoGetRequest): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.permno === null || requestParameters.permno === undefined) {
            throw new runtime.RequiredError('permno','Required parameter requestParameters.permno was null or undefined when calling nextavailablemileageregistrationPermnoGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/nextavailablemileageregistration/{permno}`.replace(`{${"permno"}}`, encodeURIComponent(String(requestParameters.permno))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Get next available mileage registration
     */
    async nextavailablemileageregistrationPermnoGet(requestParameters: NextavailablemileageregistrationPermnoGetRequest): Promise<string> {
        const response = await this.nextavailablemileageregistrationPermnoGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Request a bulk mileage reading, only to be used by Island.is
     */
    async requestbulkmileagereadingPostRaw(requestParameters: RequestbulkmileagereadingPostRequest): Promise<runtime.ApiResponse<BulkMileageReadingRequestResultDto>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/requestbulkmileagereading`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostBulkMileageReadingModelToJSON(requestParameters.postBulkMileageReadingModel),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => BulkMileageReadingRequestResultDtoFromJSON(jsonValue));
    }

    /**
     * Request a bulk mileage reading, only to be used by Island.is
     */
    async requestbulkmileagereadingPost(requestParameters: RequestbulkmileagereadingPostRequest): Promise<BulkMileageReadingRequestResultDto> {
        const response = await this.requestbulkmileagereadingPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Is vehicle required to register mileage
     */
    async requiresmileageregistrationPermnoGetRaw(requestParameters: RequiresmileageregistrationPermnoGetRequest): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.permno === null || requestParameters.permno === undefined) {
            throw new runtime.RequiredError('permno','Required parameter requestParameters.permno was null or undefined when calling requiresmileageregistrationPermnoGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/requiresmileageregistration/{permno}`.replace(`{${"permno"}}`, encodeURIComponent(String(requestParameters.permno))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Is vehicle required to register mileage
     */
    async requiresmileageregistrationPermnoGet(requestParameters: RequiresmileageregistrationPermnoGetRequest): Promise<boolean> {
        const response = await this.requiresmileageregistrationPermnoGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Deletes a mileage reading without error checks.
     */
    async rootDeleteRaw(requestParameters: RootDeleteRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteMileageReadingNoErrorCheckModelToJSON(requestParameters.deleteMileageReadingNoErrorCheckModel),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a mileage reading without error checks.
     */
    async rootDelete(requestParameters: RootDeleteRequest): Promise<void> {
        await this.rootDeleteRaw(requestParameters);
    }

    /**
     * Post mileage reading
     */
    async rootPostRaw(requestParameters: RootPostRequest): Promise<runtime.ApiResponse<MileageReadingDto>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostMileageReadingModelToJSON(requestParameters.postMileageReadingModel),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MileageReadingDtoFromJSON(jsonValue));
    }

    /**
     * Post mileage reading
     */
    async rootPost(requestParameters: RootPostRequest): Promise<MileageReadingDto> {
        const response = await this.rootPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Updates mileage reading
     */
    async rootPutRaw(requestParameters: RootPutRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.apiVersion2 !== undefined) {
            queryParameters['api-version'] = requestParameters.apiVersion2;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json-patch+json';

        if (requestParameters.apiVersion !== undefined && requestParameters.apiVersion !== null) {
            headerParameters['api-version'] = String(requestParameters.apiVersion);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutMileageReadingModelToJSON(requestParameters.putMileageReadingModel),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates mileage reading
     */
    async rootPut(requestParameters: RootPutRequest): Promise<void> {
        await this.rootPutRaw(requestParameters);
    }

}
