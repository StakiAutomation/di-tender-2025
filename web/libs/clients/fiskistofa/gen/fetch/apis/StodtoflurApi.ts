/* tslint:disable */
/* eslint-disable */
/**
 * Gagnaveita Fiskistofu
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: olafur.palmi.gudnason@fiskistofa.is
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AstandDTO,
    AstandDTOFromJSON,
    AstandDTOToJSON,
    FisktegundDTO,
    FisktegundDTOFromJSON,
    FisktegundDTOToJSON,
    GeymsluadferdDTO,
    GeymsluadferdDTOFromJSON,
    GeymsluadferdDTOToJSON,
    VeidarfaeriDTO,
    VeidarfaeriDTOFromJSON,
    VeidarfaeriDTOToJSON,
    VeidistofnDTO,
    VeidistofnDTOFromJSON,
    VeidistofnDTOToJSON,
    VeidisvaediDTO,
    VeidisvaediDTOFromJSON,
    VeidisvaediDTOToJSON,
} from '../models';

/**
 * 
 */
export class StodtoflurApi extends runtime.BaseAPI {

    /**
     * Sækir gögn um ástand frá stoðtöflu.
     */
    async v1StodtoflurAstondGetRaw(): Promise<runtime.ApiResponse<Array<AstandDTO>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("Bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/stodtoflur/astond`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AstandDTOFromJSON));
    }

    /**
     * Sækir gögn um ástand frá stoðtöflu.
     */
    async v1StodtoflurAstondGet(): Promise<Array<AstandDTO>> {
        const response = await this.v1StodtoflurAstondGetRaw();
        return await response.value();
    }

    /**
     * Sækir gögn um fiskitegundir frá stoðtöflu.
     */
    async v1StodtoflurFisktegundirGetRaw(): Promise<runtime.ApiResponse<Array<FisktegundDTO>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("Bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/stodtoflur/fisktegundir`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FisktegundDTOFromJSON));
    }

    /**
     * Sækir gögn um fiskitegundir frá stoðtöflu.
     */
    async v1StodtoflurFisktegundirGet(): Promise<Array<FisktegundDTO>> {
        const response = await this.v1StodtoflurFisktegundirGetRaw();
        return await response.value();
    }

    /**
     * Sækir gögn um geymsluaðferðir frá stoðtöflu.
     */
    async v1StodtoflurGeymsluadferdirGetRaw(): Promise<runtime.ApiResponse<Array<GeymsluadferdDTO>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("Bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/stodtoflur/geymsluadferdir`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GeymsluadferdDTOFromJSON));
    }

    /**
     * Sækir gögn um geymsluaðferðir frá stoðtöflu.
     */
    async v1StodtoflurGeymsluadferdirGet(): Promise<Array<GeymsluadferdDTO>> {
        const response = await this.v1StodtoflurGeymsluadferdirGetRaw();
        return await response.value();
    }

    /**
     * Sækir gögn um veiðarfæri frá stoðtöflu.
     */
    async v1StodtoflurVeidarfaeriGetRaw(): Promise<runtime.ApiResponse<Array<VeidarfaeriDTO>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("Bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/stodtoflur/veidarfaeri`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(VeidarfaeriDTOFromJSON));
    }

    /**
     * Sækir gögn um veiðarfæri frá stoðtöflu.
     */
    async v1StodtoflurVeidarfaeriGet(): Promise<Array<VeidarfaeriDTO>> {
        const response = await this.v1StodtoflurVeidarfaeriGetRaw();
        return await response.value();
    }

    /**
     * Sækir gögn um veiðistofna frá stoðtöflu.
     */
    async v1StodtoflurVeidistofnarGetRaw(): Promise<runtime.ApiResponse<Array<VeidistofnDTO>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("Bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/stodtoflur/veidistofnar`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(VeidistofnDTOFromJSON));
    }

    /**
     * Sækir gögn um veiðistofna frá stoðtöflu.
     */
    async v1StodtoflurVeidistofnarGet(): Promise<Array<VeidistofnDTO>> {
        const response = await this.v1StodtoflurVeidistofnarGetRaw();
        return await response.value();
    }

    /**
     * Sækir gögn um veiðisvæði frá stoðtöflu.
     */
    async v1StodtoflurVeidisvaediGetRaw(): Promise<runtime.ApiResponse<Array<VeidisvaediDTO>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("Bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/stodtoflur/veidisvaedi`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(VeidisvaediDTOFromJSON));
    }

    /**
     * Sækir gögn um veiðisvæði frá stoðtöflu.
     */
    async v1StodtoflurVeidisvaediGet(): Promise<Array<VeidisvaediDTO>> {
        const response = await this.v1StodtoflurVeidisvaediGetRaw();
        return await response.value();
    }

}
