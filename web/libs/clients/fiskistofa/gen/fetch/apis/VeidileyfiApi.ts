/* tslint:disable */
/* eslint-disable */
/**
 * Gagnaveita Fiskistofu
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: olafur.palmi.gudnason@fiskistofa.is
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    VeidileyfiDTO,
    VeidileyfiDTOFromJSON,
    VeidileyfiDTOToJSON,
    VeidileyfissviptingarDTO,
    VeidileyfissviptingarDTOFromJSON,
    VeidileyfissviptingarDTOToJSON,
} from '../models';

export interface V1VeidileyfiDagsetningGetRequest {
    dagsetning: Date;
}

export interface V1VeidileyfiSviptingarDagsetningGetRequest {
    dagsetning: Date;
}

/**
 * 
 */
export class VeidileyfiApi extends runtime.BaseAPI {

    /**
     * Sækir gögn um veiðileyfi út frá dagsetningu.
     */
    async v1VeidileyfiDagsetningGetRaw(requestParameters: V1VeidileyfiDagsetningGetRequest): Promise<runtime.ApiResponse<Array<VeidileyfiDTO>>> {
        if (requestParameters.dagsetning === null || requestParameters.dagsetning === undefined) {
            throw new runtime.RequiredError('dagsetning','Required parameter requestParameters.dagsetning was null or undefined when calling v1VeidileyfiDagsetningGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.dagsetning !== undefined) {
            queryParameters['dagsetning'] = (requestParameters.dagsetning as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("Bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/veidileyfi/dagsetning`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(VeidileyfiDTOFromJSON));
    }

    /**
     * Sækir gögn um veiðileyfi út frá dagsetningu.
     */
    async v1VeidileyfiDagsetningGet(requestParameters: V1VeidileyfiDagsetningGetRequest): Promise<Array<VeidileyfiDTO>> {
        const response = await this.v1VeidileyfiDagsetningGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Sækir gögn um veiðileyfis sviptingar út frá dagsetningu.
     */
    async v1VeidileyfiSviptingarDagsetningGetRaw(requestParameters: V1VeidileyfiSviptingarDagsetningGetRequest): Promise<runtime.ApiResponse<Array<VeidileyfissviptingarDTO>>> {
        if (requestParameters.dagsetning === null || requestParameters.dagsetning === undefined) {
            throw new runtime.RequiredError('dagsetning','Required parameter requestParameters.dagsetning was null or undefined when calling v1VeidileyfiSviptingarDagsetningGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.dagsetning !== undefined) {
            queryParameters['dagsetning'] = (requestParameters.dagsetning as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("Bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/veidileyfi/sviptingar/dagsetning`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(VeidileyfissviptingarDTOFromJSON));
    }

    /**
     * Sækir gögn um veiðileyfis sviptingar út frá dagsetningu.
     */
    async v1VeidileyfiSviptingarDagsetningGet(requestParameters: V1VeidileyfiSviptingarDagsetningGetRequest): Promise<Array<VeidileyfissviptingarDTO>> {
        const response = await this.v1VeidileyfiSviptingarDagsetningGetRaw(requestParameters);
        return await response.value();
    }

}
