/* tslint:disable */
/* eslint-disable */
/**
 * Gagnaveita Fiskistofu
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: olafur.palmi.gudnason@fiskistofa.is
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ProblemDetails,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    SkipDTO,
    SkipDTOFromJSON,
    SkipDTOToJSON,
    SkipEigandaskiptiDTO,
    SkipEigandaskiptiDTOFromJSON,
    SkipEigandaskiptiDTOToJSON,
    SkipLeitDTO,
    SkipLeitDTOFromJSON,
    SkipLeitDTOToJSON,
} from '../models';

export interface V1SkipEigandaskiptiDagsetningarGetRequest {
    dagsFra: Date;
    dagsTil: Date;
}

export interface V1SkipHeitiHeitiGetRequest {
    heiti: string;
}

export interface V1SkipKennitalaKennitalaGetRequest {
    kennitala: string;
}

export interface V1SkipSkipnumerGetRequest {
    skipnumer: number;
}

export interface V1SkipUtgerdKennitalaHeitiGetRequest {
    kennitalaHeiti: string;
}

/**
 * 
 */
export class SkipApi extends runtime.BaseAPI {

    /**
     * Sækir gögn um eigandaskipti skips út frá dagsetningum.
     */
    async v1SkipEigandaskiptiDagsetningarGetRaw(requestParameters: V1SkipEigandaskiptiDagsetningarGetRequest): Promise<runtime.ApiResponse<Array<SkipEigandaskiptiDTO>>> {
        if (requestParameters.dagsFra === null || requestParameters.dagsFra === undefined) {
            throw new runtime.RequiredError('dagsFra','Required parameter requestParameters.dagsFra was null or undefined when calling v1SkipEigandaskiptiDagsetningarGet.');
        }

        if (requestParameters.dagsTil === null || requestParameters.dagsTil === undefined) {
            throw new runtime.RequiredError('dagsTil','Required parameter requestParameters.dagsTil was null or undefined when calling v1SkipEigandaskiptiDagsetningarGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.dagsFra !== undefined) {
            queryParameters['DagsFra'] = (requestParameters.dagsFra as any).toISOString();
        }

        if (requestParameters.dagsTil !== undefined) {
            queryParameters['DagsTil'] = (requestParameters.dagsTil as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("Bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/skip/eigandaskipti/dagsetningar`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SkipEigandaskiptiDTOFromJSON));
    }

    /**
     * Sækir gögn um eigandaskipti skips út frá dagsetningum.
     */
    async v1SkipEigandaskiptiDagsetningarGet(requestParameters: V1SkipEigandaskiptiDagsetningarGetRequest): Promise<Array<SkipEigandaskiptiDTO>> {
        const response = await this.v1SkipEigandaskiptiDagsetningarGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Sækir gögn um öll skip sem falla undir leitarstreng út frá heiti skips.
     */
    async v1SkipHeitiHeitiGetRaw(requestParameters: V1SkipHeitiHeitiGetRequest): Promise<runtime.ApiResponse<Array<SkipLeitDTO>>> {
        if (requestParameters.heiti === null || requestParameters.heiti === undefined) {
            throw new runtime.RequiredError('heiti','Required parameter requestParameters.heiti was null or undefined when calling v1SkipHeitiHeitiGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("Bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/skip/heiti/{heiti}`.replace(`{${"heiti"}}`, encodeURIComponent(String(requestParameters.heiti))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SkipLeitDTOFromJSON));
    }

    /**
     * Sækir gögn um öll skip sem falla undir leitarstreng út frá heiti skips.
     */
    async v1SkipHeitiHeitiGet(requestParameters: V1SkipHeitiHeitiGetRequest): Promise<Array<SkipLeitDTO>> {
        const response = await this.v1SkipHeitiHeitiGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Sækir lista af skipum eftir kennitölu útgerðaraðila eða eiganda.
     */
    async v1SkipKennitalaKennitalaGetRaw(requestParameters: V1SkipKennitalaKennitalaGetRequest): Promise<runtime.ApiResponse<Array<SkipDTO>>> {
        if (requestParameters.kennitala === null || requestParameters.kennitala === undefined) {
            throw new runtime.RequiredError('kennitala','Required parameter requestParameters.kennitala was null or undefined when calling v1SkipKennitalaKennitalaGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("Bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/skip/kennitala/{kennitala}`.replace(`{${"kennitala"}}`, encodeURIComponent(String(requestParameters.kennitala))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SkipDTOFromJSON));
    }

    /**
     * Sækir lista af skipum eftir kennitölu útgerðaraðila eða eiganda.
     */
    async v1SkipKennitalaKennitalaGet(requestParameters: V1SkipKennitalaKennitalaGetRequest): Promise<Array<SkipDTO>> {
        const response = await this.v1SkipKennitalaKennitalaGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Sækir gögn um skip út frá skipanúmeri.
     */
    async v1SkipSkipnumerGetRaw(requestParameters: V1SkipSkipnumerGetRequest): Promise<runtime.ApiResponse<SkipDTO>> {
        if (requestParameters.skipnumer === null || requestParameters.skipnumer === undefined) {
            throw new runtime.RequiredError('skipnumer','Required parameter requestParameters.skipnumer was null or undefined when calling v1SkipSkipnumerGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("Bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/skip/{skipnumer}`.replace(`{${"skipnumer"}}`, encodeURIComponent(String(requestParameters.skipnumer))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SkipDTOFromJSON(jsonValue));
    }

    /**
     * Sækir gögn um skip út frá skipanúmeri.
     */
    async v1SkipSkipnumerGet(requestParameters: V1SkipSkipnumerGetRequest): Promise<SkipDTO> {
        const response = await this.v1SkipSkipnumerGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Sækir gögn um öll skip sem falla undir leitarstreng út frá kennitölu eða heiti útgerðar.
     */
    async v1SkipUtgerdKennitalaHeitiGetRaw(requestParameters: V1SkipUtgerdKennitalaHeitiGetRequest): Promise<runtime.ApiResponse<Array<SkipLeitDTO>>> {
        if (requestParameters.kennitalaHeiti === null || requestParameters.kennitalaHeiti === undefined) {
            throw new runtime.RequiredError('kennitalaHeiti','Required parameter requestParameters.kennitalaHeiti was null or undefined when calling v1SkipUtgerdKennitalaHeitiGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("Bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/skip/utgerd/{kennitalaHeiti}`.replace(`{${"kennitalaHeiti"}}`, encodeURIComponent(String(requestParameters.kennitalaHeiti))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SkipLeitDTOFromJSON));
    }

    /**
     * Sækir gögn um öll skip sem falla undir leitarstreng út frá kennitölu eða heiti útgerðar.
     */
    async v1SkipUtgerdKennitalaHeitiGet(requestParameters: V1SkipUtgerdKennitalaHeitiGetRequest): Promise<Array<SkipLeitDTO>> {
        const response = await this.v1SkipUtgerdKennitalaHeitiGetRaw(requestParameters);
        return await response.value();
    }

}
