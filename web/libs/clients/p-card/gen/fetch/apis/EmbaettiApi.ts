/* tslint:disable */
/* eslint-disable */
/**
 * Þjónustugátt starfskerfa sýslumanna
 * Rafrænn aðgengi að gögnum og aðgerðum starfskerfis sýslumanna
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Embaetti,
    EmbaettiFromJSON,
    EmbaettiToJSON,
    ProblemDetails,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
} from '../models';

export interface EmbaettiGetEmbaettiRequest {
    id: number;
}

/**
 * 
 */
export class EmbaettiApi extends runtime.BaseAPI {

    /**
     */
    async embaettiGetEmbaettiRaw(requestParameters: EmbaettiGetEmbaettiRequest): Promise<runtime.ApiResponse<Embaetti>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling embaettiGetEmbaetti.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT Token authentication
        }

        const response = await this.request({
            path: `/v1/Embaetti/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmbaettiFromJSON(jsonValue));
    }

    /**
     */
    async embaettiGetEmbaetti(requestParameters: EmbaettiGetEmbaettiRequest): Promise<Embaetti> {
        const response = await this.embaettiGetEmbaettiRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async embaettiGetEmbaettiAllRaw(): Promise<runtime.ApiResponse<Array<Embaetti>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT Token authentication
        }

        const response = await this.request({
            path: `/v1/Embaetti`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EmbaettiFromJSON));
    }

    /**
     */
    async embaettiGetEmbaettiAll(): Promise<Array<Embaetti>> {
        const response = await this.embaettiGetEmbaettiAllRaw();
        return await response.value();
    }

}
