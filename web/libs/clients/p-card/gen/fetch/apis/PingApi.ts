/* tslint:disable */
/* eslint-disable */
/**
 * Þjónustugátt starfskerfa sýslumanna
 * Rafrænn aðgengi að gögnum og aðgerðum starfskerfis sýslumanna
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ProblemDetails,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    Skilabod,
    SkilabodFromJSON,
    SkilabodToJSON,
} from '../models';

export interface PingPostRequest {
    skilabod: Skilabod;
}

/**
 * 
 */
export class PingApi extends runtime.BaseAPI {

    /**
     */
    async pingGetRaw(): Promise<runtime.ApiResponse<Array<string>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT Token authentication
        }

        const response = await this.request({
            path: `/v1/Ping`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async pingGet(): Promise<Array<string>> {
        const response = await this.pingGetRaw();
        return await response.value();
    }

    /**
     */
    async pingPostRaw(requestParameters: PingPostRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.skilabod === null || requestParameters.skilabod === undefined) {
            throw new runtime.RequiredError('skilabod','Required parameter requestParameters.skilabod was null or undefined when calling pingPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT Token authentication
        }

        const response = await this.request({
            path: `/v1/Ping`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SkilabodToJSON(requestParameters.skilabod),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pingPost(requestParameters: PingPostRequest): Promise<void> {
        await this.pingPostRaw(requestParameters);
    }

}
