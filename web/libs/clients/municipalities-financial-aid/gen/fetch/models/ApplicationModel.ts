/* tslint:disable */
/* eslint-disable */
/**
 * Financial Aid Backend
 * This is the backend for the financial aid.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    AmountModel,
    AmountModelFromJSON,
    AmountModelFromJSONTyped,
    AmountModelToJSON,
    ApplicationEventModel,
    ApplicationEventModelFromJSON,
    ApplicationEventModelFromJSONTyped,
    ApplicationEventModelToJSON,
    ApplicationFileModel,
    ApplicationFileModelFromJSON,
    ApplicationFileModelFromJSONTyped,
    ApplicationFileModelToJSON,
    ChildrenModel,
    ChildrenModelFromJSON,
    ChildrenModelFromJSONTyped,
    ChildrenModelToJSON,
    DirectTaxPaymentModel,
    DirectTaxPaymentModelFromJSON,
    DirectTaxPaymentModelFromJSONTyped,
    DirectTaxPaymentModelToJSON,
    StaffModel,
    StaffModelFromJSON,
    StaffModelFromJSONTyped,
    StaffModelToJSON,
} from './';

/**
 * 
 * @export
 * @interface ApplicationModel
 */
export interface ApplicationModel {
    /**
     * 
     * @type {string}
     * @memberof ApplicationModel
     */
    id: string;
    /**
     * 
     * @type {Date}
     * @memberof ApplicationModel
     */
    created: Date;
    /**
     * 
     * @type {Date}
     * @memberof ApplicationModel
     */
    modified: Date;
    /**
     * 
     * @type {Date}
     * @memberof ApplicationModel
     */
    appliedDate: Date;
    /**
     * 
     * @type {string}
     * @memberof ApplicationModel
     */
    nationalId: string;
    /**
     * 
     * @type {string}
     * @memberof ApplicationModel
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof ApplicationModel
     */
    phoneNumber: string;
    /**
     * 
     * @type {string}
     * @memberof ApplicationModel
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof ApplicationModel
     */
    homeCircumstances: ApplicationModelHomeCircumstancesEnum;
    /**
     * 
     * @type {string}
     * @memberof ApplicationModel
     */
    homeCircumstancesCustom: string;
    /**
     * 
     * @type {string}
     * @memberof ApplicationModel
     */
    employment: ApplicationModelEmploymentEnum;
    /**
     * 
     * @type {string}
     * @memberof ApplicationModel
     */
    employmentCustom: string;
    /**
     * 
     * @type {boolean}
     * @memberof ApplicationModel
     */
    student: boolean;
    /**
     * 
     * @type {string}
     * @memberof ApplicationModel
     */
    studentCustom: string;
    /**
     * 
     * @type {boolean}
     * @memberof ApplicationModel
     */
    usePersonalTaxCredit: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ApplicationModel
     */
    hasIncome: boolean;
    /**
     * 
     * @type {string}
     * @memberof ApplicationModel
     */
    bankNumber: string;
    /**
     * 
     * @type {string}
     * @memberof ApplicationModel
     */
    ledger: string;
    /**
     * 
     * @type {string}
     * @memberof ApplicationModel
     */
    accountNumber: string;
    /**
     * 
     * @type {boolean}
     * @memberof ApplicationModel
     */
    interview: boolean;
    /**
     * 
     * @type {string}
     * @memberof ApplicationModel
     */
    formComment: string;
    /**
     * 
     * @type {string}
     * @memberof ApplicationModel
     */
    childrenComment: string;
    /**
     * 
     * @type {string}
     * @memberof ApplicationModel
     */
    spouseFormComment: string;
    /**
     * 
     * @type {string}
     * @memberof ApplicationModel
     */
    state: ApplicationModelStateEnum;
    /**
     * 
     * @type {Array<ApplicationFileModel>}
     * @memberof ApplicationModel
     */
    files: Array<ApplicationFileModel>;
    /**
     * 
     * @type {string}
     * @memberof ApplicationModel
     */
    rejection: string;
    /**
     * 
     * @type {string}
     * @memberof ApplicationModel
     */
    staffId: string;
    /**
     * 
     * @type {StaffModel}
     * @memberof ApplicationModel
     */
    staff: StaffModel;
    /**
     * 
     * @type {string}
     * @memberof ApplicationModel
     */
    familyStatus: ApplicationModelFamilyStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof ApplicationModel
     */
    spouseName: string;
    /**
     * 
     * @type {string}
     * @memberof ApplicationModel
     */
    spouseNationalId: string;
    /**
     * 
     * @type {string}
     * @memberof ApplicationModel
     */
    spousePhoneNumber: string;
    /**
     * 
     * @type {string}
     * @memberof ApplicationModel
     */
    spouseEmail: string;
    /**
     * 
     * @type {Array<ApplicationEventModel>}
     * @memberof ApplicationModel
     */
    applicationEvents: Array<ApplicationEventModel>;
    /**
     * 
     * @type {Array<ChildrenModel>}
     * @memberof ApplicationModel
     */
    children: Array<ChildrenModel>;
    /**
     * 
     * @type {AmountModel}
     * @memberof ApplicationModel
     */
    amount: AmountModel | null;
    /**
     * 
     * @type {string}
     * @memberof ApplicationModel
     */
    city: string;
    /**
     * 
     * @type {string}
     * @memberof ApplicationModel
     */
    streetName: string;
    /**
     * 
     * @type {string}
     * @memberof ApplicationModel
     */
    postalCode: string;
    /**
     * 
     * @type {string}
     * @memberof ApplicationModel
     */
    municipalityCode: string;
    /**
     * 
     * @type {Array<DirectTaxPaymentModel>}
     * @memberof ApplicationModel
     */
    directTaxPayments: Array<DirectTaxPaymentModel>;
    /**
     * 
     * @type {string}
     * @memberof ApplicationModel
     */
    applicationSystemId: string;
    /**
     * 
     * @type {boolean}
     * @memberof ApplicationModel
     */
    hasFetchedDirectTaxPayment: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ApplicationModel
     */
    spouseHasFetchedDirectTaxPayment: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ApplicationModel
     */
    navSuccess: boolean;
}

export function ApplicationModelFromJSON(json: any): ApplicationModel {
    return ApplicationModelFromJSONTyped(json, false);
}

export function ApplicationModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): ApplicationModel {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'created': (new Date(json['created'])),
        'modified': (new Date(json['modified'])),
        'appliedDate': (new Date(json['appliedDate'])),
        'nationalId': json['nationalId'],
        'name': json['name'],
        'phoneNumber': json['phoneNumber'],
        'email': json['email'],
        'homeCircumstances': json['homeCircumstances'],
        'homeCircumstancesCustom': json['homeCircumstancesCustom'],
        'employment': json['employment'],
        'employmentCustom': json['employmentCustom'],
        'student': json['student'],
        'studentCustom': json['studentCustom'],
        'usePersonalTaxCredit': json['usePersonalTaxCredit'],
        'hasIncome': json['hasIncome'],
        'bankNumber': json['bankNumber'],
        'ledger': json['ledger'],
        'accountNumber': json['accountNumber'],
        'interview': json['interview'],
        'formComment': json['formComment'],
        'childrenComment': json['childrenComment'],
        'spouseFormComment': json['spouseFormComment'],
        'state': json['state'],
        'files': ((json['files'] as Array<any>).map(ApplicationFileModelFromJSON)),
        'rejection': json['rejection'],
        'staffId': json['staffId'],
        'staff': StaffModelFromJSON(json['staff']),
        'familyStatus': json['familyStatus'],
        'spouseName': json['spouseName'],
        'spouseNationalId': json['spouseNationalId'],
        'spousePhoneNumber': json['spousePhoneNumber'],
        'spouseEmail': json['spouseEmail'],
        'applicationEvents': ((json['applicationEvents'] as Array<any>).map(ApplicationEventModelFromJSON)),
        'children': ((json['children'] as Array<any>).map(ChildrenModelFromJSON)),
        'amount': AmountModelFromJSON(json['amount']),
        'city': json['city'],
        'streetName': json['streetName'],
        'postalCode': json['postalCode'],
        'municipalityCode': json['municipalityCode'],
        'directTaxPayments': ((json['directTaxPayments'] as Array<any>).map(DirectTaxPaymentModelFromJSON)),
        'applicationSystemId': json['applicationSystemId'],
        'hasFetchedDirectTaxPayment': json['hasFetchedDirectTaxPayment'],
        'spouseHasFetchedDirectTaxPayment': json['spouseHasFetchedDirectTaxPayment'],
        'navSuccess': json['navSuccess'],
    };
}

export function ApplicationModelToJSON(value?: ApplicationModel | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'created': (value.created.toISOString()),
        'modified': (value.modified.toISOString()),
        'appliedDate': (value.appliedDate.toISOString()),
        'nationalId': value.nationalId,
        'name': value.name,
        'phoneNumber': value.phoneNumber,
        'email': value.email,
        'homeCircumstances': value.homeCircumstances,
        'homeCircumstancesCustom': value.homeCircumstancesCustom,
        'employment': value.employment,
        'employmentCustom': value.employmentCustom,
        'student': value.student,
        'studentCustom': value.studentCustom,
        'usePersonalTaxCredit': value.usePersonalTaxCredit,
        'hasIncome': value.hasIncome,
        'bankNumber': value.bankNumber,
        'ledger': value.ledger,
        'accountNumber': value.accountNumber,
        'interview': value.interview,
        'formComment': value.formComment,
        'childrenComment': value.childrenComment,
        'spouseFormComment': value.spouseFormComment,
        'state': value.state,
        'files': ((value.files as Array<any>).map(ApplicationFileModelToJSON)),
        'rejection': value.rejection,
        'staffId': value.staffId,
        'staff': StaffModelToJSON(value.staff),
        'familyStatus': value.familyStatus,
        'spouseName': value.spouseName,
        'spouseNationalId': value.spouseNationalId,
        'spousePhoneNumber': value.spousePhoneNumber,
        'spouseEmail': value.spouseEmail,
        'applicationEvents': ((value.applicationEvents as Array<any>).map(ApplicationEventModelToJSON)),
        'children': ((value.children as Array<any>).map(ChildrenModelToJSON)),
        'amount': AmountModelToJSON(value.amount),
        'city': value.city,
        'streetName': value.streetName,
        'postalCode': value.postalCode,
        'municipalityCode': value.municipalityCode,
        'directTaxPayments': ((value.directTaxPayments as Array<any>).map(DirectTaxPaymentModelToJSON)),
        'applicationSystemId': value.applicationSystemId,
        'hasFetchedDirectTaxPayment': value.hasFetchedDirectTaxPayment,
        'spouseHasFetchedDirectTaxPayment': value.spouseHasFetchedDirectTaxPayment,
        'navSuccess': value.navSuccess,
    };
}

/**
* @export
* @enum {string}
*/
export enum ApplicationModelHomeCircumstancesEnum {
    Unknown = 'Unknown',
    WithParents = 'WithParents',
    WithOthers = 'WithOthers',
    OwnPlace = 'OwnPlace',
    RegisteredLease = 'RegisteredLease',
    UnregisteredLease = 'UnregisteredLease',
    Other = 'Other'
}
/**
* @export
* @enum {string}
*/
export enum ApplicationModelEmploymentEnum {
    Working = 'Working',
    Unemployed = 'Unemployed',
    CannotWork = 'CannotWork',
    Other = 'Other'
}
/**
* @export
* @enum {string}
*/
export enum ApplicationModelStateEnum {
    New = 'New',
    InProgress = 'InProgress',
    DataNeeded = 'DataNeeded',
    Rejected = 'Rejected',
    Approved = 'Approved'
}
/**
* @export
* @enum {string}
*/
export enum ApplicationModelFamilyStatusEnum {
    Cohabitation = 'Cohabitation',
    UnregisteredCohabitation = 'UnregisteredCohabitation',
    Married = 'Married',
    MarriedNotLivingTogether = 'MarriedNotLivingTogether',
    NotCohabitation = 'NotCohabitation'
}


