/* tslint:disable */
/* eslint-disable */
/**
 * Financial Aid Backend
 * This is the backend for the financial aid.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateFilesDto,
    CreateFilesDtoFromJSON,
    CreateFilesDtoToJSON,
    CreateFilesModel,
    CreateFilesModelFromJSON,
    CreateFilesModelToJSON,
    GetSignedUrlDto,
    GetSignedUrlDtoFromJSON,
    GetSignedUrlDtoToJSON,
    SignedUrlModel,
    SignedUrlModelFromJSON,
    SignedUrlModelToJSON,
} from '../models';

export interface FileControllerCreateFilesRequest {
    createFilesDto: CreateFilesDto;
}

export interface FileControllerCreateSignedUrlRequest {
    getSignedUrlDto: GetSignedUrlDto;
}

export interface FileControllerCreateSignedUrlForAllFilesRequest {
    applicationId: string;
}

export interface FileControllerCreateSignedUrlForIdRequest {
    id: string;
}

/**
 * 
 */
export class FilesApi extends runtime.BaseAPI {

    /**
     */
    async fileControllerCreateFilesRaw(requestParameters: FileControllerCreateFilesRequest): Promise<runtime.ApiResponse<CreateFilesModel>> {
        if (requestParameters.createFilesDto === null || requestParameters.createFilesDto === undefined) {
            throw new runtime.RequiredError('createFilesDto','Required parameter requestParameters.createFilesDto was null or undefined when calling fileControllerCreateFiles.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/financial-aid/file`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateFilesDtoToJSON(requestParameters.createFilesDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateFilesModelFromJSON(jsonValue));
    }

    /**
     */
    async fileControllerCreateFiles(requestParameters: FileControllerCreateFilesRequest): Promise<CreateFilesModel> {
        const response = await this.fileControllerCreateFilesRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async fileControllerCreateSignedUrlRaw(requestParameters: FileControllerCreateSignedUrlRequest): Promise<runtime.ApiResponse<SignedUrlModel>> {
        if (requestParameters.getSignedUrlDto === null || requestParameters.getSignedUrlDto === undefined) {
            throw new runtime.RequiredError('getSignedUrlDto','Required parameter requestParameters.getSignedUrlDto was null or undefined when calling fileControllerCreateSignedUrl.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/financial-aid/file/url`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetSignedUrlDtoToJSON(requestParameters.getSignedUrlDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SignedUrlModelFromJSON(jsonValue));
    }

    /**
     */
    async fileControllerCreateSignedUrl(requestParameters: FileControllerCreateSignedUrlRequest): Promise<SignedUrlModel> {
        const response = await this.fileControllerCreateSignedUrlRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async fileControllerCreateSignedUrlForAllFilesRaw(requestParameters: FileControllerCreateSignedUrlForAllFilesRequest): Promise<runtime.ApiResponse<SignedUrlModel>> {
        if (requestParameters.applicationId === null || requestParameters.applicationId === undefined) {
            throw new runtime.RequiredError('applicationId','Required parameter requestParameters.applicationId was null or undefined when calling fileControllerCreateSignedUrlForAllFiles.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/financial-aid/file/{applicationId}`.replace(`{${"applicationId"}}`, encodeURIComponent(String(requestParameters.applicationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SignedUrlModelFromJSON(jsonValue));
    }

    /**
     */
    async fileControllerCreateSignedUrlForAllFiles(requestParameters: FileControllerCreateSignedUrlForAllFilesRequest): Promise<SignedUrlModel> {
        const response = await this.fileControllerCreateSignedUrlForAllFilesRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async fileControllerCreateSignedUrlForIdRaw(requestParameters: FileControllerCreateSignedUrlForIdRequest): Promise<runtime.ApiResponse<SignedUrlModel>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling fileControllerCreateSignedUrlForId.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/financial-aid/file/url/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SignedUrlModelFromJSON(jsonValue));
    }

    /**
     */
    async fileControllerCreateSignedUrlForId(requestParameters: FileControllerCreateSignedUrlForIdRequest): Promise<SignedUrlModel> {
        const response = await this.fileControllerCreateSignedUrlForIdRaw(requestParameters);
        return await response.value();
    }

}
