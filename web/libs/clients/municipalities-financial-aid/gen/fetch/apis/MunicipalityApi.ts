/* tslint:disable */
/* eslint-disable */
/**
 * Financial Aid Backend
 * This is the backend for the financial aid.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    MunicipalityActivityDto,
    MunicipalityActivityDtoFromJSON,
    MunicipalityActivityDtoToJSON,
    MunicipalityModel,
    MunicipalityModelFromJSON,
    MunicipalityModelToJSON,
    UpdateMunicipalityDto,
    UpdateMunicipalityDtoFromJSON,
    UpdateMunicipalityDtoToJSON,
} from '../models';

export interface MunicipalityControllerGetByIdRequest {
    id: string;
}

export interface MunicipalityControllerUpdateMunicipalityRequest {
    updateMunicipalityDto: UpdateMunicipalityDto;
}

export interface MunicipalityControllerUpdateMunicipalityActivityRequest {
    id: string;
    municipalityActivityDto: MunicipalityActivityDto;
}

/**
 * 
 */
export class MunicipalityApi extends runtime.BaseAPI {

    /**
     */
    async municipalityControllerCreateRaw(): Promise<runtime.ApiResponse<MunicipalityModel>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/financial-aid/municipality`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MunicipalityModelFromJSON(jsonValue));
    }

    /**
     */
    async municipalityControllerCreate(): Promise<MunicipalityModel> {
        const response = await this.municipalityControllerCreateRaw();
        return await response.value();
    }

    /**
     */
    async municipalityControllerGetAllMunicipalitiesRaw(): Promise<runtime.ApiResponse<Array<MunicipalityModel>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/financial-aid/municipality`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MunicipalityModelFromJSON));
    }

    /**
     */
    async municipalityControllerGetAllMunicipalities(): Promise<Array<MunicipalityModel>> {
        const response = await this.municipalityControllerGetAllMunicipalitiesRaw();
        return await response.value();
    }

    /**
     */
    async municipalityControllerGetByIdRaw(requestParameters: MunicipalityControllerGetByIdRequest): Promise<runtime.ApiResponse<MunicipalityModel>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling municipalityControllerGetById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/financial-aid/municipality/id/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MunicipalityModelFromJSON(jsonValue));
    }

    /**
     */
    async municipalityControllerGetById(requestParameters: MunicipalityControllerGetByIdRequest): Promise<MunicipalityModel> {
        const response = await this.municipalityControllerGetByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async municipalityControllerGetByMunicipalityIdsRaw(): Promise<runtime.ApiResponse<Array<MunicipalityModel>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/financial-aid/municipality/ids`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MunicipalityModelFromJSON));
    }

    /**
     */
    async municipalityControllerGetByMunicipalityIds(): Promise<Array<MunicipalityModel>> {
        const response = await this.municipalityControllerGetByMunicipalityIdsRaw();
        return await response.value();
    }

    /**
     */
    async municipalityControllerUpdateMunicipalityRaw(requestParameters: MunicipalityControllerUpdateMunicipalityRequest): Promise<runtime.ApiResponse<MunicipalityModel>> {
        if (requestParameters.updateMunicipalityDto === null || requestParameters.updateMunicipalityDto === undefined) {
            throw new runtime.RequiredError('updateMunicipalityDto','Required parameter requestParameters.updateMunicipalityDto was null or undefined when calling municipalityControllerUpdateMunicipality.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/financial-aid/municipality`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateMunicipalityDtoToJSON(requestParameters.updateMunicipalityDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MunicipalityModelFromJSON(jsonValue));
    }

    /**
     */
    async municipalityControllerUpdateMunicipality(requestParameters: MunicipalityControllerUpdateMunicipalityRequest): Promise<MunicipalityModel> {
        const response = await this.municipalityControllerUpdateMunicipalityRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async municipalityControllerUpdateMunicipalityActivityRaw(requestParameters: MunicipalityControllerUpdateMunicipalityActivityRequest): Promise<runtime.ApiResponse<MunicipalityModel>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling municipalityControllerUpdateMunicipalityActivity.');
        }

        if (requestParameters.municipalityActivityDto === null || requestParameters.municipalityActivityDto === undefined) {
            throw new runtime.RequiredError('municipalityActivityDto','Required parameter requestParameters.municipalityActivityDto was null or undefined when calling municipalityControllerUpdateMunicipalityActivity.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/financial-aid/municipality/activity/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MunicipalityActivityDtoToJSON(requestParameters.municipalityActivityDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MunicipalityModelFromJSON(jsonValue));
    }

    /**
     */
    async municipalityControllerUpdateMunicipalityActivity(requestParameters: MunicipalityControllerUpdateMunicipalityActivityRequest): Promise<MunicipalityModel> {
        const response = await this.municipalityControllerUpdateMunicipalityActivityRaw(requestParameters);
        return await response.value();
    }

}
