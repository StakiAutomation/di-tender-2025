/* tslint:disable */
/* eslint-disable */
/**
 * Financial Aid Backend
 * This is the backend for the financial aid.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ApplicationEventModel,
    ApplicationEventModelFromJSON,
    ApplicationEventModelToJSON,
    ApplicationModel,
    ApplicationModelFromJSON,
    ApplicationModelToJSON,
    CreateApplicationDto,
    CreateApplicationDtoFromJSON,
    CreateApplicationDtoToJSON,
    CreateApplicationEventDto,
    CreateApplicationEventDtoFromJSON,
    CreateApplicationEventDtoToJSON,
    FilterApplicationsDto,
    FilterApplicationsDtoFromJSON,
    FilterApplicationsDtoToJSON,
    FilterApplicationsResponse,
    FilterApplicationsResponseFromJSON,
    FilterApplicationsResponseToJSON,
    PdfApplicationResponse,
    PdfApplicationResponseFromJSON,
    PdfApplicationResponseToJSON,
    SpouseEmailDto,
    SpouseEmailDtoFromJSON,
    SpouseEmailDtoToJSON,
    SpouseEmailResponse,
    SpouseEmailResponseFromJSON,
    SpouseEmailResponseToJSON,
    SpouseResponse,
    SpouseResponseFromJSON,
    SpouseResponseToJSON,
    UpdateApplicationDto,
    UpdateApplicationDtoFromJSON,
    UpdateApplicationDtoToJSON,
    UpdateApplicationTableResponse,
    UpdateApplicationTableResponseFromJSON,
    UpdateApplicationTableResponseToJSON,
} from '../models';

export interface ApplicationControllerCreateRequest {
    createApplicationDto: CreateApplicationDto;
}

export interface ApplicationControllerCreateEventRequest {
    createApplicationEventDto: CreateApplicationEventDto;
}

export interface ApplicationControllerFilterRequest {
    filterApplicationsDto: FilterApplicationsDto;
}

export interface ApplicationControllerFindApplicationRequest {
    nationalId: string;
}

export interface ApplicationControllerGetAllRequest {
    stateUrl: string;
}

export interface ApplicationControllerGetByIdRequest {
    id: string;
}

export interface ApplicationControllerSendSpouseEmailRequest {
    spouseEmailDto: SpouseEmailDto;
}

export interface ApplicationControllerUpdateRequest {
    id: string;
    updateApplicationDto: UpdateApplicationDto;
}

export interface ApplicationControllerUpdateTableRequest {
    id: string;
    stateUrl: string;
    updateApplicationDto: UpdateApplicationDto;
}

export interface OpenApiApplicationControllerGetAllRequest {
    startDate: string;
    endDate: string;
    state: string;
}

export interface OpenApiApplicationControllerGetApplicationPdfByIdRequest {
    id: string;
}

/**
 * 
 */
export class ApplicationApi extends runtime.BaseAPI {

    /**
     */
    async applicationControllerCreateRaw(requestParameters: ApplicationControllerCreateRequest): Promise<runtime.ApiResponse<ApplicationModel>> {
        if (requestParameters.createApplicationDto === null || requestParameters.createApplicationDto === undefined) {
            throw new runtime.RequiredError('createApplicationDto','Required parameter requestParameters.createApplicationDto was null or undefined when calling applicationControllerCreate.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/financial-aid/application`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateApplicationDtoToJSON(requestParameters.createApplicationDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationModelFromJSON(jsonValue));
    }

    /**
     */
    async applicationControllerCreate(requestParameters: ApplicationControllerCreateRequest): Promise<ApplicationModel> {
        const response = await this.applicationControllerCreateRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async applicationControllerCreateEventRaw(requestParameters: ApplicationControllerCreateEventRequest): Promise<runtime.ApiResponse<ApplicationEventModel>> {
        if (requestParameters.createApplicationEventDto === null || requestParameters.createApplicationEventDto === undefined) {
            throw new runtime.RequiredError('createApplicationEventDto','Required parameter requestParameters.createApplicationEventDto was null or undefined when calling applicationControllerCreateEvent.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/financial-aid/application/event`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateApplicationEventDtoToJSON(requestParameters.createApplicationEventDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationEventModelFromJSON(jsonValue));
    }

    /**
     */
    async applicationControllerCreateEvent(requestParameters: ApplicationControllerCreateEventRequest): Promise<ApplicationEventModel> {
        const response = await this.applicationControllerCreateEventRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async applicationControllerFilterRaw(requestParameters: ApplicationControllerFilterRequest): Promise<runtime.ApiResponse<FilterApplicationsResponse>> {
        if (requestParameters.filterApplicationsDto === null || requestParameters.filterApplicationsDto === undefined) {
            throw new runtime.RequiredError('filterApplicationsDto','Required parameter requestParameters.filterApplicationsDto was null or undefined when calling applicationControllerFilter.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/financial-aid/application/filter`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FilterApplicationsDtoToJSON(requestParameters.filterApplicationsDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => FilterApplicationsResponseFromJSON(jsonValue));
    }

    /**
     */
    async applicationControllerFilter(requestParameters: ApplicationControllerFilterRequest): Promise<FilterApplicationsResponse> {
        const response = await this.applicationControllerFilterRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async applicationControllerFindApplicationRaw(requestParameters: ApplicationControllerFindApplicationRequest): Promise<runtime.ApiResponse<Array<ApplicationModel>>> {
        if (requestParameters.nationalId === null || requestParameters.nationalId === undefined) {
            throw new runtime.RequiredError('nationalId','Required parameter requestParameters.nationalId was null or undefined when calling applicationControllerFindApplication.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/financial-aid/application/find/{nationalId}`.replace(`{${"nationalId"}}`, encodeURIComponent(String(requestParameters.nationalId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ApplicationModelFromJSON));
    }

    /**
     */
    async applicationControllerFindApplication(requestParameters: ApplicationControllerFindApplicationRequest): Promise<Array<ApplicationModel>> {
        const response = await this.applicationControllerFindApplicationRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async applicationControllerGetAllRaw(requestParameters: ApplicationControllerGetAllRequest): Promise<runtime.ApiResponse<Array<ApplicationModel>>> {
        if (requestParameters.stateUrl === null || requestParameters.stateUrl === undefined) {
            throw new runtime.RequiredError('stateUrl','Required parameter requestParameters.stateUrl was null or undefined when calling applicationControllerGetAll.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/financial-aid/application/state/{stateUrl}`.replace(`{${"stateUrl"}}`, encodeURIComponent(String(requestParameters.stateUrl))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ApplicationModelFromJSON));
    }

    /**
     */
    async applicationControllerGetAll(requestParameters: ApplicationControllerGetAllRequest): Promise<Array<ApplicationModel>> {
        const response = await this.applicationControllerGetAllRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async applicationControllerGetAllFiltersRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/financial-aid/application/filters`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async applicationControllerGetAllFilters(): Promise<void> {
        await this.applicationControllerGetAllFiltersRaw();
    }

    /**
     */
    async applicationControllerGetByIdRaw(requestParameters: ApplicationControllerGetByIdRequest): Promise<runtime.ApiResponse<ApplicationModel>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling applicationControllerGetById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/financial-aid/application/id/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationModelFromJSON(jsonValue));
    }

    /**
     */
    async applicationControllerGetById(requestParameters: ApplicationControllerGetByIdRequest): Promise<ApplicationModel> {
        const response = await this.applicationControllerGetByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async applicationControllerGetCurrentApplicationRaw(): Promise<runtime.ApiResponse<string>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/financial-aid/application/nationalId`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async applicationControllerGetCurrentApplication(): Promise<string> {
        const response = await this.applicationControllerGetCurrentApplicationRaw();
        return await response.value();
    }

    /**
     */
    async applicationControllerSendSpouseEmailRaw(requestParameters: ApplicationControllerSendSpouseEmailRequest): Promise<runtime.ApiResponse<SpouseEmailResponse>> {
        if (requestParameters.spouseEmailDto === null || requestParameters.spouseEmailDto === undefined) {
            throw new runtime.RequiredError('spouseEmailDto','Required parameter requestParameters.spouseEmailDto was null or undefined when calling applicationControllerSendSpouseEmail.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/financial-aid/application/sendSpouseEmail`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SpouseEmailDtoToJSON(requestParameters.spouseEmailDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SpouseEmailResponseFromJSON(jsonValue));
    }

    /**
     */
    async applicationControllerSendSpouseEmail(requestParameters: ApplicationControllerSendSpouseEmailRequest): Promise<SpouseEmailResponse> {
        const response = await this.applicationControllerSendSpouseEmailRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async applicationControllerSpouseRaw(): Promise<runtime.ApiResponse<SpouseResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/financial-aid/application/spouse`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SpouseResponseFromJSON(jsonValue));
    }

    /**
     */
    async applicationControllerSpouse(): Promise<SpouseResponse> {
        const response = await this.applicationControllerSpouseRaw();
        return await response.value();
    }

    /**
     */
    async applicationControllerUpdateRaw(requestParameters: ApplicationControllerUpdateRequest): Promise<runtime.ApiResponse<ApplicationModel>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling applicationControllerUpdate.');
        }

        if (requestParameters.updateApplicationDto === null || requestParameters.updateApplicationDto === undefined) {
            throw new runtime.RequiredError('updateApplicationDto','Required parameter requestParameters.updateApplicationDto was null or undefined when calling applicationControllerUpdate.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/financial-aid/application/id/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateApplicationDtoToJSON(requestParameters.updateApplicationDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationModelFromJSON(jsonValue));
    }

    /**
     */
    async applicationControllerUpdate(requestParameters: ApplicationControllerUpdateRequest): Promise<ApplicationModel> {
        const response = await this.applicationControllerUpdateRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async applicationControllerUpdateTableRaw(requestParameters: ApplicationControllerUpdateTableRequest): Promise<runtime.ApiResponse<UpdateApplicationTableResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling applicationControllerUpdateTable.');
        }

        if (requestParameters.stateUrl === null || requestParameters.stateUrl === undefined) {
            throw new runtime.RequiredError('stateUrl','Required parameter requestParameters.stateUrl was null or undefined when calling applicationControllerUpdateTable.');
        }

        if (requestParameters.updateApplicationDto === null || requestParameters.updateApplicationDto === undefined) {
            throw new runtime.RequiredError('updateApplicationDto','Required parameter requestParameters.updateApplicationDto was null or undefined when calling applicationControllerUpdateTable.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/financial-aid/application/{id}/{stateUrl}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"stateUrl"}}`, encodeURIComponent(String(requestParameters.stateUrl))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateApplicationDtoToJSON(requestParameters.updateApplicationDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateApplicationTableResponseFromJSON(jsonValue));
    }

    /**
     */
    async applicationControllerUpdateTable(requestParameters: ApplicationControllerUpdateTableRequest): Promise<UpdateApplicationTableResponse> {
        const response = await this.applicationControllerUpdateTableRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async openApiApplicationControllerGetAllRaw(requestParameters: OpenApiApplicationControllerGetAllRequest): Promise<runtime.ApiResponse<Array<ApplicationModel>>> {
        if (requestParameters.startDate === null || requestParameters.startDate === undefined) {
            throw new runtime.RequiredError('startDate','Required parameter requestParameters.startDate was null or undefined when calling openApiApplicationControllerGetAll.');
        }

        if (requestParameters.endDate === null || requestParameters.endDate === undefined) {
            throw new runtime.RequiredError('endDate','Required parameter requestParameters.endDate was null or undefined when calling openApiApplicationControllerGetAll.');
        }

        if (requestParameters.state === null || requestParameters.state === undefined) {
            throw new runtime.RequiredError('state','Required parameter requestParameters.state was null or undefined when calling openApiApplicationControllerGetAll.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = requestParameters.startDate;
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = requestParameters.endDate;
        }

        if (requestParameters.state !== undefined) {
            queryParameters['state'] = requestParameters.state;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/financial-aid/open-api-applications/getAll`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ApplicationModelFromJSON));
    }

    /**
     */
    async openApiApplicationControllerGetAll(requestParameters: OpenApiApplicationControllerGetAllRequest): Promise<Array<ApplicationModel>> {
        const response = await this.openApiApplicationControllerGetAllRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async openApiApplicationControllerGetApplicationPdfByIdRaw(requestParameters: OpenApiApplicationControllerGetApplicationPdfByIdRequest): Promise<runtime.ApiResponse<PdfApplicationResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling openApiApplicationControllerGetApplicationPdfById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/financial-aid/open-api-applications/id/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PdfApplicationResponseFromJSON(jsonValue));
    }

    /**
     */
    async openApiApplicationControllerGetApplicationPdfById(requestParameters: OpenApiApplicationControllerGetApplicationPdfByIdRequest): Promise<PdfApplicationResponse> {
        const response = await this.openApiApplicationControllerGetApplicationPdfByIdRaw(requestParameters);
        return await response.value();
    }

}
