/* tslint:disable */
/* eslint-disable */
/**
 * Financial Aid Backend
 * This is the backend for the financial aid.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ApiUserModel,
    ApiUserModelFromJSON,
    ApiUserModelToJSON,
    CreateApiKeyDto,
    CreateApiKeyDtoFromJSON,
    CreateApiKeyDtoToJSON,
    DeleteApiKeyResponse,
    DeleteApiKeyResponseFromJSON,
    DeleteApiKeyResponseToJSON,
} from '../models';

export interface ApiUserControllerCreateRequest {
    createApiKeyDto: CreateApiKeyDto;
}

export interface ApiUserControllerDeleteRequest {
    id: string;
}

export interface ApiUserControllerUpdateRequest {
    id: string;
}

/**
 * 
 */
export class ApiKeysApi extends runtime.BaseAPI {

    /**
     */
    async apiUserControllerCreateRaw(requestParameters: ApiUserControllerCreateRequest): Promise<runtime.ApiResponse<ApiUserModel>> {
        if (requestParameters.createApiKeyDto === null || requestParameters.createApiKeyDto === undefined) {
            throw new runtime.RequiredError('createApiKeyDto','Required parameter requestParameters.createApiKeyDto was null or undefined when calling apiUserControllerCreate.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/financial-aid/apiKeys`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateApiKeyDtoToJSON(requestParameters.createApiKeyDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiUserModelFromJSON(jsonValue));
    }

    /**
     */
    async apiUserControllerCreate(requestParameters: ApiUserControllerCreateRequest): Promise<ApiUserModel> {
        const response = await this.apiUserControllerCreateRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiUserControllerDeleteRaw(requestParameters: ApiUserControllerDeleteRequest): Promise<runtime.ApiResponse<DeleteApiKeyResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiUserControllerDelete.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/financial-aid/apiKeys/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteApiKeyResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiUserControllerDelete(requestParameters: ApiUserControllerDeleteRequest): Promise<DeleteApiKeyResponse> {
        const response = await this.apiUserControllerDeleteRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiUserControllerGetApiKeysByMunicipalityCodesRaw(): Promise<runtime.ApiResponse<Array<ApiUserModel>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/financial-aid/apiKeys`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ApiUserModelFromJSON));
    }

    /**
     */
    async apiUserControllerGetApiKeysByMunicipalityCodes(): Promise<Array<ApiUserModel>> {
        const response = await this.apiUserControllerGetApiKeysByMunicipalityCodesRaw();
        return await response.value();
    }

    /**
     */
    async apiUserControllerUpdateRaw(requestParameters: ApiUserControllerUpdateRequest): Promise<runtime.ApiResponse<ApiUserModel>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiUserControllerUpdate.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/financial-aid/apiKeys/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiUserModelFromJSON(jsonValue));
    }

    /**
     */
    async apiUserControllerUpdate(requestParameters: ApiUserControllerUpdateRequest): Promise<ApiUserModel> {
        const response = await this.apiUserControllerUpdateRaw(requestParameters);
        return await response.value();
    }

}
