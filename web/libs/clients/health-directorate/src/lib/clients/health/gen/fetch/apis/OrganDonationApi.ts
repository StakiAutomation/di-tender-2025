/* tslint:disable */
/* eslint-disable */
/**
 * Health service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    HttpProblemResponse,
    HttpProblemResponseFromJSON,
    HttpProblemResponseToJSON,
    Locale,
    LocaleFromJSON,
    LocaleToJSON,
    OrganDonorDto,
    OrganDonorDtoFromJSON,
    OrganDonorDtoToJSON,
    OrganDto,
    OrganDtoFromJSON,
    OrganDtoToJSON,
    UpdateOrganDonorDto,
    UpdateOrganDonorDtoFromJSON,
    UpdateOrganDonorDtoToJSON,
} from '../models';

export interface DonationExceptionControllerGetOrgansV1Request {
    locale?: Locale;
}

export interface MeDonorStatusControllerGetOrganDonorStatusV1Request {
    ip?: string;
    locale?: Locale;
}

export interface MeDonorStatusControllerUpdateOrganDonorStatusV1Request {
    updateOrganDonorDto: UpdateOrganDonorDto;
    ip?: string;
    locale?: Locale;
}

/**
 * 
 */
export class OrganDonationApi extends runtime.BaseAPI {

    /**
     * Gets a list of organs that can be omitted from an donation-exception donation
     */
    async donationExceptionControllerGetOrgansV1Raw(requestParameters: DonationExceptionControllerGetOrgansV1Request): Promise<runtime.ApiResponse<Array<OrganDto>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.locale !== undefined) {
            queryParameters['locale'] = requestParameters.locale;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/donation-exceptions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OrganDtoFromJSON));
    }

    /**
     * Gets a list of organs that can be omitted from an donation-exception donation
     */
    async donationExceptionControllerGetOrgansV1(requestParameters: DonationExceptionControllerGetOrgansV1Request): Promise<Array<OrganDto>> {
        const response = await this.donationExceptionControllerGetOrgansV1Raw(requestParameters);
        return await response.value();
    }

    /**
     * Get user\'s donation-exception donor status
     */
    async meDonorStatusControllerGetOrganDonorStatusV1Raw(requestParameters: MeDonorStatusControllerGetOrganDonorStatusV1Request): Promise<runtime.ApiResponse<OrganDonorDto>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.ip !== undefined) {
            queryParameters['ip'] = requestParameters.ip;
        }

        if (requestParameters.locale !== undefined) {
            queryParameters['locale'] = requestParameters.locale;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/me/organ-donor-status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganDonorDtoFromJSON(jsonValue));
    }

    /**
     * Get user\'s donation-exception donor status
     */
    async meDonorStatusControllerGetOrganDonorStatusV1(requestParameters: MeDonorStatusControllerGetOrganDonorStatusV1Request): Promise<OrganDonorDto> {
        const response = await this.meDonorStatusControllerGetOrganDonorStatusV1Raw(requestParameters);
        return await response.value();
    }

    /**
     * Update user\'s donation-exception donor status
     */
    async meDonorStatusControllerUpdateOrganDonorStatusV1Raw(requestParameters: MeDonorStatusControllerUpdateOrganDonorStatusV1Request): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.updateOrganDonorDto === null || requestParameters.updateOrganDonorDto === undefined) {
            throw new runtime.RequiredError('updateOrganDonorDto','Required parameter requestParameters.updateOrganDonorDto was null or undefined when calling meDonorStatusControllerUpdateOrganDonorStatusV1.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.ip !== undefined) {
            queryParameters['ip'] = requestParameters.ip;
        }

        if (requestParameters.locale !== undefined) {
            queryParameters['locale'] = requestParameters.locale;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/me/organ-donor-status`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateOrganDonorDtoToJSON(requestParameters.updateOrganDonorDto),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update user\'s donation-exception donor status
     */
    async meDonorStatusControllerUpdateOrganDonorStatusV1(requestParameters: MeDonorStatusControllerUpdateOrganDonorStatusV1Request): Promise<void> {
        await this.meDonorStatusControllerUpdateOrganDonorStatusV1Raw(requestParameters);
    }

}
