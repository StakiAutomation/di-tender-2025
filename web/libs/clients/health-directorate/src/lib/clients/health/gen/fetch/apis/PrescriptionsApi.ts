/* tslint:disable */
/* eslint-disable */
/**
 * Health service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    DispensationHistoryDto,
    DispensationHistoryDtoFromJSON,
    DispensationHistoryDtoToJSON,
    HttpProblemResponse,
    HttpProblemResponseFromJSON,
    HttpProblemResponseToJSON,
    Locale,
    LocaleFromJSON,
    LocaleToJSON,
    PrescribedItemDto,
    PrescribedItemDtoFromJSON,
    PrescribedItemDtoToJSON,
} from '../models';

export interface MePrescriptionControllerGetPrescriptionsV1Request {
    locale?: Locale;
}

export interface MePrescriptionDispensationControllerGetDispensationsForAtcCodeV1Request {
    atcCode: string;
    locale?: Locale;
}

export interface MePrescriptionDispensationControllerGetGroupedDispensationsV1Request {
    locale?: Locale;
}

/**
 * 
 */
export class PrescriptionsApi extends runtime.BaseAPI {

    /**
     * Get user\'s active prescriptions
     */
    async mePrescriptionControllerGetPrescriptionsV1Raw(requestParameters: MePrescriptionControllerGetPrescriptionsV1Request): Promise<runtime.ApiResponse<Array<PrescribedItemDto>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.locale !== undefined) {
            queryParameters['locale'] = requestParameters.locale;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/me/prescriptions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PrescribedItemDtoFromJSON));
    }

    /**
     * Get user\'s active prescriptions
     */
    async mePrescriptionControllerGetPrescriptionsV1(requestParameters: MePrescriptionControllerGetPrescriptionsV1Request): Promise<Array<PrescribedItemDto>> {
        const response = await this.mePrescriptionControllerGetPrescriptionsV1Raw(requestParameters);
        return await response.value();
    }

    /**
     * Get user\'s dispensations for a specific ATC code
     */
    async mePrescriptionDispensationControllerGetDispensationsForAtcCodeV1Raw(requestParameters: MePrescriptionDispensationControllerGetDispensationsForAtcCodeV1Request): Promise<runtime.ApiResponse<Array<DispensationHistoryDto>>> {
        if (requestParameters.atcCode === null || requestParameters.atcCode === undefined) {
            throw new runtime.RequiredError('atcCode','Required parameter requestParameters.atcCode was null or undefined when calling mePrescriptionDispensationControllerGetDispensationsForAtcCodeV1.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.locale !== undefined) {
            queryParameters['locale'] = requestParameters.locale;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/me/prescriptions/dispensations/{atcCode}`.replace(`{${"atcCode"}}`, encodeURIComponent(String(requestParameters.atcCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DispensationHistoryDtoFromJSON));
    }

    /**
     * Get user\'s dispensations for a specific ATC code
     */
    async mePrescriptionDispensationControllerGetDispensationsForAtcCodeV1(requestParameters: MePrescriptionDispensationControllerGetDispensationsForAtcCodeV1Request): Promise<Array<DispensationHistoryDto>> {
        const response = await this.mePrescriptionDispensationControllerGetDispensationsForAtcCodeV1Raw(requestParameters);
        return await response.value();
    }

    /**
     * Get user\'s dispensation history
     */
    async mePrescriptionDispensationControllerGetGroupedDispensationsV1Raw(requestParameters: MePrescriptionDispensationControllerGetGroupedDispensationsV1Request): Promise<runtime.ApiResponse<Array<DispensationHistoryDto>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.locale !== undefined) {
            queryParameters['locale'] = requestParameters.locale;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/me/prescriptions/dispensations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DispensationHistoryDtoFromJSON));
    }

    /**
     * Get user\'s dispensation history
     */
    async mePrescriptionDispensationControllerGetGroupedDispensationsV1(requestParameters: MePrescriptionDispensationControllerGetGroupedDispensationsV1Request): Promise<Array<DispensationHistoryDto>> {
        const response = await this.mePrescriptionDispensationControllerGetGroupedDispensationsV1Raw(requestParameters);
        return await response.value();
    }

}
