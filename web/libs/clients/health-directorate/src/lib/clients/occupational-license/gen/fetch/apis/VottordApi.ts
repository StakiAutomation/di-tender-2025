/* tslint:disable */
/* eslint-disable */
/**
 * Landlæknir API
 * Vefþjónustur á vegum Landlæknis.
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: holmfridur.palsdottir@landlaeknir.is
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ReglusettVottordB,
    ReglusettVottordBFromJSON,
    ReglusettVottordBToJSON,
    StarfsleyfiVottord,
    StarfsleyfiVottordFromJSON,
    StarfsleyfiVottordToJSON,
    StarfstettVottord,
    StarfstettVottordFromJSON,
    StarfstettVottordToJSON,
    UploadFilesItem,
    UploadFilesItemFromJSON,
    UploadFilesItemToJSON,
    UtbuaSkjalRequest,
    UtbuaSkjalRequestFromJSON,
    UtbuaSkjalRequestToJSON,
    UtbuaSkjalResponse,
    UtbuaSkjalResponseFromJSON,
    UtbuaSkjalResponseToJSON,
    VottordUpplB,
    VottordUpplBFromJSON,
    VottordUpplBToJSON,
} from '../models';

export interface VottordReglusettPostRequest {
    reglusettVottordB?: ReglusettVottordB;
}

export interface VottordSkraUmsoknPostRequest {
    vottordUpplB?: VottordUpplB;
}

export interface VottordSkraUmsoknUploadPostRequest {
    uploadFilesItem?: UploadFilesItem;
}

export interface VottordStarfstettVottordSsnNumberGetRequest {
    ssnNumber: string | null;
}

export interface VottordUtbuaSkjalPostRequest {
    utbuaSkjalRequest?: UtbuaSkjalRequest;
}

/**
 * 
 */
export class VottordApi extends runtime.BaseAPI {

    /**
     * Skrá inn nýja umsókn um vottorð
     */
    async vottordReglusettPostRaw(requestParameters: VottordReglusettPostRequest): Promise<runtime.ApiResponse<string>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/Vottord/Reglusett`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReglusettVottordBToJSON(requestParameters.reglusettVottordB),
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Skrá inn nýja umsókn um vottorð
     */
    async vottordReglusettPost(requestParameters: VottordReglusettPostRequest): Promise<string> {
        const response = await this.vottordReglusettPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Skrá inn nýja umsókn um vottorð
     */
    async vottordSkraUmsoknPostRaw(requestParameters: VottordSkraUmsoknPostRequest): Promise<runtime.ApiResponse<string>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/Vottord/SkraUmsokn`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VottordUpplBToJSON(requestParameters.vottordUpplB),
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Skrá inn nýja umsókn um vottorð
     */
    async vottordSkraUmsoknPost(requestParameters: VottordSkraUmsoknPostRequest): Promise<string> {
        const response = await this.vottordSkraUmsoknPostRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async vottordSkraUmsoknUploadPostRaw(requestParameters: VottordSkraUmsoknUploadPostRequest): Promise<runtime.ApiResponse<string>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/Vottord/SkraUmsokn/Upload`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UploadFilesItemToJSON(requestParameters.uploadFilesItem),
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async vottordSkraUmsoknUploadPost(requestParameters: VottordSkraUmsoknUploadPostRequest): Promise<string> {
        const response = await this.vottordSkraUmsoknUploadPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Sækja upplýsingar um starfsleyfi fyrir umsóknir um vottorð
     */
    async vottordStarfsleyfiVottordGetRaw(): Promise<runtime.ApiResponse<Array<StarfsleyfiVottord>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/Vottord/StarfsleyfiVottord`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StarfsleyfiVottordFromJSON));
    }

    /**
     * Sækja upplýsingar um starfsleyfi fyrir umsóknir um vottorð
     */
    async vottordStarfsleyfiVottordGet(): Promise<Array<StarfsleyfiVottord>> {
        const response = await this.vottordStarfsleyfiVottordGetRaw();
        return await response.value();
    }

    /**
     * Sækja upplýsingar um starfstétt fyrir umsóknir um vottorð B leið
     */
    async vottordStarfstettVottordSsnNumberGetRaw(requestParameters: VottordStarfstettVottordSsnNumberGetRequest): Promise<runtime.ApiResponse<Array<StarfstettVottord>>> {
        if (requestParameters.ssnNumber === null || requestParameters.ssnNumber === undefined) {
            throw new runtime.RequiredError('ssnNumber','Required parameter requestParameters.ssnNumber was null or undefined when calling vottordStarfstettVottordSsnNumberGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/Vottord/StarfstettVottord/{ssnNumber}`.replace(`{${"ssnNumber"}}`, encodeURIComponent(String(requestParameters.ssnNumber))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StarfstettVottordFromJSON));
    }

    /**
     * Sækja upplýsingar um starfstétt fyrir umsóknir um vottorð B leið
     */
    async vottordStarfstettVottordSsnNumberGet(requestParameters: VottordStarfstettVottordSsnNumberGetRequest): Promise<Array<StarfstettVottord>> {
        const response = await this.vottordStarfstettVottordSsnNumberGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Útbúa innsiglað vottorð um starfsleyfi
     */
    async vottordUtbuaSkjalPostRaw(requestParameters: VottordUtbuaSkjalPostRequest): Promise<runtime.ApiResponse<UtbuaSkjalResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/Vottord/UtbuaSkjal`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UtbuaSkjalRequestToJSON(requestParameters.utbuaSkjalRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UtbuaSkjalResponseFromJSON(jsonValue));
    }

    /**
     * Útbúa innsiglað vottorð um starfsleyfi
     */
    async vottordUtbuaSkjalPost(requestParameters: VottordUtbuaSkjalPostRequest): Promise<UtbuaSkjalResponse> {
        const response = await this.vottordUtbuaSkjalPostRaw(requestParameters);
        return await response.value();
    }

}
