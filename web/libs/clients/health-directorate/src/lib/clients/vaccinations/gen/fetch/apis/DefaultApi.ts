/* tslint:disable */
/* eslint-disable */
/**
 * Vaccination API
 * The api provides access to information about individuals\' vaccination status and their administered vaccinations.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    HttpProblemResponse,
    HttpProblemResponseFromJSON,
    HttpProblemResponseToJSON,
} from '../models';

export interface VisualizerControllerGetStatusRequest {
    diseaseId: string;
    agePatient: number;
    vaccinations: Array<string>;
    rejected: Array<string>;
    vaccineCodes: Array<string>;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Get vaccination status for a person
     */
    async visualizerControllerGetStatusRaw(requestParameters: VisualizerControllerGetStatusRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.diseaseId === null || requestParameters.diseaseId === undefined) {
            throw new runtime.RequiredError('diseaseId','Required parameter requestParameters.diseaseId was null or undefined when calling visualizerControllerGetStatus.');
        }

        if (requestParameters.agePatient === null || requestParameters.agePatient === undefined) {
            throw new runtime.RequiredError('agePatient','Required parameter requestParameters.agePatient was null or undefined when calling visualizerControllerGetStatus.');
        }

        if (requestParameters.vaccinations === null || requestParameters.vaccinations === undefined) {
            throw new runtime.RequiredError('vaccinations','Required parameter requestParameters.vaccinations was null or undefined when calling visualizerControllerGetStatus.');
        }

        if (requestParameters.rejected === null || requestParameters.rejected === undefined) {
            throw new runtime.RequiredError('rejected','Required parameter requestParameters.rejected was null or undefined when calling visualizerControllerGetStatus.');
        }

        if (requestParameters.vaccineCodes === null || requestParameters.vaccineCodes === undefined) {
            throw new runtime.RequiredError('vaccineCodes','Required parameter requestParameters.vaccineCodes was null or undefined when calling visualizerControllerGetStatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.agePatient !== undefined) {
            queryParameters['agePatient'] = requestParameters.agePatient;
        }

        if (requestParameters.vaccinations) {
            queryParameters['vaccinations'] = requestParameters.vaccinations;
        }

        if (requestParameters.rejected) {
            queryParameters['rejected'] = requestParameters.rejected;
        }

        if (requestParameters.vaccineCodes) {
            queryParameters['vaccineCodes'] = requestParameters.vaccineCodes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/visualizer/diseases/{diseaseId}`.replace(`{${"diseaseId"}}`, encodeURIComponent(String(requestParameters.diseaseId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get vaccination status for a person
     */
    async visualizerControllerGetStatus(requestParameters: VisualizerControllerGetStatusRequest): Promise<void> {
        await this.visualizerControllerGetStatusRaw(requestParameters);
    }

    /**
     */
    async visualizerControllerGetVisualizerRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/*`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async visualizerControllerGetVisualizer(): Promise<void> {
        await this.visualizerControllerGetVisualizerRaw();
    }

}
