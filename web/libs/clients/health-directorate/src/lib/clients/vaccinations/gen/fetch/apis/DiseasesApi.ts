/* tslint:disable */
/* eslint-disable */
/**
 * Vaccination API
 * The api provides access to information about individuals\' vaccination status and their administered vaccinations.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateDiseaseRuleDto,
    CreateDiseaseRuleDtoFromJSON,
    CreateDiseaseRuleDtoToJSON,
    DiseaseDto,
    DiseaseDtoFromJSON,
    DiseaseDtoToJSON,
    HttpProblemResponse,
    HttpProblemResponseFromJSON,
    HttpProblemResponseToJSON,
    UpdateDiseaseDto,
    UpdateDiseaseDtoFromJSON,
    UpdateDiseaseDtoToJSON,
    UpdateDiseaseRuleDto,
    UpdateDiseaseRuleDtoFromJSON,
    UpdateDiseaseRuleDtoToJSON,
} from '../models';

export interface DiseaseControllerCreateDiseaseRuleRequest {
    diseaseId: string;
    createDiseaseRuleDto: CreateDiseaseRuleDto;
}

export interface DiseaseControllerDeleteDiseaseRuleRequest {
    diseaseId: string;
    ruleId: string;
}

export interface DiseaseControllerGetDiseaseRequest {
    diseaseId: string;
    locale?: DiseaseControllerGetDiseaseLocaleEnum;
}

export interface DiseaseControllerGetDiseasesRequest {
    locale?: DiseaseControllerGetDiseasesLocaleEnum;
}

export interface DiseaseControllerUpdateDiseaseRequest {
    diseaseId: string;
    updateDiseaseDto: UpdateDiseaseDto;
}

export interface DiseaseControllerUpdateDiseaseRuleRequest {
    diseaseId: string;
    ruleId: string;
    updateDiseaseRuleDto: UpdateDiseaseRuleDto;
}

/**
 * 
 */
export class DiseasesApi extends runtime.BaseAPI {

    /**
     * Create disease rule
     */
    async diseaseControllerCreateDiseaseRuleRaw(requestParameters: DiseaseControllerCreateDiseaseRuleRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.diseaseId === null || requestParameters.diseaseId === undefined) {
            throw new runtime.RequiredError('diseaseId','Required parameter requestParameters.diseaseId was null or undefined when calling diseaseControllerCreateDiseaseRule.');
        }

        if (requestParameters.createDiseaseRuleDto === null || requestParameters.createDiseaseRuleDto === undefined) {
            throw new runtime.RequiredError('createDiseaseRuleDto','Required parameter requestParameters.createDiseaseRuleDto was null or undefined when calling diseaseControllerCreateDiseaseRule.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/diseases/{diseaseId}/rules`.replace(`{${"diseaseId"}}`, encodeURIComponent(String(requestParameters.diseaseId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateDiseaseRuleDtoToJSON(requestParameters.createDiseaseRuleDto),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create disease rule
     */
    async diseaseControllerCreateDiseaseRule(requestParameters: DiseaseControllerCreateDiseaseRuleRequest): Promise<void> {
        await this.diseaseControllerCreateDiseaseRuleRaw(requestParameters);
    }

    /**
     * Update a single disease rule
     */
    async diseaseControllerDeleteDiseaseRuleRaw(requestParameters: DiseaseControllerDeleteDiseaseRuleRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.diseaseId === null || requestParameters.diseaseId === undefined) {
            throw new runtime.RequiredError('diseaseId','Required parameter requestParameters.diseaseId was null or undefined when calling diseaseControllerDeleteDiseaseRule.');
        }

        if (requestParameters.ruleId === null || requestParameters.ruleId === undefined) {
            throw new runtime.RequiredError('ruleId','Required parameter requestParameters.ruleId was null or undefined when calling diseaseControllerDeleteDiseaseRule.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/diseases/{diseaseId}/rules/{ruleId}`.replace(`{${"diseaseId"}}`, encodeURIComponent(String(requestParameters.diseaseId))).replace(`{${"ruleId"}}`, encodeURIComponent(String(requestParameters.ruleId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update a single disease rule
     */
    async diseaseControllerDeleteDiseaseRule(requestParameters: DiseaseControllerDeleteDiseaseRuleRequest): Promise<void> {
        await this.diseaseControllerDeleteDiseaseRuleRaw(requestParameters);
    }

    /**
     * Get disease by id
     */
    async diseaseControllerGetDiseaseRaw(requestParameters: DiseaseControllerGetDiseaseRequest): Promise<runtime.ApiResponse<DiseaseDto>> {
        if (requestParameters.diseaseId === null || requestParameters.diseaseId === undefined) {
            throw new runtime.RequiredError('diseaseId','Required parameter requestParameters.diseaseId was null or undefined when calling diseaseControllerGetDisease.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.locale !== undefined) {
            queryParameters['locale'] = requestParameters.locale;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/diseases/{diseaseId}`.replace(`{${"diseaseId"}}`, encodeURIComponent(String(requestParameters.diseaseId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DiseaseDtoFromJSON(jsonValue));
    }

    /**
     * Get disease by id
     */
    async diseaseControllerGetDisease(requestParameters: DiseaseControllerGetDiseaseRequest): Promise<DiseaseDto> {
        const response = await this.diseaseControllerGetDiseaseRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get all diseases
     */
    async diseaseControllerGetDiseasesRaw(requestParameters: DiseaseControllerGetDiseasesRequest): Promise<runtime.ApiResponse<Array<DiseaseDto>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.locale !== undefined) {
            queryParameters['locale'] = requestParameters.locale;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/diseases`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DiseaseDtoFromJSON));
    }

    /**
     * Get all diseases
     */
    async diseaseControllerGetDiseases(requestParameters: DiseaseControllerGetDiseasesRequest): Promise<Array<DiseaseDto>> {
        const response = await this.diseaseControllerGetDiseasesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update disease
     */
    async diseaseControllerUpdateDiseaseRaw(requestParameters: DiseaseControllerUpdateDiseaseRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.diseaseId === null || requestParameters.diseaseId === undefined) {
            throw new runtime.RequiredError('diseaseId','Required parameter requestParameters.diseaseId was null or undefined when calling diseaseControllerUpdateDisease.');
        }

        if (requestParameters.updateDiseaseDto === null || requestParameters.updateDiseaseDto === undefined) {
            throw new runtime.RequiredError('updateDiseaseDto','Required parameter requestParameters.updateDiseaseDto was null or undefined when calling diseaseControllerUpdateDisease.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/diseases/{diseaseId}`.replace(`{${"diseaseId"}}`, encodeURIComponent(String(requestParameters.diseaseId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateDiseaseDtoToJSON(requestParameters.updateDiseaseDto),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update disease
     */
    async diseaseControllerUpdateDisease(requestParameters: DiseaseControllerUpdateDiseaseRequest): Promise<void> {
        await this.diseaseControllerUpdateDiseaseRaw(requestParameters);
    }

    /**
     * Update a single disease rule
     */
    async diseaseControllerUpdateDiseaseRuleRaw(requestParameters: DiseaseControllerUpdateDiseaseRuleRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.diseaseId === null || requestParameters.diseaseId === undefined) {
            throw new runtime.RequiredError('diseaseId','Required parameter requestParameters.diseaseId was null or undefined when calling diseaseControllerUpdateDiseaseRule.');
        }

        if (requestParameters.ruleId === null || requestParameters.ruleId === undefined) {
            throw new runtime.RequiredError('ruleId','Required parameter requestParameters.ruleId was null or undefined when calling diseaseControllerUpdateDiseaseRule.');
        }

        if (requestParameters.updateDiseaseRuleDto === null || requestParameters.updateDiseaseRuleDto === undefined) {
            throw new runtime.RequiredError('updateDiseaseRuleDto','Required parameter requestParameters.updateDiseaseRuleDto was null or undefined when calling diseaseControllerUpdateDiseaseRule.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/diseases/{diseaseId}/rules/{ruleId}`.replace(`{${"diseaseId"}}`, encodeURIComponent(String(requestParameters.diseaseId))).replace(`{${"ruleId"}}`, encodeURIComponent(String(requestParameters.ruleId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateDiseaseRuleDtoToJSON(requestParameters.updateDiseaseRuleDto),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update a single disease rule
     */
    async diseaseControllerUpdateDiseaseRule(requestParameters: DiseaseControllerUpdateDiseaseRuleRequest): Promise<void> {
        await this.diseaseControllerUpdateDiseaseRuleRaw(requestParameters);
    }

}

/**
    * @export
    * @enum {string}
    */
export enum DiseaseControllerGetDiseaseLocaleEnum {
    En = 'en',
    Is = 'is'
}
/**
    * @export
    * @enum {string}
    */
export enum DiseaseControllerGetDiseasesLocaleEnum {
    En = 'en',
    Is = 'is'
}
