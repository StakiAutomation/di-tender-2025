/* tslint:disable */
/* eslint-disable */
/**
 * Air Discount Scheme
 *    This documentation is provided to airline booking sites for   integration purposes.    If there exists an ID attribute on any object, that ID refers   to a unique identifier of the object it is in. If the object   has an additional ID, something like flightId that refers to   an unique identifier of an object that is related to the   current one.    DEV:     https://loftbru.dev01.devland.is/min-rettindi    STAGING: https://loftbru.staging01.devland.is/min-rettindi    PROD:    https://loftbru.island.is/min-rettindi    The flow is like this:      1.  Contact anyone at Stafrænt Ísland about access to our Github         organization and credentials for Gervimadur. Then navigate to         min-rettindi on dev or staging, there you will be able to access         the discountCodes and use them in the next steps.       2.  Use the discount to book a flight on your end:        2a. First you need to fetch the user that is registered to this           discountCode by calling           GET /api/public/discounts/{discountCode}/user.           This endpoint will return user specific information that           should be populated on your booking page and made readonly           so the user can not change it.        2b. Then you can create a flight. A flight contains all the           relevant information about the booking from the customer.           Use POST /api/public/discounts/{discountCode}/flights.           When this endpoint is used the discountCode is           invalidated, so the user can not use it and needs           to generate a new discountCode (step 1).       3.  When you have created a flight you have the possibility         to delete it. For example if a payment failure has         occurred. You can use the ID that you received when         creating the flight to delete it. You have two possibilities:        3a. You can either delete all related flightLegs that were           booked by calling           DELETE /api/public/flights/{flightId}        3b. Or delete specific flightLegs within the booking by:          3ba. First fetching the related flightLegs by calling              GET /api/public/flights/{flightId}          3bb. Then use the flightLeg IDs from \"3ba.\" result              to delete the desired flightLegs by calling              DELETE /api/public/flights/{flightId}/flightLegs/{flightLegId} 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    FlightLegGender,
    FlightLegGenderFromJSON,
    FlightLegGenderFromJSONTyped,
    FlightLegGenderToJSON,
    FlightLegPeriod,
    FlightLegPeriodFromJSON,
    FlightLegPeriodFromJSONTyped,
    FlightLegPeriodToJSON,
    FlightLegRange,
    FlightLegRangeFromJSON,
    FlightLegRangeFromJSONTyped,
    FlightLegRangeToJSON,
    FlightLegState,
    FlightLegStateFromJSON,
    FlightLegStateFromJSONTyped,
    FlightLegStateToJSON,
    FlightLegTravel,
    FlightLegTravelFromJSON,
    FlightLegTravelFromJSONTyped,
    FlightLegTravelToJSON,
} from './';

/**
 * 
 * @export
 * @interface GetFlightLegsBody
 */
export interface GetFlightLegsBody {
    /**
     * 
     * @type {string}
     * @memberof GetFlightLegsBody
     */
    nationalId?: string;
    /**
     * 
     * @type {string}
     * @memberof GetFlightLegsBody
     */
    airline?: string;
    /**
     * 
     * @type {FlightLegTravel}
     * @memberof GetFlightLegsBody
     */
    flightLeg?: FlightLegTravel;
    /**
     * 
     * @type {FlightLegPeriod}
     * @memberof GetFlightLegsBody
     */
    period: FlightLegPeriod;
    /**
     * 
     * @type {Array<FlightLegState>}
     * @memberof GetFlightLegsBody
     */
    state?: Array<FlightLegState>;
    /**
     * 
     * @type {FlightLegRange}
     * @memberof GetFlightLegsBody
     */
    age: FlightLegRange;
    /**
     * 
     * @type {FlightLegGender}
     * @memberof GetFlightLegsBody
     */
    gender?: FlightLegGender;
    /**
     * 
     * @type {number}
     * @memberof GetFlightLegsBody
     */
    postalCode?: number;
}

export function GetFlightLegsBodyFromJSON(json: any): GetFlightLegsBody {
    return GetFlightLegsBodyFromJSONTyped(json, false);
}

export function GetFlightLegsBodyFromJSONTyped(json: any, ignoreDiscriminator: boolean): GetFlightLegsBody {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'nationalId': !exists(json, 'nationalId') ? undefined : json['nationalId'],
        'airline': !exists(json, 'airline') ? undefined : json['airline'],
        'flightLeg': !exists(json, 'flightLeg') ? undefined : FlightLegTravelFromJSON(json['flightLeg']),
        'period': FlightLegPeriodFromJSON(json['period']),
        'state': !exists(json, 'state') ? undefined : ((json['state'] as Array<any>).map(FlightLegStateFromJSON)),
        'age': FlightLegRangeFromJSON(json['age']),
        'gender': !exists(json, 'gender') ? undefined : FlightLegGenderFromJSON(json['gender']),
        'postalCode': !exists(json, 'postalCode') ? undefined : json['postalCode'],
    };
}

export function GetFlightLegsBodyToJSON(value?: GetFlightLegsBody | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'nationalId': value.nationalId,
        'airline': value.airline,
        'flightLeg': FlightLegTravelToJSON(value.flightLeg),
        'period': FlightLegPeriodToJSON(value.period),
        'state': value.state === undefined ? undefined : ((value.state as Array<any>).map(FlightLegStateToJSON)),
        'age': FlightLegRangeToJSON(value.age),
        'gender': FlightLegGenderToJSON(value.gender),
        'postalCode': value.postalCode,
    };
}


