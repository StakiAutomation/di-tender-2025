/* tslint:disable */
/* eslint-disable */
/**
 * GoPro External Integration REST Services - API version 1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    JournalKey,
    JournalKeyFromJSON,
    JournalKeyFromJSONTyped,
    JournalKeyToJSON,
    Metadata,
    MetadataFromJSON,
    MetadataFromJSONTyped,
    MetadataToJSON,
} from './';

/**
 * CreateQuickCase method request structure
 * @export
 * @interface CreateQuickCaseRequest
 */
export interface CreateQuickCaseRequest {
    /**
     * Case template name
     * @type {string}
     * @memberof CreateQuickCaseRequest
     */
    template: string;
    /**
     * Subject (name) of the case
     * @type {string}
     * @memberof CreateQuickCaseRequest
     */
    subject: string;
    /**
     * Case category name
     * @type {string}
     * @memberof CreateQuickCaseRequest
     */
    category?: string;
    /**
     * Name path or ID of organization to search for the case template.
     * Use special word "all" (lower case only) to look in all organizations.
     * Skip parameter or pass empty to assume current user organization
     * @type {string}
     * @memberof CreateQuickCaseRequest
     */
    organization?: string;
    /**
     * Deadline date
     * @type {string}
     * @memberof CreateQuickCaseRequest
     */
    deadline?: string;
    /**
     * Keywords
     * @type {Array<string>}
     * @memberof CreateQuickCaseRequest
     */
    keywords?: Array<string>;
    /**
     * Optional collection of related journal keys
     * @type {Array<JournalKey>}
     * @memberof CreateQuickCaseRequest
     */
    journalKeys?: Array<JournalKey>;
    /**
     * List of metadata values
     * @type {Array<Metadata>}
     * @memberof CreateQuickCaseRequest
     */
    metadata?: Array<Metadata>;
}

export function CreateQuickCaseRequestFromJSON(json: any): CreateQuickCaseRequest {
    return CreateQuickCaseRequestFromJSONTyped(json, false);
}

export function CreateQuickCaseRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateQuickCaseRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'template': json['template'],
        'subject': json['subject'],
        'category': !exists(json, 'category') ? undefined : json['category'],
        'organization': !exists(json, 'organization') ? undefined : json['organization'],
        'deadline': !exists(json, 'deadline') ? undefined : json['deadline'],
        'keywords': !exists(json, 'keywords') ? undefined : json['keywords'],
        'journalKeys': !exists(json, 'journalKeys') ? undefined : ((json['journalKeys'] as Array<any>).map(JournalKeyFromJSON)),
        'metadata': !exists(json, 'metadata') ? undefined : ((json['metadata'] as Array<any>).map(MetadataFromJSON)),
    };
}

export function CreateQuickCaseRequestToJSON(value?: CreateQuickCaseRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'template': value.template,
        'subject': value.subject,
        'category': value.category,
        'organization': value.organization,
        'deadline': value.deadline,
        'keywords': value.keywords,
        'journalKeys': value.journalKeys === undefined ? undefined : ((value.journalKeys as Array<any>).map(JournalKeyToJSON)),
        'metadata': value.metadata === undefined ? undefined : ((value.metadata as Array<any>).map(MetadataToJSON)),
    };
}


