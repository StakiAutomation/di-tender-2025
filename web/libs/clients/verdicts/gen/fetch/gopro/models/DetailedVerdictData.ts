/* tslint:disable */
/* eslint-disable */
/**
 * GoPro External Integration REST Services - API version 1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    CaseLaw,
    CaseLawFromJSON,
    CaseLawFromJSONTyped,
    CaseLawToJSON,
    JuryJudge,
    JuryJudgeFromJSON,
    JuryJudgeFromJSONTyped,
    JuryJudgeToJSON,
} from './';

/**
 * 
 * @export
 * @interface DetailedVerdictData
 */
export interface DetailedVerdictData {
    /**
     * 
     * @type {string}
     * @memberof DetailedVerdictData
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof DetailedVerdictData
     */
    court?: string;
    /**
     * 
     * @type {string}
     * @memberof DetailedVerdictData
     */
    caseId?: string;
    /**
     * 
     * @type {string}
     * @memberof DetailedVerdictData
     */
    caseNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof DetailedVerdictData
     */
    caseType?: string;
    /**
     * 
     * @type {string}
     * @memberof DetailedVerdictData
     */
    caseCategory?: string;
    /**
     * 
     * @type {string}
     * @memberof DetailedVerdictData
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof DetailedVerdictData
     */
    verdict?: string;
    /**
     * 
     * @type {string}
     * @memberof DetailedVerdictData
     */
    docContent?: string;
    /**
     * 
     * @type {string}
     * @memberof DetailedVerdictData
     */
    verdictHtml?: string;
    /**
     * 
     * @type {string}
     * @memberof DetailedVerdictData
     */
    presentings?: string;
    /**
     * 
     * @type {string}
     * @memberof DetailedVerdictData
     */
    presentingsHtml?: string;
    /**
     * 
     * @type {Date}
     * @memberof DetailedVerdictData
     */
    verdictDate?: Date;
    /**
     * 
     * @type {Date}
     * @memberof DetailedVerdictData
     */
    publishDate?: Date;
    /**
     * 
     * @type {Array<JuryJudge>}
     * @memberof DetailedVerdictData
     */
    judges?: Array<JuryJudge>;
    /**
     * 
     * @type {Array<string>}
     * @memberof DetailedVerdictData
     */
    keywords?: Array<string>;
    /**
     * 
     * @type {Array<CaseLaw>}
     * @memberof DetailedVerdictData
     */
    lawCitations?: Array<CaseLaw>;
}

export function DetailedVerdictDataFromJSON(json: any): DetailedVerdictData {
    return DetailedVerdictDataFromJSONTyped(json, false);
}

export function DetailedVerdictDataFromJSONTyped(json: any, ignoreDiscriminator: boolean): DetailedVerdictData {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'court': !exists(json, 'court') ? undefined : json['court'],
        'caseId': !exists(json, 'caseId') ? undefined : json['caseId'],
        'caseNumber': !exists(json, 'caseNumber') ? undefined : json['caseNumber'],
        'caseType': !exists(json, 'caseType') ? undefined : json['caseType'],
        'caseCategory': !exists(json, 'caseCategory') ? undefined : json['caseCategory'],
        'title': !exists(json, 'title') ? undefined : json['title'],
        'verdict': !exists(json, 'verdict') ? undefined : json['verdict'],
        'docContent': !exists(json, 'docContent') ? undefined : json['docContent'],
        'verdictHtml': !exists(json, 'verdictHtml') ? undefined : json['verdictHtml'],
        'presentings': !exists(json, 'presentings') ? undefined : json['presentings'],
        'presentingsHtml': !exists(json, 'presentingsHtml') ? undefined : json['presentingsHtml'],
        'verdictDate': !exists(json, 'verdictDate') ? undefined : (new Date(json['verdictDate'])),
        'publishDate': !exists(json, 'publishDate') ? undefined : (new Date(json['publishDate'])),
        'judges': !exists(json, 'judges') ? undefined : ((json['judges'] as Array<any>).map(JuryJudgeFromJSON)),
        'keywords': !exists(json, 'keywords') ? undefined : json['keywords'],
        'lawCitations': !exists(json, 'lawCitations') ? undefined : ((json['lawCitations'] as Array<any>).map(CaseLawFromJSON)),
    };
}

export function DetailedVerdictDataToJSON(value?: DetailedVerdictData | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'court': value.court,
        'caseId': value.caseId,
        'caseNumber': value.caseNumber,
        'caseType': value.caseType,
        'caseCategory': value.caseCategory,
        'title': value.title,
        'verdict': value.verdict,
        'docContent': value.docContent,
        'verdictHtml': value.verdictHtml,
        'presentings': value.presentings,
        'presentingsHtml': value.presentingsHtml,
        'verdictDate': value.verdictDate === undefined ? undefined : (value.verdictDate.toISOString()),
        'publishDate': value.publishDate === undefined ? undefined : (value.publishDate.toISOString()),
        'judges': value.judges === undefined ? undefined : ((value.judges as Array<any>).map(JuryJudgeToJSON)),
        'keywords': value.keywords,
        'lawCitations': value.lawCitations === undefined ? undefined : ((value.lawCitations as Array<any>).map(CaseLawToJSON)),
    };
}


