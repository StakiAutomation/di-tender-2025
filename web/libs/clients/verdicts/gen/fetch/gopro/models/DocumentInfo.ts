/* tslint:disable */
/* eslint-disable */
/**
 * GoPro External Integration REST Services - API version 1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Metadata,
    MetadataFromJSON,
    MetadataFromJSONTyped,
    MetadataToJSON,
} from './';

/**
 * GoPro document
 * @export
 * @interface DocumentInfo
 */
export interface DocumentInfo {
    /**
     * Subject (title) of the document
     * @type {string}
     * @memberof DocumentInfo
     */
    subject?: string;
    /**
     * Document class name. One of the values in "Document classes" GoPro list
     * @type {string}
     * @memberof DocumentInfo
     */
    type?: string;
    /**
     * File name of the document content uploaded
     * @type {string}
     * @memberof DocumentInfo
     */
    fileName?: string;
    /**
     * Binary content represented as Base64 encoded string
     * @type {string}
     * @memberof DocumentInfo
     */
    content?: string;
    /**
     * List of metadata values
     * @type {Array<Metadata>}
     * @memberof DocumentInfo
     */
    metadata?: Array<Metadata>;
}

export function DocumentInfoFromJSON(json: any): DocumentInfo {
    return DocumentInfoFromJSONTyped(json, false);
}

export function DocumentInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): DocumentInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'subject': !exists(json, 'subject') ? undefined : json['subject'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'fileName': !exists(json, 'fileName') ? undefined : json['fileName'],
        'content': !exists(json, 'content') ? undefined : json['content'],
        'metadata': !exists(json, 'metadata') ? undefined : ((json['metadata'] as Array<any>).map(MetadataFromJSON)),
    };
}

export function DocumentInfoToJSON(value?: DocumentInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'subject': value.subject,
        'type': value.type,
        'fileName': value.fileName,
        'content': value.content,
        'metadata': value.metadata === undefined ? undefined : ((value.metadata as Array<any>).map(MetadataToJSON)),
    };
}


