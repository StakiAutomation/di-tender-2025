/* tslint:disable */
/* eslint-disable */
/**
 * GoPro External Integration REST Services - API version 1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    DocumentInfo,
    DocumentInfoFromJSON,
    DocumentInfoFromJSONTyped,
    DocumentInfoToJSON,
    JournalKey,
    JournalKeyFromJSON,
    JournalKeyFromJSONTyped,
    JournalKeyToJSON,
    LinkedRoleContact,
    LinkedRoleContactFromJSON,
    LinkedRoleContactFromJSONTyped,
    LinkedRoleContactToJSON,
    Metadata,
    MetadataFromJSON,
    MetadataFromJSONTyped,
    MetadataToJSON,
    ResponsibleWorker,
    ResponsibleWorkerFromJSON,
    ResponsibleWorkerFromJSONTyped,
    ResponsibleWorkerToJSON,
} from './';

/**
 * CreateCase method request structure
 * @export
 * @interface CreateCaseRequest
 */
export interface CreateCaseRequest {
    /**
     * Case template name
     * @type {string}
     * @memberof CreateCaseRequest
     */
    template: string;
    /**
     * Subject (name) of the case
     * @type {string}
     * @memberof CreateCaseRequest
     */
    subject: string;
    /**
     * Case category name
     * @type {string}
     * @memberof CreateCaseRequest
     */
    category?: string;
    /**
     * Name path or ID of organization to search for the case template.
     * Use special word "all" (lower case only) to look in all organizations.
     * Skip parameter or pass empty to assume current user organization
     * @type {string}
     * @memberof CreateCaseRequest
     */
    organization?: string;
    /**
     * Deadline date
     * @type {string}
     * @memberof CreateCaseRequest
     */
    deadline?: string;
    /**
     * Keywords
     * @type {Array<string>}
     * @memberof CreateCaseRequest
     */
    keywords?: Array<string>;
    /**
     * Optional collection of related journal keys
     * @type {Array<JournalKey>}
     * @memberof CreateCaseRequest
     */
    journalKeys?: Array<JournalKey>;
    /**
     * List of metadata values
     * @type {Array<Metadata>}
     * @memberof CreateCaseRequest
     */
    metadata?: Array<Metadata>;
    /**
     * Physical location (if existing and specified)
     * @type {string}
     * @memberof CreateCaseRequest
     */
    physicalLocation?: string;
    /**
     * List of clients (individuals or companies) who will be linked to the case by different roles. If client is not registered (missing from system) - they will be created first
     * @type {Array<LinkedRoleContact>}
     * @memberof CreateCaseRequest
     */
    contacts?: Array<LinkedRoleContact>;
    /**
     * Optional. When true then searches for both active and inactive contacts. Default: false
     * @type {boolean}
     * @memberof CreateCaseRequest
     */
    searchInactiveContacts?: boolean;
    /**
     * List of document attached under case
     * @type {Array<DocumentInfo>}
     * @memberof CreateCaseRequest
     */
    documents?: Array<DocumentInfo>;
    /**
     * When false then default employees for the case template are ignored and not assigned to the case on creation.
     * When true default workers are added. Note that this flag has no effect on handling the ResponsibleEmployees list.
     * These are always assigned to the case.
     * @type {boolean}
     * @memberof CreateCaseRequest
     */
    ignoreDefaultEmployees?: boolean;
    /**
     * List of users that will be assigned as responsible workers for the case. The case template (see <seealso cref="P:GoPro.EIR.Requests.CreateQuickCaseRequest.Template" /> property) specifies default set of responsibles which may or may not be added to the case. See <seealso cref="P:GoPro.EIR.Requests.CreateCaseRequest.IgnoreDefaultEmployees" />
     * @type {Array<ResponsibleWorker>}
     * @memberof CreateCaseRequest
     */
    responsibleEmployees?: Array<ResponsibleWorker>;
}

export function CreateCaseRequestFromJSON(json: any): CreateCaseRequest {
    return CreateCaseRequestFromJSONTyped(json, false);
}

export function CreateCaseRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateCaseRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'template': json['template'],
        'subject': json['subject'],
        'category': !exists(json, 'category') ? undefined : json['category'],
        'organization': !exists(json, 'organization') ? undefined : json['organization'],
        'deadline': !exists(json, 'deadline') ? undefined : json['deadline'],
        'keywords': !exists(json, 'keywords') ? undefined : json['keywords'],
        'journalKeys': !exists(json, 'journalKeys') ? undefined : ((json['journalKeys'] as Array<any>).map(JournalKeyFromJSON)),
        'metadata': !exists(json, 'metadata') ? undefined : ((json['metadata'] as Array<any>).map(MetadataFromJSON)),
        'physicalLocation': !exists(json, 'physicalLocation') ? undefined : json['physicalLocation'],
        'contacts': !exists(json, 'contacts') ? undefined : ((json['contacts'] as Array<any>).map(LinkedRoleContactFromJSON)),
        'searchInactiveContacts': !exists(json, 'searchInactiveContacts') ? undefined : json['searchInactiveContacts'],
        'documents': !exists(json, 'documents') ? undefined : ((json['documents'] as Array<any>).map(DocumentInfoFromJSON)),
        'ignoreDefaultEmployees': !exists(json, 'ignoreDefaultEmployees') ? undefined : json['ignoreDefaultEmployees'],
        'responsibleEmployees': !exists(json, 'responsibleEmployees') ? undefined : ((json['responsibleEmployees'] as Array<any>).map(ResponsibleWorkerFromJSON)),
    };
}

export function CreateCaseRequestToJSON(value?: CreateCaseRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'template': value.template,
        'subject': value.subject,
        'category': value.category,
        'organization': value.organization,
        'deadline': value.deadline,
        'keywords': value.keywords,
        'journalKeys': value.journalKeys === undefined ? undefined : ((value.journalKeys as Array<any>).map(JournalKeyToJSON)),
        'metadata': value.metadata === undefined ? undefined : ((value.metadata as Array<any>).map(MetadataToJSON)),
        'physicalLocation': value.physicalLocation,
        'contacts': value.contacts === undefined ? undefined : ((value.contacts as Array<any>).map(LinkedRoleContactToJSON)),
        'searchInactiveContacts': value.searchInactiveContacts,
        'documents': value.documents === undefined ? undefined : ((value.documents as Array<any>).map(DocumentInfoToJSON)),
        'ignoreDefaultEmployees': value.ignoreDefaultEmployees,
        'responsibleEmployees': value.responsibleEmployees === undefined ? undefined : ((value.responsibleEmployees as Array<any>).map(ResponsibleWorkerToJSON)),
    };
}


