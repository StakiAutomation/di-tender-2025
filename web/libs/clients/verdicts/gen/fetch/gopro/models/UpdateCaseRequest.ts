/* tslint:disable */
/* eslint-disable */
/**
 * GoPro External Integration REST Services - API version 1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Metadata,
    MetadataFromJSON,
    MetadataFromJSONTyped,
    MetadataToJSON,
} from './';

/**
 * UpdateCase method request structure
 * @export
 * @interface UpdateCaseRequest
 */
export interface UpdateCaseRequest {
    /**
     * Record id or case number of target case
     * @type {string}
     * @memberof UpdateCaseRequest
     */
    caseId?: string;
    /**
     * Subject (name) of the case
     * @type {string}
     * @memberof UpdateCaseRequest
     */
    subject?: string;
    /**
     * Status name
     * @type {string}
     * @memberof UpdateCaseRequest
     */
    status?: string;
    /**
     * Collection of associated metadata values with definitions
     * @type {Array<Metadata>}
     * @memberof UpdateCaseRequest
     */
    metadata?: Array<Metadata>;
    /**
     * Flag to control full overwriting of properties
     * When true - all properties are cleared and reset with the new value. Missing properties will be cleared to empty/default value(s). Object should be retrieved first before updating
     * When false - only passed arguments will be updated.
     * @type {boolean}
     * @memberof UpdateCaseRequest
     */
    overwrite?: boolean;
}

export function UpdateCaseRequestFromJSON(json: any): UpdateCaseRequest {
    return UpdateCaseRequestFromJSONTyped(json, false);
}

export function UpdateCaseRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): UpdateCaseRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'caseId': !exists(json, 'caseId') ? undefined : json['caseId'],
        'subject': !exists(json, 'subject') ? undefined : json['subject'],
        'status': !exists(json, 'status') ? undefined : json['status'],
        'metadata': !exists(json, 'metadata') ? undefined : ((json['metadata'] as Array<any>).map(MetadataFromJSON)),
        'overwrite': !exists(json, 'overwrite') ? undefined : json['overwrite'],
    };
}

export function UpdateCaseRequestToJSON(value?: UpdateCaseRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'caseId': value.caseId,
        'subject': value.subject,
        'status': value.status,
        'metadata': value.metadata === undefined ? undefined : ((value.metadata as Array<any>).map(MetadataToJSON)),
        'overwrite': value.overwrite,
    };
}


