/* tslint:disable */
/* eslint-disable */
/**
 * GoPro External Integration REST Services - API version 1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Metadata,
    MetadataFromJSON,
    MetadataFromJSONTyped,
    MetadataToJSON,
} from './';

/**
 * CreateDocument method request structure
 * @export
 * @interface CreateDocumentRequest
 */
export interface CreateDocumentRequest {
    /**
     * Case number or record ID of the parent case
     * @type {string}
     * @memberof CreateDocumentRequest
     */
    caseNumber?: string;
    /**
     * Record ID of the immediate parent under which resides the document. When this is not the case itself then CaseNumber is required
     * @type {string}
     * @memberof CreateDocumentRequest
     */
    parentID?: string;
    /**
     * Subject/title of the new document
     * @type {string}
     * @memberof CreateDocumentRequest
     */
    subject?: string;
    /**
     * File name of the document
     * @type {string}
     * @memberof CreateDocumentRequest
     */
    fileName?: string;
    /**
     * Binary content that will be uploaed. Represented as Base64 encoded string
     * @type {string}
     * @memberof CreateDocumentRequest
     */
    content?: string;
    /**
     * List of metadata values
     * @type {Array<Metadata>}
     * @memberof CreateDocumentRequest
     */
    metadata?: Array<Metadata>;
}

export function CreateDocumentRequestFromJSON(json: any): CreateDocumentRequest {
    return CreateDocumentRequestFromJSONTyped(json, false);
}

export function CreateDocumentRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateDocumentRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'caseNumber': !exists(json, 'caseNumber') ? undefined : json['caseNumber'],
        'parentID': !exists(json, 'parentID') ? undefined : json['parentID'],
        'subject': !exists(json, 'subject') ? undefined : json['subject'],
        'fileName': !exists(json, 'fileName') ? undefined : json['fileName'],
        'content': !exists(json, 'content') ? undefined : json['content'],
        'metadata': !exists(json, 'metadata') ? undefined : ((json['metadata'] as Array<any>).map(MetadataFromJSON)),
    };
}

export function CreateDocumentRequestToJSON(value?: CreateDocumentRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'caseNumber': value.caseNumber,
        'parentID': value.parentID,
        'subject': value.subject,
        'fileName': value.fileName,
        'content': value.content,
        'metadata': value.metadata === undefined ? undefined : ((value.metadata as Array<any>).map(MetadataToJSON)),
    };
}


