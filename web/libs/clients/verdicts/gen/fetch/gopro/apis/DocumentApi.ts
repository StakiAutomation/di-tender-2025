/* tslint:disable */
/* eslint-disable */
/**
 * GoPro External Integration REST Services - API version 1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateDocumentRequest,
    CreateDocumentRequestFromJSON,
    CreateDocumentRequestToJSON,
    ReferenceResponse,
    ReferenceResponseFromJSON,
    ReferenceResponseToJSON,
} from '../models';

export interface CreateDocumentOperationRequest {
    requestData: CreateDocumentRequest;
    token?: string;
}

export interface CreateDocument0Request {
    requestData: CreateDocumentRequest;
    token?: string;
}

/**
 * 
 */
export class DocumentApi extends runtime.BaseAPI {

    /**
     * Create a new file document in GoPro
     */
    async createDocumentRaw(requestParameters: CreateDocumentOperationRequest): Promise<runtime.ApiResponse<ReferenceResponse>> {
        if (requestParameters.requestData === null || requestParameters.requestData === undefined) {
            throw new runtime.RequiredError('requestData','Required parameter requestParameters.requestData was null or undefined when calling createDocument.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/Documents/CreateDocument`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateDocumentRequestToJSON(requestParameters.requestData),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ReferenceResponseFromJSON(jsonValue));
    }

    /**
     * Create a new file document in GoPro
     */
    async createDocument(requestParameters: CreateDocumentOperationRequest): Promise<ReferenceResponse> {
        const response = await this.createDocumentRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create a new file document in GoPro
     */
    async createDocument_1Raw(requestParameters: CreateDocument0Request): Promise<runtime.ApiResponse<ReferenceResponse>> {
        if (requestParameters.requestData === null || requestParameters.requestData === undefined) {
            throw new runtime.RequiredError('requestData','Required parameter requestParameters.requestData was null or undefined when calling createDocument_1.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/Documents/CreateDocument`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateDocumentRequestToJSON(requestParameters.requestData),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ReferenceResponseFromJSON(jsonValue));
    }

    /**
     * Create a new file document in GoPro
     */
    async createDocument_1(requestParameters: CreateDocument0Request): Promise<ReferenceResponse> {
        const response = await this.createDocument_1Raw(requestParameters);
        return await response.value();
    }

}
