/* tslint:disable */
/* eslint-disable */
/**
 * GoPro External Integration REST Services - API version 1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateFormRequest,
    CreateFormRequestFromJSON,
    CreateFormRequestToJSON,
    GetFormRequest,
    GetFormRequestFromJSON,
    GetFormRequestToJSON,
    GetFormResponse,
    GetFormResponseFromJSON,
    GetFormResponseToJSON,
    ReferenceResponse,
    ReferenceResponseFromJSON,
    ReferenceResponseToJSON,
    UpdateFormRequest,
    UpdateFormRequestFromJSON,
    UpdateFormRequestToJSON,
} from '../models';

export interface CreateFormOperationRequest {
    requestData: CreateFormRequest;
    token?: string;
}

export interface CreateForm0Request {
    requestData: CreateFormRequest;
    token?: string;
}

export interface GetFormOperationRequest {
    requestData: GetFormRequest;
    token?: string;
}

export interface GetForm0Request {
    requestData: GetFormRequest;
    token?: string;
}

export interface UpdateFormOperationRequest {
    requestData: UpdateFormRequest;
    token?: string;
}

export interface UpdateForm0Request {
    requestData: UpdateFormRequest;
    token?: string;
}

/**
 * 
 */
export class FormsApi extends runtime.BaseAPI {

    /**
     * Create a new custom form (custom GoPro object type)  API: 1.0
     */
    async createFormRaw(requestParameters: CreateFormOperationRequest): Promise<runtime.ApiResponse<ReferenceResponse>> {
        if (requestParameters.requestData === null || requestParameters.requestData === undefined) {
            throw new runtime.RequiredError('requestData','Required parameter requestParameters.requestData was null or undefined when calling createForm.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/Forms/CreateForm`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateFormRequestToJSON(requestParameters.requestData),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ReferenceResponseFromJSON(jsonValue));
    }

    /**
     * Create a new custom form (custom GoPro object type)  API: 1.0
     */
    async createForm(requestParameters: CreateFormOperationRequest): Promise<ReferenceResponse> {
        const response = await this.createFormRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create a new custom form (custom GoPro object type)  API: 1.0
     */
    async createForm_1Raw(requestParameters: CreateForm0Request): Promise<runtime.ApiResponse<ReferenceResponse>> {
        if (requestParameters.requestData === null || requestParameters.requestData === undefined) {
            throw new runtime.RequiredError('requestData','Required parameter requestParameters.requestData was null or undefined when calling createForm_1.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/Forms/CreateForm`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateFormRequestToJSON(requestParameters.requestData),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ReferenceResponseFromJSON(jsonValue));
    }

    /**
     * Create a new custom form (custom GoPro object type)  API: 1.0
     */
    async createForm_1(requestParameters: CreateForm0Request): Promise<ReferenceResponse> {
        const response = await this.createForm_1Raw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve a custom Gopro object / form  API: 1.0
     */
    async getFormRaw(requestParameters: GetFormOperationRequest): Promise<runtime.ApiResponse<GetFormResponse>> {
        if (requestParameters.requestData === null || requestParameters.requestData === undefined) {
            throw new runtime.RequiredError('requestData','Required parameter requestParameters.requestData was null or undefined when calling getForm.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/Forms/GetForm`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetFormRequestToJSON(requestParameters.requestData),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetFormResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a custom Gopro object / form  API: 1.0
     */
    async getForm(requestParameters: GetFormOperationRequest): Promise<GetFormResponse> {
        const response = await this.getFormRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve a custom Gopro object / form  API: 1.0
     */
    async getForm_2Raw(requestParameters: GetForm0Request): Promise<runtime.ApiResponse<GetFormResponse>> {
        if (requestParameters.requestData === null || requestParameters.requestData === undefined) {
            throw new runtime.RequiredError('requestData','Required parameter requestParameters.requestData was null or undefined when calling getForm_2.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/Forms/GetForm`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetFormRequestToJSON(requestParameters.requestData),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetFormResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve a custom Gopro object / form  API: 1.0
     */
    async getForm_2(requestParameters: GetForm0Request): Promise<GetFormResponse> {
        const response = await this.getForm_2Raw(requestParameters);
        return await response.value();
    }

    /**
     * Update an existing custom Gopro object / form  API: 1.0
     */
    async updateFormRaw(requestParameters: UpdateFormOperationRequest): Promise<runtime.ApiResponse<ReferenceResponse>> {
        if (requestParameters.requestData === null || requestParameters.requestData === undefined) {
            throw new runtime.RequiredError('requestData','Required parameter requestParameters.requestData was null or undefined when calling updateForm.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/Forms/UpdateForm`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateFormRequestToJSON(requestParameters.requestData),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ReferenceResponseFromJSON(jsonValue));
    }

    /**
     * Update an existing custom Gopro object / form  API: 1.0
     */
    async updateForm(requestParameters: UpdateFormOperationRequest): Promise<ReferenceResponse> {
        const response = await this.updateFormRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update an existing custom Gopro object / form  API: 1.0
     */
    async updateForm_3Raw(requestParameters: UpdateForm0Request): Promise<runtime.ApiResponse<ReferenceResponse>> {
        if (requestParameters.requestData === null || requestParameters.requestData === undefined) {
            throw new runtime.RequiredError('requestData','Required parameter requestParameters.requestData was null or undefined when calling updateForm_3.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/Forms/UpdateForm`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateFormRequestToJSON(requestParameters.requestData),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ReferenceResponseFromJSON(jsonValue));
    }

    /**
     * Update an existing custom Gopro object / form  API: 1.0
     */
    async updateForm_3(requestParameters: UpdateForm0Request): Promise<ReferenceResponse> {
        const response = await this.updateForm_3Raw(requestParameters);
        return await response.value();
    }

}
