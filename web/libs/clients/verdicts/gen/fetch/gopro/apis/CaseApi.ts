/* tslint:disable */
/* eslint-disable */
/**
 * GoPro External Integration REST Services - API version 1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CasesResponse,
    CasesResponseFromJSON,
    CasesResponseToJSON,
    CreateCaseRequest,
    CreateCaseRequestFromJSON,
    CreateCaseRequestToJSON,
    CreateFolderRequest,
    CreateFolderRequestFromJSON,
    CreateFolderRequestToJSON,
    CreateQuickCaseRequest,
    CreateQuickCaseRequestFromJSON,
    CreateQuickCaseRequestToJSON,
    GetCaseContactsRequest,
    GetCaseContactsRequestFromJSON,
    GetCaseContactsRequestToJSON,
    GetCaseContactsResponse,
    GetCaseContactsResponseFromJSON,
    GetCaseContactsResponseToJSON,
    GetCaseRequest,
    GetCaseRequestFromJSON,
    GetCaseRequestToJSON,
    GetCaseResponse,
    GetCaseResponseFromJSON,
    GetCaseResponseToJSON,
    GetFolderRequest,
    GetFolderRequestFromJSON,
    GetFolderRequestToJSON,
    GetFolderResponse,
    GetFolderResponseFromJSON,
    GetFolderResponseToJSON,
    GetFormRequest,
    GetFormRequestFromJSON,
    GetFormRequestToJSON,
    LinkContactRequest,
    LinkContactRequestFromJSON,
    LinkContactRequestToJSON,
    NamedReferenceResponse,
    NamedReferenceResponseFromJSON,
    NamedReferenceResponseToJSON,
    ReferenceResponse,
    ReferenceResponseFromJSON,
    ReferenceResponseToJSON,
    StartingTimeRequest,
    StartingTimeRequestFromJSON,
    StartingTimeRequestToJSON,
    TemplateAndContactFilterRequest,
    TemplateAndContactFilterRequestFromJSON,
    TemplateAndContactFilterRequestToJSON,
    UpdateCaseRequest,
    UpdateCaseRequestFromJSON,
    UpdateCaseRequestToJSON,
} from '../models';

export interface CreateCaseOperationRequest {
    requestData: CreateCaseRequest;
    token?: string;
}

export interface CreateCase0Request {
    requestData: CreateCaseRequest;
    token?: string;
}

export interface CreateFolderOperationRequest {
    requestData: CreateFolderRequest;
    token?: string;
}

export interface CreateFolder0Request {
    requestData: CreateFolderRequest;
    token?: string;
}

export interface CreateQuickCaseOperationRequest {
    requestData: CreateQuickCaseRequest;
    token?: string;
}

export interface CreateQuickCase0Request {
    requestData: CreateQuickCaseRequest;
    token?: string;
}

export interface GetCaseOperationRequest {
    requestData: GetCaseRequest;
    token?: string;
}

export interface GetCaseContactsOperationRequest {
    requestData: GetCaseContactsRequest;
    token?: string;
}

export interface GetCaseContacts0Request {
    requestData: GetCaseContactsRequest;
    token?: string;
}

export interface GetCase0Request {
    requestData: GetCaseRequest;
    token?: string;
}

export interface GetDefaultStatusRequest {
    requestData: GetFormRequest;
    token?: string;
}

export interface GetDefaultStatus0Request {
    requestData: GetFormRequest;
    token?: string;
}

export interface GetFolderOperationRequest {
    requestData: GetFolderRequest;
    token?: string;
}

export interface GetFolder0Request {
    requestData: GetFolderRequest;
    token?: string;
}

export interface GetUpdatesRequest {
    requestData: StartingTimeRequest;
    token?: string;
}

export interface GetUpdates0Request {
    requestData: StartingTimeRequest;
    token?: string;
}

export interface LinkContactToCaseRequest {
    requestData: LinkContactRequest;
    token?: string;
}

export interface LinkContactToCase0Request {
    requestData: LinkContactRequest;
    token?: string;
}

export interface SearchCasesRequest {
    requestData: TemplateAndContactFilterRequest;
    token?: string;
}

export interface SearchCases0Request {
    requestData: TemplateAndContactFilterRequest;
    token?: string;
}

export interface UpdateCaseOperationRequest {
    requestData: UpdateCaseRequest;
    token?: string;
}

export interface UpdateCase0Request {
    requestData: UpdateCaseRequest;
    token?: string;
}

/**
 * 
 */
export class CaseApi extends runtime.BaseAPI {

    /**
     * Create a new case in GoPro with linked contacts and documents attached.  API: 1.0
     */
    async createCaseRaw(requestParameters: CreateCaseOperationRequest): Promise<runtime.ApiResponse<ReferenceResponse>> {
        if (requestParameters.requestData === null || requestParameters.requestData === undefined) {
            throw new runtime.RequiredError('requestData','Required parameter requestParameters.requestData was null or undefined when calling createCase.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/Case/CreateCase`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateCaseRequestToJSON(requestParameters.requestData),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ReferenceResponseFromJSON(jsonValue));
    }

    /**
     * Create a new case in GoPro with linked contacts and documents attached.  API: 1.0
     */
    async createCase(requestParameters: CreateCaseOperationRequest): Promise<ReferenceResponse> {
        const response = await this.createCaseRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create a new case in GoPro with linked contacts and documents attached.  API: 1.0
     */
    async createCase_1Raw(requestParameters: CreateCase0Request): Promise<runtime.ApiResponse<ReferenceResponse>> {
        if (requestParameters.requestData === null || requestParameters.requestData === undefined) {
            throw new runtime.RequiredError('requestData','Required parameter requestParameters.requestData was null or undefined when calling createCase_1.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/Cases/CreateCase`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateCaseRequestToJSON(requestParameters.requestData),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ReferenceResponseFromJSON(jsonValue));
    }

    /**
     * Create a new case in GoPro with linked contacts and documents attached.  API: 1.0
     */
    async createCase_1(requestParameters: CreateCase0Request): Promise<ReferenceResponse> {
        const response = await this.createCase_1Raw(requestParameters);
        return await response.value();
    }

    /**
     * Creates a folder under specified case
     */
    async createFolderRaw(requestParameters: CreateFolderOperationRequest): Promise<runtime.ApiResponse<ReferenceResponse>> {
        if (requestParameters.requestData === null || requestParameters.requestData === undefined) {
            throw new runtime.RequiredError('requestData','Required parameter requestParameters.requestData was null or undefined when calling createFolder.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/Case/CreateFolder`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateFolderRequestToJSON(requestParameters.requestData),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ReferenceResponseFromJSON(jsonValue));
    }

    /**
     * Creates a folder under specified case
     */
    async createFolder(requestParameters: CreateFolderOperationRequest): Promise<ReferenceResponse> {
        const response = await this.createFolderRaw(requestParameters);
        return await response.value();
    }

    /**
     * Creates a folder under specified case
     */
    async createFolder_2Raw(requestParameters: CreateFolder0Request): Promise<runtime.ApiResponse<ReferenceResponse>> {
        if (requestParameters.requestData === null || requestParameters.requestData === undefined) {
            throw new runtime.RequiredError('requestData','Required parameter requestParameters.requestData was null or undefined when calling createFolder_2.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/Cases/CreateFolder`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateFolderRequestToJSON(requestParameters.requestData),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ReferenceResponseFromJSON(jsonValue));
    }

    /**
     * Creates a folder under specified case
     */
    async createFolder_2(requestParameters: CreateFolder0Request): Promise<ReferenceResponse> {
        const response = await this.createFolder_2Raw(requestParameters);
        return await response.value();
    }

    /**
     * Create a new case in GoPro
     */
    async createQuickCaseRaw(requestParameters: CreateQuickCaseOperationRequest): Promise<runtime.ApiResponse<ReferenceResponse>> {
        if (requestParameters.requestData === null || requestParameters.requestData === undefined) {
            throw new runtime.RequiredError('requestData','Required parameter requestParameters.requestData was null or undefined when calling createQuickCase.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/Case/CreateQuickCase`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateQuickCaseRequestToJSON(requestParameters.requestData),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ReferenceResponseFromJSON(jsonValue));
    }

    /**
     * Create a new case in GoPro
     */
    async createQuickCase(requestParameters: CreateQuickCaseOperationRequest): Promise<ReferenceResponse> {
        const response = await this.createQuickCaseRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create a new case in GoPro
     */
    async createQuickCase_3Raw(requestParameters: CreateQuickCase0Request): Promise<runtime.ApiResponse<ReferenceResponse>> {
        if (requestParameters.requestData === null || requestParameters.requestData === undefined) {
            throw new runtime.RequiredError('requestData','Required parameter requestParameters.requestData was null or undefined when calling createQuickCase_3.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/Cases/CreateQuickCase`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateQuickCaseRequestToJSON(requestParameters.requestData),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ReferenceResponseFromJSON(jsonValue));
    }

    /**
     * Create a new case in GoPro
     */
    async createQuickCase_3(requestParameters: CreateQuickCase0Request): Promise<ReferenceResponse> {
        const response = await this.createQuickCase_3Raw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve basic info for specified GoPro case
     */
    async getCaseRaw(requestParameters: GetCaseOperationRequest): Promise<runtime.ApiResponse<GetCaseResponse>> {
        if (requestParameters.requestData === null || requestParameters.requestData === undefined) {
            throw new runtime.RequiredError('requestData','Required parameter requestParameters.requestData was null or undefined when calling getCase.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/Case/GetCase`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetCaseRequestToJSON(requestParameters.requestData),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCaseResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve basic info for specified GoPro case
     */
    async getCase(requestParameters: GetCaseOperationRequest): Promise<GetCaseResponse> {
        const response = await this.getCaseRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve contacts associated with a specific case
     */
    async getCaseContactsRaw(requestParameters: GetCaseContactsOperationRequest): Promise<runtime.ApiResponse<GetCaseContactsResponse>> {
        if (requestParameters.requestData === null || requestParameters.requestData === undefined) {
            throw new runtime.RequiredError('requestData','Required parameter requestParameters.requestData was null or undefined when calling getCaseContacts.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/Case/GetCaseContacts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetCaseContactsRequestToJSON(requestParameters.requestData),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCaseContactsResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve contacts associated with a specific case
     */
    async getCaseContacts(requestParameters: GetCaseContactsOperationRequest): Promise<GetCaseContactsResponse> {
        const response = await this.getCaseContactsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve contacts associated with a specific case
     */
    async getCaseContacts_4Raw(requestParameters: GetCaseContacts0Request): Promise<runtime.ApiResponse<GetCaseContactsResponse>> {
        if (requestParameters.requestData === null || requestParameters.requestData === undefined) {
            throw new runtime.RequiredError('requestData','Required parameter requestParameters.requestData was null or undefined when calling getCaseContacts_4.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/Cases/GetCaseContacts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetCaseContactsRequestToJSON(requestParameters.requestData),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCaseContactsResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve contacts associated with a specific case
     */
    async getCaseContacts_4(requestParameters: GetCaseContacts0Request): Promise<GetCaseContactsResponse> {
        const response = await this.getCaseContacts_4Raw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve basic info for specified GoPro case
     */
    async getCase_5Raw(requestParameters: GetCase0Request): Promise<runtime.ApiResponse<GetCaseResponse>> {
        if (requestParameters.requestData === null || requestParameters.requestData === undefined) {
            throw new runtime.RequiredError('requestData','Required parameter requestParameters.requestData was null or undefined when calling getCase_5.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/Cases/GetCase`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetCaseRequestToJSON(requestParameters.requestData),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCaseResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve basic info for specified GoPro case
     */
    async getCase_5(requestParameters: GetCase0Request): Promise<GetCaseResponse> {
        const response = await this.getCase_5Raw(requestParameters);
        return await response.value();
    }

    /**
     * Returns default status for a list
     */
    async getDefaultStatusRaw(requestParameters: GetDefaultStatusRequest): Promise<runtime.ApiResponse<NamedReferenceResponse>> {
        if (requestParameters.requestData === null || requestParameters.requestData === undefined) {
            throw new runtime.RequiredError('requestData','Required parameter requestParameters.requestData was null or undefined when calling getDefaultStatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/Case/GetDefaultStatus`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetFormRequestToJSON(requestParameters.requestData),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => NamedReferenceResponseFromJSON(jsonValue));
    }

    /**
     * Returns default status for a list
     */
    async getDefaultStatus(requestParameters: GetDefaultStatusRequest): Promise<NamedReferenceResponse> {
        const response = await this.getDefaultStatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns default status for a list
     */
    async getDefaultStatus_6Raw(requestParameters: GetDefaultStatus0Request): Promise<runtime.ApiResponse<NamedReferenceResponse>> {
        if (requestParameters.requestData === null || requestParameters.requestData === undefined) {
            throw new runtime.RequiredError('requestData','Required parameter requestParameters.requestData was null or undefined when calling getDefaultStatus_6.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/Cases/GetDefaultStatus`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetFormRequestToJSON(requestParameters.requestData),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => NamedReferenceResponseFromJSON(jsonValue));
    }

    /**
     * Returns default status for a list
     */
    async getDefaultStatus_6(requestParameters: GetDefaultStatus0Request): Promise<NamedReferenceResponse> {
        const response = await this.getDefaultStatus_6Raw(requestParameters);
        return await response.value();
    }

    /**
     * Returns information about a folder by specified folder name and parent ID
     */
    async getFolderRaw(requestParameters: GetFolderOperationRequest): Promise<runtime.ApiResponse<GetFolderResponse>> {
        if (requestParameters.requestData === null || requestParameters.requestData === undefined) {
            throw new runtime.RequiredError('requestData','Required parameter requestParameters.requestData was null or undefined when calling getFolder.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/Case/GetFolder`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetFolderRequestToJSON(requestParameters.requestData),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetFolderResponseFromJSON(jsonValue));
    }

    /**
     * Returns information about a folder by specified folder name and parent ID
     */
    async getFolder(requestParameters: GetFolderOperationRequest): Promise<GetFolderResponse> {
        const response = await this.getFolderRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns information about a folder by specified folder name and parent ID
     */
    async getFolder_7Raw(requestParameters: GetFolder0Request): Promise<runtime.ApiResponse<GetFolderResponse>> {
        if (requestParameters.requestData === null || requestParameters.requestData === undefined) {
            throw new runtime.RequiredError('requestData','Required parameter requestParameters.requestData was null or undefined when calling getFolder_7.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/Cases/GetFolder`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetFolderRequestToJSON(requestParameters.requestData),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetFolderResponseFromJSON(jsonValue));
    }

    /**
     * Returns information about a folder by specified folder name and parent ID
     */
    async getFolder_7(requestParameters: GetFolder0Request): Promise<GetFolderResponse> {
        const response = await this.getFolder_7Raw(requestParameters);
        return await response.value();
    }

    /**
     * Returns a list of cases that had been updated since startingDate argument.  API: 1.0
     */
    async getUpdatesRaw(requestParameters: GetUpdatesRequest): Promise<runtime.ApiResponse<CasesResponse>> {
        if (requestParameters.requestData === null || requestParameters.requestData === undefined) {
            throw new runtime.RequiredError('requestData','Required parameter requestParameters.requestData was null or undefined when calling getUpdates.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/Case/GetUpdates`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StartingTimeRequestToJSON(requestParameters.requestData),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CasesResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of cases that had been updated since startingDate argument.  API: 1.0
     */
    async getUpdates(requestParameters: GetUpdatesRequest): Promise<CasesResponse> {
        const response = await this.getUpdatesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns a list of cases that had been updated since startingDate argument.  API: 1.0
     */
    async getUpdates_8Raw(requestParameters: GetUpdates0Request): Promise<runtime.ApiResponse<CasesResponse>> {
        if (requestParameters.requestData === null || requestParameters.requestData === undefined) {
            throw new runtime.RequiredError('requestData','Required parameter requestParameters.requestData was null or undefined when calling getUpdates_8.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/Cases/GetUpdates`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StartingTimeRequestToJSON(requestParameters.requestData),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CasesResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of cases that had been updated since startingDate argument.  API: 1.0
     */
    async getUpdates_8(requestParameters: GetUpdates0Request): Promise<CasesResponse> {
        const response = await this.getUpdates_8Raw(requestParameters);
        return await response.value();
    }

    /**
     * Associate an individual or company contact with a case
     */
    async linkContactToCaseRaw(requestParameters: LinkContactToCaseRequest): Promise<runtime.ApiResponse<ReferenceResponse>> {
        if (requestParameters.requestData === null || requestParameters.requestData === undefined) {
            throw new runtime.RequiredError('requestData','Required parameter requestParameters.requestData was null or undefined when calling linkContactToCase.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/Case/LinkContactToCase`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LinkContactRequestToJSON(requestParameters.requestData),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ReferenceResponseFromJSON(jsonValue));
    }

    /**
     * Associate an individual or company contact with a case
     */
    async linkContactToCase(requestParameters: LinkContactToCaseRequest): Promise<ReferenceResponse> {
        const response = await this.linkContactToCaseRaw(requestParameters);
        return await response.value();
    }

    /**
     * Associate an individual or company contact with a case
     */
    async linkContactToCase_9Raw(requestParameters: LinkContactToCase0Request): Promise<runtime.ApiResponse<ReferenceResponse>> {
        if (requestParameters.requestData === null || requestParameters.requestData === undefined) {
            throw new runtime.RequiredError('requestData','Required parameter requestParameters.requestData was null or undefined when calling linkContactToCase_9.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/Cases/LinkContactToCase`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LinkContactRequestToJSON(requestParameters.requestData),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ReferenceResponseFromJSON(jsonValue));
    }

    /**
     * Associate an individual or company contact with a case
     */
    async linkContactToCase_9(requestParameters: LinkContactToCase0Request): Promise<ReferenceResponse> {
        const response = await this.linkContactToCase_9Raw(requestParameters);
        return await response.value();
    }

    /**
     * Search cases by case template (optional) and contact. If template is not specified, search is not filtered by case type. Contact must be specified
     */
    async searchCasesRaw(requestParameters: SearchCasesRequest): Promise<runtime.ApiResponse<CasesResponse>> {
        if (requestParameters.requestData === null || requestParameters.requestData === undefined) {
            throw new runtime.RequiredError('requestData','Required parameter requestParameters.requestData was null or undefined when calling searchCases.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/Case/SearchCases`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TemplateAndContactFilterRequestToJSON(requestParameters.requestData),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CasesResponseFromJSON(jsonValue));
    }

    /**
     * Search cases by case template (optional) and contact. If template is not specified, search is not filtered by case type. Contact must be specified
     */
    async searchCases(requestParameters: SearchCasesRequest): Promise<CasesResponse> {
        const response = await this.searchCasesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Search cases by case template (optional) and contact. If template is not specified, search is not filtered by case type. Contact must be specified
     */
    async searchCases_10Raw(requestParameters: SearchCases0Request): Promise<runtime.ApiResponse<CasesResponse>> {
        if (requestParameters.requestData === null || requestParameters.requestData === undefined) {
            throw new runtime.RequiredError('requestData','Required parameter requestParameters.requestData was null or undefined when calling searchCases_10.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/Cases/SearchCases`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TemplateAndContactFilterRequestToJSON(requestParameters.requestData),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CasesResponseFromJSON(jsonValue));
    }

    /**
     * Search cases by case template (optional) and contact. If template is not specified, search is not filtered by case type. Contact must be specified
     */
    async searchCases_10(requestParameters: SearchCases0Request): Promise<CasesResponse> {
        const response = await this.searchCases_10Raw(requestParameters);
        return await response.value();
    }

    /**
     * Update a case by case number or record ID
     */
    async updateCaseRaw(requestParameters: UpdateCaseOperationRequest): Promise<runtime.ApiResponse<ReferenceResponse>> {
        if (requestParameters.requestData === null || requestParameters.requestData === undefined) {
            throw new runtime.RequiredError('requestData','Required parameter requestParameters.requestData was null or undefined when calling updateCase.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/Case/UpdateCase`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateCaseRequestToJSON(requestParameters.requestData),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ReferenceResponseFromJSON(jsonValue));
    }

    /**
     * Update a case by case number or record ID
     */
    async updateCase(requestParameters: UpdateCaseOperationRequest): Promise<ReferenceResponse> {
        const response = await this.updateCaseRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update a case by case number or record ID
     */
    async updateCase_11Raw(requestParameters: UpdateCase0Request): Promise<runtime.ApiResponse<ReferenceResponse>> {
        if (requestParameters.requestData === null || requestParameters.requestData === undefined) {
            throw new runtime.RequiredError('requestData','Required parameter requestParameters.requestData was null or undefined when calling updateCase_11.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/Cases/UpdateCase`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateCaseRequestToJSON(requestParameters.requestData),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ReferenceResponseFromJSON(jsonValue));
    }

    /**
     * Update a case by case number or record ID
     */
    async updateCase_11(requestParameters: UpdateCase0Request): Promise<ReferenceResponse> {
        const response = await this.updateCase_11Raw(requestParameters);
        return await response.value();
    }

}
