/* tslint:disable */
/* eslint-disable */
/**
 * GoPro External Integration REST Services - API version 1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Company,
    CompanyFromJSON,
    CompanyToJSON,
    Contact,
    ContactFromJSON,
    ContactToJSON,
    GetClientRequest,
    GetClientRequestFromJSON,
    GetClientRequestToJSON,
    GetCompanyResponse,
    GetCompanyResponseFromJSON,
    GetCompanyResponseToJSON,
    GetContactRequest,
    GetContactRequestFromJSON,
    GetContactRequestToJSON,
    GetContactResponse,
    GetContactResponseFromJSON,
    GetContactResponseToJSON,
    GetIndividualResponse,
    GetIndividualResponseFromJSON,
    GetIndividualResponseToJSON,
    Individual,
    IndividualFromJSON,
    IndividualToJSON,
    ReferenceResponse,
    ReferenceResponseFromJSON,
    ReferenceResponseToJSON,
} from '../models';

export interface CreateCompanyRequest {
    requestData: Company;
    token?: string;
}

export interface CreateCompany0Request {
    requestData: Company;
    token?: string;
}

export interface CreateContactRequest {
    requestData: Contact;
    token?: string;
}

export interface CreateContact0Request {
    requestData: Contact;
    token?: string;
}

export interface CreateIndividualRequest {
    requestData: Individual;
    token?: string;
}

export interface CreateIndividual0Request {
    requestData: Individual;
    token?: string;
}

export interface GetCompanyRequest {
    requestData: GetClientRequest;
    token?: string;
}

export interface GetCompany0Request {
    requestData: GetClientRequest;
    token?: string;
}

export interface GetContactOperationRequest {
    requestData: GetContactRequest;
    token?: string;
}

export interface GetContact0Request {
    requestData: GetContactRequest;
    token?: string;
}

export interface GetIndividualRequest {
    requestData: GetClientRequest;
    token?: string;
}

export interface GetIndividual0Request {
    requestData: GetClientRequest;
    token?: string;
}

/**
 * 
 */
export class ClientsApi extends runtime.BaseAPI {

    /**
     * Create a new company partner in GoPro
     */
    async createCompanyRaw(requestParameters: CreateCompanyRequest): Promise<runtime.ApiResponse<ReferenceResponse>> {
        if (requestParameters.requestData === null || requestParameters.requestData === undefined) {
            throw new runtime.RequiredError('requestData','Required parameter requestParameters.requestData was null or undefined when calling createCompany.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/Clients/CreateCompany`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CompanyToJSON(requestParameters.requestData),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ReferenceResponseFromJSON(jsonValue));
    }

    /**
     * Create a new company partner in GoPro
     */
    async createCompany(requestParameters: CreateCompanyRequest): Promise<ReferenceResponse> {
        const response = await this.createCompanyRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create a new company partner in GoPro
     */
    async createCompany_1Raw(requestParameters: CreateCompany0Request): Promise<runtime.ApiResponse<ReferenceResponse>> {
        if (requestParameters.requestData === null || requestParameters.requestData === undefined) {
            throw new runtime.RequiredError('requestData','Required parameter requestParameters.requestData was null or undefined when calling createCompany_1.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/Clients/CreateCompany`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CompanyToJSON(requestParameters.requestData),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ReferenceResponseFromJSON(jsonValue));
    }

    /**
     * Create a new company partner in GoPro
     */
    async createCompany_1(requestParameters: CreateCompany0Request): Promise<ReferenceResponse> {
        const response = await this.createCompany_1Raw(requestParameters);
        return await response.value();
    }

    /**
     * Create a new partner contact in GoPro
     */
    async createContactRaw(requestParameters: CreateContactRequest): Promise<runtime.ApiResponse<ReferenceResponse>> {
        if (requestParameters.requestData === null || requestParameters.requestData === undefined) {
            throw new runtime.RequiredError('requestData','Required parameter requestParameters.requestData was null or undefined when calling createContact.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/Clients/CreateContact`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ContactToJSON(requestParameters.requestData),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ReferenceResponseFromJSON(jsonValue));
    }

    /**
     * Create a new partner contact in GoPro
     */
    async createContact(requestParameters: CreateContactRequest): Promise<ReferenceResponse> {
        const response = await this.createContactRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create a new partner contact in GoPro
     */
    async createContact_2Raw(requestParameters: CreateContact0Request): Promise<runtime.ApiResponse<ReferenceResponse>> {
        if (requestParameters.requestData === null || requestParameters.requestData === undefined) {
            throw new runtime.RequiredError('requestData','Required parameter requestParameters.requestData was null or undefined when calling createContact_2.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/Clients/CreateContact`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ContactToJSON(requestParameters.requestData),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ReferenceResponseFromJSON(jsonValue));
    }

    /**
     * Create a new partner contact in GoPro
     */
    async createContact_2(requestParameters: CreateContact0Request): Promise<ReferenceResponse> {
        const response = await this.createContact_2Raw(requestParameters);
        return await response.value();
    }

    /**
     * Create a new person (individual) partner in GoPro
     */
    async createIndividualRaw(requestParameters: CreateIndividualRequest): Promise<runtime.ApiResponse<ReferenceResponse>> {
        if (requestParameters.requestData === null || requestParameters.requestData === undefined) {
            throw new runtime.RequiredError('requestData','Required parameter requestParameters.requestData was null or undefined when calling createIndividual.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/Clients/CreateIndividual`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IndividualToJSON(requestParameters.requestData),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ReferenceResponseFromJSON(jsonValue));
    }

    /**
     * Create a new person (individual) partner in GoPro
     */
    async createIndividual(requestParameters: CreateIndividualRequest): Promise<ReferenceResponse> {
        const response = await this.createIndividualRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create a new person (individual) partner in GoPro
     */
    async createIndividual_3Raw(requestParameters: CreateIndividual0Request): Promise<runtime.ApiResponse<ReferenceResponse>> {
        if (requestParameters.requestData === null || requestParameters.requestData === undefined) {
            throw new runtime.RequiredError('requestData','Required parameter requestParameters.requestData was null or undefined when calling createIndividual_3.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/Clients/CreateIndividual`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IndividualToJSON(requestParameters.requestData),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ReferenceResponseFromJSON(jsonValue));
    }

    /**
     * Create a new person (individual) partner in GoPro
     */
    async createIndividual_3(requestParameters: CreateIndividual0Request): Promise<ReferenceResponse> {
        const response = await this.createIndividual_3Raw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve company info from GoPro
     */
    async getCompanyRaw(requestParameters: GetCompanyRequest): Promise<runtime.ApiResponse<GetCompanyResponse>> {
        if (requestParameters.requestData === null || requestParameters.requestData === undefined) {
            throw new runtime.RequiredError('requestData','Required parameter requestParameters.requestData was null or undefined when calling getCompany.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/Clients/GetCompany`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetClientRequestToJSON(requestParameters.requestData),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCompanyResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve company info from GoPro
     */
    async getCompany(requestParameters: GetCompanyRequest): Promise<GetCompanyResponse> {
        const response = await this.getCompanyRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve company info from GoPro
     */
    async getCompany_4Raw(requestParameters: GetCompany0Request): Promise<runtime.ApiResponse<GetCompanyResponse>> {
        if (requestParameters.requestData === null || requestParameters.requestData === undefined) {
            throw new runtime.RequiredError('requestData','Required parameter requestParameters.requestData was null or undefined when calling getCompany_4.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/Clients/GetCompany`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetClientRequestToJSON(requestParameters.requestData),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCompanyResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve company info from GoPro
     */
    async getCompany_4(requestParameters: GetCompany0Request): Promise<GetCompanyResponse> {
        const response = await this.getCompany_4Raw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve contact info from GoPro
     */
    async getContactRaw(requestParameters: GetContactOperationRequest): Promise<runtime.ApiResponse<GetContactResponse>> {
        if (requestParameters.requestData === null || requestParameters.requestData === undefined) {
            throw new runtime.RequiredError('requestData','Required parameter requestParameters.requestData was null or undefined when calling getContact.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/Clients/GetContact`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetContactRequestToJSON(requestParameters.requestData),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetContactResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve contact info from GoPro
     */
    async getContact(requestParameters: GetContactOperationRequest): Promise<GetContactResponse> {
        const response = await this.getContactRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve contact info from GoPro
     */
    async getContact_5Raw(requestParameters: GetContact0Request): Promise<runtime.ApiResponse<GetContactResponse>> {
        if (requestParameters.requestData === null || requestParameters.requestData === undefined) {
            throw new runtime.RequiredError('requestData','Required parameter requestParameters.requestData was null or undefined when calling getContact_5.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/Clients/GetContact`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetContactRequestToJSON(requestParameters.requestData),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetContactResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve contact info from GoPro
     */
    async getContact_5(requestParameters: GetContact0Request): Promise<GetContactResponse> {
        const response = await this.getContact_5Raw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve person (individual) parter info from GoPro
     */
    async getIndividualRaw(requestParameters: GetIndividualRequest): Promise<runtime.ApiResponse<GetIndividualResponse>> {
        if (requestParameters.requestData === null || requestParameters.requestData === undefined) {
            throw new runtime.RequiredError('requestData','Required parameter requestParameters.requestData was null or undefined when calling getIndividual.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/Clients/GetIndividual`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetClientRequestToJSON(requestParameters.requestData),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetIndividualResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve person (individual) parter info from GoPro
     */
    async getIndividual(requestParameters: GetIndividualRequest): Promise<GetIndividualResponse> {
        const response = await this.getIndividualRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve person (individual) parter info from GoPro
     */
    async getIndividual_6Raw(requestParameters: GetIndividual0Request): Promise<runtime.ApiResponse<GetIndividualResponse>> {
        if (requestParameters.requestData === null || requestParameters.requestData === undefined) {
            throw new runtime.RequiredError('requestData','Required parameter requestParameters.requestData was null or undefined when calling getIndividual_6.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/Clients/GetIndividual`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetClientRequestToJSON(requestParameters.requestData),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetIndividualResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve person (individual) parter info from GoPro
     */
    async getIndividual_6(requestParameters: GetIndividual0Request): Promise<GetIndividualResponse> {
        const response = await this.getIndividual_6Raw(requestParameters);
        return await response.value();
    }

}
