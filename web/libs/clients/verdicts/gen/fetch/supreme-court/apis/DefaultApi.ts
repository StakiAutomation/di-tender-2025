/* tslint:disable */
/* eslint-disable */
/**
 * Verdicts API
 * API for accessing court verdicts and related data
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    InlineResponse200,
    InlineResponse200FromJSON,
    InlineResponse200ToJSON,
    InlineResponse2001,
    InlineResponse2001FromJSON,
    InlineResponse2001ToJSON,
    InlineResponse2002,
    InlineResponse2002FromJSON,
    InlineResponse2002ToJSON,
    InlineResponse2003,
    InlineResponse2003FromJSON,
    InlineResponse2003ToJSON,
    InlineResponse2004,
    InlineResponse2004FromJSON,
    InlineResponse2004ToJSON,
    VerdictSearchRequest,
    VerdictSearchRequestFromJSON,
    VerdictSearchRequestToJSON,
} from '../models';

export interface ApiV2VerdictGetAgendaIdGetRequest {
    id: string;
}

export interface ApiV2VerdictGetAgendasGetRequest {
    orderBy?: string;
    page?: number;
    limit?: number;
}

export interface ApiV2VerdictGetAppealIdGetRequest {
    id: string;
}

export interface ApiV2VerdictGetAppealsGetRequest {
    orderBy?: string;
    page?: number;
    limit?: number;
}

export interface ApiV2VerdictGetDeterminationIdGetRequest {
    id: string;
}

export interface ApiV2VerdictGetDeterminationsGetRequest {
    orderBy?: string;
    page?: number;
    limit?: number;
}

export interface ApiV2VerdictGetVerdictsPostRequest {
    verdictSearchRequest: VerdictSearchRequest;
}

export interface ApiV2VerdictIdGetRequest {
    id: string;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Get a specific agenda by ID
     */
    async apiV2VerdictGetAgendaIdGetRaw(requestParameters: ApiV2VerdictGetAgendaIdGetRequest): Promise<runtime.ApiResponse<InlineResponse2002>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiV2VerdictGetAgendaIdGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/Verdict/getAgenda/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2002FromJSON(jsonValue));
    }

    /**
     * Get a specific agenda by ID
     */
    async apiV2VerdictGetAgendaIdGet(requestParameters: ApiV2VerdictGetAgendaIdGetRequest): Promise<InlineResponse2002> {
        const response = await this.apiV2VerdictGetAgendaIdGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get all agendas
     */
    async apiV2VerdictGetAgendasGetRaw(requestParameters: ApiV2VerdictGetAgendasGetRequest): Promise<runtime.ApiResponse<InlineResponse2004>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.orderBy !== undefined) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/Verdict/getAgendas`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2004FromJSON(jsonValue));
    }

    /**
     * Get all agendas
     */
    async apiV2VerdictGetAgendasGet(requestParameters: ApiV2VerdictGetAgendasGetRequest): Promise<InlineResponse2004> {
        const response = await this.apiV2VerdictGetAgendasGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get a specific appeal by ID
     */
    async apiV2VerdictGetAppealIdGetRaw(requestParameters: ApiV2VerdictGetAppealIdGetRequest): Promise<runtime.ApiResponse<InlineResponse2002>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiV2VerdictGetAppealIdGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/Verdict/getAppeal/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2002FromJSON(jsonValue));
    }

    /**
     * Get a specific appeal by ID
     */
    async apiV2VerdictGetAppealIdGet(requestParameters: ApiV2VerdictGetAppealIdGetRequest): Promise<InlineResponse2002> {
        const response = await this.apiV2VerdictGetAppealIdGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get all appeals
     */
    async apiV2VerdictGetAppealsGetRaw(requestParameters: ApiV2VerdictGetAppealsGetRequest): Promise<runtime.ApiResponse<InlineResponse2004>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.orderBy !== undefined) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/Verdict/getAppeals`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2004FromJSON(jsonValue));
    }

    /**
     * Get all appeals
     */
    async apiV2VerdictGetAppealsGet(requestParameters: ApiV2VerdictGetAppealsGetRequest): Promise<InlineResponse2004> {
        const response = await this.apiV2VerdictGetAppealsGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get all case types
     */
    async apiV2VerdictGetCaseTypesGetRaw(): Promise<runtime.ApiResponse<InlineResponse2001>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/Verdict/getCaseTypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2001FromJSON(jsonValue));
    }

    /**
     * Get all case types
     */
    async apiV2VerdictGetCaseTypesGet(): Promise<InlineResponse2001> {
        const response = await this.apiV2VerdictGetCaseTypesGetRaw();
        return await response.value();
    }

    /**
     * Get a specific determination by ID
     */
    async apiV2VerdictGetDeterminationIdGetRaw(requestParameters: ApiV2VerdictGetDeterminationIdGetRequest): Promise<runtime.ApiResponse<InlineResponse2002>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiV2VerdictGetDeterminationIdGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/Verdict/getDetermination/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2002FromJSON(jsonValue));
    }

    /**
     * Get a specific determination by ID
     */
    async apiV2VerdictGetDeterminationIdGet(requestParameters: ApiV2VerdictGetDeterminationIdGetRequest): Promise<InlineResponse2002> {
        const response = await this.apiV2VerdictGetDeterminationIdGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get all determinations
     */
    async apiV2VerdictGetDeterminationsGetRaw(requestParameters: ApiV2VerdictGetDeterminationsGetRequest): Promise<runtime.ApiResponse<InlineResponse2004>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.orderBy !== undefined) {
            queryParameters['orderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/Verdict/getDeterminations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2004FromJSON(jsonValue));
    }

    /**
     * Get all determinations
     */
    async apiV2VerdictGetDeterminationsGet(requestParameters: ApiV2VerdictGetDeterminationsGetRequest): Promise<InlineResponse2004> {
        const response = await this.apiV2VerdictGetDeterminationsGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get all keywords
     */
    async apiV2VerdictGetKeywordsGetRaw(): Promise<runtime.ApiResponse<InlineResponse200>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/Verdict/getKeywords`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse200FromJSON(jsonValue));
    }

    /**
     * Get all keywords
     */
    async apiV2VerdictGetKeywordsGet(): Promise<InlineResponse200> {
        const response = await this.apiV2VerdictGetKeywordsGetRaw();
        return await response.value();
    }

    /**
     * Retrieve verdicts with optional filters including text search, dates, case types, and more
     * Search and retrieve verdicts with filters
     */
    async apiV2VerdictGetVerdictsPostRaw(requestParameters: ApiV2VerdictGetVerdictsPostRequest): Promise<runtime.ApiResponse<InlineResponse2003>> {
        if (requestParameters.verdictSearchRequest === null || requestParameters.verdictSearchRequest === undefined) {
            throw new runtime.RequiredError('verdictSearchRequest','Required parameter requestParameters.verdictSearchRequest was null or undefined when calling apiV2VerdictGetVerdictsPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v2/Verdict/getVerdicts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VerdictSearchRequestToJSON(requestParameters.verdictSearchRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2003FromJSON(jsonValue));
    }

    /**
     * Retrieve verdicts with optional filters including text search, dates, case types, and more
     * Search and retrieve verdicts with filters
     */
    async apiV2VerdictGetVerdictsPost(requestParameters: ApiV2VerdictGetVerdictsPostRequest): Promise<InlineResponse2003> {
        const response = await this.apiV2VerdictGetVerdictsPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get a specific verdict by ID
     */
    async apiV2VerdictIdGetRaw(requestParameters: ApiV2VerdictIdGetRequest): Promise<runtime.ApiResponse<InlineResponse2002>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiV2VerdictIdGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v2/Verdict/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2002FromJSON(jsonValue));
    }

    /**
     * Get a specific verdict by ID
     */
    async apiV2VerdictIdGet(requestParameters: ApiV2VerdictIdGetRequest): Promise<InlineResponse2002> {
        const response = await this.apiV2VerdictIdGetRaw(requestParameters);
        return await response.value();
    }

}
