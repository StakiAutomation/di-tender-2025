/* tslint:disable */
/* eslint-disable */
/**
 * Verdicts API
 * API for accessing court verdicts and related data
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface VerdictSearchRequest
 */
export interface VerdictSearchRequest {
    /**
     * Text to search for in verdict content
     * @type {string}
     * @memberof VerdictSearchRequest
     */
    searchTerm?: string;
    /**
     * Field to order results by, with optional direction (e.g., 'caseNumber DESC')
     * @type {string}
     * @memberof VerdictSearchRequest
     */
    orderBy?: string;
    /**
     * Filter by case types
     * @type {Array<string>}
     * @memberof VerdictSearchRequest
     */
    caseTypes?: Array<string>;
    /**
     * Filter by keywords
     * @type {Array<string>}
     * @memberof VerdictSearchRequest
     */
    keywords?: Array<string>;
    /**
     * Filter by law citations
     * @type {Array<string>}
     * @memberof VerdictSearchRequest
     */
    laws?: Array<string>;
    /**
     * Filter by title
     * @type {string}
     * @memberof VerdictSearchRequest
     */
    title?: string;
    /**
     * Filter by case number
     * @type {string}
     * @memberof VerdictSearchRequest
     */
    caseNumber?: string;
    /**
     * Filter for verdicts on or after this date (format YYYY-MM-DD)
     * @type {Date}
     * @memberof VerdictSearchRequest
     */
    dateFrom?: Date;
    /**
     * Filter for verdicts on or before this date (format YYYY-MM-DD)
     * @type {Date}
     * @memberof VerdictSearchRequest
     */
    dateTo?: Date;
    /**
     * Page number for pagination
     * @type {number}
     * @memberof VerdictSearchRequest
     */
    page?: number;
    /**
     * Results per page
     * @type {number}
     * @memberof VerdictSearchRequest
     */
    limit?: number;
}

export function VerdictSearchRequestFromJSON(json: any): VerdictSearchRequest {
    return VerdictSearchRequestFromJSONTyped(json, false);
}

export function VerdictSearchRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): VerdictSearchRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'searchTerm': !exists(json, 'searchTerm') ? undefined : json['searchTerm'],
        'orderBy': !exists(json, 'orderBy') ? undefined : json['orderBy'],
        'caseTypes': !exists(json, 'caseTypes') ? undefined : json['caseTypes'],
        'keywords': !exists(json, 'keywords') ? undefined : json['keywords'],
        'laws': !exists(json, 'laws') ? undefined : json['laws'],
        'title': !exists(json, 'title') ? undefined : json['title'],
        'caseNumber': !exists(json, 'caseNumber') ? undefined : json['caseNumber'],
        'dateFrom': !exists(json, 'dateFrom') ? undefined : (new Date(json['dateFrom'])),
        'dateTo': !exists(json, 'dateTo') ? undefined : (new Date(json['dateTo'])),
        'page': !exists(json, 'page') ? undefined : json['page'],
        'limit': !exists(json, 'limit') ? undefined : json['limit'],
    };
}

export function VerdictSearchRequestToJSON(value?: VerdictSearchRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'searchTerm': value.searchTerm,
        'orderBy': value.orderBy,
        'caseTypes': value.caseTypes,
        'keywords': value.keywords,
        'laws': value.laws,
        'title': value.title,
        'caseNumber': value.caseNumber,
        'dateFrom': value.dateFrom === undefined ? undefined : (value.dateFrom.toISOString().substr(0,10)),
        'dateTo': value.dateTo === undefined ? undefined : (value.dateTo.toISOString().substr(0,10)),
        'page': value.page,
        'limit': value.limit,
    };
}


