/* tslint:disable */
/* eslint-disable */
/**
 * Documents backend
 * Backend providing documents and document-providers info
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AdministrativeContact,
    AdministrativeContactFromJSON,
    AdministrativeContactToJSON,
    CreateContactDto,
    CreateContactDtoFromJSON,
    CreateContactDtoToJSON,
    CreateHelpdeskDto,
    CreateHelpdeskDtoFromJSON,
    CreateHelpdeskDtoToJSON,
    CreateOrganisationDto,
    CreateOrganisationDtoFromJSON,
    CreateOrganisationDtoToJSON,
    Helpdesk,
    HelpdeskFromJSON,
    HelpdeskToJSON,
    Organisation,
    OrganisationFromJSON,
    OrganisationToJSON,
    Provider,
    ProviderFromJSON,
    ProviderToJSON,
    TechnicalContact,
    TechnicalContactFromJSON,
    TechnicalContactToJSON,
    UpdateContactDto,
    UpdateContactDtoFromJSON,
    UpdateContactDtoToJSON,
    UpdateHelpdeskDto,
    UpdateHelpdeskDtoFromJSON,
    UpdateHelpdeskDtoToJSON,
    UpdateOrganisationDto,
    UpdateOrganisationDtoFromJSON,
    UpdateOrganisationDtoToJSON,
} from '../models';

export interface OrganisationControllerCreateAdministrativeContactRequest {
    id: string;
    createContactDto: CreateContactDto;
    authorization?: string;
}

export interface OrganisationControllerCreateHelpdeskRequest {
    id: string;
    createHelpdeskDto: CreateHelpdeskDto;
    authorization?: string;
}

export interface OrganisationControllerCreateOrganisationRequest {
    createOrganisationDto: CreateOrganisationDto;
    authorization?: string;
}

export interface OrganisationControllerCreateTechnicalContactRequest {
    id: string;
    createContactDto: CreateContactDto;
    authorization?: string;
}

export interface OrganisationControllerFindByNationalIdRequest {
    nationalId: string;
    authorization?: string;
}

export interface OrganisationControllerGetOrganisationsRequest {
    authorization?: string;
}

export interface OrganisationControllerGetOrganisationsProvidersRequest {
    id: string;
    authorization?: string;
}

export interface OrganisationControllerIsLastModifierOfOrganisationRequest {
    nationalId: string;
    authorization?: string;
}

export interface OrganisationControllerUpdateAdministrativeContactRequest {
    id: string;
    administrativeContactId: string;
    updateContactDto: UpdateContactDto;
    authorization?: string;
}

export interface OrganisationControllerUpdateHelpdeskRequest {
    id: string;
    helpdeskId: string;
    updateHelpdeskDto: UpdateHelpdeskDto;
    authorization?: string;
}

export interface OrganisationControllerUpdateOrganisationRequest {
    id: string;
    updateOrganisationDto: UpdateOrganisationDto;
    authorization?: string;
}

export interface OrganisationControllerUpdateTechnicalContactRequest {
    id: string;
    technicalContactId: string;
    updateContactDto: UpdateContactDto;
    authorization?: string;
}

/**
 * 
 */
export class OrganisationsApi extends runtime.BaseAPI {

    /**
     */
    async organisationControllerCreateAdministrativeContactRaw(requestParameters: OrganisationControllerCreateAdministrativeContactRequest): Promise<runtime.ApiResponse<AdministrativeContact>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling organisationControllerCreateAdministrativeContact.');
        }

        if (requestParameters.createContactDto === null || requestParameters.createContactDto === undefined) {
            throw new runtime.RequiredError('createContactDto','Required parameter requestParameters.createContactDto was null or undefined when calling organisationControllerCreateAdministrativeContact.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/organisations/{id}/administrativecontact`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateContactDtoToJSON(requestParameters.createContactDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AdministrativeContactFromJSON(jsonValue));
    }

    /**
     */
    async organisationControllerCreateAdministrativeContact(requestParameters: OrganisationControllerCreateAdministrativeContactRequest): Promise<AdministrativeContact> {
        const response = await this.organisationControllerCreateAdministrativeContactRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async organisationControllerCreateHelpdeskRaw(requestParameters: OrganisationControllerCreateHelpdeskRequest): Promise<runtime.ApiResponse<Helpdesk>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling organisationControllerCreateHelpdesk.');
        }

        if (requestParameters.createHelpdeskDto === null || requestParameters.createHelpdeskDto === undefined) {
            throw new runtime.RequiredError('createHelpdeskDto','Required parameter requestParameters.createHelpdeskDto was null or undefined when calling organisationControllerCreateHelpdesk.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/organisations/{id}/helpdesk`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateHelpdeskDtoToJSON(requestParameters.createHelpdeskDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => HelpdeskFromJSON(jsonValue));
    }

    /**
     */
    async organisationControllerCreateHelpdesk(requestParameters: OrganisationControllerCreateHelpdeskRequest): Promise<Helpdesk> {
        const response = await this.organisationControllerCreateHelpdeskRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async organisationControllerCreateOrganisationRaw(requestParameters: OrganisationControllerCreateOrganisationRequest): Promise<runtime.ApiResponse<Organisation>> {
        if (requestParameters.createOrganisationDto === null || requestParameters.createOrganisationDto === undefined) {
            throw new runtime.RequiredError('createOrganisationDto','Required parameter requestParameters.createOrganisationDto was null or undefined when calling organisationControllerCreateOrganisation.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/organisations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateOrganisationDtoToJSON(requestParameters.createOrganisationDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationFromJSON(jsonValue));
    }

    /**
     */
    async organisationControllerCreateOrganisation(requestParameters: OrganisationControllerCreateOrganisationRequest): Promise<Organisation> {
        const response = await this.organisationControllerCreateOrganisationRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async organisationControllerCreateTechnicalContactRaw(requestParameters: OrganisationControllerCreateTechnicalContactRequest): Promise<runtime.ApiResponse<TechnicalContact>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling organisationControllerCreateTechnicalContact.');
        }

        if (requestParameters.createContactDto === null || requestParameters.createContactDto === undefined) {
            throw new runtime.RequiredError('createContactDto','Required parameter requestParameters.createContactDto was null or undefined when calling organisationControllerCreateTechnicalContact.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/organisations/{id}/technicalcontact`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateContactDtoToJSON(requestParameters.createContactDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TechnicalContactFromJSON(jsonValue));
    }

    /**
     */
    async organisationControllerCreateTechnicalContact(requestParameters: OrganisationControllerCreateTechnicalContactRequest): Promise<TechnicalContact> {
        const response = await this.organisationControllerCreateTechnicalContactRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async organisationControllerFindByNationalIdRaw(requestParameters: OrganisationControllerFindByNationalIdRequest): Promise<runtime.ApiResponse<Organisation>> {
        if (requestParameters.nationalId === null || requestParameters.nationalId === undefined) {
            throw new runtime.RequiredError('nationalId','Required parameter requestParameters.nationalId was null or undefined when calling organisationControllerFindByNationalId.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/organisations/{nationalId}`.replace(`{${"nationalId"}}`, encodeURIComponent(String(requestParameters.nationalId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationFromJSON(jsonValue));
    }

    /**
     */
    async organisationControllerFindByNationalId(requestParameters: OrganisationControllerFindByNationalIdRequest): Promise<Organisation> {
        const response = await this.organisationControllerFindByNationalIdRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async organisationControllerGetOrganisationsRaw(requestParameters: OrganisationControllerGetOrganisationsRequest): Promise<runtime.ApiResponse<Array<Organisation>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/organisations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OrganisationFromJSON));
    }

    /**
     */
    async organisationControllerGetOrganisations(requestParameters: OrganisationControllerGetOrganisationsRequest): Promise<Array<Organisation>> {
        const response = await this.organisationControllerGetOrganisationsRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async organisationControllerGetOrganisationsProvidersRaw(requestParameters: OrganisationControllerGetOrganisationsProvidersRequest): Promise<runtime.ApiResponse<Array<Provider>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling organisationControllerGetOrganisationsProviders.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/organisations/{id}/providers`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProviderFromJSON));
    }

    /**
     */
    async organisationControllerGetOrganisationsProviders(requestParameters: OrganisationControllerGetOrganisationsProvidersRequest): Promise<Array<Provider>> {
        const response = await this.organisationControllerGetOrganisationsProvidersRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async organisationControllerIsLastModifierOfOrganisationRaw(requestParameters: OrganisationControllerIsLastModifierOfOrganisationRequest): Promise<runtime.ApiResponse<boolean>> {
        if (requestParameters.nationalId === null || requestParameters.nationalId === undefined) {
            throw new runtime.RequiredError('nationalId','Required parameter requestParameters.nationalId was null or undefined when calling organisationControllerIsLastModifierOfOrganisation.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/organisations/{nationalId}/islastmodifier`.replace(`{${"nationalId"}}`, encodeURIComponent(String(requestParameters.nationalId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async organisationControllerIsLastModifierOfOrganisation(requestParameters: OrganisationControllerIsLastModifierOfOrganisationRequest): Promise<boolean> {
        const response = await this.organisationControllerIsLastModifierOfOrganisationRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async organisationControllerUpdateAdministrativeContactRaw(requestParameters: OrganisationControllerUpdateAdministrativeContactRequest): Promise<runtime.ApiResponse<AdministrativeContact>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling organisationControllerUpdateAdministrativeContact.');
        }

        if (requestParameters.administrativeContactId === null || requestParameters.administrativeContactId === undefined) {
            throw new runtime.RequiredError('administrativeContactId','Required parameter requestParameters.administrativeContactId was null or undefined when calling organisationControllerUpdateAdministrativeContact.');
        }

        if (requestParameters.updateContactDto === null || requestParameters.updateContactDto === undefined) {
            throw new runtime.RequiredError('updateContactDto','Required parameter requestParameters.updateContactDto was null or undefined when calling organisationControllerUpdateAdministrativeContact.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/organisations/{id}/administrativecontact/{administrativeContactId}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"administrativeContactId"}}`, encodeURIComponent(String(requestParameters.administrativeContactId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateContactDtoToJSON(requestParameters.updateContactDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AdministrativeContactFromJSON(jsonValue));
    }

    /**
     */
    async organisationControllerUpdateAdministrativeContact(requestParameters: OrganisationControllerUpdateAdministrativeContactRequest): Promise<AdministrativeContact> {
        const response = await this.organisationControllerUpdateAdministrativeContactRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async organisationControllerUpdateHelpdeskRaw(requestParameters: OrganisationControllerUpdateHelpdeskRequest): Promise<runtime.ApiResponse<Helpdesk>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling organisationControllerUpdateHelpdesk.');
        }

        if (requestParameters.helpdeskId === null || requestParameters.helpdeskId === undefined) {
            throw new runtime.RequiredError('helpdeskId','Required parameter requestParameters.helpdeskId was null or undefined when calling organisationControllerUpdateHelpdesk.');
        }

        if (requestParameters.updateHelpdeskDto === null || requestParameters.updateHelpdeskDto === undefined) {
            throw new runtime.RequiredError('updateHelpdeskDto','Required parameter requestParameters.updateHelpdeskDto was null or undefined when calling organisationControllerUpdateHelpdesk.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/organisations/{id}/helpdesk/{helpdeskId}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"helpdeskId"}}`, encodeURIComponent(String(requestParameters.helpdeskId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateHelpdeskDtoToJSON(requestParameters.updateHelpdeskDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => HelpdeskFromJSON(jsonValue));
    }

    /**
     */
    async organisationControllerUpdateHelpdesk(requestParameters: OrganisationControllerUpdateHelpdeskRequest): Promise<Helpdesk> {
        const response = await this.organisationControllerUpdateHelpdeskRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async organisationControllerUpdateOrganisationRaw(requestParameters: OrganisationControllerUpdateOrganisationRequest): Promise<runtime.ApiResponse<Organisation>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling organisationControllerUpdateOrganisation.');
        }

        if (requestParameters.updateOrganisationDto === null || requestParameters.updateOrganisationDto === undefined) {
            throw new runtime.RequiredError('updateOrganisationDto','Required parameter requestParameters.updateOrganisationDto was null or undefined when calling organisationControllerUpdateOrganisation.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/organisations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateOrganisationDtoToJSON(requestParameters.updateOrganisationDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationFromJSON(jsonValue));
    }

    /**
     */
    async organisationControllerUpdateOrganisation(requestParameters: OrganisationControllerUpdateOrganisationRequest): Promise<Organisation> {
        const response = await this.organisationControllerUpdateOrganisationRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async organisationControllerUpdateTechnicalContactRaw(requestParameters: OrganisationControllerUpdateTechnicalContactRequest): Promise<runtime.ApiResponse<TechnicalContact>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling organisationControllerUpdateTechnicalContact.');
        }

        if (requestParameters.technicalContactId === null || requestParameters.technicalContactId === undefined) {
            throw new runtime.RequiredError('technicalContactId','Required parameter requestParameters.technicalContactId was null or undefined when calling organisationControllerUpdateTechnicalContact.');
        }

        if (requestParameters.updateContactDto === null || requestParameters.updateContactDto === undefined) {
            throw new runtime.RequiredError('updateContactDto','Required parameter requestParameters.updateContactDto was null or undefined when calling organisationControllerUpdateTechnicalContact.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/organisations/{id}/technicalcontact/{technicalContactId}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"technicalContactId"}}`, encodeURIComponent(String(requestParameters.technicalContactId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateContactDtoToJSON(requestParameters.updateContactDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TechnicalContactFromJSON(jsonValue));
    }

    /**
     */
    async organisationControllerUpdateTechnicalContact(requestParameters: OrganisationControllerUpdateTechnicalContactRequest): Promise<TechnicalContact> {
        const response = await this.organisationControllerUpdateTechnicalContactRaw(requestParameters);
        return await response.value();
    }

}
