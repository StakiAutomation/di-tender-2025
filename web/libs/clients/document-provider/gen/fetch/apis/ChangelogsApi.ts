/* tslint:disable */
/* eslint-disable */
/**
 * Documents backend
 * Backend providing documents and document-providers info
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Changelog,
    ChangelogFromJSON,
    ChangelogToJSON,
} from '../models';

export interface ChangelogControllerGetChangelogsByOrganisationIdRequest {
    organisationId: string;
    authorization?: string;
}

export interface ChangelogControllerGetChangelogsByOrganisationIdAndEntityIdRequest {
    organisationId: string;
    entityId: string;
    authorization?: string;
}

/**
 * 
 */
export class ChangelogsApi extends runtime.BaseAPI {

    /**
     */
    async changelogControllerGetChangelogsByOrganisationIdRaw(requestParameters: ChangelogControllerGetChangelogsByOrganisationIdRequest): Promise<runtime.ApiResponse<Array<Changelog>>> {
        if (requestParameters.organisationId === null || requestParameters.organisationId === undefined) {
            throw new runtime.RequiredError('organisationId','Required parameter requestParameters.organisationId was null or undefined when calling changelogControllerGetChangelogsByOrganisationId.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/changelogs/organisations/{organisationId}`.replace(`{${"organisationId"}}`, encodeURIComponent(String(requestParameters.organisationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ChangelogFromJSON));
    }

    /**
     */
    async changelogControllerGetChangelogsByOrganisationId(requestParameters: ChangelogControllerGetChangelogsByOrganisationIdRequest): Promise<Array<Changelog>> {
        const response = await this.changelogControllerGetChangelogsByOrganisationIdRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async changelogControllerGetChangelogsByOrganisationIdAndEntityIdRaw(requestParameters: ChangelogControllerGetChangelogsByOrganisationIdAndEntityIdRequest): Promise<runtime.ApiResponse<Array<Changelog>>> {
        if (requestParameters.organisationId === null || requestParameters.organisationId === undefined) {
            throw new runtime.RequiredError('organisationId','Required parameter requestParameters.organisationId was null or undefined when calling changelogControllerGetChangelogsByOrganisationIdAndEntityId.');
        }

        if (requestParameters.entityId === null || requestParameters.entityId === undefined) {
            throw new runtime.RequiredError('entityId','Required parameter requestParameters.entityId was null or undefined when calling changelogControllerGetChangelogsByOrganisationIdAndEntityId.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/changelogs/organisations/{organisationId}/entities/{entityId}`.replace(`{${"organisationId"}}`, encodeURIComponent(String(requestParameters.organisationId))).replace(`{${"entityId"}}`, encodeURIComponent(String(requestParameters.entityId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ChangelogFromJSON));
    }

    /**
     */
    async changelogControllerGetChangelogsByOrganisationIdAndEntityId(requestParameters: ChangelogControllerGetChangelogsByOrganisationIdAndEntityIdRequest): Promise<Array<Changelog>> {
        const response = await this.changelogControllerGetChangelogsByOrganisationIdAndEntityIdRaw(requestParameters);
        return await response.value();
    }

}
