/* tslint:disable */
/* eslint-disable */
/**
 * GoPro.EIR.Rest
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    MetaValue,
    MetaValueFromJSON,
    MetaValueFromJSONTyped,
    MetaValueToJSON,
} from './';

/**
 * 
 * @export
 * @interface Case
 */
export interface Case {
    /**
     * 
     * @type {string}
     * @memberof Case
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Case
     */
    caseNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof Case
     */
    subject?: string;
    /**
     * 
     * @type {string}
     * @memberof Case
     */
    archiveNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof Case
     */
    templateName?: string;
    /**
     * 
     * @type {string}
     * @memberof Case
     */
    categoryName?: string;
    /**
     * 
     * @type {string}
     * @memberof Case
     */
    responsibleEmployeeName?: string;
    /**
     * 
     * @type {string}
     * @memberof Case
     */
    responsibleEmployeeID?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Case
     */
    coResponsibleEmployees?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Case
     */
    priorityName?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Case
     */
    personalSensitive?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Case
     */
    confidential?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Case
     */
    body?: string;
    /**
     * 
     * @type {string}
     * @memberof Case
     */
    statusName?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Case
     */
    keywords?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Case
     */
    publishTo?: Array<string>;
    /**
     * 
     * @type {Date}
     * @memberof Case
     */
    creationDate?: Date;
    /**
     * 
     * @type {string}
     * @memberof Case
     */
    createdByName?: string;
    /**
     * 
     * @type {Date}
     * @memberof Case
     */
    modifiedDate?: Date;
    /**
     * 
     * @type {string}
     * @memberof Case
     */
    modifiedByName?: string;
    /**
     * 
     * @type {Array<MetaValue>}
     * @memberof Case
     */
    metaDataEntries?: Array<MetaValue>;
}

export function CaseFromJSON(json: any): Case {
    return CaseFromJSONTyped(json, false);
}

export function CaseFromJSONTyped(json: any, ignoreDiscriminator: boolean): Case {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'caseNumber': !exists(json, 'caseNumber') ? undefined : json['caseNumber'],
        'subject': !exists(json, 'subject') ? undefined : json['subject'],
        'archiveNumber': !exists(json, 'archiveNumber') ? undefined : json['archiveNumber'],
        'templateName': !exists(json, 'templateName') ? undefined : json['templateName'],
        'categoryName': !exists(json, 'categoryName') ? undefined : json['categoryName'],
        'responsibleEmployeeName': !exists(json, 'responsibleEmployeeName') ? undefined : json['responsibleEmployeeName'],
        'responsibleEmployeeID': !exists(json, 'responsibleEmployeeID') ? undefined : json['responsibleEmployeeID'],
        'coResponsibleEmployees': !exists(json, 'coResponsibleEmployees') ? undefined : json['coResponsibleEmployees'],
        'priorityName': !exists(json, 'priorityName') ? undefined : json['priorityName'],
        'personalSensitive': !exists(json, 'personalSensitive') ? undefined : json['personalSensitive'],
        'confidential': !exists(json, 'confidential') ? undefined : json['confidential'],
        'body': !exists(json, 'body') ? undefined : json['body'],
        'statusName': !exists(json, 'statusName') ? undefined : json['statusName'],
        'keywords': !exists(json, 'keywords') ? undefined : json['keywords'],
        'publishTo': !exists(json, 'publishTo') ? undefined : json['publishTo'],
        'creationDate': !exists(json, 'creationDate') ? undefined : (new Date(json['creationDate'])),
        'createdByName': !exists(json, 'createdByName') ? undefined : json['createdByName'],
        'modifiedDate': !exists(json, 'modifiedDate') ? undefined : (new Date(json['modifiedDate'])),
        'modifiedByName': !exists(json, 'modifiedByName') ? undefined : json['modifiedByName'],
        'metaDataEntries': !exists(json, 'metaDataEntries') ? undefined : ((json['metaDataEntries'] as Array<any>).map(MetaValueFromJSON)),
    };
}

export function CaseToJSON(value?: Case | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'caseNumber': value.caseNumber,
        'subject': value.subject,
        'archiveNumber': value.archiveNumber,
        'templateName': value.templateName,
        'categoryName': value.categoryName,
        'responsibleEmployeeName': value.responsibleEmployeeName,
        'responsibleEmployeeID': value.responsibleEmployeeID,
        'coResponsibleEmployees': value.coResponsibleEmployees,
        'priorityName': value.priorityName,
        'personalSensitive': value.personalSensitive,
        'confidential': value.confidential,
        'body': value.body,
        'statusName': value.statusName,
        'keywords': value.keywords,
        'publishTo': value.publishTo,
        'creationDate': value.creationDate === undefined ? undefined : (value.creationDate.toISOString()),
        'createdByName': value.createdByName,
        'modifiedDate': value.modifiedDate === undefined ? undefined : (value.modifiedDate.toISOString()),
        'modifiedByName': value.modifiedByName,
        'metaDataEntries': value.metaDataEntries === undefined ? undefined : ((value.metaDataEntries as Array<any>).map(MetaValueToJSON)),
    };
}


