/* tslint:disable */
/* eslint-disable */
/**
 * GoPro.EIR.Rest
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CasesResponse,
    CasesResponseFromJSON,
    CasesResponseToJSON,
    CreateCaseRequest,
    CreateCaseRequestFromJSON,
    CreateCaseRequestToJSON,
    CreateFolderRequest,
    CreateFolderRequestFromJSON,
    CreateFolderRequestToJSON,
    CreateQuickCaseRequest,
    CreateQuickCaseRequestFromJSON,
    CreateQuickCaseRequestToJSON,
    GetCaseRequest,
    GetCaseRequestFromJSON,
    GetCaseRequestToJSON,
    GetCaseResponse,
    GetCaseResponseFromJSON,
    GetCaseResponseToJSON,
    GetFolderRequest,
    GetFolderRequestFromJSON,
    GetFolderRequestToJSON,
    GetFolderResponse,
    GetFolderResponseFromJSON,
    GetFolderResponseToJSON,
    LinkContactRequest,
    LinkContactRequestFromJSON,
    LinkContactRequestToJSON,
    ReferenceResponse,
    ReferenceResponseFromJSON,
    ReferenceResponseToJSON,
    StartingTimeRequest,
    StartingTimeRequestFromJSON,
    StartingTimeRequestToJSON,
} from '../models';

export interface CreateCaseOperationRequest {
    requestData: CreateCaseRequest;
    token?: string;
}

export interface CreateFolderOperationRequest {
    requestData: CreateFolderRequest;
    token?: string;
}

export interface CreateQuickCaseOperationRequest {
    requestData: CreateQuickCaseRequest;
    token?: string;
}

export interface GetCaseOperationRequest {
    requestData: GetCaseRequest;
    token?: string;
}

export interface GetFolderOperationRequest {
    requestData: GetFolderRequest;
    token?: string;
}

export interface GetUpdatesRequest {
    requestData: StartingTimeRequest;
    token?: string;
}

export interface LinkContactToCaseRequest {
    requestData: LinkContactRequest;
    token?: string;
}

/**
 * 
 */
export class CaseApi extends runtime.BaseAPI {

    /**
     * Create a new case in GoPro with linked contacts and documents attached
     */
    async createCaseRaw(requestParameters: CreateCaseOperationRequest): Promise<runtime.ApiResponse<ReferenceResponse>> {
        if (requestParameters.requestData === null || requestParameters.requestData === undefined) {
            throw new runtime.RequiredError('requestData','Required parameter requestParameters.requestData was null or undefined when calling createCase.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        const response = await this.request({
            path: `/Case/CreateCase`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateCaseRequestToJSON(requestParameters.requestData),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ReferenceResponseFromJSON(jsonValue));
    }

    /**
     * Create a new case in GoPro with linked contacts and documents attached
     */
    async createCase(requestParameters: CreateCaseOperationRequest): Promise<ReferenceResponse> {
        const response = await this.createCaseRaw(requestParameters);
        return await response.value();
    }

    /**
     * Creates a folder under specified case
     */
    async createFolderRaw(requestParameters: CreateFolderOperationRequest): Promise<runtime.ApiResponse<ReferenceResponse>> {
        if (requestParameters.requestData === null || requestParameters.requestData === undefined) {
            throw new runtime.RequiredError('requestData','Required parameter requestParameters.requestData was null or undefined when calling createFolder.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        const response = await this.request({
            path: `/Case/CreateFolder`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateFolderRequestToJSON(requestParameters.requestData),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ReferenceResponseFromJSON(jsonValue));
    }

    /**
     * Creates a folder under specified case
     */
    async createFolder(requestParameters: CreateFolderOperationRequest): Promise<ReferenceResponse> {
        const response = await this.createFolderRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create a new case in GoPro
     */
    async createQuickCaseRaw(requestParameters: CreateQuickCaseOperationRequest): Promise<runtime.ApiResponse<ReferenceResponse>> {
        if (requestParameters.requestData === null || requestParameters.requestData === undefined) {
            throw new runtime.RequiredError('requestData','Required parameter requestParameters.requestData was null or undefined when calling createQuickCase.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        const response = await this.request({
            path: `/Case/CreateQuickCase`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateQuickCaseRequestToJSON(requestParameters.requestData),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ReferenceResponseFromJSON(jsonValue));
    }

    /**
     * Create a new case in GoPro
     */
    async createQuickCase(requestParameters: CreateQuickCaseOperationRequest): Promise<ReferenceResponse> {
        const response = await this.createQuickCaseRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve basic info for specified GoPro case
     */
    async getCaseRaw(requestParameters: GetCaseOperationRequest): Promise<runtime.ApiResponse<GetCaseResponse>> {
        if (requestParameters.requestData === null || requestParameters.requestData === undefined) {
            throw new runtime.RequiredError('requestData','Required parameter requestParameters.requestData was null or undefined when calling getCase.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        const response = await this.request({
            path: `/Case/GetCase`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetCaseRequestToJSON(requestParameters.requestData),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCaseResponseFromJSON(jsonValue));
    }

    /**
     * Retrieve basic info for specified GoPro case
     */
    async getCase(requestParameters: GetCaseOperationRequest): Promise<GetCaseResponse> {
        const response = await this.getCaseRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns information about a folder by specified folder name and parent ID
     */
    async getFolderRaw(requestParameters: GetFolderOperationRequest): Promise<runtime.ApiResponse<GetFolderResponse>> {
        if (requestParameters.requestData === null || requestParameters.requestData === undefined) {
            throw new runtime.RequiredError('requestData','Required parameter requestParameters.requestData was null or undefined when calling getFolder.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        const response = await this.request({
            path: `/Case/GetFolder`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetFolderRequestToJSON(requestParameters.requestData),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetFolderResponseFromJSON(jsonValue));
    }

    /**
     * Returns information about a folder by specified folder name and parent ID
     */
    async getFolder(requestParameters: GetFolderOperationRequest): Promise<GetFolderResponse> {
        const response = await this.getFolderRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns a list of cases that had been updated since initially uploaded
     */
    async getUpdatesRaw(requestParameters: GetUpdatesRequest): Promise<runtime.ApiResponse<CasesResponse>> {
        if (requestParameters.requestData === null || requestParameters.requestData === undefined) {
            throw new runtime.RequiredError('requestData','Required parameter requestParameters.requestData was null or undefined when calling getUpdates.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        const response = await this.request({
            path: `/Case/GetUpdates`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StartingTimeRequestToJSON(requestParameters.requestData),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CasesResponseFromJSON(jsonValue));
    }

    /**
     * Returns a list of cases that had been updated since initially uploaded
     */
    async getUpdates(requestParameters: GetUpdatesRequest): Promise<CasesResponse> {
        const response = await this.getUpdatesRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async linkContactToCaseRaw(requestParameters: LinkContactToCaseRequest): Promise<runtime.ApiResponse<ReferenceResponse>> {
        if (requestParameters.requestData === null || requestParameters.requestData === undefined) {
            throw new runtime.RequiredError('requestData','Required parameter requestParameters.requestData was null or undefined when calling linkContactToCase.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.token !== undefined && requestParameters.token !== null) {
            headerParameters['Token'] = String(requestParameters.token);
        }

        const response = await this.request({
            path: `/Case/LinkContactToCase`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LinkContactRequestToJSON(requestParameters.requestData),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ReferenceResponseFromJSON(jsonValue));
    }

    /**
     */
    async linkContactToCase(requestParameters: LinkContactToCaseRequest): Promise<ReferenceResponse> {
        const response = await this.linkContactToCaseRaw(requestParameters);
        return await response.value();
    }

}
