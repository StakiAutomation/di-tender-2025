/* tslint:disable */
/* eslint-disable */
/**
 * uv-maelingar
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2024-03-08
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    InlineResponse200,
    InlineResponse200FromJSON,
    InlineResponse200ToJSON,
    InlineResponse2001,
    InlineResponse2001FromJSON,
    InlineResponse2001ToJSON,
    InlineResponse2002,
    InlineResponse2002FromJSON,
    InlineResponse2002ToJSON,
} from '../models';

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Returns API specification.
     */
    async getAPISpecRaw(): Promise<runtime.ApiResponse<InlineResponse200>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        const response = await this.request({
            path: `/getAPISpec`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse200FromJSON(jsonValue));
    }

    /**
     * Returns API specification.
     */
    async getAPISpec(): Promise<InlineResponse200> {
        const response = await this.getAPISpecRaw();
        return await response.value();
    }

    /**
     * Get daily max UV measurements for past 1 year in Reykjavik. Updated once per day at approx. 06:00.
     * Get daily max UV measurement for past 1 year in Reykjavik.
     */
    async returnDailyUVRaw(): Promise<runtime.ApiResponse<InlineResponse2002>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        const response = await this.request({
            path: `/returnDailyUV`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2002FromJSON(jsonValue));
    }

    /**
     * Get daily max UV measurements for past 1 year in Reykjavik. Updated once per day at approx. 06:00.
     * Get daily max UV measurement for past 1 year in Reykjavik.
     */
    async returnDailyUV(): Promise<InlineResponse2002> {
        const response = await this.returnDailyUVRaw();
        return await response.value();
    }

    /**
     * Get latest UV measurement and measurements for past 72 hrs in Reykjavik. New UV values updated approx. every 15 minutes.
     * Get latest UV measurements in Reykjavik.
     */
    async returnHourlyUVRaw(): Promise<runtime.ApiResponse<InlineResponse2001>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = this.configuration.apiKey("x-api-key"); // api_key authentication
        }

        const response = await this.request({
            path: `/returnHourlyUV`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2001FromJSON(jsonValue));
    }

    /**
     * Get latest UV measurement and measurements for past 72 hrs in Reykjavik. New UV values updated approx. every 15 minutes.
     * Get latest UV measurements in Reykjavik.
     */
    async returnHourlyUV(): Promise<InlineResponse2001> {
        const response = await this.returnHourlyUVRaw();
        return await response.value();
    }

}
