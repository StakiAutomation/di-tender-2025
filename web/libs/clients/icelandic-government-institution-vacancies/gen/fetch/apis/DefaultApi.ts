/* tslint:disable */
/* eslint-disable */
/**
 * Open Job Positions, Vacancies
 * Open vacancies at Icelandic state government institutions.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface VacanciesGetRequest {
    language?: VacanciesGetLanguageEnum;
    stofnun?: string;
    accept?: VacanciesGetAcceptEnum;
}

export interface VacanciesVacancyIdGetRequest {
    vacancyId: number;
    language?: VacanciesVacancyIdGetLanguageEnum;
    accept?: VacanciesVacancyIdGetAcceptEnum;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Retrieve all open vacancies
     */
    async vacanciesGetRaw(requestParameters: VacanciesGetRequest): Promise<runtime.ApiResponse<object>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.language !== undefined) {
            queryParameters['language'] = requestParameters.language;
        }

        if (requestParameters.stofnun !== undefined) {
            queryParameters['stofnun'] = requestParameters.stofnun;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/vacancies`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Retrieve all open vacancies
     */
    async vacanciesGet(requestParameters: VacanciesGetRequest): Promise<object> {
        const response = await this.vacanciesGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve a record from /api/umsokn/v1/
     */
    async vacanciesVacancyIdGetRaw(requestParameters: VacanciesVacancyIdGetRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.vacancyId === null || requestParameters.vacancyId === undefined) {
            throw new runtime.RequiredError('vacancyId','Required parameter requestParameters.vacancyId was null or undefined when calling vacanciesVacancyIdGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.language !== undefined) {
            queryParameters['language'] = requestParameters.language;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.accept !== undefined && requestParameters.accept !== null) {
            headerParameters['Accept'] = String(requestParameters.accept);
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/vacancies/{vacancy_id}`.replace(`{${"vacancy_id"}}`, encodeURIComponent(String(requestParameters.vacancyId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Retrieve a record from /api/umsokn/v1/
     */
    async vacanciesVacancyIdGet(requestParameters: VacanciesVacancyIdGetRequest): Promise<object> {
        const response = await this.vacanciesVacancyIdGetRaw(requestParameters);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum VacanciesGetLanguageEnum {
    IS = 'IS',
    EN = 'EN',
    ONLYEN = 'ONLYEN',
    ONLYIS = 'ONLYIS'
}
/**
    * @export
    * @enum {string}
    */
export enum VacanciesGetAcceptEnum {
    Xml = 'application/xml',
    Json = 'application/json'
}
/**
    * @export
    * @enum {string}
    */
export enum VacanciesVacancyIdGetLanguageEnum {
    IS = 'IS',
    EN = 'EN',
    ONLYEN = 'ONLYEN',
    ONLYIS = 'ONLYIS'
}
/**
    * @export
    * @enum {string}
    */
export enum VacanciesVacancyIdGetAcceptEnum {
    Xml = 'application/xml',
    Json = 'application/json'
}
