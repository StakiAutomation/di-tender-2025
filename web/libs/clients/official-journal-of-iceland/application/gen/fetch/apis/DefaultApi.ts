/* tslint:disable */
/* eslint-disable */
/**
 * The Official Journal of Iceland Application API
 * This api is responsible for communications with the island.is application system.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AdvertTemplateDetails,
    AdvertTemplateDetailsFromJSON,
    AdvertTemplateDetailsToJSON,
    AdvertTypeError,
    AdvertTypeErrorFromJSON,
    AdvertTypeErrorToJSON,
    CasePriceResponse,
    CasePriceResponseFromJSON,
    CasePriceResponseToJSON,
    GetAdvertMainType,
    GetAdvertMainTypeFromJSON,
    GetAdvertMainTypeToJSON,
    GetAdvertMainTypes,
    GetAdvertMainTypesFromJSON,
    GetAdvertMainTypesToJSON,
    GetAdvertTemplateResponse,
    GetAdvertTemplateResponseFromJSON,
    GetAdvertTemplateResponseToJSON,
    GetAdvertType,
    GetAdvertTypeFromJSON,
    GetAdvertTypeToJSON,
    GetAdvertTypes,
    GetAdvertTypesFromJSON,
    GetAdvertTypesToJSON,
    GetApplicationAttachmentsResponse,
    GetApplicationAttachmentsResponseFromJSON,
    GetApplicationAttachmentsResponseToJSON,
    GetApplicationCaseResponse,
    GetApplicationCaseResponseFromJSON,
    GetApplicationCaseResponseToJSON,
    GetApplicationResponse,
    GetApplicationResponseFromJSON,
    GetApplicationResponseToJSON,
    GetComments,
    GetCommentsFromJSON,
    GetCommentsToJSON,
    GetInvoledPartiesByUserResponse,
    GetInvoledPartiesByUserResponseFromJSON,
    GetInvoledPartiesByUserResponseToJSON,
    GetMyUserInfoResponse,
    GetMyUserInfoResponseFromJSON,
    GetMyUserInfoResponseToJSON,
    GetPdfRespone,
    GetPdfResponeFromJSON,
    GetPdfResponeToJSON,
    GetPdfUrlResponse,
    GetPdfUrlResponseFromJSON,
    GetPdfUrlResponseToJSON,
    GetPresignedUrlBody,
    GetPresignedUrlBodyFromJSON,
    GetPresignedUrlBodyToJSON,
    GetSignature,
    GetSignatureFromJSON,
    GetSignatureToJSON,
    PostApplicationAttachmentBody,
    PostApplicationAttachmentBodyFromJSON,
    PostApplicationAttachmentBodyToJSON,
    PostApplicationComment,
    PostApplicationCommentFromJSON,
    PostApplicationCommentToJSON,
    PresignedUrlResponse,
    PresignedUrlResponseFromJSON,
    PresignedUrlResponseToJSON,
    S3UploadFilesResponse,
    S3UploadFilesResponseFromJSON,
    S3UploadFilesResponseToJSON,
} from '../models';

export interface AddApplicationAttachmentRequest {
    id: string;
    type: AddApplicationAttachmentTypeEnum;
    postApplicationAttachmentBody: PostApplicationAttachmentBody;
}

export interface DeleteApplicationAttachmentRequest {
    id: string;
    key: string;
}

export interface GetAdvertCopiesRequest {
    page?: number;
    pageSize?: number;
    search?: string;
}

export interface GetApplicationRequest {
    id: string;
}

export interface GetApplicationAdvertTemplateRequest {
    advertType: GetApplicationAdvertTemplateAdvertTypeEnum;
}

export interface GetApplicationAttachmentsRequest {
    id: string;
    type: GetApplicationAttachmentsTypeEnum;
}

export interface GetApplicationCaseRequest {
    id: string;
}

export interface GetCommentsRequest {
    id: string;
}

export interface GetInvolvedPartiesRequest {
    id: string;
}

export interface GetMainTypeByIdRequest {
    id: string;
}

export interface GetMainTypesRequest {
    id?: string;
    unassigned?: boolean;
    mainType?: string;
    search?: string;
    slug?: string;
    department?: string;
    page?: number;
    pageSize?: number;
}

export interface GetPdfByApplicationIdRequest {
    id: string;
    showDate?: boolean;
}

export interface GetPdfByCaseIdRequest {
    id: string;
}

export interface GetPdfUrlByApplicationIdRequest {
    id: string;
}

export interface GetPdfUrlByCaseIdRequest {
    id: string;
}

export interface GetPresignedUrlRequest {
    id: string;
    type: GetPresignedUrlTypeEnum;
    getPresignedUrlBody: GetPresignedUrlBody;
}

export interface GetPriceRequest {
    id: string;
}

export interface GetSignaturesForInvolvedPartyRequest {
    involvedPartyId: string;
}

export interface GetTypeByIdRequest {
    id: string;
}

export interface GetTypesRequest {
    id?: string;
    unassigned?: boolean;
    mainType?: string;
    search?: string;
    slug?: string;
    department?: string;
    page?: number;
    pageSize?: number;
}

export interface PostApplicationRequest {
    id: string;
}

export interface PostCommentRequest {
    id: string;
    postApplicationComment: PostApplicationComment;
}

export interface UploadApplicationAttachmentRequest {
    id: string;
    files?: Array<Blob>;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     */
    async addApplicationAttachmentRaw(requestParameters: AddApplicationAttachmentRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling addApplicationAttachment.');
        }

        if (requestParameters.type === null || requestParameters.type === undefined) {
            throw new runtime.RequiredError('type','Required parameter requestParameters.type was null or undefined when calling addApplicationAttachment.');
        }

        if (requestParameters.postApplicationAttachmentBody === null || requestParameters.postApplicationAttachmentBody === undefined) {
            throw new runtime.RequiredError('postApplicationAttachmentBody','Required parameter requestParameters.postApplicationAttachmentBody was null or undefined when calling addApplicationAttachment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/applications/{id}/attachments/{type}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"type"}}`, encodeURIComponent(String(requestParameters.type))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostApplicationAttachmentBodyToJSON(requestParameters.postApplicationAttachmentBody),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async addApplicationAttachment(requestParameters: AddApplicationAttachmentRequest): Promise<void> {
        await this.addApplicationAttachmentRaw(requestParameters);
    }

    /**
     */
    async deleteApplicationAttachmentRaw(requestParameters: DeleteApplicationAttachmentRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteApplicationAttachment.');
        }

        if (requestParameters.key === null || requestParameters.key === undefined) {
            throw new runtime.RequiredError('key','Required parameter requestParameters.key was null or undefined when calling deleteApplicationAttachment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.key !== undefined) {
            queryParameters['key'] = requestParameters.key;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/applications/{id}/attachments/delete`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteApplicationAttachment(requestParameters: DeleteApplicationAttachmentRequest): Promise<void> {
        await this.deleteApplicationAttachmentRaw(requestParameters);
    }

    /**
     */
    async getAdvertCopiesRaw(requestParameters: GetAdvertCopiesRequest): Promise<runtime.ApiResponse<GetApplicationResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/applications/adverts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetApplicationResponseFromJSON(jsonValue));
    }

    /**
     */
    async getAdvertCopies(requestParameters: GetAdvertCopiesRequest): Promise<GetApplicationResponse> {
        const response = await this.getAdvertCopiesRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getApplicationRaw(requestParameters: GetApplicationRequest): Promise<runtime.ApiResponse<GetApplicationResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getApplication.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/applications/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetApplicationResponseFromJSON(jsonValue));
    }

    /**
     */
    async getApplication(requestParameters: GetApplicationRequest): Promise<GetApplicationResponse> {
        const response = await this.getApplicationRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getApplicationAdvertTemplateRaw(requestParameters: GetApplicationAdvertTemplateRequest): Promise<runtime.ApiResponse<GetAdvertTemplateResponse>> {
        if (requestParameters.advertType === null || requestParameters.advertType === undefined) {
            throw new runtime.RequiredError('advertType','Required parameter requestParameters.advertType was null or undefined when calling getApplicationAdvertTemplate.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/applications/advert/templates/{advertType}`.replace(`{${"advertType"}}`, encodeURIComponent(String(requestParameters.advertType))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAdvertTemplateResponseFromJSON(jsonValue));
    }

    /**
     */
    async getApplicationAdvertTemplate(requestParameters: GetApplicationAdvertTemplateRequest): Promise<GetAdvertTemplateResponse> {
        const response = await this.getApplicationAdvertTemplateRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getApplicationAdvertTemplatesRaw(): Promise<runtime.ApiResponse<Array<AdvertTemplateDetails>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/applications/advert/templates`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AdvertTemplateDetailsFromJSON));
    }

    /**
     */
    async getApplicationAdvertTemplates(): Promise<Array<AdvertTemplateDetails>> {
        const response = await this.getApplicationAdvertTemplatesRaw();
        return await response.value();
    }

    /**
     */
    async getApplicationAttachmentsRaw(requestParameters: GetApplicationAttachmentsRequest): Promise<runtime.ApiResponse<GetApplicationAttachmentsResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getApplicationAttachments.');
        }

        if (requestParameters.type === null || requestParameters.type === undefined) {
            throw new runtime.RequiredError('type','Required parameter requestParameters.type was null or undefined when calling getApplicationAttachments.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/applications/{id}/attachments/{type}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"type"}}`, encodeURIComponent(String(requestParameters.type))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetApplicationAttachmentsResponseFromJSON(jsonValue));
    }

    /**
     */
    async getApplicationAttachments(requestParameters: GetApplicationAttachmentsRequest): Promise<GetApplicationAttachmentsResponse> {
        const response = await this.getApplicationAttachmentsRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getApplicationCaseRaw(requestParameters: GetApplicationCaseRequest): Promise<runtime.ApiResponse<GetApplicationCaseResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getApplicationCase.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/applications/{id}/case`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetApplicationCaseResponseFromJSON(jsonValue));
    }

    /**
     */
    async getApplicationCase(requestParameters: GetApplicationCaseRequest): Promise<GetApplicationCaseResponse> {
        const response = await this.getApplicationCaseRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getCommentsRaw(requestParameters: GetCommentsRequest): Promise<runtime.ApiResponse<GetComments>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getComments.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/applications/{id}/comments`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCommentsFromJSON(jsonValue));
    }

    /**
     */
    async getComments(requestParameters: GetCommentsRequest): Promise<GetComments> {
        const response = await this.getCommentsRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getInvolvedPartiesRaw(requestParameters: GetInvolvedPartiesRequest): Promise<runtime.ApiResponse<GetInvoledPartiesByUserResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getInvolvedParties.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/applications/{id}/involved-parties`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetInvoledPartiesByUserResponseFromJSON(jsonValue));
    }

    /**
     */
    async getInvolvedParties(requestParameters: GetInvolvedPartiesRequest): Promise<GetInvoledPartiesByUserResponse> {
        const response = await this.getInvolvedPartiesRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getMainTypeByIdRaw(requestParameters: GetMainTypeByIdRequest): Promise<runtime.ApiResponse<GetAdvertMainType>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getMainTypeById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/advert-types/main-types/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAdvertMainTypeFromJSON(jsonValue));
    }

    /**
     */
    async getMainTypeById(requestParameters: GetMainTypeByIdRequest): Promise<GetAdvertMainType> {
        const response = await this.getMainTypeByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getMainTypesRaw(requestParameters: GetMainTypesRequest): Promise<runtime.ApiResponse<GetAdvertMainTypes>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.unassigned !== undefined) {
            queryParameters['unassigned'] = requestParameters.unassigned;
        }

        if (requestParameters.mainType !== undefined) {
            queryParameters['mainType'] = requestParameters.mainType;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.slug !== undefined) {
            queryParameters['slug'] = requestParameters.slug;
        }

        if (requestParameters.department !== undefined) {
            queryParameters['department'] = requestParameters.department;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/advert-types/main-types`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAdvertMainTypesFromJSON(jsonValue));
    }

    /**
     */
    async getMainTypes(requestParameters: GetMainTypesRequest): Promise<GetAdvertMainTypes> {
        const response = await this.getMainTypesRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getMyUserInfoRaw(): Promise<runtime.ApiResponse<GetMyUserInfoResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/applications/my-user-info`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetMyUserInfoResponseFromJSON(jsonValue));
    }

    /**
     */
    async getMyUserInfo(): Promise<GetMyUserInfoResponse> {
        const response = await this.getMyUserInfoRaw();
        return await response.value();
    }

    /**
     */
    async getPdfByApplicationIdRaw(requestParameters: GetPdfByApplicationIdRequest): Promise<runtime.ApiResponse<GetPdfRespone>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPdfByApplicationId.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.showDate !== undefined) {
            queryParameters['showDate'] = requestParameters.showDate;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/pdf/application/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPdfResponeFromJSON(jsonValue));
    }

    /**
     */
    async getPdfByApplicationId(requestParameters: GetPdfByApplicationIdRequest): Promise<GetPdfRespone> {
        const response = await this.getPdfByApplicationIdRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getPdfByCaseIdRaw(requestParameters: GetPdfByCaseIdRequest): Promise<runtime.ApiResponse<GetPdfRespone>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPdfByCaseId.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/pdf/case/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPdfResponeFromJSON(jsonValue));
    }

    /**
     */
    async getPdfByCaseId(requestParameters: GetPdfByCaseIdRequest): Promise<GetPdfRespone> {
        const response = await this.getPdfByCaseIdRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getPdfUrlByApplicationIdRaw(requestParameters: GetPdfUrlByApplicationIdRequest): Promise<runtime.ApiResponse<GetPdfUrlResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPdfUrlByApplicationId.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/pdf/application/{id}/url`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPdfUrlResponseFromJSON(jsonValue));
    }

    /**
     */
    async getPdfUrlByApplicationId(requestParameters: GetPdfUrlByApplicationIdRequest): Promise<GetPdfUrlResponse> {
        const response = await this.getPdfUrlByApplicationIdRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getPdfUrlByCaseIdRaw(requestParameters: GetPdfUrlByCaseIdRequest): Promise<runtime.ApiResponse<GetPdfUrlResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPdfUrlByCaseId.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/pdf/case/{id}/url`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPdfUrlResponseFromJSON(jsonValue));
    }

    /**
     */
    async getPdfUrlByCaseId(requestParameters: GetPdfUrlByCaseIdRequest): Promise<GetPdfUrlResponse> {
        const response = await this.getPdfUrlByCaseIdRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getPresignedUrlRaw(requestParameters: GetPresignedUrlRequest): Promise<runtime.ApiResponse<PresignedUrlResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPresignedUrl.');
        }

        if (requestParameters.type === null || requestParameters.type === undefined) {
            throw new runtime.RequiredError('type','Required parameter requestParameters.type was null or undefined when calling getPresignedUrl.');
        }

        if (requestParameters.getPresignedUrlBody === null || requestParameters.getPresignedUrlBody === undefined) {
            throw new runtime.RequiredError('getPresignedUrlBody','Required parameter requestParameters.getPresignedUrlBody was null or undefined when calling getPresignedUrl.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/applications/{id}/presigned-url/{type}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"type"}}`, encodeURIComponent(String(requestParameters.type))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GetPresignedUrlBodyToJSON(requestParameters.getPresignedUrlBody),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PresignedUrlResponseFromJSON(jsonValue));
    }

    /**
     */
    async getPresignedUrl(requestParameters: GetPresignedUrlRequest): Promise<PresignedUrlResponse> {
        const response = await this.getPresignedUrlRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getPriceRaw(requestParameters: GetPriceRequest): Promise<runtime.ApiResponse<CasePriceResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPrice.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/applications/{id}/price`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CasePriceResponseFromJSON(jsonValue));
    }

    /**
     */
    async getPrice(requestParameters: GetPriceRequest): Promise<CasePriceResponse> {
        const response = await this.getPriceRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getSignaturesForInvolvedPartyRaw(requestParameters: GetSignaturesForInvolvedPartyRequest): Promise<runtime.ApiResponse<GetSignature>> {
        if (requestParameters.involvedPartyId === null || requestParameters.involvedPartyId === undefined) {
            throw new runtime.RequiredError('involvedPartyId','Required parameter requestParameters.involvedPartyId was null or undefined when calling getSignaturesForInvolvedParty.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/applications/involved-party/{involvedPartyId}`.replace(`{${"involvedPartyId"}}`, encodeURIComponent(String(requestParameters.involvedPartyId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetSignatureFromJSON(jsonValue));
    }

    /**
     */
    async getSignaturesForInvolvedParty(requestParameters: GetSignaturesForInvolvedPartyRequest): Promise<GetSignature> {
        const response = await this.getSignaturesForInvolvedPartyRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getTypeByIdRaw(requestParameters: GetTypeByIdRequest): Promise<runtime.ApiResponse<GetAdvertType>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getTypeById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/advert-types/types/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAdvertTypeFromJSON(jsonValue));
    }

    /**
     */
    async getTypeById(requestParameters: GetTypeByIdRequest): Promise<GetAdvertType> {
        const response = await this.getTypeByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getTypesRaw(requestParameters: GetTypesRequest): Promise<runtime.ApiResponse<GetAdvertTypes>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.unassigned !== undefined) {
            queryParameters['unassigned'] = requestParameters.unassigned;
        }

        if (requestParameters.mainType !== undefined) {
            queryParameters['mainType'] = requestParameters.mainType;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.slug !== undefined) {
            queryParameters['slug'] = requestParameters.slug;
        }

        if (requestParameters.department !== undefined) {
            queryParameters['department'] = requestParameters.department;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/advert-types/types`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAdvertTypesFromJSON(jsonValue));
    }

    /**
     */
    async getTypes(requestParameters: GetTypesRequest): Promise<GetAdvertTypes> {
        const response = await this.getTypesRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async healthControllerRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/health`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async healthController(): Promise<void> {
        await this.healthControllerRaw();
    }

    /**
     */
    async postApplicationRaw(requestParameters: PostApplicationRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling postApplication.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/applications/{id}/post`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postApplication(requestParameters: PostApplicationRequest): Promise<void> {
        await this.postApplicationRaw(requestParameters);
    }

    /**
     */
    async postCommentRaw(requestParameters: PostCommentRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling postComment.');
        }

        if (requestParameters.postApplicationComment === null || requestParameters.postApplicationComment === undefined) {
            throw new runtime.RequiredError('postApplicationComment','Required parameter requestParameters.postApplicationComment was null or undefined when calling postComment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/applications/{id}/comments`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostApplicationCommentToJSON(requestParameters.postApplicationComment),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async postComment(requestParameters: PostCommentRequest): Promise<void> {
        await this.postCommentRaw(requestParameters);
    }

    /**
     */
    async uploadApplicationAttachmentRaw(requestParameters: UploadApplicationAttachmentRequest): Promise<runtime.ApiResponse<S3UploadFilesResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling uploadApplicationAttachment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.files) {
            formParams.append('files', requestParameters.files.join(runtime.COLLECTION_FORMATS["csv"]));
        }

        const response = await this.request({
            path: `/api/v1/applications/{id}/upload`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => S3UploadFilesResponseFromJSON(jsonValue));
    }

    /**
     */
    async uploadApplicationAttachment(requestParameters: UploadApplicationAttachmentRequest): Promise<S3UploadFilesResponse> {
        const response = await this.uploadApplicationAttachmentRaw(requestParameters);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum AddApplicationAttachmentTypeEnum {
    Frumrit = 'frumrit',
    Fylgiskjol = 'fylgiskjol',
    Assets = 'assets'
}
/**
    * @export
    * @enum {string}
    */
export enum GetApplicationAdvertTemplateAdvertTypeEnum {
    Auglysing = 'auglysing',
    Reglugerd = 'reglugerd',
    Gjaldskra = 'gjaldskra'
}
/**
    * @export
    * @enum {string}
    */
export enum GetApplicationAttachmentsTypeEnum {
    Frumrit = 'frumrit',
    Fylgiskjol = 'fylgiskjol',
    Assets = 'assets'
}
/**
    * @export
    * @enum {string}
    */
export enum GetPresignedUrlTypeEnum {
    Frumrit = 'frumrit',
    Fylgiskjol = 'fylgiskjol',
    Assets = 'assets'
}
