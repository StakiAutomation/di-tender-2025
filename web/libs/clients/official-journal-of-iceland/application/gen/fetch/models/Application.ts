/* tslint:disable */
/* eslint-disable */
/**
 * The Official Journal of Iceland Application API
 * This api is responsible for communications with the island.is application system.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ApplicationAnswers,
    ApplicationAnswersFromJSON,
    ApplicationAnswersFromJSONTyped,
    ApplicationAnswersToJSON,
} from './';

/**
 * 
 * @export
 * @interface Application
 */
export interface Application {
    /**
     * Guid of the application
     * @type {string}
     * @memberof Application
     */
    id: string;
    /**
     * National id of the applicant
     * @type {string}
     * @memberof Application
     */
    applicant: string;
    /**
     * List of assignees
     * @type {Array<string>}
     * @memberof Application
     */
    assignees: Array<string>;
    /**
     * Attachments
     * @type {object}
     * @memberof Application
     */
    attachments: object;
    /**
     * State of the application
     * @type {string}
     * @memberof Application
     */
    state: ApplicationStateEnum;
    /**
     * Status of the application
     * @type {string}
     * @memberof Application
     */
    status: string;
    /**
     * Type of the application
     * @type {string}
     * @memberof Application
     */
    typeId: string;
    /**
     * Application creation date
     * @type {string}
     * @memberof Application
     */
    created: string;
    /**
     * Application last modified date
     * @type {string}
     * @memberof Application
     */
    modified: string;
    /**
     * Name of the application
     * @type {string}
     * @memberof Application
     */
    name: string;
    /**
     * List of applicant actors
     * @type {Array<string>}
     * @memberof Application
     */
    applicantActors: Array<string>;
    /**
     * Application answers
     * @type {ApplicationAnswers}
     * @memberof Application
     */
    answers: ApplicationAnswers;
    /**
     * Is the application listed
     * @type {boolean}
     * @memberof Application
     */
    listed: boolean;
    /**
     * Prune date of the application
     * @type {string}
     * @memberof Application
     */
    prunedAt: string;
    /**
     * Date of the application
     * @type {boolean}
     * @memberof Application
     */
    pruned: boolean;
}

export function ApplicationFromJSON(json: any): Application {
    return ApplicationFromJSONTyped(json, false);
}

export function ApplicationFromJSONTyped(json: any, ignoreDiscriminator: boolean): Application {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'applicant': json['applicant'],
        'assignees': json['assignees'],
        'attachments': json['attachments'],
        'state': json['state'],
        'status': json['status'],
        'typeId': json['typeId'],
        'created': json['created'],
        'modified': json['modified'],
        'name': json['name'],
        'applicantActors': json['applicantActors'],
        'answers': ApplicationAnswersFromJSON(json['answers']),
        'listed': json['listed'],
        'prunedAt': json['prunedAt'],
        'pruned': json['pruned'],
    };
}

export function ApplicationToJSON(value?: Application | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'applicant': value.applicant,
        'assignees': value.assignees,
        'attachments': value.attachments,
        'state': value.state,
        'status': value.status,
        'typeId': value.typeId,
        'created': value.created,
        'modified': value.modified,
        'name': value.name,
        'applicantActors': value.applicantActors,
        'answers': ApplicationAnswersToJSON(value.answers),
        'listed': value.listed,
        'prunedAt': value.prunedAt,
        'pruned': value.pruned,
    };
}

/**
* @export
* @enum {string}
*/
export enum ApplicationStateEnum {
    Requirements = 'requirements',
    Draft = 'draft',
    DraftRetry = 'draft_retry',
    Submitted = 'submitted',
    Complete = 'complete'
}


