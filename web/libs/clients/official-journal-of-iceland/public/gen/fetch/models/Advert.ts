/* tslint:disable */
/* eslint-disable */
/**
 * The Official Journal of Iceland API
 * API for advarts and publication in the Official Journal of Iceland.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    AdvertAttachment,
    AdvertAttachmentFromJSON,
    AdvertAttachmentFromJSONTyped,
    AdvertAttachmentToJSON,
    AdvertCorrection,
    AdvertCorrectionFromJSON,
    AdvertCorrectionFromJSONTyped,
    AdvertCorrectionToJSON,
    AdvertDocument,
    AdvertDocumentFromJSON,
    AdvertDocumentFromJSONTyped,
    AdvertDocumentToJSON,
    AdvertPublicationNumber,
    AdvertPublicationNumberFromJSON,
    AdvertPublicationNumberFromJSONTyped,
    AdvertPublicationNumberToJSON,
    AdvertSignature,
    AdvertSignatureFromJSON,
    AdvertSignatureFromJSONTyped,
    AdvertSignatureToJSON,
    AdvertType,
    AdvertTypeFromJSON,
    AdvertTypeFromJSONTyped,
    AdvertTypeToJSON,
    Category,
    CategoryFromJSON,
    CategoryFromJSONTyped,
    CategoryToJSON,
    Department,
    DepartmentFromJSON,
    DepartmentFromJSONTyped,
    DepartmentToJSON,
    Institution,
    InstitutionFromJSON,
    InstitutionFromJSONTyped,
    InstitutionToJSON,
} from './';

/**
 * 
 * @export
 * @interface Advert
 */
export interface Advert {
    /**
     * Unique ID for the advert, GUID format.
     * @type {string}
     * @memberof Advert
     */
    id: string;
    /**
     * The department the advert is for.
     * @type {Department}
     * @memberof Advert
     */
    department: Department;
    /**
     * Type of the advert.
     * @type {AdvertType}
     * @memberof Advert
     */
    type: AdvertType;
    /**
     * Subject of the advert, always dependant on the `type`.
     * @type {string}
     * @memberof Advert
     */
    subject?: string;
    /**
     * Title of the advert with both `type` and `subject`.
     * @type {string}
     * @memberof Advert
     */
    title: string;
    /**
     * Status of the advert
     * @type {string}
     * @memberof Advert
     */
    status: AdvertStatusEnum;
    /**
     * Publication number of the advert
     * @type {AdvertPublicationNumber}
     * @memberof Advert
     */
    publicationNumber: AdvertPublicationNumber | null;
    /**
     * Date the advert was created. ISO 8601 date and time format in UTC.
     * @type {string}
     * @memberof Advert
     */
    createdDate: string;
    /**
     * Date the advert was last updated. ISO 8601 date and time format in UTC.
     * @type {string}
     * @memberof Advert
     */
    updatedDate: string;
    /**
     * Date the advert was signed, can be null. ISO 8601 date and time format in UTC.
     * @type {string}
     * @memberof Advert
     */
    signatureDate: string | null;
    /**
     * Date the advert was signed, can be null. ISO 8601 date and time format in UTC.
     * @type {string}
     * @memberof Advert
     */
    publicationDate: string | null;
    /**
     * List of advert categories.
     * @type {Array<Category>}
     * @memberof Advert
     */
    categories: Array<Category>;
    /**
     * Involved party for the advert.
     * @type {Institution}
     * @memberof Advert
     */
    involvedParty: Institution;
    /**
     * Advert document in different formats.
     * @type {AdvertDocument}
     * @memberof Advert
     */
    document: AdvertDocument;
    /**
     * Signatures for the advert.
     * @type {AdvertSignature}
     * @memberof Advert
     */
    signature: AdvertSignature;
    /**
     * Attachments for the advert.
     * @type {Array<AdvertAttachment>}
     * @memberof Advert
     */
    attachments: Array<AdvertAttachment>;
    /**
     * Corrections made to the advert.
     * @type {Array<AdvertCorrection>}
     * @memberof Advert
     */
    corrections?: Array<AdvertCorrection>;
}

export function AdvertFromJSON(json: any): Advert {
    return AdvertFromJSONTyped(json, false);
}

export function AdvertFromJSONTyped(json: any, ignoreDiscriminator: boolean): Advert {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'department': DepartmentFromJSON(json['department']),
        'type': AdvertTypeFromJSON(json['type']),
        'subject': !exists(json, 'subject') ? undefined : json['subject'],
        'title': json['title'],
        'status': json['status'],
        'publicationNumber': AdvertPublicationNumberFromJSON(json['publicationNumber']),
        'createdDate': json['createdDate'],
        'updatedDate': json['updatedDate'],
        'signatureDate': json['signatureDate'],
        'publicationDate': json['publicationDate'],
        'categories': ((json['categories'] as Array<any>).map(CategoryFromJSON)),
        'involvedParty': InstitutionFromJSON(json['involvedParty']),
        'document': AdvertDocumentFromJSON(json['document']),
        'signature': AdvertSignatureFromJSON(json['signature']),
        'attachments': ((json['attachments'] as Array<any>).map(AdvertAttachmentFromJSON)),
        'corrections': !exists(json, 'corrections') ? undefined : ((json['corrections'] as Array<any>).map(AdvertCorrectionFromJSON)),
    };
}

export function AdvertToJSON(value?: Advert | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'department': DepartmentToJSON(value.department),
        'type': AdvertTypeToJSON(value.type),
        'subject': value.subject,
        'title': value.title,
        'status': value.status,
        'publicationNumber': AdvertPublicationNumberToJSON(value.publicationNumber),
        'createdDate': value.createdDate,
        'updatedDate': value.updatedDate,
        'signatureDate': value.signatureDate,
        'publicationDate': value.publicationDate,
        'categories': ((value.categories as Array<any>).map(CategoryToJSON)),
        'involvedParty': InstitutionToJSON(value.involvedParty),
        'document': AdvertDocumentToJSON(value.document),
        'signature': AdvertSignatureToJSON(value.signature),
        'attachments': ((value.attachments as Array<any>).map(AdvertAttachmentToJSON)),
        'corrections': value.corrections === undefined ? undefined : ((value.corrections as Array<any>).map(AdvertCorrectionToJSON)),
    };
}

/**
* @export
* @enum {string}
*/
export enum AdvertStatusEnum {
    Virk = 'Virk',
    Afturkllu = 'Afturkölluð',
    Drg = 'Drög',
    EldriAuglsing = 'Eldri auglýsing',
    Hafna = 'Hafnað',
    Bi = 'Í bið',
    Vinnslu = 'Í vinnslu',
    Innsend = 'Innsend',
    TilbinTilTgfu = 'Tilbúin til útgáfu',
    Tgefin = 'Útgefin'
}


