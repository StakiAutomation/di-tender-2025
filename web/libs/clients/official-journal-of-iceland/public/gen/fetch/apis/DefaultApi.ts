/* tslint:disable */
/* eslint-disable */
/**
 * The Official Journal of Iceland API
 * API for advarts and publication in the Official Journal of Iceland.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AdvertTypeError,
    AdvertTypeErrorFromJSON,
    AdvertTypeErrorToJSON,
    GetAdvertMainType,
    GetAdvertMainTypeFromJSON,
    GetAdvertMainTypeToJSON,
    GetAdvertMainTypes,
    GetAdvertMainTypesFromJSON,
    GetAdvertMainTypesToJSON,
    GetAdvertResponse,
    GetAdvertResponseFromJSON,
    GetAdvertResponseToJSON,
    GetAdvertSignatureResponse,
    GetAdvertSignatureResponseFromJSON,
    GetAdvertSignatureResponseToJSON,
    GetAdvertType,
    GetAdvertTypeFromJSON,
    GetAdvertTypeToJSON,
    GetAdvertTypes,
    GetAdvertTypesFromJSON,
    GetAdvertTypesToJSON,
    GetAdvertsResponse,
    GetAdvertsResponseFromJSON,
    GetAdvertsResponseToJSON,
    GetCasesInProgressReponse,
    GetCasesInProgressReponseFromJSON,
    GetCasesInProgressReponseToJSON,
    GetCategoriesResponse,
    GetCategoriesResponseFromJSON,
    GetCategoriesResponseToJSON,
    GetDepartmentResponse,
    GetDepartmentResponseFromJSON,
    GetDepartmentResponseToJSON,
    GetDepartmentsResponse,
    GetDepartmentsResponseFromJSON,
    GetDepartmentsResponseToJSON,
    GetInstitutionsResponse,
    GetInstitutionsResponseFromJSON,
    GetInstitutionsResponseToJSON,
    GetMainCategoriesResponse,
    GetMainCategoriesResponseFromJSON,
    GetMainCategoriesResponseToJSON,
    GetPdfRespone,
    GetPdfResponeFromJSON,
    GetPdfResponeToJSON,
    GetPdfUrlResponse,
    GetPdfUrlResponseFromJSON,
    GetPdfUrlResponseToJSON,
    GetSimilarAdvertsResponse,
    GetSimilarAdvertsResponseFromJSON,
    GetSimilarAdvertsResponseToJSON,
} from '../models';

export interface GetAdvertByIdRequest {
    id: string;
}

export interface GetAdvertsRequest {
    search?: string;
    page?: number;
    pageSize?: number;
    department?: Array<string>;
    type?: Array<string>;
    category?: Array<string>;
    involvedParty?: Array<string>;
    dateFrom?: string;
    dateTo?: string;
}

export interface GetCasesInProgressRequest {
    search?: string;
    ids?: Array<string>;
    page?: number;
    pageSize?: number;
}

export interface GetCategoriesRequest {
    search?: string;
    ids?: Array<string>;
    page?: number;
    pageSize?: number;
}

export interface GetDepartmentByIdRequest {
    id: string;
}

export interface GetDepartmentsRequest {
    search?: string;
    page?: number;
    pageSize?: number;
}

export interface GetInstitutionsRequest {
    search?: string;
    ids?: Array<string>;
    page?: number;
    pageSize?: number;
}

export interface GetMainCategoriesRequest {
    search?: string;
    ids?: Array<string>;
    page?: number;
    pageSize?: number;
}

export interface GetMainTypeByIdRequest {
    id: string;
}

export interface GetMainTypesRequest {
    id?: string;
    unassigned?: boolean;
    mainType?: string;
    search?: string;
    slug?: string;
    department?: string;
    page?: number;
    pageSize?: number;
}

export interface GetPDFFromAdvertRequest {
    id: string;
}

export interface GetPdfByApplicationIdRequest {
    id: string;
    showDate?: boolean;
}

export interface GetPdfByCaseIdRequest {
    id: string;
}

export interface GetPdfUrlByApplicationIdRequest {
    id: string;
}

export interface GetPdfUrlByCaseIdRequest {
    id: string;
}

export interface GetRssFeedRequest {
    id: string;
}

export interface GetSignaturesRequest {
    id?: string;
    type?: string;
    search?: string;
    page?: number;
}

export interface GetSimilarAdvertsByIdRequest {
    id: string;
}

export interface GetTypeByIdRequest {
    id: string;
}

export interface GetTypesRequest {
    id?: string;
    unassigned?: boolean;
    mainType?: string;
    search?: string;
    slug?: string;
    department?: string;
    page?: number;
    pageSize?: number;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     */
    async getAdvertByIdRaw(requestParameters: GetAdvertByIdRequest): Promise<runtime.ApiResponse<GetAdvertResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getAdvertById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/adverts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAdvertResponseFromJSON(jsonValue));
    }

    /**
     */
    async getAdvertById(requestParameters: GetAdvertByIdRequest): Promise<GetAdvertResponse> {
        const response = await this.getAdvertByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getAdvertsRaw(requestParameters: GetAdvertsRequest): Promise<runtime.ApiResponse<GetAdvertsResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.department) {
            queryParameters['department'] = requestParameters.department;
        }

        if (requestParameters.type) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.category) {
            queryParameters['category'] = requestParameters.category;
        }

        if (requestParameters.involvedParty) {
            queryParameters['involvedParty'] = requestParameters.involvedParty;
        }

        if (requestParameters.dateFrom !== undefined) {
            queryParameters['dateFrom'] = requestParameters.dateFrom;
        }

        if (requestParameters.dateTo !== undefined) {
            queryParameters['dateTo'] = requestParameters.dateTo;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/adverts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAdvertsResponseFromJSON(jsonValue));
    }

    /**
     */
    async getAdverts(requestParameters: GetAdvertsRequest): Promise<GetAdvertsResponse> {
        const response = await this.getAdvertsRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getCasesInProgressRaw(requestParameters: GetCasesInProgressRequest): Promise<runtime.ApiResponse<GetCasesInProgressReponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.ids) {
            queryParameters['ids'] = requestParameters.ids;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/cases`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCasesInProgressReponseFromJSON(jsonValue));
    }

    /**
     */
    async getCasesInProgress(requestParameters: GetCasesInProgressRequest): Promise<GetCasesInProgressReponse> {
        const response = await this.getCasesInProgressRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getCategoriesRaw(requestParameters: GetCategoriesRequest): Promise<runtime.ApiResponse<GetCategoriesResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.ids) {
            queryParameters['ids'] = requestParameters.ids;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/categories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCategoriesResponseFromJSON(jsonValue));
    }

    /**
     */
    async getCategories(requestParameters: GetCategoriesRequest): Promise<GetCategoriesResponse> {
        const response = await this.getCategoriesRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getDepartmentByIdRaw(requestParameters: GetDepartmentByIdRequest): Promise<runtime.ApiResponse<GetDepartmentResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getDepartmentById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/departments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetDepartmentResponseFromJSON(jsonValue));
    }

    /**
     */
    async getDepartmentById(requestParameters: GetDepartmentByIdRequest): Promise<GetDepartmentResponse> {
        const response = await this.getDepartmentByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getDepartmentsRaw(requestParameters: GetDepartmentsRequest): Promise<runtime.ApiResponse<GetDepartmentsResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/departments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetDepartmentsResponseFromJSON(jsonValue));
    }

    /**
     */
    async getDepartments(requestParameters: GetDepartmentsRequest): Promise<GetDepartmentsResponse> {
        const response = await this.getDepartmentsRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getInstitutionsRaw(requestParameters: GetInstitutionsRequest): Promise<runtime.ApiResponse<GetInstitutionsResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.ids) {
            queryParameters['ids'] = requestParameters.ids;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/institutions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetInstitutionsResponseFromJSON(jsonValue));
    }

    /**
     */
    async getInstitutions(requestParameters: GetInstitutionsRequest): Promise<GetInstitutionsResponse> {
        const response = await this.getInstitutionsRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getMainCategoriesRaw(requestParameters: GetMainCategoriesRequest): Promise<runtime.ApiResponse<GetMainCategoriesResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.ids) {
            queryParameters['ids'] = requestParameters.ids;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/maincategories`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetMainCategoriesResponseFromJSON(jsonValue));
    }

    /**
     */
    async getMainCategories(requestParameters: GetMainCategoriesRequest): Promise<GetMainCategoriesResponse> {
        const response = await this.getMainCategoriesRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getMainTypeByIdRaw(requestParameters: GetMainTypeByIdRequest): Promise<runtime.ApiResponse<GetAdvertMainType>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getMainTypeById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/advert-types/main-types/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAdvertMainTypeFromJSON(jsonValue));
    }

    /**
     */
    async getMainTypeById(requestParameters: GetMainTypeByIdRequest): Promise<GetAdvertMainType> {
        const response = await this.getMainTypeByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getMainTypesRaw(requestParameters: GetMainTypesRequest): Promise<runtime.ApiResponse<GetAdvertMainTypes>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.unassigned !== undefined) {
            queryParameters['unassigned'] = requestParameters.unassigned;
        }

        if (requestParameters.mainType !== undefined) {
            queryParameters['mainType'] = requestParameters.mainType;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.slug !== undefined) {
            queryParameters['slug'] = requestParameters.slug;
        }

        if (requestParameters.department !== undefined) {
            queryParameters['department'] = requestParameters.department;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/advert-types/main-types`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAdvertMainTypesFromJSON(jsonValue));
    }

    /**
     */
    async getMainTypes(requestParameters: GetMainTypesRequest): Promise<GetAdvertMainTypes> {
        const response = await this.getMainTypesRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getPDFFromAdvertRaw(requestParameters: GetPDFFromAdvertRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPDFFromAdvert.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/pdf/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async getPDFFromAdvert(requestParameters: GetPDFFromAdvertRequest): Promise<void> {
        await this.getPDFFromAdvertRaw(requestParameters);
    }

    /**
     */
    async getPdfByApplicationIdRaw(requestParameters: GetPdfByApplicationIdRequest): Promise<runtime.ApiResponse<GetPdfRespone>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPdfByApplicationId.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.showDate !== undefined) {
            queryParameters['showDate'] = requestParameters.showDate;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/pdf/application/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPdfResponeFromJSON(jsonValue));
    }

    /**
     */
    async getPdfByApplicationId(requestParameters: GetPdfByApplicationIdRequest): Promise<GetPdfRespone> {
        const response = await this.getPdfByApplicationIdRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getPdfByCaseIdRaw(requestParameters: GetPdfByCaseIdRequest): Promise<runtime.ApiResponse<GetPdfRespone>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPdfByCaseId.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/pdf/case/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPdfResponeFromJSON(jsonValue));
    }

    /**
     */
    async getPdfByCaseId(requestParameters: GetPdfByCaseIdRequest): Promise<GetPdfRespone> {
        const response = await this.getPdfByCaseIdRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getPdfUrlByApplicationIdRaw(requestParameters: GetPdfUrlByApplicationIdRequest): Promise<runtime.ApiResponse<GetPdfUrlResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPdfUrlByApplicationId.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/pdf/application/{id}/url`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPdfUrlResponseFromJSON(jsonValue));
    }

    /**
     */
    async getPdfUrlByApplicationId(requestParameters: GetPdfUrlByApplicationIdRequest): Promise<GetPdfUrlResponse> {
        const response = await this.getPdfUrlByApplicationIdRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getPdfUrlByCaseIdRaw(requestParameters: GetPdfUrlByCaseIdRequest): Promise<runtime.ApiResponse<GetPdfUrlResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPdfUrlByCaseId.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/pdf/case/{id}/url`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPdfUrlResponseFromJSON(jsonValue));
    }

    /**
     */
    async getPdfUrlByCaseId(requestParameters: GetPdfUrlByCaseIdRequest): Promise<GetPdfUrlResponse> {
        const response = await this.getPdfUrlByCaseIdRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getRssFeedRaw(requestParameters: GetRssFeedRequest): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getRssFeed.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/rss/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async getRssFeed(requestParameters: GetRssFeedRequest): Promise<string> {
        const response = await this.getRssFeedRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getSignaturesRaw(requestParameters: GetSignaturesRequest): Promise<runtime.ApiResponse<GetAdvertSignatureResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/signatures`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAdvertSignatureResponseFromJSON(jsonValue));
    }

    /**
     */
    async getSignatures(requestParameters: GetSignaturesRequest): Promise<GetAdvertSignatureResponse> {
        const response = await this.getSignaturesRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getSimilarAdvertsByIdRaw(requestParameters: GetSimilarAdvertsByIdRequest): Promise<runtime.ApiResponse<GetSimilarAdvertsResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSimilarAdvertsById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/adverts/similar/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetSimilarAdvertsResponseFromJSON(jsonValue));
    }

    /**
     */
    async getSimilarAdvertsById(requestParameters: GetSimilarAdvertsByIdRequest): Promise<GetSimilarAdvertsResponse> {
        const response = await this.getSimilarAdvertsByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getTypeByIdRaw(requestParameters: GetTypeByIdRequest): Promise<runtime.ApiResponse<GetAdvertType>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getTypeById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/advert-types/types/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAdvertTypeFromJSON(jsonValue));
    }

    /**
     */
    async getTypeById(requestParameters: GetTypeByIdRequest): Promise<GetAdvertType> {
        const response = await this.getTypeByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async getTypesRaw(requestParameters: GetTypesRequest): Promise<runtime.ApiResponse<GetAdvertTypes>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        if (requestParameters.unassigned !== undefined) {
            queryParameters['unassigned'] = requestParameters.unassigned;
        }

        if (requestParameters.mainType !== undefined) {
            queryParameters['mainType'] = requestParameters.mainType;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.slug !== undefined) {
            queryParameters['slug'] = requestParameters.slug;
        }

        if (requestParameters.department !== undefined) {
            queryParameters['department'] = requestParameters.department;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['pageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/advert-types/types`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAdvertTypesFromJSON(jsonValue));
    }

    /**
     */
    async getTypes(requestParameters: GetTypesRequest): Promise<GetAdvertTypes> {
        const response = await this.getTypesRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async healthControllerRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/health`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async healthController(): Promise<void> {
        await this.healthControllerRaw();
    }

}
