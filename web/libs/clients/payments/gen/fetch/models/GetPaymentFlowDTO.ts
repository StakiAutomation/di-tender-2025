/* tslint:disable */
/* eslint-disable */
/**
 * Payments API
 * This service handles and encapsulates all lgoic related to payment flows, from creation to payment. It handles communication with FJS for the payments.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface GetPaymentFlowDTO
 */
export interface GetPaymentFlowDTO {
    /**
     * Unique identifier for the payment flow
     * @type {string}
     * @memberof GetPaymentFlowDTO
     */
    id: string;
    /**
     * Product title to display to the payer
     * @type {string}
     * @memberof GetPaymentFlowDTO
     */
    productTitle: string;
    /**
     * Price of the product being paid for, can be combined of multiple prices based on the product ids of the payment flow
     * @type {number}
     * @memberof GetPaymentFlowDTO
     */
    productPrice: number;
    /**
     * National id of the payer, can be a company or an individual
     * @type {string}
     * @memberof GetPaymentFlowDTO
     */
    payerNationalId: string;
    /**
     * Name of the payer
     * @type {string}
     * @memberof GetPaymentFlowDTO
     */
    payerName: string;
    /**
     * Optional identifier for an invoice associated with the payment flow
     * @type {string}
     * @memberof GetPaymentFlowDTO
     */
    existingInvoiceId?: string;
    /**
     * List of allowed payment methods for this payment flow
     * @type {Array<string>}
     * @memberof GetPaymentFlowDTO
     */
    availablePaymentMethods: Array<GetPaymentFlowDTOAvailablePaymentMethodsEnum>;
    /**
     * URL callback to be called on payment update events like when the user requests to create invoice rather than directly paying
     * @type {string}
     * @memberof GetPaymentFlowDTO
     */
    onUpdateUrl: string;
    /**
     * Identifier for the organization initiating the payment flow
     * @type {string}
     * @memberof GetPaymentFlowDTO
     */
    organisationId: string;
    /**
     * Status of the payment: unpaid, pending invoice or paid
     * @type {string}
     * @memberof GetPaymentFlowDTO
     */
    paymentStatus: GetPaymentFlowDTOPaymentStatusEnum;
    /**
     * Arbitrary JSON data that will be returned on in callbacks (e.g. onSuccess, onUpdate)
     * @type {object}
     * @memberof GetPaymentFlowDTO
     */
    metadata?: object;
    /**
     * The URL to redirect the user to after the payment flow has been completed or cancelled
     * @type {string}
     * @memberof GetPaymentFlowDTO
     */
    returnUrl?: string;
    /**
     * If user should be redirected to the returnUrl after the payment flow has been completed successfully
     * @type {boolean}
     * @memberof GetPaymentFlowDTO
     */
    redirectToReturnUrlOnSuccess?: boolean;
    /**
     * Last updated at
     * @type {Date}
     * @memberof GetPaymentFlowDTO
     */
    updatedAt: Date;
}

export function GetPaymentFlowDTOFromJSON(json: any): GetPaymentFlowDTO {
    return GetPaymentFlowDTOFromJSONTyped(json, false);
}

export function GetPaymentFlowDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): GetPaymentFlowDTO {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'productTitle': json['productTitle'],
        'productPrice': json['productPrice'],
        'payerNationalId': json['payerNationalId'],
        'payerName': json['payerName'],
        'existingInvoiceId': !exists(json, 'existingInvoiceId') ? undefined : json['existingInvoiceId'],
        'availablePaymentMethods': json['availablePaymentMethods'],
        'onUpdateUrl': json['onUpdateUrl'],
        'organisationId': json['organisationId'],
        'paymentStatus': json['paymentStatus'],
        'metadata': !exists(json, 'metadata') ? undefined : json['metadata'],
        'returnUrl': !exists(json, 'returnUrl') ? undefined : json['returnUrl'],
        'redirectToReturnUrlOnSuccess': !exists(json, 'redirectToReturnUrlOnSuccess') ? undefined : json['redirectToReturnUrlOnSuccess'],
        'updatedAt': (new Date(json['updatedAt'])),
    };
}

export function GetPaymentFlowDTOToJSON(value?: GetPaymentFlowDTO | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'productTitle': value.productTitle,
        'productPrice': value.productPrice,
        'payerNationalId': value.payerNationalId,
        'payerName': value.payerName,
        'existingInvoiceId': value.existingInvoiceId,
        'availablePaymentMethods': value.availablePaymentMethods,
        'onUpdateUrl': value.onUpdateUrl,
        'organisationId': value.organisationId,
        'paymentStatus': value.paymentStatus,
        'metadata': value.metadata,
        'returnUrl': value.returnUrl,
        'redirectToReturnUrlOnSuccess': value.redirectToReturnUrlOnSuccess,
        'updatedAt': (value.updatedAt.toISOString()),
    };
}

/**
* @export
* @enum {string}
*/
export enum GetPaymentFlowDTOAvailablePaymentMethodsEnum {
    card = 'card',
    invoice = 'invoice'
}
/**
* @export
* @enum {string}
*/
export enum GetPaymentFlowDTOPaymentStatusEnum {
    unpaid = 'unpaid',
    invoice_pending = 'invoice_pending',
    paid = 'paid'
}


