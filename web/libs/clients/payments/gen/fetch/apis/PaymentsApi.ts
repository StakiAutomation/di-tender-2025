/* tslint:disable */
/* eslint-disable */
/**
 * Payments API
 * This service handles and encapsulates all lgoic related to payment flows, from creation to payment. It handles communication with FJS for the payments.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ChargeCardInput,
    ChargeCardInputFromJSON,
    ChargeCardInputToJSON,
    ChargeCardResponse,
    ChargeCardResponseFromJSON,
    ChargeCardResponseToJSON,
    CreateInvoiceInput,
    CreateInvoiceInputFromJSON,
    CreateInvoiceInputToJSON,
    CreateInvoiceResponse,
    CreateInvoiceResponseFromJSON,
    CreateInvoiceResponseToJSON,
    CreatePaymentFlowDTO,
    CreatePaymentFlowDTOFromJSON,
    CreatePaymentFlowDTOToJSON,
    CreatePaymentFlowInput,
    CreatePaymentFlowInputFromJSON,
    CreatePaymentFlowInputToJSON,
    GetPaymentFlowDTO,
    GetPaymentFlowDTOFromJSON,
    GetPaymentFlowDTOToJSON,
    GetPaymentFlowStatusDTO,
    GetPaymentFlowStatusDTOFromJSON,
    GetPaymentFlowStatusDTOToJSON,
    HttpProblemResponse,
    HttpProblemResponseFromJSON,
    HttpProblemResponseToJSON,
    VerificationCallbackInput,
    VerificationCallbackInputFromJSON,
    VerificationCallbackInputToJSON,
    VerificationCallbackResponse,
    VerificationCallbackResponseFromJSON,
    VerificationCallbackResponseToJSON,
    VerificationStatusResponse,
    VerificationStatusResponseFromJSON,
    VerificationStatusResponseToJSON,
    VerifyCardInput,
    VerifyCardInputFromJSON,
    VerifyCardInputToJSON,
    VerifyCardResponse,
    VerifyCardResponseFromJSON,
    VerifyCardResponseToJSON,
} from '../models';

export interface CardPaymentControllerChargeRequest {
    chargeCardInput: ChargeCardInput;
}

export interface CardPaymentControllerVerificationCallbackRequest {
    verificationCallbackInput: VerificationCallbackInput;
}

export interface CardPaymentControllerVerificationStatusRequest {
    paymentFlowId: string;
}

export interface CardPaymentControllerVerifyRequest {
    verifyCardInput: VerifyCardInput;
}

export interface InvoicePaymentControllerCreateRequest {
    createInvoiceInput: CreateInvoiceInput;
}

export interface PaymentFlowControllerCreatePaymentUrlRequest {
    createPaymentFlowInput: CreatePaymentFlowInput;
}

export interface PaymentFlowControllerDeletePaymentFlowRequest {
    id: string;
}

export interface PaymentFlowControllerGetPaymentFlowRequest {
    id: string;
}

export interface PaymentFlowControllerGetPaymentFlowStatusRequest {
    id: string;
}

/**
 * 
 */
export class PaymentsApi extends runtime.BaseAPI {

    /**
     */
    async cardPaymentControllerChargeRaw(requestParameters: CardPaymentControllerChargeRequest): Promise<runtime.ApiResponse<ChargeCardResponse>> {
        if (requestParameters.chargeCardInput === null || requestParameters.chargeCardInput === undefined) {
            throw new runtime.RequiredError('chargeCardInput','Required parameter requestParameters.chargeCardInput was null or undefined when calling cardPaymentControllerCharge.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/payments/card/charge`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChargeCardInputToJSON(requestParameters.chargeCardInput),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ChargeCardResponseFromJSON(jsonValue));
    }

    /**
     */
    async cardPaymentControllerCharge(requestParameters: CardPaymentControllerChargeRequest): Promise<ChargeCardResponse> {
        const response = await this.cardPaymentControllerChargeRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async cardPaymentControllerVerificationCallbackRaw(requestParameters: CardPaymentControllerVerificationCallbackRequest): Promise<runtime.ApiResponse<VerificationCallbackResponse>> {
        if (requestParameters.verificationCallbackInput === null || requestParameters.verificationCallbackInput === undefined) {
            throw new runtime.RequiredError('verificationCallbackInput','Required parameter requestParameters.verificationCallbackInput was null or undefined when calling cardPaymentControllerVerificationCallback.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/payments/card/verify-callback`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VerificationCallbackInputToJSON(requestParameters.verificationCallbackInput),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => VerificationCallbackResponseFromJSON(jsonValue));
    }

    /**
     */
    async cardPaymentControllerVerificationCallback(requestParameters: CardPaymentControllerVerificationCallbackRequest): Promise<VerificationCallbackResponse> {
        const response = await this.cardPaymentControllerVerificationCallbackRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async cardPaymentControllerVerificationStatusRaw(requestParameters: CardPaymentControllerVerificationStatusRequest): Promise<runtime.ApiResponse<VerificationStatusResponse>> {
        if (requestParameters.paymentFlowId === null || requestParameters.paymentFlowId === undefined) {
            throw new runtime.RequiredError('paymentFlowId','Required parameter requestParameters.paymentFlowId was null or undefined when calling cardPaymentControllerVerificationStatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/payments/card/verification-status/{paymentFlowId}`.replace(`{${"paymentFlowId"}}`, encodeURIComponent(String(requestParameters.paymentFlowId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => VerificationStatusResponseFromJSON(jsonValue));
    }

    /**
     */
    async cardPaymentControllerVerificationStatus(requestParameters: CardPaymentControllerVerificationStatusRequest): Promise<VerificationStatusResponse> {
        const response = await this.cardPaymentControllerVerificationStatusRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async cardPaymentControllerVerifyRaw(requestParameters: CardPaymentControllerVerifyRequest): Promise<runtime.ApiResponse<VerifyCardResponse>> {
        if (requestParameters.verifyCardInput === null || requestParameters.verifyCardInput === undefined) {
            throw new runtime.RequiredError('verifyCardInput','Required parameter requestParameters.verifyCardInput was null or undefined when calling cardPaymentControllerVerify.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/payments/card/verify`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VerifyCardInputToJSON(requestParameters.verifyCardInput),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => VerifyCardResponseFromJSON(jsonValue));
    }

    /**
     */
    async cardPaymentControllerVerify(requestParameters: CardPaymentControllerVerifyRequest): Promise<VerifyCardResponse> {
        const response = await this.cardPaymentControllerVerifyRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async invoicePaymentControllerCreateRaw(requestParameters: InvoicePaymentControllerCreateRequest): Promise<runtime.ApiResponse<CreateInvoiceResponse>> {
        if (requestParameters.createInvoiceInput === null || requestParameters.createInvoiceInput === undefined) {
            throw new runtime.RequiredError('createInvoiceInput','Required parameter requestParameters.createInvoiceInput was null or undefined when calling invoicePaymentControllerCreate.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/payments/invoice/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateInvoiceInputToJSON(requestParameters.createInvoiceInput),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateInvoiceResponseFromJSON(jsonValue));
    }

    /**
     */
    async invoicePaymentControllerCreate(requestParameters: InvoicePaymentControllerCreateRequest): Promise<CreateInvoiceResponse> {
        const response = await this.invoicePaymentControllerCreateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Creates a new PaymentFlow.
     */
    async paymentFlowControllerCreatePaymentUrlRaw(requestParameters: PaymentFlowControllerCreatePaymentUrlRequest): Promise<runtime.ApiResponse<CreatePaymentFlowDTO>> {
        if (requestParameters.createPaymentFlowInput === null || requestParameters.createPaymentFlowInput === undefined) {
            throw new runtime.RequiredError('createPaymentFlowInput','Required parameter requestParameters.createPaymentFlowInput was null or undefined when calling paymentFlowControllerCreatePaymentUrl.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/payments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreatePaymentFlowInputToJSON(requestParameters.createPaymentFlowInput),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CreatePaymentFlowDTOFromJSON(jsonValue));
    }

    /**
     * Creates a new PaymentFlow.
     */
    async paymentFlowControllerCreatePaymentUrl(requestParameters: PaymentFlowControllerCreatePaymentUrlRequest): Promise<CreatePaymentFlowDTO> {
        const response = await this.paymentFlowControllerCreatePaymentUrlRaw(requestParameters);
        return await response.value();
    }

    /**
     * Deletes a PaymentFlow.
     */
    async paymentFlowControllerDeletePaymentFlowRaw(requestParameters: PaymentFlowControllerDeletePaymentFlowRequest): Promise<runtime.ApiResponse<GetPaymentFlowDTO>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling paymentFlowControllerDeletePaymentFlow.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/payments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPaymentFlowDTOFromJSON(jsonValue));
    }

    /**
     * Deletes a PaymentFlow.
     */
    async paymentFlowControllerDeletePaymentFlow(requestParameters: PaymentFlowControllerDeletePaymentFlowRequest): Promise<GetPaymentFlowDTO> {
        const response = await this.paymentFlowControllerDeletePaymentFlowRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieves payment flow information by ID.
     */
    async paymentFlowControllerGetPaymentFlowRaw(requestParameters: PaymentFlowControllerGetPaymentFlowRequest): Promise<runtime.ApiResponse<GetPaymentFlowDTO>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling paymentFlowControllerGetPaymentFlow.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/payments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPaymentFlowDTOFromJSON(jsonValue));
    }

    /**
     * Retrieves payment flow information by ID.
     */
    async paymentFlowControllerGetPaymentFlow(requestParameters: PaymentFlowControllerGetPaymentFlowRequest): Promise<GetPaymentFlowDTO> {
        const response = await this.paymentFlowControllerGetPaymentFlowRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieves payment flow information by ID.
     */
    async paymentFlowControllerGetPaymentFlowStatusRaw(requestParameters: PaymentFlowControllerGetPaymentFlowStatusRequest): Promise<runtime.ApiResponse<GetPaymentFlowStatusDTO>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling paymentFlowControllerGetPaymentFlowStatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/payments/{id}/status`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPaymentFlowStatusDTOFromJSON(jsonValue));
    }

    /**
     * Retrieves payment flow information by ID.
     */
    async paymentFlowControllerGetPaymentFlowStatus(requestParameters: PaymentFlowControllerGetPaymentFlowStatusRequest): Promise<GetPaymentFlowStatusDTO> {
        const response = await this.paymentFlowControllerGetPaymentFlowStatusRaw(requestParameters);
        return await response.value();
    }

}
