/* tslint:disable */
/* eslint-disable */
/**
 * ehic
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CardStatusResponseDTO,
    CardStatusResponseDTOFromJSON,
    CardStatusResponseDTOToJSON,
    TempPDFCardResponseDTO,
    TempPDFCardResponseDTOFromJSON,
    TempPDFCardResponseDTOToJSON,
} from '../models';

export interface CardStatusRequest {
    applicantnationalids: string;
}

export interface FetchTempPDFCardRequest {
    applicantnationalid: string;
    cardnumber: string;
}

export interface RequestCardRequest {
    applicantnationalid: string;
    cardtype: string;
}

export interface RollNationalIdRequest {
    nationalid: string;
}

/**
 * 
 */
export class EhicApi extends runtime.BaseAPI {

    /**
     */
    async cardStatusRaw(requestParameters: CardStatusRequest): Promise<runtime.ApiResponse<Array<CardStatusResponseDTO>>> {
        if (requestParameters.applicantnationalids === null || requestParameters.applicantnationalids === undefined) {
            throw new runtime.RequiredError('applicantnationalids','Required parameter requestParameters.applicantnationalids was null or undefined when calling cardStatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/cardstatus/{applicantnationalids}`.replace(`{${"applicantnationalids"}}`, encodeURIComponent(String(requestParameters.applicantnationalids))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CardStatusResponseDTOFromJSON));
    }

    /**
     */
    async cardStatus(requestParameters: CardStatusRequest): Promise<Array<CardStatusResponseDTO>> {
        const response = await this.cardStatusRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async fetchTempPDFCardRaw(requestParameters: FetchTempPDFCardRequest): Promise<runtime.ApiResponse<TempPDFCardResponseDTO>> {
        if (requestParameters.applicantnationalid === null || requestParameters.applicantnationalid === undefined) {
            throw new runtime.RequiredError('applicantnationalid','Required parameter requestParameters.applicantnationalid was null or undefined when calling fetchTempPDFCard.');
        }

        if (requestParameters.cardnumber === null || requestParameters.cardnumber === undefined) {
            throw new runtime.RequiredError('cardnumber','Required parameter requestParameters.cardnumber was null or undefined when calling fetchTempPDFCard.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/fetchtemppdfcard/{applicantnationalid}/{cardnumber}`.replace(`{${"applicantnationalid"}}`, encodeURIComponent(String(requestParameters.applicantnationalid))).replace(`{${"cardnumber"}}`, encodeURIComponent(String(requestParameters.cardnumber))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TempPDFCardResponseDTOFromJSON(jsonValue));
    }

    /**
     */
    async fetchTempPDFCard(requestParameters: FetchTempPDFCardRequest): Promise<TempPDFCardResponseDTO> {
        const response = await this.fetchTempPDFCardRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async requestCardRaw(requestParameters: RequestCardRequest): Promise<runtime.ApiResponse<CardStatusResponseDTO>> {
        if (requestParameters.applicantnationalid === null || requestParameters.applicantnationalid === undefined) {
            throw new runtime.RequiredError('applicantnationalid','Required parameter requestParameters.applicantnationalid was null or undefined when calling requestCard.');
        }

        if (requestParameters.cardtype === null || requestParameters.cardtype === undefined) {
            throw new runtime.RequiredError('cardtype','Required parameter requestParameters.cardtype was null or undefined when calling requestCard.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/requestcard/{applicantnationalid}/{cardtype}`.replace(`{${"applicantnationalid"}}`, encodeURIComponent(String(requestParameters.applicantnationalid))).replace(`{${"cardtype"}}`, encodeURIComponent(String(requestParameters.cardtype))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CardStatusResponseDTOFromJSON(jsonValue));
    }

    /**
     */
    async requestCard(requestParameters: RequestCardRequest): Promise<CardStatusResponseDTO> {
        const response = await this.requestCardRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async rollNationalIdRaw(requestParameters: RollNationalIdRequest): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.nationalid === null || requestParameters.nationalid === undefined) {
            throw new runtime.RequiredError('nationalid','Required parameter requestParameters.nationalid was null or undefined when calling rollNationalId.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/rollnationalid/{nationalid}`.replace(`{${"nationalid"}}`, encodeURIComponent(String(requestParameters.nationalid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async rollNationalId(requestParameters: RollNationalIdRequest): Promise<string> {
        const response = await this.rollNationalIdRaw(requestParameters);
        return await response.value();
    }

}
