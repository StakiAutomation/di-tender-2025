/* tslint:disable */
/* eslint-disable */
/**
 * Islyklar API
 * Islyklar API
 *
 * The version of the OpenAPI document: v1
 * Contact: island@island.is
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ErrorResult,
    ErrorResultFromJSON,
    ErrorResultToJSON,
    PublicUser,
    PublicUserFromJSON,
    PublicUserToJSON,
} from '../models';

export interface IslyklarDeleteRequest {
    ssn: string;
}

export interface IslyklarGetRequest {
    ssn: string;
}

export interface IslyklarPostRequest {
    user?: PublicUser;
}

export interface IslyklarPutRequest {
    user?: PublicUser;
}

/**
 * 
 */
export class IslyklarApi extends runtime.BaseAPI {

    /**
     */
    async islyklarDeleteRaw(requestParameters: IslyklarDeleteRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.ssn === null || requestParameters.ssn === undefined) {
            throw new runtime.RequiredError('ssn','Required parameter requestParameters.ssn was null or undefined when calling islyklarDelete.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Islyklar/{ssn}`.replace(`{${"ssn"}}`, encodeURIComponent(String(requestParameters.ssn))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async islyklarDelete(requestParameters: IslyklarDeleteRequest): Promise<void> {
        await this.islyklarDeleteRaw(requestParameters);
    }

    /**
     */
    async islyklarGetRaw(requestParameters: IslyklarGetRequest): Promise<runtime.ApiResponse<PublicUser>> {
        if (requestParameters.ssn === null || requestParameters.ssn === undefined) {
            throw new runtime.RequiredError('ssn','Required parameter requestParameters.ssn was null or undefined when calling islyklarGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/Islyklar/{ssn}`.replace(`{${"ssn"}}`, encodeURIComponent(String(requestParameters.ssn))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PublicUserFromJSON(jsonValue));
    }

    /**
     */
    async islyklarGet(requestParameters: IslyklarGetRequest): Promise<PublicUser> {
        const response = await this.islyklarGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async islyklarPostRaw(requestParameters: IslyklarPostRequest): Promise<runtime.ApiResponse<PublicUser>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Islyklar`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PublicUserToJSON(requestParameters.user),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PublicUserFromJSON(jsonValue));
    }

    /**
     */
    async islyklarPost(requestParameters: IslyklarPostRequest): Promise<PublicUser> {
        const response = await this.islyklarPostRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async islyklarPutRaw(requestParameters: IslyklarPutRequest): Promise<runtime.ApiResponse<PublicUser>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/Islyklar`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PublicUserToJSON(requestParameters.user),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PublicUserFromJSON(jsonValue));
    }

    /**
     */
    async islyklarPut(requestParameters: IslyklarPutRequest): Promise<PublicUser> {
        const response = await this.islyklarPutRaw(requestParameters);
        return await response.value();
    }

}
