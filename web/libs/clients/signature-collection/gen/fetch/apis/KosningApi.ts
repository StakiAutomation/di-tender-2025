/* tslint:disable */
/* eslint-disable */
/**
 * MedmaeliRestAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    EinstaklingurKosningInfoDTO,
    EinstaklingurKosningInfoDTOFromJSON,
    EinstaklingurKosningInfoDTOToJSON,
    KosningBaseDTO,
    KosningBaseDTOFromJSON,
    KosningBaseDTOToJSON,
    KosningDTO,
    KosningDTOFromJSON,
    KosningDTOToJSON,
    MedmaelasofnunExtendedDTO,
    MedmaelasofnunExtendedDTOFromJSON,
    MedmaelasofnunExtendedDTOToJSON,
    SvaediDTO,
    SvaediDTOFromJSON,
    SvaediDTOToJSON,
} from '../models';

export interface KosningGetRequest {
    isMedmaelakosning?: boolean;
    hasSofnun?: boolean;
    onlyActive?: boolean;
}

export interface KosningIDEinsInfoKennitalaGetRequest {
    iD: number;
    kennitala: string;
}

export interface KosningIDGetRequest {
    iD: number;
}

export interface KosningIDSofnunListGetRequest {
    iD: number;
}

export interface KosningIDSvaediGetRequest {
    iD: number;
}

export interface KosningIDSvaediSofnunGetRequest {
    iD: number;
}

/**
 * 
 */
export class KosningApi extends runtime.BaseAPI {

    /**
     * Skilar lista af kosningum
     */
    async kosningGetRaw(requestParameters: KosningGetRequest): Promise<runtime.ApiResponse<Array<KosningBaseDTO>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.isMedmaelakosning !== undefined) {
            queryParameters['isMedmaelakosning'] = requestParameters.isMedmaelakosning;
        }

        if (requestParameters.hasSofnun !== undefined) {
            queryParameters['hasSofnun'] = requestParameters.hasSofnun;
        }

        if (requestParameters.onlyActive !== undefined) {
            queryParameters['onlyActive'] = requestParameters.onlyActive;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("IslandIs", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Kosning`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(KosningBaseDTOFromJSON));
    }

    /**
     * Skilar lista af kosningum
     */
    async kosningGet(requestParameters: KosningGetRequest): Promise<Array<KosningBaseDTO>> {
        const response = await this.kosningGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async kosningIDEinsInfoKennitalaGetRaw(requestParameters: KosningIDEinsInfoKennitalaGetRequest): Promise<runtime.ApiResponse<EinstaklingurKosningInfoDTO>> {
        if (requestParameters.iD === null || requestParameters.iD === undefined) {
            throw new runtime.RequiredError('iD','Required parameter requestParameters.iD was null or undefined when calling kosningIDEinsInfoKennitalaGet.');
        }

        if (requestParameters.kennitala === null || requestParameters.kennitala === undefined) {
            throw new runtime.RequiredError('kennitala','Required parameter requestParameters.kennitala was null or undefined when calling kosningIDEinsInfoKennitalaGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("IslandIs", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Kosning/{ID}/EinsInfo/{Kennitala}`.replace(`{${"ID"}}`, encodeURIComponent(String(requestParameters.iD))).replace(`{${"Kennitala"}}`, encodeURIComponent(String(requestParameters.kennitala))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EinstaklingurKosningInfoDTOFromJSON(jsonValue));
    }

    /**
     */
    async kosningIDEinsInfoKennitalaGet(requestParameters: KosningIDEinsInfoKennitalaGetRequest): Promise<EinstaklingurKosningInfoDTO> {
        const response = await this.kosningIDEinsInfoKennitalaGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async kosningIDGetRaw(requestParameters: KosningIDGetRequest): Promise<runtime.ApiResponse<KosningDTO>> {
        if (requestParameters.iD === null || requestParameters.iD === undefined) {
            throw new runtime.RequiredError('iD','Required parameter requestParameters.iD was null or undefined when calling kosningIDGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("IslandIs", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Kosning/{ID}`.replace(`{${"ID"}}`, encodeURIComponent(String(requestParameters.iD))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => KosningDTOFromJSON(jsonValue));
    }

    /**
     */
    async kosningIDGet(requestParameters: KosningIDGetRequest): Promise<KosningDTO> {
        const response = await this.kosningIDGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async kosningIDSofnunListGetRaw(requestParameters: KosningIDSofnunListGetRequest): Promise<runtime.ApiResponse<Array<MedmaelasofnunExtendedDTO>>> {
        if (requestParameters.iD === null || requestParameters.iD === undefined) {
            throw new runtime.RequiredError('iD','Required parameter requestParameters.iD was null or undefined when calling kosningIDSofnunListGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("IslandIs", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Kosning/{ID}/SofnunList`.replace(`{${"ID"}}`, encodeURIComponent(String(requestParameters.iD))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MedmaelasofnunExtendedDTOFromJSON));
    }

    /**
     */
    async kosningIDSofnunListGet(requestParameters: KosningIDSofnunListGetRequest): Promise<Array<MedmaelasofnunExtendedDTO>> {
        const response = await this.kosningIDSofnunListGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async kosningIDSvaediGetRaw(requestParameters: KosningIDSvaediGetRequest): Promise<runtime.ApiResponse<Array<SvaediDTO>>> {
        if (requestParameters.iD === null || requestParameters.iD === undefined) {
            throw new runtime.RequiredError('iD','Required parameter requestParameters.iD was null or undefined when calling kosningIDSvaediGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("IslandIs", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Kosning/{ID}/Svaedi`.replace(`{${"ID"}}`, encodeURIComponent(String(requestParameters.iD))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SvaediDTOFromJSON));
    }

    /**
     */
    async kosningIDSvaediGet(requestParameters: KosningIDSvaediGetRequest): Promise<Array<SvaediDTO>> {
        const response = await this.kosningIDSvaediGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async kosningIDSvaediSofnunGetRaw(requestParameters: KosningIDSvaediSofnunGetRequest): Promise<runtime.ApiResponse<Array<SvaediDTO>>> {
        if (requestParameters.iD === null || requestParameters.iD === undefined) {
            throw new runtime.RequiredError('iD','Required parameter requestParameters.iD was null or undefined when calling kosningIDSvaediSofnunGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("IslandIs", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Kosning/{ID}/SvaediSofnun`.replace(`{${"ID"}}`, encodeURIComponent(String(requestParameters.iD))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SvaediDTOFromJSON));
    }

    /**
     */
    async kosningIDSvaediSofnunGet(requestParameters: KosningIDSvaediSofnunGetRequest): Promise<Array<SvaediDTO>> {
        const response = await this.kosningIDSvaediSofnunGetRaw(requestParameters);
        return await response.value();
    }

}
