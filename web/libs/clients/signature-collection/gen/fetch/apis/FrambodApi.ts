/* tslint:disable */
/* eslint-disable */
/**
 * MedmaeliRestAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    FrambodBaseDTO,
    FrambodBaseDTOFromJSON,
    FrambodBaseDTOToJSON,
    FrambodDTO,
    FrambodDTOFromJSON,
    FrambodDTOToJSON,
    FrambodRequestDTO,
    FrambodRequestDTOFromJSON,
    FrambodRequestDTOToJSON,
    MedmaelalistiDTO,
    MedmaelalistiDTOFromJSON,
    MedmaelalistiDTOToJSON,
    UmbodBaseDTO,
    UmbodBaseDTOFromJSON,
    UmbodBaseDTOToJSON,
} from '../models';

export interface FrambodGetRequest {
    sofnunID?: number;
    kosningID?: number;
}

export interface FrambodIDAddUmbodPostRequest {
    iD: number;
    requestBody?: Array<string>;
}

export interface FrambodIDDeleteRequest {
    iD: number;
}

export interface FrambodIDGetRequest {
    iD: number;
}

export interface FrambodIDMedmaelalistarGetRequest {
    iD: number;
}

export interface FrambodIDRemoveUmbodKennitalaGetRequest {
    iD: number;
    kennitala: string;
}

export interface FrambodPostRequest {
    frambodRequestDTO?: FrambodRequestDTO;
}

/**
 * 
 */
export class FrambodApi extends runtime.BaseAPI {

    /**
     */
    async frambodGetRaw(requestParameters: FrambodGetRequest): Promise<runtime.ApiResponse<Array<FrambodBaseDTO>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.sofnunID !== undefined) {
            queryParameters['sofnunID'] = requestParameters.sofnunID;
        }

        if (requestParameters.kosningID !== undefined) {
            queryParameters['kosningID'] = requestParameters.kosningID;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("IslandIs", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Frambod`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FrambodBaseDTOFromJSON));
    }

    /**
     */
    async frambodGet(requestParameters: FrambodGetRequest): Promise<Array<FrambodBaseDTO>> {
        const response = await this.frambodGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Ath. þarfnast skoðunar
     */
    async frambodIDAddUmbodPostRaw(requestParameters: FrambodIDAddUmbodPostRequest): Promise<runtime.ApiResponse<FrambodDTO>> {
        if (requestParameters.iD === null || requestParameters.iD === undefined) {
            throw new runtime.RequiredError('iD','Required parameter requestParameters.iD was null or undefined when calling frambodIDAddUmbodPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("IslandIs", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Frambod/{ID}/AddUmbod`.replace(`{${"ID"}}`, encodeURIComponent(String(requestParameters.iD))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => FrambodDTOFromJSON(jsonValue));
    }

    /**
     * Ath. þarfnast skoðunar
     */
    async frambodIDAddUmbodPost(requestParameters: FrambodIDAddUmbodPostRequest): Promise<FrambodDTO> {
        const response = await this.frambodIDAddUmbodPostRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async frambodIDDeleteRaw(requestParameters: FrambodIDDeleteRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.iD === null || requestParameters.iD === undefined) {
            throw new runtime.RequiredError('iD','Required parameter requestParameters.iD was null or undefined when calling frambodIDDelete.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("IslandIs", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Frambod/{ID}`.replace(`{${"ID"}}`, encodeURIComponent(String(requestParameters.iD))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async frambodIDDelete(requestParameters: FrambodIDDeleteRequest): Promise<void> {
        await this.frambodIDDeleteRaw(requestParameters);
    }

    /**
     */
    async frambodIDGetRaw(requestParameters: FrambodIDGetRequest): Promise<runtime.ApiResponse<FrambodDTO>> {
        if (requestParameters.iD === null || requestParameters.iD === undefined) {
            throw new runtime.RequiredError('iD','Required parameter requestParameters.iD was null or undefined when calling frambodIDGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("IslandIs", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Frambod/{ID}`.replace(`{${"ID"}}`, encodeURIComponent(String(requestParameters.iD))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => FrambodDTOFromJSON(jsonValue));
    }

    /**
     */
    async frambodIDGet(requestParameters: FrambodIDGetRequest): Promise<FrambodDTO> {
        const response = await this.frambodIDGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async frambodIDMedmaelalistarGetRaw(requestParameters: FrambodIDMedmaelalistarGetRequest): Promise<runtime.ApiResponse<Array<MedmaelalistiDTO>>> {
        if (requestParameters.iD === null || requestParameters.iD === undefined) {
            throw new runtime.RequiredError('iD','Required parameter requestParameters.iD was null or undefined when calling frambodIDMedmaelalistarGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("IslandIs", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Frambod/{ID}/Medmaelalistar`.replace(`{${"ID"}}`, encodeURIComponent(String(requestParameters.iD))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MedmaelalistiDTOFromJSON));
    }

    /**
     */
    async frambodIDMedmaelalistarGet(requestParameters: FrambodIDMedmaelalistarGetRequest): Promise<Array<MedmaelalistiDTO>> {
        const response = await this.frambodIDMedmaelalistarGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Ath. þarfnast skoðunar
     */
    async frambodIDRemoveUmbodKennitalaGetRaw(requestParameters: FrambodIDRemoveUmbodKennitalaGetRequest): Promise<runtime.ApiResponse<UmbodBaseDTO>> {
        if (requestParameters.iD === null || requestParameters.iD === undefined) {
            throw new runtime.RequiredError('iD','Required parameter requestParameters.iD was null or undefined when calling frambodIDRemoveUmbodKennitalaGet.');
        }

        if (requestParameters.kennitala === null || requestParameters.kennitala === undefined) {
            throw new runtime.RequiredError('kennitala','Required parameter requestParameters.kennitala was null or undefined when calling frambodIDRemoveUmbodKennitalaGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("IslandIs", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Frambod/{ID}/RemoveUmbod/{Kennitala}`.replace(`{${"ID"}}`, encodeURIComponent(String(requestParameters.iD))).replace(`{${"Kennitala"}}`, encodeURIComponent(String(requestParameters.kennitala))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UmbodBaseDTOFromJSON(jsonValue));
    }

    /**
     * Ath. þarfnast skoðunar
     */
    async frambodIDRemoveUmbodKennitalaGet(requestParameters: FrambodIDRemoveUmbodKennitalaGetRequest): Promise<UmbodBaseDTO> {
        const response = await this.frambodIDRemoveUmbodKennitalaGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async frambodPostRaw(requestParameters: FrambodPostRequest): Promise<runtime.ApiResponse<FrambodDTO>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("IslandIs", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Frambod`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FrambodRequestDTOToJSON(requestParameters.frambodRequestDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => FrambodDTOFromJSON(jsonValue));
    }

    /**
     */
    async frambodPost(requestParameters: FrambodPostRequest): Promise<FrambodDTO> {
        const response = await this.frambodPostRaw(requestParameters);
        return await response.value();
    }

}
