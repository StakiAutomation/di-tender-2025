/* tslint:disable */
/* eslint-disable */
/**
 * MedmaeliRestAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    MedmaeliBaseDTO,
    MedmaeliBaseDTOFromJSON,
    MedmaeliBaseDTOToJSON,
    MedmaeliDTO,
    MedmaeliDTOFromJSON,
    MedmaeliDTOToJSON,
} from '../models';

export interface MedmaeliIDDeleteRequest {
    iD: number;
}

export interface MedmaeliIDUpdateBlsPatchRequest {
    iD: number;
    blsNr?: number;
}

export interface MedmaeliKennitalaMedmaeliGetRequest {
    kennitala: string;
    sofnunID?: number;
}

/**
 * 
 */
export class MedmaeliApi extends runtime.BaseAPI {

    /**
     */
    async medmaeliIDDeleteRaw(requestParameters: MedmaeliIDDeleteRequest): Promise<runtime.ApiResponse<MedmaeliBaseDTO>> {
        if (requestParameters.iD === null || requestParameters.iD === undefined) {
            throw new runtime.RequiredError('iD','Required parameter requestParameters.iD was null or undefined when calling medmaeliIDDelete.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("IslandIs", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Medmaeli/{ID}`.replace(`{${"ID"}}`, encodeURIComponent(String(requestParameters.iD))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MedmaeliBaseDTOFromJSON(jsonValue));
    }

    /**
     */
    async medmaeliIDDelete(requestParameters: MedmaeliIDDeleteRequest): Promise<MedmaeliBaseDTO> {
        const response = await this.medmaeliIDDeleteRaw(requestParameters);
        return await response.value();
    }

    /**
     * Aðeins m0gulegt fyrir skrifleg meðmæli
     * Uppfærir blaðsíðunúmer skriflegs meðmælis
     */
    async medmaeliIDUpdateBlsPatchRaw(requestParameters: MedmaeliIDUpdateBlsPatchRequest): Promise<runtime.ApiResponse<MedmaeliBaseDTO>> {
        if (requestParameters.iD === null || requestParameters.iD === undefined) {
            throw new runtime.RequiredError('iD','Required parameter requestParameters.iD was null or undefined when calling medmaeliIDUpdateBlsPatch.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.blsNr !== undefined) {
            queryParameters['blsNr'] = requestParameters.blsNr;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("IslandIs", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Medmaeli/{ID}/UpdateBls`.replace(`{${"ID"}}`, encodeURIComponent(String(requestParameters.iD))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MedmaeliBaseDTOFromJSON(jsonValue));
    }

    /**
     * Aðeins m0gulegt fyrir skrifleg meðmæli
     * Uppfærir blaðsíðunúmer skriflegs meðmælis
     */
    async medmaeliIDUpdateBlsPatch(requestParameters: MedmaeliIDUpdateBlsPatchRequest): Promise<MedmaeliBaseDTO> {
        const response = await this.medmaeliIDUpdateBlsPatchRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async medmaeliKennitalaMedmaeliGetRaw(requestParameters: MedmaeliKennitalaMedmaeliGetRequest): Promise<runtime.ApiResponse<Array<MedmaeliDTO>>> {
        if (requestParameters.kennitala === null || requestParameters.kennitala === undefined) {
            throw new runtime.RequiredError('kennitala','Required parameter requestParameters.kennitala was null or undefined when calling medmaeliKennitalaMedmaeliGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.sofnunID !== undefined) {
            queryParameters['sofnunID'] = requestParameters.sofnunID;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("IslandIs", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Medmaeli/{Kennitala}/Medmaeli`.replace(`{${"Kennitala"}}`, encodeURIComponent(String(requestParameters.kennitala))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MedmaeliDTOFromJSON));
    }

    /**
     */
    async medmaeliKennitalaMedmaeliGet(requestParameters: MedmaeliKennitalaMedmaeliGetRequest): Promise<Array<MedmaeliDTO>> {
        const response = await this.medmaeliKennitalaMedmaeliGetRaw(requestParameters);
        return await response.value();
    }

}
