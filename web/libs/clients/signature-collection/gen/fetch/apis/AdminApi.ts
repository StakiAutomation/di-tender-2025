/* tslint:disable */
/* eslint-disable */
/**
 * MedmaeliRestAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateListabokstafurDTO,
    CreateListabokstafurDTOFromJSON,
    CreateListabokstafurDTOToJSON,
    CreateSofnunRequestDTO,
    CreateSofnunRequestDTOFromJSON,
    CreateSofnunRequestDTOToJSON,
    EinstaklingurKosningInfoDTO,
    EinstaklingurKosningInfoDTOFromJSON,
    EinstaklingurKosningInfoDTOToJSON,
    FrambodDTO,
    FrambodDTOFromJSON,
    FrambodDTOToJSON,
    FrambodRequestDTO,
    FrambodRequestDTOFromJSON,
    FrambodRequestDTOToJSON,
    ListabokstafurBaseDTO,
    ListabokstafurBaseDTOFromJSON,
    ListabokstafurBaseDTOToJSON,
    MedmaelalistarRequestDTO,
    MedmaelalistarRequestDTOFromJSON,
    MedmaelalistarRequestDTOToJSON,
    MedmaelalistiBaseDTO,
    MedmaelalistiBaseDTOFromJSON,
    MedmaelalistiBaseDTOToJSON,
    MedmaelalistiDTO,
    MedmaelalistiDTOFromJSON,
    MedmaelalistiDTOToJSON,
    MedmaelasofnunDTO,
    MedmaelasofnunDTOFromJSON,
    MedmaelasofnunDTOToJSON,
    MedmaeliBaseDTO,
    MedmaeliBaseDTOFromJSON,
    MedmaeliBaseDTOToJSON,
    MedmaeliBulkRequestDTO,
    MedmaeliBulkRequestDTOFromJSON,
    MedmaeliBulkRequestDTOToJSON,
    MedmaeliBulkResponseDTO,
    MedmaeliBulkResponseDTOFromJSON,
    MedmaeliBulkResponseDTOToJSON,
    MedmaeliDTO,
    MedmaeliDTOFromJSON,
    MedmaeliDTOToJSON,
    SvaediExtendedDTO,
    SvaediExtendedDTOFromJSON,
    SvaediExtendedDTOToJSON,
} from '../models';

export interface AdminFrambodIDDeleteRequest {
    iD: number;
}

export interface AdminFrambodPostRequest {
    frambodRequestDTO?: FrambodRequestDTO;
}

export interface AdminKosningIDEinsInfoKennitalaGetRequest {
    iD: number;
    kennitala: string;
}

export interface AdminListabokstafurPostRequest {
    createListabokstafurDTO?: CreateListabokstafurDTO;
}

export interface AdminMedmaelalistiIDComparePostRequest {
    iD: number;
    requestBody?: Array<string>;
}

export interface AdminMedmaelalistiIDDeleteRequest {
    iD: number;
}

export interface AdminMedmaelalistiIDExtendTimePatchRequest {
    iD: number;
    newEndDate?: Date;
}

export interface AdminMedmaelalistiIDLockListPatchRequest {
    iD: number;
    shouldLock?: boolean;
}

export interface AdminMedmaelalistiIDMedmaeliBulkPostRequest {
    iD: number;
    medmaeliBulkRequestDTO?: MedmaeliBulkRequestDTO;
}

export interface AdminMedmaelalistiIDToggleListPatchRequest {
    iD: number;
    shouldToggle?: boolean;
}

export interface AdminMedmaelalistiPostRequest {
    medmaelalistarRequestDTO?: MedmaelalistarRequestDTO;
}

export interface AdminMedmaelasofnunIDComparePostRequest {
    iD: number;
    requestBody?: Array<string>;
}

export interface AdminMedmaelasofnunIDEinsInfoKennitalaGetRequest {
    iD: number;
    kennitala: string;
}

export interface AdminMedmaelasofnunIDExtendTimePatchRequest {
    iD: number;
    newEndDate?: Date;
}

export interface AdminMedmaelasofnunIDSvaediInfoSvaediIDGetRequest {
    iD: number;
    svaediID: number;
}

export interface AdminMedmaelasofnunIDToggleSofnunPatchRequest {
    iD: number;
}

export interface AdminMedmaelasofnunPostRequest {
    createSofnunRequestDTO?: CreateSofnunRequestDTO;
}

export interface AdminMedmaeliIDDeleteRequest {
    iD: number;
}

export interface AdminMedmaeliIDUpdateBlsPatchRequest {
    iD: number;
    blsNr?: number;
}

/**
 * 
 */
export class AdminApi extends runtime.BaseAPI {

    /**
     */
    async adminFrambodIDDeleteRaw(requestParameters: AdminFrambodIDDeleteRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.iD === null || requestParameters.iD === undefined) {
            throw new runtime.RequiredError('iD','Required parameter requestParameters.iD was null or undefined when calling adminFrambodIDDelete.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("IslandIs", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Admin/Frambod/{ID}`.replace(`{${"ID"}}`, encodeURIComponent(String(requestParameters.iD))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async adminFrambodIDDelete(requestParameters: AdminFrambodIDDeleteRequest): Promise<void> {
        await this.adminFrambodIDDeleteRaw(requestParameters);
    }

    /**
     */
    async adminFrambodPostRaw(requestParameters: AdminFrambodPostRequest): Promise<runtime.ApiResponse<FrambodDTO>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("IslandIs", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Admin/Frambod`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FrambodRequestDTOToJSON(requestParameters.frambodRequestDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => FrambodDTOFromJSON(jsonValue));
    }

    /**
     */
    async adminFrambodPost(requestParameters: AdminFrambodPostRequest): Promise<FrambodDTO> {
        const response = await this.adminFrambodPostRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async adminKosningIDEinsInfoKennitalaGetRaw(requestParameters: AdminKosningIDEinsInfoKennitalaGetRequest): Promise<runtime.ApiResponse<EinstaklingurKosningInfoDTO>> {
        if (requestParameters.iD === null || requestParameters.iD === undefined) {
            throw new runtime.RequiredError('iD','Required parameter requestParameters.iD was null or undefined when calling adminKosningIDEinsInfoKennitalaGet.');
        }

        if (requestParameters.kennitala === null || requestParameters.kennitala === undefined) {
            throw new runtime.RequiredError('kennitala','Required parameter requestParameters.kennitala was null or undefined when calling adminKosningIDEinsInfoKennitalaGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("IslandIs", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Admin/Kosning/{ID}/EinsInfo/{Kennitala}`.replace(`{${"ID"}}`, encodeURIComponent(String(requestParameters.iD))).replace(`{${"Kennitala"}}`, encodeURIComponent(String(requestParameters.kennitala))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EinstaklingurKosningInfoDTOFromJSON(jsonValue));
    }

    /**
     */
    async adminKosningIDEinsInfoKennitalaGet(requestParameters: AdminKosningIDEinsInfoKennitalaGetRequest): Promise<EinstaklingurKosningInfoDTO> {
        const response = await this.adminKosningIDEinsInfoKennitalaGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Aðgerðin bætir við nýrri listabókstafsskráningu fyrir gefna meðmælasöfnun og kennitölu.
     */
    async adminListabokstafurPostRaw(requestParameters: AdminListabokstafurPostRequest): Promise<runtime.ApiResponse<ListabokstafurBaseDTO>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("IslandIs", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Admin/Listabokstafur`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateListabokstafurDTOToJSON(requestParameters.createListabokstafurDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ListabokstafurBaseDTOFromJSON(jsonValue));
    }

    /**
     * Aðgerðin bætir við nýrri listabókstafsskráningu fyrir gefna meðmælasöfnun og kennitölu.
     */
    async adminListabokstafurPost(requestParameters: AdminListabokstafurPostRequest): Promise<ListabokstafurBaseDTO> {
        const response = await this.adminListabokstafurPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Skilar meðmælum sem tilheyra gefnum kennitölum sem finnast á gefnum meðmælalista
     */
    async adminMedmaelalistiIDComparePostRaw(requestParameters: AdminMedmaelalistiIDComparePostRequest): Promise<runtime.ApiResponse<Array<MedmaeliDTO>>> {
        if (requestParameters.iD === null || requestParameters.iD === undefined) {
            throw new runtime.RequiredError('iD','Required parameter requestParameters.iD was null or undefined when calling adminMedmaelalistiIDComparePost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("IslandIs", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Admin/Medmaelalisti/{ID}/Compare`.replace(`{${"ID"}}`, encodeURIComponent(String(requestParameters.iD))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MedmaeliDTOFromJSON));
    }

    /**
     * Skilar meðmælum sem tilheyra gefnum kennitölum sem finnast á gefnum meðmælalista
     */
    async adminMedmaelalistiIDComparePost(requestParameters: AdminMedmaelalistiIDComparePostRequest): Promise<Array<MedmaeliDTO>> {
        const response = await this.adminMedmaelalistiIDComparePostRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async adminMedmaelalistiIDDeleteRaw(requestParameters: AdminMedmaelalistiIDDeleteRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.iD === null || requestParameters.iD === undefined) {
            throw new runtime.RequiredError('iD','Required parameter requestParameters.iD was null or undefined when calling adminMedmaelalistiIDDelete.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("IslandIs", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Admin/Medmaelalisti/{ID}`.replace(`{${"ID"}}`, encodeURIComponent(String(requestParameters.iD))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async adminMedmaelalistiIDDelete(requestParameters: AdminMedmaelalistiIDDeleteRequest): Promise<void> {
        await this.adminMedmaelalistiIDDeleteRaw(requestParameters);
    }

    /**
     * Aðeins hægt að framkvæma eftir að meðmælasöfnun hefur verið merkt úrvinnslu lokið.
     * Framlengir gefinn meðmælalista
     */
    async adminMedmaelalistiIDExtendTimePatchRaw(requestParameters: AdminMedmaelalistiIDExtendTimePatchRequest): Promise<runtime.ApiResponse<MedmaelalistiBaseDTO>> {
        if (requestParameters.iD === null || requestParameters.iD === undefined) {
            throw new runtime.RequiredError('iD','Required parameter requestParameters.iD was null or undefined when calling adminMedmaelalistiIDExtendTimePatch.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.newEndDate !== undefined) {
            queryParameters['newEndDate'] = (requestParameters.newEndDate as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("IslandIs", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Admin/Medmaelalisti/{ID}/ExtendTime`.replace(`{${"ID"}}`, encodeURIComponent(String(requestParameters.iD))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MedmaelalistiBaseDTOFromJSON(jsonValue));
    }

    /**
     * Aðeins hægt að framkvæma eftir að meðmælasöfnun hefur verið merkt úrvinnslu lokið.
     * Framlengir gefinn meðmælalista
     */
    async adminMedmaelalistiIDExtendTimePatch(requestParameters: AdminMedmaelalistiIDExtendTimePatchRequest): Promise<MedmaelalistiBaseDTO> {
        const response = await this.adminMedmaelalistiIDExtendTimePatchRaw(requestParameters);
        return await response.value();
    }

    /**
     * Lokar meðmælalista sem skilað hefur verið inn
     */
    async adminMedmaelalistiIDLockListPatchRaw(requestParameters: AdminMedmaelalistiIDLockListPatchRequest): Promise<runtime.ApiResponse<MedmaelalistiBaseDTO>> {
        if (requestParameters.iD === null || requestParameters.iD === undefined) {
            throw new runtime.RequiredError('iD','Required parameter requestParameters.iD was null or undefined when calling adminMedmaelalistiIDLockListPatch.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.shouldLock !== undefined) {
            queryParameters['shouldLock'] = requestParameters.shouldLock;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("IslandIs", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Admin/Medmaelalisti/{ID}/LockList`.replace(`{${"ID"}}`, encodeURIComponent(String(requestParameters.iD))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MedmaelalistiBaseDTOFromJSON(jsonValue));
    }

    /**
     * Lokar meðmælalista sem skilað hefur verið inn
     */
    async adminMedmaelalistiIDLockListPatch(requestParameters: AdminMedmaelalistiIDLockListPatchRequest): Promise<MedmaelalistiBaseDTO> {
        const response = await this.adminMedmaelalistiIDLockListPatchRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async adminMedmaelalistiIDMedmaeliBulkPostRaw(requestParameters: AdminMedmaelalistiIDMedmaeliBulkPostRequest): Promise<runtime.ApiResponse<MedmaeliBulkResponseDTO>> {
        if (requestParameters.iD === null || requestParameters.iD === undefined) {
            throw new runtime.RequiredError('iD','Required parameter requestParameters.iD was null or undefined when calling adminMedmaelalistiIDMedmaeliBulkPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("IslandIs", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Admin/Medmaelalisti/{ID}/Medmaeli/Bulk`.replace(`{${"ID"}}`, encodeURIComponent(String(requestParameters.iD))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MedmaeliBulkRequestDTOToJSON(requestParameters.medmaeliBulkRequestDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MedmaeliBulkResponseDTOFromJSON(jsonValue));
    }

    /**
     */
    async adminMedmaelalistiIDMedmaeliBulkPost(requestParameters: AdminMedmaelalistiIDMedmaeliBulkPostRequest): Promise<MedmaeliBulkResponseDTO> {
        const response = await this.adminMedmaelalistiIDMedmaeliBulkPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Merkir að úrvinnslu sé lokið á ákveðnum meðmælalista þ.e. að lista hafi verið skilað inn og öll skrifleg meðmæli lesin inn.  Hægt að opna aftur fyrir úrvinnslu.
     * Merkir að úrvinnslu sé lokið á ákveðnum meðmælalista.
     */
    async adminMedmaelalistiIDToggleListPatchRaw(requestParameters: AdminMedmaelalistiIDToggleListPatchRequest): Promise<runtime.ApiResponse<MedmaelalistiBaseDTO>> {
        if (requestParameters.iD === null || requestParameters.iD === undefined) {
            throw new runtime.RequiredError('iD','Required parameter requestParameters.iD was null or undefined when calling adminMedmaelalistiIDToggleListPatch.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.shouldToggle !== undefined) {
            queryParameters['shouldToggle'] = requestParameters.shouldToggle;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("IslandIs", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Admin/Medmaelalisti/{ID}/ToggleList`.replace(`{${"ID"}}`, encodeURIComponent(String(requestParameters.iD))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MedmaelalistiBaseDTOFromJSON(jsonValue));
    }

    /**
     * Merkir að úrvinnslu sé lokið á ákveðnum meðmælalista þ.e. að lista hafi verið skilað inn og öll skrifleg meðmæli lesin inn.  Hægt að opna aftur fyrir úrvinnslu.
     * Merkir að úrvinnslu sé lokið á ákveðnum meðmælalista.
     */
    async adminMedmaelalistiIDToggleListPatch(requestParameters: AdminMedmaelalistiIDToggleListPatchRequest): Promise<MedmaelalistiBaseDTO> {
        const response = await this.adminMedmaelalistiIDToggleListPatchRaw(requestParameters);
        return await response.value();
    }

    /**
     * Bætir við nýjum meðmælalistum fyrir þegar stofnað framboð
     */
    async adminMedmaelalistiPostRaw(requestParameters: AdminMedmaelalistiPostRequest): Promise<runtime.ApiResponse<Array<MedmaelalistiDTO>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("IslandIs", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Admin/Medmaelalisti`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MedmaelalistarRequestDTOToJSON(requestParameters.medmaelalistarRequestDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MedmaelalistiDTOFromJSON));
    }

    /**
     * Bætir við nýjum meðmælalistum fyrir þegar stofnað framboð
     */
    async adminMedmaelalistiPost(requestParameters: AdminMedmaelalistiPostRequest): Promise<Array<MedmaelalistiDTO>> {
        const response = await this.adminMedmaelalistiPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Skilar meðmælum sem tilheyra gefnum kennitölum sem finnast á gefinni meðmælasöfnun
     */
    async adminMedmaelasofnunIDComparePostRaw(requestParameters: AdminMedmaelasofnunIDComparePostRequest): Promise<runtime.ApiResponse<Array<MedmaeliDTO>>> {
        if (requestParameters.iD === null || requestParameters.iD === undefined) {
            throw new runtime.RequiredError('iD','Required parameter requestParameters.iD was null or undefined when calling adminMedmaelasofnunIDComparePost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("IslandIs", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Admin/Medmaelasofnun/{ID}/Compare`.replace(`{${"ID"}}`, encodeURIComponent(String(requestParameters.iD))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MedmaeliDTOFromJSON));
    }

    /**
     * Skilar meðmælum sem tilheyra gefnum kennitölum sem finnast á gefinni meðmælasöfnun
     */
    async adminMedmaelasofnunIDComparePost(requestParameters: AdminMedmaelasofnunIDComparePostRequest): Promise<Array<MedmaeliDTO>> {
        const response = await this.adminMedmaelasofnunIDComparePostRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async adminMedmaelasofnunIDEinsInfoKennitalaGetRaw(requestParameters: AdminMedmaelasofnunIDEinsInfoKennitalaGetRequest): Promise<runtime.ApiResponse<EinstaklingurKosningInfoDTO>> {
        if (requestParameters.iD === null || requestParameters.iD === undefined) {
            throw new runtime.RequiredError('iD','Required parameter requestParameters.iD was null or undefined when calling adminMedmaelasofnunIDEinsInfoKennitalaGet.');
        }

        if (requestParameters.kennitala === null || requestParameters.kennitala === undefined) {
            throw new runtime.RequiredError('kennitala','Required parameter requestParameters.kennitala was null or undefined when calling adminMedmaelasofnunIDEinsInfoKennitalaGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("IslandIs", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Admin/Medmaelasofnun/{ID}/EinsInfo/{Kennitala}`.replace(`{${"ID"}}`, encodeURIComponent(String(requestParameters.iD))).replace(`{${"Kennitala"}}`, encodeURIComponent(String(requestParameters.kennitala))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EinstaklingurKosningInfoDTOFromJSON(jsonValue));
    }

    /**
     */
    async adminMedmaelasofnunIDEinsInfoKennitalaGet(requestParameters: AdminMedmaelasofnunIDEinsInfoKennitalaGetRequest): Promise<EinstaklingurKosningInfoDTO> {
        const response = await this.adminMedmaelasofnunIDEinsInfoKennitalaGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Framlengir gefna meðmælasöfnun
     */
    async adminMedmaelasofnunIDExtendTimePatchRaw(requestParameters: AdminMedmaelasofnunIDExtendTimePatchRequest): Promise<runtime.ApiResponse<MedmaelasofnunDTO>> {
        if (requestParameters.iD === null || requestParameters.iD === undefined) {
            throw new runtime.RequiredError('iD','Required parameter requestParameters.iD was null or undefined when calling adminMedmaelasofnunIDExtendTimePatch.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.newEndDate !== undefined) {
            queryParameters['newEndDate'] = (requestParameters.newEndDate as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("IslandIs", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Admin/Medmaelasofnun/{ID}/ExtendTime`.replace(`{${"ID"}}`, encodeURIComponent(String(requestParameters.iD))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MedmaelasofnunDTOFromJSON(jsonValue));
    }

    /**
     * Framlengir gefna meðmælasöfnun
     */
    async adminMedmaelasofnunIDExtendTimePatch(requestParameters: AdminMedmaelasofnunIDExtendTimePatchRequest): Promise<MedmaelasofnunDTO> {
        const response = await this.adminMedmaelasofnunIDExtendTimePatchRaw(requestParameters);
        return await response.value();
    }

    /**
     * Skilar yfirliti yfir gefið svæði á gefinni meðmælasöfnun
     */
    async adminMedmaelasofnunIDSvaediInfoSvaediIDGetRaw(requestParameters: AdminMedmaelasofnunIDSvaediInfoSvaediIDGetRequest): Promise<runtime.ApiResponse<SvaediExtendedDTO>> {
        if (requestParameters.iD === null || requestParameters.iD === undefined) {
            throw new runtime.RequiredError('iD','Required parameter requestParameters.iD was null or undefined when calling adminMedmaelasofnunIDSvaediInfoSvaediIDGet.');
        }

        if (requestParameters.svaediID === null || requestParameters.svaediID === undefined) {
            throw new runtime.RequiredError('svaediID','Required parameter requestParameters.svaediID was null or undefined when calling adminMedmaelasofnunIDSvaediInfoSvaediIDGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("IslandIs", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Admin/Medmaelasofnun/{ID}/SvaediInfo/{svaediID}`.replace(`{${"ID"}}`, encodeURIComponent(String(requestParameters.iD))).replace(`{${"svaediID"}}`, encodeURIComponent(String(requestParameters.svaediID))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SvaediExtendedDTOFromJSON(jsonValue));
    }

    /**
     * Skilar yfirliti yfir gefið svæði á gefinni meðmælasöfnun
     */
    async adminMedmaelasofnunIDSvaediInfoSvaediIDGet(requestParameters: AdminMedmaelasofnunIDSvaediInfoSvaediIDGetRequest): Promise<SvaediExtendedDTO> {
        const response = await this.adminMedmaelasofnunIDSvaediInfoSvaediIDGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Merkir að allri úrvinnslu fyrri fasa meðmælasöfnunar sé lokið.  Ekki hægt að framkvæma nema ef allir meðmælalistar söfnunarinnar hafi verið merktir úrvinnslu lokið.  Eftir að aðgerð hefur verið framkvæmd opnast fyrir framlengingarfasa.  Einkvæm aðgerð.
     * Merkir að allri úrvinnslu fyrri fasa meðmælasöfnunar sé lokið.
     */
    async adminMedmaelasofnunIDToggleSofnunPatchRaw(requestParameters: AdminMedmaelasofnunIDToggleSofnunPatchRequest): Promise<runtime.ApiResponse<MedmaelasofnunDTO>> {
        if (requestParameters.iD === null || requestParameters.iD === undefined) {
            throw new runtime.RequiredError('iD','Required parameter requestParameters.iD was null or undefined when calling adminMedmaelasofnunIDToggleSofnunPatch.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("IslandIs", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Admin/Medmaelasofnun/{ID}/ToggleSofnun`.replace(`{${"ID"}}`, encodeURIComponent(String(requestParameters.iD))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MedmaelasofnunDTOFromJSON(jsonValue));
    }

    /**
     * Merkir að allri úrvinnslu fyrri fasa meðmælasöfnunar sé lokið.  Ekki hægt að framkvæma nema ef allir meðmælalistar söfnunarinnar hafi verið merktir úrvinnslu lokið.  Eftir að aðgerð hefur verið framkvæmd opnast fyrir framlengingarfasa.  Einkvæm aðgerð.
     * Merkir að allri úrvinnslu fyrri fasa meðmælasöfnunar sé lokið.
     */
    async adminMedmaelasofnunIDToggleSofnunPatch(requestParameters: AdminMedmaelasofnunIDToggleSofnunPatchRequest): Promise<MedmaelasofnunDTO> {
        const response = await this.adminMedmaelasofnunIDToggleSofnunPatchRaw(requestParameters);
        return await response.value();
    }

    /**
     * Býr til nýja meðmælasöfnun
     */
    async adminMedmaelasofnunPostRaw(requestParameters: AdminMedmaelasofnunPostRequest): Promise<runtime.ApiResponse<Array<MedmaelasofnunDTO>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("IslandIs", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Admin/Medmaelasofnun`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateSofnunRequestDTOToJSON(requestParameters.createSofnunRequestDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MedmaelasofnunDTOFromJSON));
    }

    /**
     * Býr til nýja meðmælasöfnun
     */
    async adminMedmaelasofnunPost(requestParameters: AdminMedmaelasofnunPostRequest): Promise<Array<MedmaelasofnunDTO>> {
        const response = await this.adminMedmaelasofnunPostRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async adminMedmaeliIDDeleteRaw(requestParameters: AdminMedmaeliIDDeleteRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.iD === null || requestParameters.iD === undefined) {
            throw new runtime.RequiredError('iD','Required parameter requestParameters.iD was null or undefined when calling adminMedmaeliIDDelete.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("IslandIs", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Admin/Medmaeli/{ID}`.replace(`{${"ID"}}`, encodeURIComponent(String(requestParameters.iD))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async adminMedmaeliIDDelete(requestParameters: AdminMedmaeliIDDeleteRequest): Promise<void> {
        await this.adminMedmaeliIDDeleteRaw(requestParameters);
    }

    /**
     * Aðeins m0gulegt fyrir skrifleg meðmæli
     * Uppfærir blaðsíðunúmer skriflegs meðmælis
     */
    async adminMedmaeliIDUpdateBlsPatchRaw(requestParameters: AdminMedmaeliIDUpdateBlsPatchRequest): Promise<runtime.ApiResponse<MedmaeliBaseDTO>> {
        if (requestParameters.iD === null || requestParameters.iD === undefined) {
            throw new runtime.RequiredError('iD','Required parameter requestParameters.iD was null or undefined when calling adminMedmaeliIDUpdateBlsPatch.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.blsNr !== undefined) {
            queryParameters['blsNr'] = requestParameters.blsNr;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("IslandIs", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Admin/Medmaeli/{ID}/UpdateBls`.replace(`{${"ID"}}`, encodeURIComponent(String(requestParameters.iD))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MedmaeliBaseDTOFromJSON(jsonValue));
    }

    /**
     * Aðeins m0gulegt fyrir skrifleg meðmæli
     * Uppfærir blaðsíðunúmer skriflegs meðmælis
     */
    async adminMedmaeliIDUpdateBlsPatch(requestParameters: AdminMedmaeliIDUpdateBlsPatchRequest): Promise<MedmaeliBaseDTO> {
        const response = await this.adminMedmaeliIDUpdateBlsPatchRaw(requestParameters);
        return await response.value();
    }

}
