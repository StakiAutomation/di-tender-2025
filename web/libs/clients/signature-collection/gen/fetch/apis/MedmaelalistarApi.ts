/* tslint:disable */
/* eslint-disable */
/**
 * MedmaeliRestAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    MedmaelalistarRequestDTO,
    MedmaelalistarRequestDTOFromJSON,
    MedmaelalistarRequestDTOToJSON,
    MedmaelalistiDTO,
    MedmaelalistiDTOFromJSON,
    MedmaelalistiDTOToJSON,
    MedmaelalistiExtendedDTO,
    MedmaelalistiExtendedDTOFromJSON,
    MedmaelalistiExtendedDTOToJSON,
    MedmaeliBaseDTO,
    MedmaeliBaseDTOFromJSON,
    MedmaeliBaseDTOToJSON,
    MedmaeliBulkRequestDTO,
    MedmaeliBulkRequestDTOFromJSON,
    MedmaeliBulkRequestDTOToJSON,
    MedmaeliBulkResponseDTO,
    MedmaeliBulkResponseDTOFromJSON,
    MedmaeliBulkResponseDTOToJSON,
    MedmaeliDTO,
    MedmaeliDTOFromJSON,
    MedmaeliDTOToJSON,
} from '../models';

export interface MedmaelalistarGetRequest {
    frambodID?: number;
    sofnunID?: number;
    kosningID?: number;
    svaediID?: number;
}

export interface MedmaelalistarIDDeleteRequest {
    iD: number;
}

export interface MedmaelalistarIDGetRequest {
    iD: number;
}

export interface MedmaelalistarIDInfoGetRequest {
    iD: number;
}

export interface MedmaelalistarIDMedmaeliBulkPostRequest {
    iD: number;
    medmaeliBulkRequestDTO?: MedmaeliBulkRequestDTO;
}

export interface MedmaelalistarIDMedmaeliGetRequest {
    iD: number;
}

export interface MedmaelalistarIDMedmaeliPostRequest {
    iD: number;
    kennitala?: string;
}

export interface MedmaelalistarPostRequest {
    medmaelalistarRequestDTO?: MedmaelalistarRequestDTO;
}

/**
 * 
 */
export class MedmaelalistarApi extends runtime.BaseAPI {

    /**
     */
    async medmaelalistarGetRaw(requestParameters: MedmaelalistarGetRequest): Promise<runtime.ApiResponse<Array<MedmaelalistiDTO>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.frambodID !== undefined) {
            queryParameters['frambodID'] = requestParameters.frambodID;
        }

        if (requestParameters.sofnunID !== undefined) {
            queryParameters['sofnunID'] = requestParameters.sofnunID;
        }

        if (requestParameters.kosningID !== undefined) {
            queryParameters['kosningID'] = requestParameters.kosningID;
        }

        if (requestParameters.svaediID !== undefined) {
            queryParameters['svaediID'] = requestParameters.svaediID;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("IslandIs", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Medmaelalistar`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MedmaelalistiDTOFromJSON));
    }

    /**
     */
    async medmaelalistarGet(requestParameters: MedmaelalistarGetRequest): Promise<Array<MedmaelalistiDTO>> {
        const response = await this.medmaelalistarGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async medmaelalistarIDDeleteRaw(requestParameters: MedmaelalistarIDDeleteRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.iD === null || requestParameters.iD === undefined) {
            throw new runtime.RequiredError('iD','Required parameter requestParameters.iD was null or undefined when calling medmaelalistarIDDelete.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("IslandIs", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Medmaelalistar/{ID}`.replace(`{${"ID"}}`, encodeURIComponent(String(requestParameters.iD))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async medmaelalistarIDDelete(requestParameters: MedmaelalistarIDDeleteRequest): Promise<void> {
        await this.medmaelalistarIDDeleteRaw(requestParameters);
    }

    /**
     */
    async medmaelalistarIDGetRaw(requestParameters: MedmaelalistarIDGetRequest): Promise<runtime.ApiResponse<MedmaelalistiDTO>> {
        if (requestParameters.iD === null || requestParameters.iD === undefined) {
            throw new runtime.RequiredError('iD','Required parameter requestParameters.iD was null or undefined when calling medmaelalistarIDGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("IslandIs", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Medmaelalistar/{ID}`.replace(`{${"ID"}}`, encodeURIComponent(String(requestParameters.iD))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MedmaelalistiDTOFromJSON(jsonValue));
    }

    /**
     */
    async medmaelalistarIDGet(requestParameters: MedmaelalistarIDGetRequest): Promise<MedmaelalistiDTO> {
        const response = await this.medmaelalistarIDGetRaw(requestParameters);
        return await response.value();
    }

    /**
     * Framboð geta sótt yfirlit fyrir sína eigin lista
     * Skilar yfirliti fyrir ákveðinn meðmælalista
     */
    async medmaelalistarIDInfoGetRaw(requestParameters: MedmaelalistarIDInfoGetRequest): Promise<runtime.ApiResponse<MedmaelalistiExtendedDTO>> {
        if (requestParameters.iD === null || requestParameters.iD === undefined) {
            throw new runtime.RequiredError('iD','Required parameter requestParameters.iD was null or undefined when calling medmaelalistarIDInfoGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("IslandIs", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Medmaelalistar/{ID}/Info`.replace(`{${"ID"}}`, encodeURIComponent(String(requestParameters.iD))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MedmaelalistiExtendedDTOFromJSON(jsonValue));
    }

    /**
     * Framboð geta sótt yfirlit fyrir sína eigin lista
     * Skilar yfirliti fyrir ákveðinn meðmælalista
     */
    async medmaelalistarIDInfoGet(requestParameters: MedmaelalistarIDInfoGetRequest): Promise<MedmaelalistiExtendedDTO> {
        const response = await this.medmaelalistarIDInfoGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async medmaelalistarIDMedmaeliBulkPostRaw(requestParameters: MedmaelalistarIDMedmaeliBulkPostRequest): Promise<runtime.ApiResponse<MedmaeliBulkResponseDTO>> {
        if (requestParameters.iD === null || requestParameters.iD === undefined) {
            throw new runtime.RequiredError('iD','Required parameter requestParameters.iD was null or undefined when calling medmaelalistarIDMedmaeliBulkPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("IslandIs", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Medmaelalistar/{ID}/Medmaeli/Bulk`.replace(`{${"ID"}}`, encodeURIComponent(String(requestParameters.iD))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MedmaeliBulkRequestDTOToJSON(requestParameters.medmaeliBulkRequestDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MedmaeliBulkResponseDTOFromJSON(jsonValue));
    }

    /**
     */
    async medmaelalistarIDMedmaeliBulkPost(requestParameters: MedmaelalistarIDMedmaeliBulkPostRequest): Promise<MedmaeliBulkResponseDTO> {
        const response = await this.medmaelalistarIDMedmaeliBulkPostRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async medmaelalistarIDMedmaeliGetRaw(requestParameters: MedmaelalistarIDMedmaeliGetRequest): Promise<runtime.ApiResponse<Array<MedmaeliDTO>>> {
        if (requestParameters.iD === null || requestParameters.iD === undefined) {
            throw new runtime.RequiredError('iD','Required parameter requestParameters.iD was null or undefined when calling medmaelalistarIDMedmaeliGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("IslandIs", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Medmaelalistar/{ID}/Medmaeli`.replace(`{${"ID"}}`, encodeURIComponent(String(requestParameters.iD))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MedmaeliDTOFromJSON));
    }

    /**
     */
    async medmaelalistarIDMedmaeliGet(requestParameters: MedmaelalistarIDMedmaeliGetRequest): Promise<Array<MedmaeliDTO>> {
        const response = await this.medmaelalistarIDMedmaeliGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async medmaelalistarIDMedmaeliPostRaw(requestParameters: MedmaelalistarIDMedmaeliPostRequest): Promise<runtime.ApiResponse<MedmaeliBaseDTO>> {
        if (requestParameters.iD === null || requestParameters.iD === undefined) {
            throw new runtime.RequiredError('iD','Required parameter requestParameters.iD was null or undefined when calling medmaelalistarIDMedmaeliPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.kennitala !== undefined) {
            queryParameters['kennitala'] = requestParameters.kennitala;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("IslandIs", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Medmaelalistar/{ID}/Medmaeli`.replace(`{${"ID"}}`, encodeURIComponent(String(requestParameters.iD))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MedmaeliBaseDTOFromJSON(jsonValue));
    }

    /**
     */
    async medmaelalistarIDMedmaeliPost(requestParameters: MedmaelalistarIDMedmaeliPostRequest): Promise<MedmaeliBaseDTO> {
        const response = await this.medmaelalistarIDMedmaeliPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Bætir við nýjum meðmælalistum fyrir þegar stofnað framboð
     */
    async medmaelalistarPostRaw(requestParameters: MedmaelalistarPostRequest): Promise<runtime.ApiResponse<Array<MedmaelalistiDTO>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("IslandIs", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/Medmaelalistar`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MedmaelalistarRequestDTOToJSON(requestParameters.medmaelalistarRequestDTO),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MedmaelalistiDTOFromJSON));
    }

    /**
     * Bætir við nýjum meðmælalistum fyrir þegar stofnað framboð
     */
    async medmaelalistarPost(requestParameters: MedmaelalistarPostRequest): Promise<Array<MedmaelalistiDTO>> {
        const response = await this.medmaelalistarPostRaw(requestParameters);
        return await response.value();
    }

}
