/* tslint:disable */
/* eslint-disable */
/**
 * Judicial System xRoad robot API
 * This is the xRoad robot API for the judicial system.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Defender,
    DefenderFromJSON,
    DefenderToJSON,
} from '../models';

export interface DefenderControllerGetLawyerRequest {
    nationalId: string;
}

/**
 * 
 */
export class DefendersApi extends runtime.BaseAPI {

    /**
     */
    async defenderControllerGetLawyerRaw(requestParameters: DefenderControllerGetLawyerRequest): Promise<runtime.ApiResponse<Defender>> {
        if (requestParameters.nationalId === null || requestParameters.nationalId === undefined) {
            throw new runtime.RequiredError('nationalId','Required parameter requestParameters.nationalId was null or undefined when calling defenderControllerGetLawyer.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/defender/{nationalId}`.replace(`{${"nationalId"}}`, encodeURIComponent(String(requestParameters.nationalId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DefenderFromJSON(jsonValue));
    }

    /**
     */
    async defenderControllerGetLawyer(requestParameters: DefenderControllerGetLawyerRequest): Promise<Defender> {
        const response = await this.defenderControllerGetLawyerRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async defenderControllerGetLawyersRaw(): Promise<runtime.ApiResponse<Array<Defender>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/defenders`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DefenderFromJSON));
    }

    /**
     */
    async defenderControllerGetLawyers(): Promise<Array<Defender>> {
        const response = await this.defenderControllerGetLawyersRaw();
        return await response.value();
    }

}
