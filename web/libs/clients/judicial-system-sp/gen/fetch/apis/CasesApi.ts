/* tslint:disable */
/* eslint-disable */
/**
 * Judicial System xRoad robot API
 * This is the xRoad robot API for the judicial system.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CaseResponse,
    CaseResponseFromJSON,
    CaseResponseToJSON,
    CasesResponse,
    CasesResponseFromJSON,
    CasesResponseToJSON,
    SubpoenaResponse,
    SubpoenaResponseFromJSON,
    SubpoenaResponseToJSON,
    UpdateSubpoenaDto,
    UpdateSubpoenaDtoFromJSON,
    UpdateSubpoenaDtoToJSON,
} from '../models';

export interface CaseControllerGetAllCasesRequest {
    locale?: string;
}

export interface CaseControllerGetCaseRequest {
    caseId: string;
    locale?: string;
}

export interface CaseControllerGetSubpoenaRequest {
    caseId: string;
    locale?: string;
}

export interface CaseControllerUpdateSubpoenaRequest {
    caseId: string;
    updateSubpoenaDto: UpdateSubpoenaDto;
    locale?: string;
}

/**
 * 
 */
export class CasesApi extends runtime.BaseAPI {

    /**
     */
    async caseControllerGetAllCasesRaw(requestParameters: CaseControllerGetAllCasesRequest): Promise<runtime.ApiResponse<Array<CasesResponse>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.locale !== undefined) {
            queryParameters['locale'] = requestParameters.locale;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/cases`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CasesResponseFromJSON));
    }

    /**
     */
    async caseControllerGetAllCases(requestParameters: CaseControllerGetAllCasesRequest): Promise<Array<CasesResponse>> {
        const response = await this.caseControllerGetAllCasesRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async caseControllerGetCaseRaw(requestParameters: CaseControllerGetCaseRequest): Promise<runtime.ApiResponse<CaseResponse>> {
        if (requestParameters.caseId === null || requestParameters.caseId === undefined) {
            throw new runtime.RequiredError('caseId','Required parameter requestParameters.caseId was null or undefined when calling caseControllerGetCase.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.locale !== undefined) {
            queryParameters['locale'] = requestParameters.locale;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/case/{caseId}`.replace(`{${"caseId"}}`, encodeURIComponent(String(requestParameters.caseId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CaseResponseFromJSON(jsonValue));
    }

    /**
     */
    async caseControllerGetCase(requestParameters: CaseControllerGetCaseRequest): Promise<CaseResponse> {
        const response = await this.caseControllerGetCaseRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async caseControllerGetSubpoenaRaw(requestParameters: CaseControllerGetSubpoenaRequest): Promise<runtime.ApiResponse<SubpoenaResponse>> {
        if (requestParameters.caseId === null || requestParameters.caseId === undefined) {
            throw new runtime.RequiredError('caseId','Required parameter requestParameters.caseId was null or undefined when calling caseControllerGetSubpoena.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.locale !== undefined) {
            queryParameters['locale'] = requestParameters.locale;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/case/{caseId}/subpoena`.replace(`{${"caseId"}}`, encodeURIComponent(String(requestParameters.caseId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SubpoenaResponseFromJSON(jsonValue));
    }

    /**
     */
    async caseControllerGetSubpoena(requestParameters: CaseControllerGetSubpoenaRequest): Promise<SubpoenaResponse> {
        const response = await this.caseControllerGetSubpoenaRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async caseControllerUpdateSubpoenaRaw(requestParameters: CaseControllerUpdateSubpoenaRequest): Promise<runtime.ApiResponse<SubpoenaResponse>> {
        if (requestParameters.caseId === null || requestParameters.caseId === undefined) {
            throw new runtime.RequiredError('caseId','Required parameter requestParameters.caseId was null or undefined when calling caseControllerUpdateSubpoena.');
        }

        if (requestParameters.updateSubpoenaDto === null || requestParameters.updateSubpoenaDto === undefined) {
            throw new runtime.RequiredError('updateSubpoenaDto','Required parameter requestParameters.updateSubpoenaDto was null or undefined when calling caseControllerUpdateSubpoena.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.locale !== undefined) {
            queryParameters['locale'] = requestParameters.locale;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/case/{caseId}/subpoena`.replace(`{${"caseId"}}`, encodeURIComponent(String(requestParameters.caseId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateSubpoenaDtoToJSON(requestParameters.updateSubpoenaDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SubpoenaResponseFromJSON(jsonValue));
    }

    /**
     */
    async caseControllerUpdateSubpoena(requestParameters: CaseControllerUpdateSubpoenaRequest): Promise<SubpoenaResponse> {
        const response = await this.caseControllerUpdateSubpoenaRaw(requestParameters);
        return await response.value();
    }

}
