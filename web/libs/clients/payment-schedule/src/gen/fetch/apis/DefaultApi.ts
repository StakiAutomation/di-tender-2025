/* tslint:disable */
/* eslint-disable */
/**
 * Payment schedule 1.1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CompanyConditionsnationalIdGETResponse,
    CompanyConditionsnationalIdGETResponseFromJSON,
    CompanyConditionsnationalIdGETResponseToJSON,
    ConditionsnationalIdGETResponse,
    ConditionsnationalIdGETResponseFromJSON,
    ConditionsnationalIdGETResponseToJSON,
    DebtsandschedulesnationalIdGETResponse,
    DebtsandschedulesnationalIdGETResponseFromJSON,
    DebtsandschedulesnationalIdGETResponseToJSON,
    DistributionInitialPositionnationalIdscheduleTypeGETResponse,
    DistributionInitialPositionnationalIdscheduleTypeGETResponseFromJSON,
    DistributionInitialPositionnationalIdscheduleTypeGETResponseToJSON,
    EmployerValidnationalIdemployerNationalIdGETResponse,
    EmployerValidnationalIdemployerNationalIdGETResponseFromJSON,
    EmployerValidnationalIdemployerNationalIdGETResponseToJSON,
    Input,
    InputFromJSON,
    InputToJSON,
    InputSchedules,
    InputSchedulesFromJSON,
    InputSchedulesToJSON,
    PaymentDistributionnationalIdscheduleTypeGETResponse,
    PaymentDistributionnationalIdscheduleTypeGETResponseFromJSON,
    PaymentDistributionnationalIdscheduleTypeGETResponseToJSON,
    SchedulesPOSTResponse,
    SchedulesPOSTResponseFromJSON,
    SchedulesPOSTResponseToJSON,
    WagesdeductionnationalIdGETResponse,
    WagesdeductionnationalIdGETResponseFromJSON,
    WagesdeductionnationalIdGETResponseToJSON,
    WagesdeductionnationalIdPOSTResponse,
    WagesdeductionnationalIdPOSTResponseFromJSON,
    WagesdeductionnationalIdPOSTResponseToJSON,
    WagesdeductionnationalIdPUTResponse,
    WagesdeductionnationalIdPUTResponseFromJSON,
    WagesdeductionnationalIdPUTResponseToJSON,
} from '../models';

export interface CompanyConditionsnationalIdGET8Request {
    nationalId: string;
}

export interface ConditionsnationalIdGET3Request {
    nationalId: string;
}

export interface DebtsandschedulesnationalIdGET2Request {
    nationalId: string;
}

export interface DistributionInitialPositionnationalIdscheduleTypeGET4Request {
    nationalId: string;
    scheduleType: string;
    totalAmount: number;
    disposableIncome: number;
}

export interface EmployerValidnationalIdemployerNationalIdGET7Request {
    nationalId: string;
    employerNationalId: string;
}

export interface PaymentDistributionnationalIdscheduleTypeGET5Request {
    nationalId: string;
    scheduleType: string;
    totalAmount: number;
    monthAmount: number;
    monthCount: number;
}

export interface SchedulesPOST6Request {
    inputSchedules: InputSchedules;
}

export interface WagesdeductionnationalIdGET1Request {
    nationalId: string;
}

export interface WagesdeductionnationalIdPOST1Request {
    nationalId: string;
    input: Input;
}

export interface WagesdeductionnationalIdPUT1Request {
    nationalId: string;
    input: Input;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Returns current condidtion for given nationalId.
     */
    async companyConditionsnationalIdGET8Raw(requestParameters: CompanyConditionsnationalIdGET8Request): Promise<runtime.ApiResponse<CompanyConditionsnationalIdGETResponse>> {
        if (requestParameters.nationalId === null || requestParameters.nationalId === undefined) {
            throw new runtime.RequiredError('nationalId','Required parameter requestParameters.nationalId was null or undefined when calling companyConditionsnationalIdGET8.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/companyConditions/{nationalId}`.replace(`{${"nationalId"}}`, encodeURIComponent(String(requestParameters.nationalId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CompanyConditionsnationalIdGETResponseFromJSON(jsonValue));
    }

    /**
     * Returns current condidtion for given nationalId.
     */
    async companyConditionsnationalIdGET8(requestParameters: CompanyConditionsnationalIdGET8Request): Promise<CompanyConditionsnationalIdGETResponse> {
        const response = await this.companyConditionsnationalIdGET8Raw(requestParameters);
        return await response.value();
    }

    /**
     * Returns current condidtion for given nationalId.
     */
    async conditionsnationalIdGET3Raw(requestParameters: ConditionsnationalIdGET3Request): Promise<runtime.ApiResponse<ConditionsnationalIdGETResponse>> {
        if (requestParameters.nationalId === null || requestParameters.nationalId === undefined) {
            throw new runtime.RequiredError('nationalId','Required parameter requestParameters.nationalId was null or undefined when calling conditionsnationalIdGET3.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/conditions/{nationalId}`.replace(`{${"nationalId"}}`, encodeURIComponent(String(requestParameters.nationalId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ConditionsnationalIdGETResponseFromJSON(jsonValue));
    }

    /**
     * Returns current condidtion for given nationalId.
     */
    async conditionsnationalIdGET3(requestParameters: ConditionsnationalIdGET3Request): Promise<ConditionsnationalIdGETResponse> {
        const response = await this.conditionsnationalIdGET3Raw(requestParameters);
        return await response.value();
    }

    /**
     */
    async debtsandschedulesnationalIdGET2Raw(requestParameters: DebtsandschedulesnationalIdGET2Request): Promise<runtime.ApiResponse<DebtsandschedulesnationalIdGETResponse>> {
        if (requestParameters.nationalId === null || requestParameters.nationalId === undefined) {
            throw new runtime.RequiredError('nationalId','Required parameter requestParameters.nationalId was null or undefined when calling debtsandschedulesnationalIdGET2.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/debtsandschedules/{nationalId}`.replace(`{${"nationalId"}}`, encodeURIComponent(String(requestParameters.nationalId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DebtsandschedulesnationalIdGETResponseFromJSON(jsonValue));
    }

    /**
     */
    async debtsandschedulesnationalIdGET2(requestParameters: DebtsandschedulesnationalIdGET2Request): Promise<DebtsandschedulesnationalIdGETResponse> {
        const response = await this.debtsandschedulesnationalIdGET2Raw(requestParameters);
        return await response.value();
    }

    /**
     */
    async distributionInitialPositionnationalIdscheduleTypeGET4Raw(requestParameters: DistributionInitialPositionnationalIdscheduleTypeGET4Request): Promise<runtime.ApiResponse<DistributionInitialPositionnationalIdscheduleTypeGETResponse>> {
        if (requestParameters.nationalId === null || requestParameters.nationalId === undefined) {
            throw new runtime.RequiredError('nationalId','Required parameter requestParameters.nationalId was null or undefined when calling distributionInitialPositionnationalIdscheduleTypeGET4.');
        }

        if (requestParameters.scheduleType === null || requestParameters.scheduleType === undefined) {
            throw new runtime.RequiredError('scheduleType','Required parameter requestParameters.scheduleType was null or undefined when calling distributionInitialPositionnationalIdscheduleTypeGET4.');
        }

        if (requestParameters.totalAmount === null || requestParameters.totalAmount === undefined) {
            throw new runtime.RequiredError('totalAmount','Required parameter requestParameters.totalAmount was null or undefined when calling distributionInitialPositionnationalIdscheduleTypeGET4.');
        }

        if (requestParameters.disposableIncome === null || requestParameters.disposableIncome === undefined) {
            throw new runtime.RequiredError('disposableIncome','Required parameter requestParameters.disposableIncome was null or undefined when calling distributionInitialPositionnationalIdscheduleTypeGET4.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.totalAmount !== undefined) {
            queryParameters['totalAmount'] = requestParameters.totalAmount;
        }

        if (requestParameters.disposableIncome !== undefined) {
            queryParameters['disposableIncome'] = requestParameters.disposableIncome;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/distributionInitialPosition/{nationalId}/{scheduleType}`.replace(`{${"nationalId"}}`, encodeURIComponent(String(requestParameters.nationalId))).replace(`{${"scheduleType"}}`, encodeURIComponent(String(requestParameters.scheduleType))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DistributionInitialPositionnationalIdscheduleTypeGETResponseFromJSON(jsonValue));
    }

    /**
     */
    async distributionInitialPositionnationalIdscheduleTypeGET4(requestParameters: DistributionInitialPositionnationalIdscheduleTypeGET4Request): Promise<DistributionInitialPositionnationalIdscheduleTypeGETResponse> {
        const response = await this.distributionInitialPositionnationalIdscheduleTypeGET4Raw(requestParameters);
        return await response.value();
    }

    /**
     */
    async employerValidnationalIdemployerNationalIdGET7Raw(requestParameters: EmployerValidnationalIdemployerNationalIdGET7Request): Promise<runtime.ApiResponse<EmployerValidnationalIdemployerNationalIdGETResponse>> {
        if (requestParameters.nationalId === null || requestParameters.nationalId === undefined) {
            throw new runtime.RequiredError('nationalId','Required parameter requestParameters.nationalId was null or undefined when calling employerValidnationalIdemployerNationalIdGET7.');
        }

        if (requestParameters.employerNationalId === null || requestParameters.employerNationalId === undefined) {
            throw new runtime.RequiredError('employerNationalId','Required parameter requestParameters.employerNationalId was null or undefined when calling employerValidnationalIdemployerNationalIdGET7.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/employerValid/{nationalId}/{employerNationalId}`.replace(`{${"nationalId"}}`, encodeURIComponent(String(requestParameters.nationalId))).replace(`{${"employerNationalId"}}`, encodeURIComponent(String(requestParameters.employerNationalId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmployerValidnationalIdemployerNationalIdGETResponseFromJSON(jsonValue));
    }

    /**
     */
    async employerValidnationalIdemployerNationalIdGET7(requestParameters: EmployerValidnationalIdemployerNationalIdGET7Request): Promise<EmployerValidnationalIdemployerNationalIdGETResponse> {
        const response = await this.employerValidnationalIdemployerNationalIdGET7Raw(requestParameters);
        return await response.value();
    }

    /**
     */
    async paymentDistributionnationalIdscheduleTypeGET5Raw(requestParameters: PaymentDistributionnationalIdscheduleTypeGET5Request): Promise<runtime.ApiResponse<PaymentDistributionnationalIdscheduleTypeGETResponse>> {
        if (requestParameters.nationalId === null || requestParameters.nationalId === undefined) {
            throw new runtime.RequiredError('nationalId','Required parameter requestParameters.nationalId was null or undefined when calling paymentDistributionnationalIdscheduleTypeGET5.');
        }

        if (requestParameters.scheduleType === null || requestParameters.scheduleType === undefined) {
            throw new runtime.RequiredError('scheduleType','Required parameter requestParameters.scheduleType was null or undefined when calling paymentDistributionnationalIdscheduleTypeGET5.');
        }

        if (requestParameters.totalAmount === null || requestParameters.totalAmount === undefined) {
            throw new runtime.RequiredError('totalAmount','Required parameter requestParameters.totalAmount was null or undefined when calling paymentDistributionnationalIdscheduleTypeGET5.');
        }

        if (requestParameters.monthAmount === null || requestParameters.monthAmount === undefined) {
            throw new runtime.RequiredError('monthAmount','Required parameter requestParameters.monthAmount was null or undefined when calling paymentDistributionnationalIdscheduleTypeGET5.');
        }

        if (requestParameters.monthCount === null || requestParameters.monthCount === undefined) {
            throw new runtime.RequiredError('monthCount','Required parameter requestParameters.monthCount was null or undefined when calling paymentDistributionnationalIdscheduleTypeGET5.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.totalAmount !== undefined) {
            queryParameters['totalAmount'] = requestParameters.totalAmount;
        }

        if (requestParameters.monthAmount !== undefined) {
            queryParameters['monthAmount'] = requestParameters.monthAmount;
        }

        if (requestParameters.monthCount !== undefined) {
            queryParameters['monthCount'] = requestParameters.monthCount;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/paymentDistribution/{nationalId}/{scheduleType}`.replace(`{${"nationalId"}}`, encodeURIComponent(String(requestParameters.nationalId))).replace(`{${"scheduleType"}}`, encodeURIComponent(String(requestParameters.scheduleType))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PaymentDistributionnationalIdscheduleTypeGETResponseFromJSON(jsonValue));
    }

    /**
     */
    async paymentDistributionnationalIdscheduleTypeGET5(requestParameters: PaymentDistributionnationalIdscheduleTypeGET5Request): Promise<PaymentDistributionnationalIdscheduleTypeGETResponse> {
        const response = await this.paymentDistributionnationalIdscheduleTypeGET5Raw(requestParameters);
        return await response.value();
    }

    /**
     * store  schedules , return 201 if ok
     */
    async schedulesPOST6Raw(requestParameters: SchedulesPOST6Request): Promise<runtime.ApiResponse<SchedulesPOSTResponse>> {
        if (requestParameters.inputSchedules === null || requestParameters.inputSchedules === undefined) {
            throw new runtime.RequiredError('inputSchedules','Required parameter requestParameters.inputSchedules was null or undefined when calling schedulesPOST6.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/schedules`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InputSchedulesToJSON(requestParameters.inputSchedules),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SchedulesPOSTResponseFromJSON(jsonValue));
    }

    /**
     * store  schedules , return 201 if ok
     */
    async schedulesPOST6(requestParameters: SchedulesPOST6Request): Promise<SchedulesPOSTResponse> {
        const response = await this.schedulesPOST6Raw(requestParameters);
        return await response.value();
    }

    /**
     */
    async wagesdeductionnationalIdGET1Raw(requestParameters: WagesdeductionnationalIdGET1Request): Promise<runtime.ApiResponse<WagesdeductionnationalIdGETResponse>> {
        if (requestParameters.nationalId === null || requestParameters.nationalId === undefined) {
            throw new runtime.RequiredError('nationalId','Required parameter requestParameters.nationalId was null or undefined when calling wagesdeductionnationalIdGET1.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/wagesdeduction/{nationalId}`.replace(`{${"nationalId"}}`, encodeURIComponent(String(requestParameters.nationalId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => WagesdeductionnationalIdGETResponseFromJSON(jsonValue));
    }

    /**
     */
    async wagesdeductionnationalIdGET1(requestParameters: WagesdeductionnationalIdGET1Request): Promise<WagesdeductionnationalIdGETResponse> {
        const response = await this.wagesdeductionnationalIdGET1Raw(requestParameters);
        return await response.value();
    }

    /**
     * Set employer for input nationalid
     */
    async wagesdeductionnationalIdPOST1Raw(requestParameters: WagesdeductionnationalIdPOST1Request): Promise<runtime.ApiResponse<WagesdeductionnationalIdPOSTResponse>> {
        if (requestParameters.nationalId === null || requestParameters.nationalId === undefined) {
            throw new runtime.RequiredError('nationalId','Required parameter requestParameters.nationalId was null or undefined when calling wagesdeductionnationalIdPOST1.');
        }

        if (requestParameters.input === null || requestParameters.input === undefined) {
            throw new runtime.RequiredError('input','Required parameter requestParameters.input was null or undefined when calling wagesdeductionnationalIdPOST1.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/wagesdeduction/{nationalId}`.replace(`{${"nationalId"}}`, encodeURIComponent(String(requestParameters.nationalId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InputToJSON(requestParameters.input),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => WagesdeductionnationalIdPOSTResponseFromJSON(jsonValue));
    }

    /**
     * Set employer for input nationalid
     */
    async wagesdeductionnationalIdPOST1(requestParameters: WagesdeductionnationalIdPOST1Request): Promise<WagesdeductionnationalIdPOSTResponse> {
        const response = await this.wagesdeductionnationalIdPOST1Raw(requestParameters);
        return await response.value();
    }

    /**
     * Set employer for input nationalid
     */
    async wagesdeductionnationalIdPUT1Raw(requestParameters: WagesdeductionnationalIdPUT1Request): Promise<runtime.ApiResponse<WagesdeductionnationalIdPUTResponse>> {
        if (requestParameters.nationalId === null || requestParameters.nationalId === undefined) {
            throw new runtime.RequiredError('nationalId','Required parameter requestParameters.nationalId was null or undefined when calling wagesdeductionnationalIdPUT1.');
        }

        if (requestParameters.input === null || requestParameters.input === undefined) {
            throw new runtime.RequiredError('input','Required parameter requestParameters.input was null or undefined when calling wagesdeductionnationalIdPUT1.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/wagesdeduction/{nationalId}`.replace(`{${"nationalId"}}`, encodeURIComponent(String(requestParameters.nationalId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: InputToJSON(requestParameters.input),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => WagesdeductionnationalIdPUTResponseFromJSON(jsonValue));
    }

    /**
     * Set employer for input nationalid
     */
    async wagesdeductionnationalIdPUT1(requestParameters: WagesdeductionnationalIdPUT1Request): Promise<WagesdeductionnationalIdPUTResponse> {
        const response = await this.wagesdeductionnationalIdPUT1Raw(requestParameters);
        return await response.value();
    }

}
