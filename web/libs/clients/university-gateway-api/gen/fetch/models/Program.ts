/* tslint:disable */
/* eslint-disable */
/**
 * University Gateway
 * API for communication between island.is application system and university gateway DB, and between university gateway DB and universities system (MySchool and Ugla)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ProgramExtraApplicationField,
    ProgramExtraApplicationFieldFromJSON,
    ProgramExtraApplicationFieldFromJSONTyped,
    ProgramExtraApplicationFieldToJSON,
    ProgramModeOfDelivery,
    ProgramModeOfDeliveryFromJSON,
    ProgramModeOfDeliveryFromJSONTyped,
    ProgramModeOfDeliveryToJSON,
    University,
    UniversityFromJSON,
    UniversityFromJSONTyped,
    UniversityToJSON,
} from './';

/**
 * 
 * @export
 * @interface Program
 */
export interface Program {
    /**
     * Program ID
     * @type {string}
     * @memberof Program
     */
    id: string;
    /**
     * External ID for the program (from University)
     * @type {string}
     * @memberof Program
     */
    externalId: string;
    /**
     * Program name (Icelandic)
     * @type {string}
     * @memberof Program
     */
    nameIs: string;
    /**
     * Program name (English)
     * @type {string}
     * @memberof Program
     */
    nameEn: string;
    /**
     * External ID for the specialization(from University)
     * @type {string}
     * @memberof Program
     */
    specializationExternalId?: string;
    /**
     * Specialization name (Icelandic)
     * @type {string}
     * @memberof Program
     */
    specializationNameIs?: string;
    /**
     * Specialization name (English)
     * @type {string}
     * @memberof Program
     */
    specializationNameEn?: string;
    /**
     * University ID
     * @type {string}
     * @memberof Program
     */
    universityId: string;
    /**
     * University details
     * @type {University}
     * @memberof Program
     */
    universityDetails: University;
    /**
     * Name of the department that the program belongs to (Icelandic)
     * @type {string}
     * @memberof Program
     */
    departmentNameIs: string;
    /**
     * Name of the department that the program belongs to (English)
     * @type {string}
     * @memberof Program
     */
    departmentNameEn: string;
    /**
     * Which year this program started on
     * @type {number}
     * @memberof Program
     */
    startingSemesterYear: number;
    /**
     * Which season this program started on
     * @type {string}
     * @memberof Program
     */
    startingSemesterSeason: ProgramStartingSemesterSeasonEnum;
    /**
     * When the application period for this program starts
     * @type {Date}
     * @memberof Program
     */
    applicationStartDate: Date;
    /**
     * When the application period for this program ends
     * @type {Date}
     * @memberof Program
     */
    applicationEndDate: Date;
    /**
     * Last date for school to accept/decline student into program
     * @type {Date}
     * @memberof Program
     */
    schoolAnswerDate?: Date;
    /**
     * Last date for student to accept enrollment in school (after school accepts student)
     * @type {Date}
     * @memberof Program
     */
    studentAnswerDate?: Date;
    /**
     * Degree type
     * @type {string}
     * @memberof Program
     */
    degreeType: ProgramDegreeTypeEnum;
    /**
     * Degree abbreviation
     * @type {string}
     * @memberof Program
     */
    degreeAbbreviation: string;
    /**
     * Number of course credits (in ECTS)
     * @type {number}
     * @memberof Program
     */
    credits: number;
    /**
     * Program description (Icelandic)
     * @type {string}
     * @memberof Program
     */
    descriptionIs: string;
    /**
     * Program description (English)
     * @type {string}
     * @memberof Program
     */
    descriptionEn: string;
    /**
     * Total duration for this program (in years)
     * @type {number}
     * @memberof Program
     */
    durationInYears: number;
    /**
     * Cost for program (per year)
     * @type {number}
     * @memberof Program
     */
    costPerYear?: number;
    /**
     * ISCED code for program
     * @type {string}
     * @memberof Program
     */
    iscedCode: string;
    /**
     * Modes of deliveries available for the program
     * @type {Array<ProgramModeOfDelivery>}
     * @memberof Program
     */
    modeOfDelivery: Array<ProgramModeOfDelivery>;
    /**
     * Whether the program is active and should be displayed on the external web
     * @type {boolean}
     * @memberof Program
     */
    active: boolean;
    /**
     * Whether the application period for the program is open and applications can be submitted
     * @type {boolean}
     * @memberof Program
     */
    applicationPeriodOpen: boolean;
    /**
     * Whether applications for the program should be submitted via University Gateway or the application portals of each university
     * @type {boolean}
     * @memberof Program
     */
    applicationInUniversityGateway: boolean;
    /**
     * External url  for the program from the university web page (Icelandic)
     * @type {string}
     * @memberof Program
     */
    externalUrlIs?: string;
    /**
     * External url  for the program from the university web page (English)
     * @type {string}
     * @memberof Program
     */
    externalUrlEn?: string;
    /**
     * Admission requirements for program (Icelandic)
     * @type {string}
     * @memberof Program
     */
    admissionRequirementsIs?: string;
    /**
     * Admission requirements for program (English)
     * @type {string}
     * @memberof Program
     */
    admissionRequirementsEn?: string;
    /**
     * Study requirements for program (Icelandic)
     * @type {string}
     * @memberof Program
     */
    studyRequirementsIs?: string;
    /**
     * Study requirements for program (English)
     * @type {string}
     * @memberof Program
     */
    studyRequirementsEn?: string;
    /**
     * Cost information for program (Icelandic)
     * @type {string}
     * @memberof Program
     */
    costInformationIs?: string;
    /**
     * Cost information for program (English)
     * @type {string}
     * @memberof Program
     */
    costInformationEn?: string;
    /**
     * Arrangement for program (skipulag n√°ms) (Icelandic)
     * @type {string}
     * @memberof Program
     */
    arrangementIs?: string;
    /**
     * Arrangement for program (English)
     * @type {string}
     * @memberof Program
     */
    arrangementEn?: string;
    /**
     * Whether the program allows applicants to apply using exception
     * @type {boolean}
     * @memberof Program
     */
    allowException: boolean;
    /**
     * Whether the program allows applicants to apply using third level qualification
     * @type {boolean}
     * @memberof Program
     */
    allowThirdLevelQualification: boolean;
    /**
     * Extra application fields that should be displayed in the application for the program
     * @type {Array<ProgramExtraApplicationField>}
     * @memberof Program
     */
    extraApplicationFields: Array<ProgramExtraApplicationField>;
}

export function ProgramFromJSON(json: any): Program {
    return ProgramFromJSONTyped(json, false);
}

export function ProgramFromJSONTyped(json: any, ignoreDiscriminator: boolean): Program {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'externalId': json['externalId'],
        'nameIs': json['nameIs'],
        'nameEn': json['nameEn'],
        'specializationExternalId': !exists(json, 'specializationExternalId') ? undefined : json['specializationExternalId'],
        'specializationNameIs': !exists(json, 'specializationNameIs') ? undefined : json['specializationNameIs'],
        'specializationNameEn': !exists(json, 'specializationNameEn') ? undefined : json['specializationNameEn'],
        'universityId': json['universityId'],
        'universityDetails': UniversityFromJSON(json['universityDetails']),
        'departmentNameIs': json['departmentNameIs'],
        'departmentNameEn': json['departmentNameEn'],
        'startingSemesterYear': json['startingSemesterYear'],
        'startingSemesterSeason': json['startingSemesterSeason'],
        'applicationStartDate': (new Date(json['applicationStartDate'])),
        'applicationEndDate': (new Date(json['applicationEndDate'])),
        'schoolAnswerDate': !exists(json, 'schoolAnswerDate') ? undefined : (new Date(json['schoolAnswerDate'])),
        'studentAnswerDate': !exists(json, 'studentAnswerDate') ? undefined : (new Date(json['studentAnswerDate'])),
        'degreeType': json['degreeType'],
        'degreeAbbreviation': json['degreeAbbreviation'],
        'credits': json['credits'],
        'descriptionIs': json['descriptionIs'],
        'descriptionEn': json['descriptionEn'],
        'durationInYears': json['durationInYears'],
        'costPerYear': !exists(json, 'costPerYear') ? undefined : json['costPerYear'],
        'iscedCode': json['iscedCode'],
        'modeOfDelivery': ((json['modeOfDelivery'] as Array<any>).map(ProgramModeOfDeliveryFromJSON)),
        'active': json['active'],
        'applicationPeriodOpen': json['applicationPeriodOpen'],
        'applicationInUniversityGateway': json['applicationInUniversityGateway'],
        'externalUrlIs': !exists(json, 'externalUrlIs') ? undefined : json['externalUrlIs'],
        'externalUrlEn': !exists(json, 'externalUrlEn') ? undefined : json['externalUrlEn'],
        'admissionRequirementsIs': !exists(json, 'admissionRequirementsIs') ? undefined : json['admissionRequirementsIs'],
        'admissionRequirementsEn': !exists(json, 'admissionRequirementsEn') ? undefined : json['admissionRequirementsEn'],
        'studyRequirementsIs': !exists(json, 'studyRequirementsIs') ? undefined : json['studyRequirementsIs'],
        'studyRequirementsEn': !exists(json, 'studyRequirementsEn') ? undefined : json['studyRequirementsEn'],
        'costInformationIs': !exists(json, 'costInformationIs') ? undefined : json['costInformationIs'],
        'costInformationEn': !exists(json, 'costInformationEn') ? undefined : json['costInformationEn'],
        'arrangementIs': !exists(json, 'arrangementIs') ? undefined : json['arrangementIs'],
        'arrangementEn': !exists(json, 'arrangementEn') ? undefined : json['arrangementEn'],
        'allowException': json['allowException'],
        'allowThirdLevelQualification': json['allowThirdLevelQualification'],
        'extraApplicationFields': ((json['extraApplicationFields'] as Array<any>).map(ProgramExtraApplicationFieldFromJSON)),
    };
}

export function ProgramToJSON(value?: Program | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'externalId': value.externalId,
        'nameIs': value.nameIs,
        'nameEn': value.nameEn,
        'specializationExternalId': value.specializationExternalId,
        'specializationNameIs': value.specializationNameIs,
        'specializationNameEn': value.specializationNameEn,
        'universityId': value.universityId,
        'universityDetails': UniversityToJSON(value.universityDetails),
        'departmentNameIs': value.departmentNameIs,
        'departmentNameEn': value.departmentNameEn,
        'startingSemesterYear': value.startingSemesterYear,
        'startingSemesterSeason': value.startingSemesterSeason,
        'applicationStartDate': (value.applicationStartDate.toISOString()),
        'applicationEndDate': (value.applicationEndDate.toISOString()),
        'schoolAnswerDate': value.schoolAnswerDate === undefined ? undefined : (value.schoolAnswerDate.toISOString()),
        'studentAnswerDate': value.studentAnswerDate === undefined ? undefined : (value.studentAnswerDate.toISOString()),
        'degreeType': value.degreeType,
        'degreeAbbreviation': value.degreeAbbreviation,
        'credits': value.credits,
        'descriptionIs': value.descriptionIs,
        'descriptionEn': value.descriptionEn,
        'durationInYears': value.durationInYears,
        'costPerYear': value.costPerYear,
        'iscedCode': value.iscedCode,
        'modeOfDelivery': ((value.modeOfDelivery as Array<any>).map(ProgramModeOfDeliveryToJSON)),
        'active': value.active,
        'applicationPeriodOpen': value.applicationPeriodOpen,
        'applicationInUniversityGateway': value.applicationInUniversityGateway,
        'externalUrlIs': value.externalUrlIs,
        'externalUrlEn': value.externalUrlEn,
        'admissionRequirementsIs': value.admissionRequirementsIs,
        'admissionRequirementsEn': value.admissionRequirementsEn,
        'studyRequirementsIs': value.studyRequirementsIs,
        'studyRequirementsEn': value.studyRequirementsEn,
        'costInformationIs': value.costInformationIs,
        'costInformationEn': value.costInformationEn,
        'arrangementIs': value.arrangementIs,
        'arrangementEn': value.arrangementEn,
        'allowException': value.allowException,
        'allowThirdLevelQualification': value.allowThirdLevelQualification,
        'extraApplicationFields': ((value.extraApplicationFields as Array<any>).map(ProgramExtraApplicationFieldToJSON)),
    };
}

/**
* @export
* @enum {string}
*/
export enum ProgramStartingSemesterSeasonEnum {
    FALL = 'FALL',
    SPRING = 'SPRING',
    SUMMER = 'SUMMER'
}
/**
* @export
* @enum {string}
*/
export enum ProgramDegreeTypeEnum {
    UNDERGRADUATE = 'UNDERGRADUATE',
    POSTGRADUATE = 'POSTGRADUATE',
    DOCTORAL = 'DOCTORAL'
}


