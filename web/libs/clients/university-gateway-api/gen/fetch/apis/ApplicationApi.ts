/* tslint:disable */
/* eslint-disable */
/**
 * University Gateway
 * API for communication between island.is application system and university gateway DB, and between university gateway DB and universities system (MySchool and Ugla)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Application,
    ApplicationFromJSON,
    ApplicationToJSON,
    CreateApplicationDto,
    CreateApplicationDtoFromJSON,
    CreateApplicationDtoToJSON,
    HttpProblemResponse,
    HttpProblemResponseFromJSON,
    HttpProblemResponseToJSON,
    UpdateApplicationDto,
    UpdateApplicationDtoFromJSON,
    UpdateApplicationDtoToJSON,
} from '../models';

export interface UniversityApplicationControllerCreateApplicationRequest {
    createApplicationDto: CreateApplicationDto;
}

export interface UniversityApplicationControllerGetApplicationByIdRequest {
    id: string;
}

export interface UniversityApplicationControllerUpdateApplicationRequest {
    id: string;
    updateApplicationDto: UpdateApplicationDto;
}

/**
 * 
 */
export class ApplicationApi extends runtime.BaseAPI {

    /**
     * Create application for logged in user
     */
    async universityApplicationControllerCreateApplicationRaw(requestParameters: UniversityApplicationControllerCreateApplicationRequest): Promise<runtime.ApiResponse<Application>> {
        if (requestParameters.createApplicationDto === null || requestParameters.createApplicationDto === undefined) {
            throw new runtime.RequiredError('createApplicationDto','Required parameter requestParameters.createApplicationDto was null or undefined when calling universityApplicationControllerCreateApplication.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/applications`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateApplicationDtoToJSON(requestParameters.createApplicationDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationFromJSON(jsonValue));
    }

    /**
     * Create application for logged in user
     */
    async universityApplicationControllerCreateApplication(requestParameters: UniversityApplicationControllerCreateApplicationRequest): Promise<Application> {
        const response = await this.universityApplicationControllerCreateApplicationRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get application by ID (only status for now) for logged in user
     */
    async universityApplicationControllerGetApplicationByIdRaw(requestParameters: UniversityApplicationControllerGetApplicationByIdRequest): Promise<runtime.ApiResponse<Application>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling universityApplicationControllerGetApplicationById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/applications/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationFromJSON(jsonValue));
    }

    /**
     * Get application by ID (only status for now) for logged in user
     */
    async universityApplicationControllerGetApplicationById(requestParameters: UniversityApplicationControllerGetApplicationByIdRequest): Promise<Application> {
        const response = await this.universityApplicationControllerGetApplicationByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update application (only status for now) for logged in user
     */
    async universityApplicationControllerUpdateApplicationRaw(requestParameters: UniversityApplicationControllerUpdateApplicationRequest): Promise<runtime.ApiResponse<Application>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling universityApplicationControllerUpdateApplication.');
        }

        if (requestParameters.updateApplicationDto === null || requestParameters.updateApplicationDto === undefined) {
            throw new runtime.RequiredError('updateApplicationDto','Required parameter requestParameters.updateApplicationDto was null or undefined when calling universityApplicationControllerUpdateApplication.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/applications/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateApplicationDtoToJSON(requestParameters.updateApplicationDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationFromJSON(jsonValue));
    }

    /**
     * Update application (only status for now) for logged in user
     */
    async universityApplicationControllerUpdateApplication(requestParameters: UniversityApplicationControllerUpdateApplicationRequest): Promise<Application> {
        const response = await this.universityApplicationControllerUpdateApplicationRaw(requestParameters);
        return await response.value();
    }

}
