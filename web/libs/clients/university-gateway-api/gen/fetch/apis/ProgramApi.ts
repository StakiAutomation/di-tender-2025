/* tslint:disable */
/* eslint-disable */
/**
 * University Gateway
 * API for communication between island.is application system and university gateway DB, and between university gateway DB and universities system (MySchool and Ugla)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ApplicationProgramsResponse,
    ApplicationProgramsResponseFromJSON,
    ApplicationProgramsResponseToJSON,
    HttpProblemResponse,
    HttpProblemResponseFromJSON,
    HttpProblemResponseToJSON,
    Program,
    ProgramFromJSON,
    ProgramToJSON,
    ProgramsResponse,
    ProgramsResponseFromJSON,
    ProgramsResponseToJSON,
} from '../models';

export interface ProgramControllerGetApplicationProgramsRequest {
    limit?: number;
    before?: string;
    after?: string;
    active?: boolean;
    year?: number;
    season?: ProgramControllerGetApplicationProgramsSeasonEnum;
    universityId?: string;
    degreeType?: ProgramControllerGetApplicationProgramsDegreeTypeEnum;
}

export interface ProgramControllerGetProgramByIdRequest {
    id: string;
}

export interface ProgramControllerGetProgramsRequest {
    limit?: number;
    before?: string;
    after?: string;
    active?: boolean;
    year?: number;
    season?: ProgramControllerGetProgramsSeasonEnum;
    universityId?: string;
    degreeType?: ProgramControllerGetProgramsDegreeTypeEnum;
}

/**
 * 
 */
export class ProgramApi extends runtime.BaseAPI {

    /**
     * Get all programs with relevant information for the application
     */
    async programControllerGetApplicationProgramsRaw(requestParameters: ProgramControllerGetApplicationProgramsRequest): Promise<runtime.ApiResponse<ApplicationProgramsResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.before !== undefined) {
            queryParameters['before'] = requestParameters.before;
        }

        if (requestParameters.after !== undefined) {
            queryParameters['after'] = requestParameters.after;
        }

        if (requestParameters.active !== undefined) {
            queryParameters['active'] = requestParameters.active;
        }

        if (requestParameters.year !== undefined) {
            queryParameters['year'] = requestParameters.year;
        }

        if (requestParameters.season !== undefined) {
            queryParameters['season'] = requestParameters.season;
        }

        if (requestParameters.universityId !== undefined) {
            queryParameters['universityId'] = requestParameters.universityId;
        }

        if (requestParameters.degreeType !== undefined) {
            queryParameters['degreeType'] = requestParameters.degreeType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/application-programs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationProgramsResponseFromJSON(jsonValue));
    }

    /**
     * Get all programs with relevant information for the application
     */
    async programControllerGetApplicationPrograms(requestParameters: ProgramControllerGetApplicationProgramsRequest): Promise<ApplicationProgramsResponse> {
        const response = await this.programControllerGetApplicationProgramsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get all possible values for duration in years
     */
    async programControllerGetDurationInYearsRaw(): Promise<runtime.ApiResponse<Array<string>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/duration-in-years`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get all possible values for duration in years
     */
    async programControllerGetDurationInYears(): Promise<Array<string>> {
        const response = await this.programControllerGetDurationInYearsRaw();
        return await response.value();
    }

    /**
     * Get program by ID
     */
    async programControllerGetProgramByIdRaw(requestParameters: ProgramControllerGetProgramByIdRequest): Promise<runtime.ApiResponse<Program>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling programControllerGetProgramById.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/programs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ProgramFromJSON(jsonValue));
    }

    /**
     * Get program by ID
     */
    async programControllerGetProgramById(requestParameters: ProgramControllerGetProgramByIdRequest): Promise<Program> {
        const response = await this.programControllerGetProgramByIdRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get all programs
     */
    async programControllerGetProgramsRaw(requestParameters: ProgramControllerGetProgramsRequest): Promise<runtime.ApiResponse<ProgramsResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.before !== undefined) {
            queryParameters['before'] = requestParameters.before;
        }

        if (requestParameters.after !== undefined) {
            queryParameters['after'] = requestParameters.after;
        }

        if (requestParameters.active !== undefined) {
            queryParameters['active'] = requestParameters.active;
        }

        if (requestParameters.year !== undefined) {
            queryParameters['year'] = requestParameters.year;
        }

        if (requestParameters.season !== undefined) {
            queryParameters['season'] = requestParameters.season;
        }

        if (requestParameters.universityId !== undefined) {
            queryParameters['universityId'] = requestParameters.universityId;
        }

        if (requestParameters.degreeType !== undefined) {
            queryParameters['degreeType'] = requestParameters.degreeType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/programs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ProgramsResponseFromJSON(jsonValue));
    }

    /**
     * Get all programs
     */
    async programControllerGetPrograms(requestParameters: ProgramControllerGetProgramsRequest): Promise<ProgramsResponse> {
        const response = await this.programControllerGetProgramsRaw(requestParameters);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum ProgramControllerGetApplicationProgramsSeasonEnum {
    FALL = 'FALL',
    SPRING = 'SPRING',
    SUMMER = 'SUMMER'
}
/**
    * @export
    * @enum {string}
    */
export enum ProgramControllerGetApplicationProgramsDegreeTypeEnum {
    UNDERGRADUATE = 'UNDERGRADUATE',
    POSTGRADUATE = 'POSTGRADUATE',
    DOCTORAL = 'DOCTORAL'
}
/**
    * @export
    * @enum {string}
    */
export enum ProgramControllerGetProgramsSeasonEnum {
    FALL = 'FALL',
    SPRING = 'SPRING',
    SUMMER = 'SUMMER'
}
/**
    * @export
    * @enum {string}
    */
export enum ProgramControllerGetProgramsDegreeTypeEnum {
    UNDERGRADUATE = 'UNDERGRADUATE',
    POSTGRADUATE = 'POSTGRADUATE',
    DOCTORAL = 'DOCTORAL'
}
