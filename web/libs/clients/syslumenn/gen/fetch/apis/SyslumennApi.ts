/* tslint:disable */
/* eslint-disable */
/**
 * Þjónustugátt starfskerfa sýslumanna
 * Rafrænn aðgengi að gögnum og aðgerðum starfskerfis sýslumanna
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AdfarabeidniSkeyti,
    AdfarabeidniSkeytiFromJSON,
    AdfarabeidniSkeytiToJSON,
    AdfarabeidnirHeimildaflokkur,
    AdfarabeidnirHeimildaflokkurFromJSON,
    AdfarabeidnirHeimildaflokkurToJSON,
    Afengisleyfi,
    AfengisleyfiFromJSON,
    AfengisleyfiToJSON,
    AlgengTengsl,
    AlgengTengslFromJSON,
    AlgengTengslToJSON,
    AlgengUmsaekjandaTengsl,
    AlgengUmsaekjandaTengslFromJSON,
    AlgengUmsaekjandaTengslToJSON,
    ApiNotandi,
    ApiNotandiFromJSON,
    ApiNotandiToJSON,
    ApplicationFilesContent,
    ApplicationFilesContentFromJSON,
    ApplicationFilesContentToJSON,
    ApplicationSystem,
    ApplicationSystemFromJSON,
    ApplicationSystemToJSON,
    AranuslausFraTilSvar,
    AranuslausFraTilSvarFromJSON,
    AranuslausFraTilSvarToJSON,
    AranuslausFratilFyrirspurn,
    AranuslausFratilFyrirspurnFromJSON,
    AranuslausFratilFyrirspurnToJSON,
    AranuslausFyrirspurn,
    AranuslausFyrirspurnFromJSON,
    AranuslausFyrirspurnToJSON,
    AranuslausSvar,
    AranuslausSvarFromJSON,
    AranuslausSvarToJSON,
    BankaupplysingarDanarbusSkeyti,
    BankaupplysingarDanarbusSkeytiFromJSON,
    BankaupplysingarDanarbusSkeytiToJSON,
    Brennuleyfi,
    BrennuleyfiFromJSON,
    BrennuleyfiToJSON,
    Embaetti,
    EmbaettiFromJSON,
    EmbaettiToJSON,
    EmbaettiOgStarfsstodvar,
    EmbaettiOgStarfsstodvarFromJSON,
    EmbaettiOgStarfsstodvarToJSON,
    ErfdafjarskatturSvar,
    ErfdafjarskatturSvarFromJSON,
    ErfdafjarskatturSvarToJSON,
    ErfdarskraSkeyti,
    ErfdarskraSkeytiFromJSON,
    ErfdarskraSkeytiToJSON,
    FasteignOgEigendur,
    FasteignOgEigendurFromJSON,
    FasteignOgEigendurToJSON,
    Fasteignasalar,
    FasteignasalarFromJSON,
    FasteignasalarToJSON,
    Fyrirspurn,
    FyrirspurnFromJSON,
    FyrirspurnToJSON,
    HeimagistingarModel,
    HeimagistingarModelFromJSON,
    HeimagistingarModelToJSON,
    InnsiglaSkeyti,
    InnsiglaSkeytiFromJSON,
    InnsiglaSkeytiToJSON,
    InnsiglaSkjolSkeyti,
    InnsiglaSkjolSkeytiFromJSON,
    InnsiglaSkjolSkeytiToJSON,
    InnsigludSkjol,
    InnsigludSkjolFromJSON,
    InnsigludSkjolToJSON,
    InnskraningSvarSkeyti,
    InnskraningSvarSkeytiFromJSON,
    InnskraningSvarSkeytiToJSON,
    KannaRafraenSkilrikiKennitala,
    KannaRafraenSkilrikiKennitalaFromJSON,
    KannaRafraenSkilrikiKennitalaToJSON,
    KannaRafraenSkilrikiSimiKennitala,
    KannaRafraenSkilrikiSimiKennitalaFromJSON,
    KannaRafraenSkilrikiSimiKennitalaToJSON,
    KaupmaliSkeyti,
    KaupmaliSkeytiFromJSON,
    KaupmaliSkeytiToJSON,
    KonnunarvottordSvar,
    KonnunarvottordSvarFromJSON,
    KonnunarvottordSvarToJSON,
    LeyfiListi,
    LeyfiListiFromJSON,
    LeyfiListiToJSON,
    LeyfiStakt,
    LeyfiStaktFromJSON,
    LeyfiStaktToJSON,
    Logmenn,
    LogmennFromJSON,
    LogmennToJSON,
    LogradamadurSvar,
    LogradamadurSvarFromJSON,
    LogradamadurSvarToJSON,
    Meistaraleyfi,
    MeistaraleyfiFromJSON,
    MeistaraleyfiToJSON,
    NyskraAdfaraBeidniSkeyti,
    NyskraAdfaraBeidniSkeytiFromJSON,
    NyskraAdfaraBeidniSkeytiToJSON,
    NyskraAdfaraBeidniSvar,
    NyskraAdfaraBeidniSvarFromJSON,
    NyskraAdfaraBeidniSvarToJSON,
    Okutaeki,
    OkutaekiFromJSON,
    OkutaekiToJSON,
    Postnumer,
    PostnumerFromJSON,
    PostnumerToJSON,
    ProblemDetails,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    RootReglusett,
    RootReglusettFromJSON,
    RootReglusettToJSON,
    Skilabod,
    SkilabodFromJSON,
    SkilabodToJSON,
    SkiptaUmSkraningaradili,
    SkiptaUmSkraningaradiliFromJSON,
    SkiptaUmSkraningaradiliToJSON,
    SkiptaUmSkraningaradiliSkeyti,
    SkiptaUmSkraningaradiliSkeytiFromJSON,
    SkiptaUmSkraningaradiliSkeytiToJSON,
    SkraSveinsbrefModel,
    SkraSveinsbrefModelFromJSON,
    SkraSveinsbrefModelToJSON,
    SkraningaradiliDanarbusSkeyti,
    SkraningaradiliDanarbusSkeytiFromJSON,
    SkraningaradiliDanarbusSkeytiToJSON,
    StadaUndirritunarSkjalsSkeyti,
    StadaUndirritunarSkjalsSkeytiFromJSON,
    StadaUndirritunarSkjalsSkeytiToJSON,
    StadaUndirritunarSkjalsSvarSkeyti,
    StadaUndirritunarSkjalsSvarSkeytiFromJSON,
    StadaUndirritunarSkjalsSvarSkeytiToJSON,
    Staediskortamal,
    StaediskortamalFromJSON,
    StaediskortamalToJSON,
    StaediskortamalSvarSkeyti,
    StaediskortamalSvarSkeytiFromJSON,
    StaediskortamalSvarSkeytiToJSON,
    StarfsrettindiModel,
    StarfsrettindiModelFromJSON,
    StarfsrettindiModelToJSON,
    StofnaskjalOgSendaTilUndirritunarSkeyti,
    StofnaskjalOgSendaTilUndirritunarSkeytiFromJSON,
    StofnaskjalOgSendaTilUndirritunarSkeytiToJSON,
    StofnaskjalOgSendaTilUndirritunarSvarSkeyti,
    StofnaskjalOgSendaTilUndirritunarSvarSkeytiFromJSON,
    StofnaskjalOgSendaTilUndirritunarSvarSkeytiToJSON,
    SvarSkeyti,
    SvarSkeytiFromJSON,
    SvarSkeytiToJSON,
    SveinsbrefModel,
    SveinsbrefModelFromJSON,
    SveinsbrefModelToJSON,
    SyslSekjaSkra,
    SyslSekjaSkraFromJSON,
    SyslSekjaSkraToJSON,
    SyslSkeyti,
    SyslSkeytiFromJSON,
    SyslSkeytiToJSON,
    Taekifaerisleyfi,
    TaekifaerisleyfiFromJSON,
    TaekifaerisleyfiToJSON,
    ThjodskraLogadilar,
    ThjodskraLogadilarFromJSON,
    ThjodskraLogadilarToJSON,
    ThjodskraSkeyti,
    ThjodskraSkeytiFromJSON,
    ThjodskraSkeytiToJSON,
    ThjodskraSvarSkeyti,
    ThjodskraSvarSkeytiFromJSON,
    ThjodskraSvarSkeytiToJSON,
    ThjoldskraEnstaklingar,
    ThjoldskraEnstaklingarFromJSON,
    ThjoldskraEnstaklingarToJSON,
    TrufelogOgLisskodunarfelogModel,
    TrufelogOgLisskodunarfelogModelFromJSON,
    TrufelogOgLisskodunarfelogModelToJSON,
    Uppbod,
    UppbodFromJSON,
    UppbodToJSON,
    UppbodFasteignir,
    UppbodFasteignirFromJSON,
    UppbodFasteignirToJSON,
    UppfaeraHeimagistingarModel,
    UppfaeraHeimagistingarModelFromJSON,
    UppfaeraHeimagistingarModelToJSON,
    UpplysingarUrDanarbuiRadstofunSkeyti,
    UpplysingarUrDanarbuiRadstofunSkeytiFromJSON,
    UpplysingarUrDanarbuiRadstofunSkeytiToJSON,
    UpplysingarUrDanarbuiSkeyti,
    UpplysingarUrDanarbuiSkeytiFromJSON,
    UpplysingarUrDanarbuiSkeytiToJSON,
    UpplysingarUrDanarbuiSkeytiErfdafjarskatt,
    UpplysingarUrDanarbuiSkeytiErfdafjarskattFromJSON,
    UpplysingarUrDanarbuiSkeytiErfdafjarskattToJSON,
    VedbandayfirlitMargirSkeyti,
    VedbandayfirlitMargirSkeytiFromJSON,
    VedbandayfirlitMargirSkeytiToJSON,
    VedbandayfirlitMargirSvarSkeyti,
    VedbandayfirlitMargirSvarSkeytiFromJSON,
    VedbandayfirlitMargirSvarSkeytiToJSON,
    VedbandayfirlitRegluverkGeneralSvar,
    VedbandayfirlitRegluverkGeneralSvarFromJSON,
    VedbandayfirlitRegluverkGeneralSvarToJSON,
    VedbandayfirlitSkeyti,
    VedbandayfirlitSkeytiFromJSON,
    VedbandayfirlitSkeytiToJSON,
    VedbandayfirlitSvarSkeyti,
    VedbandayfirlitSvarSkeytiFromJSON,
    VedbandayfirlitSvarSkeytiToJSON,
    Verdbrefamidlari,
    VerdbrefamidlariFromJSON,
    VerdbrefamidlariToJSON,
    VirkLeyfi,
    VirkLeyfiFromJSON,
    VirkLeyfiToJSON,
    VirkLeyfiMedfastanumer,
    VirkLeyfiMedfastanumerFromJSON,
    VirkLeyfiMedfastanumerToJSON,
    VirkarHeimagistingar,
    VirkarHeimagistingarFromJSON,
    VirkarHeimagistingarToJSON,
    VottordSkeyti,
    VottordSkeytiFromJSON,
    VottordSkeytiToJSON,
    WebhookEventPayload,
    WebhookEventPayloadFromJSON,
    WebhookEventPayloadToJSON,
} from '../models';

export interface AdfarabeidnirHeimildaflokkurGetAdfarabeidnirHeimildaflokkurRequest {
    id: number;
}

export interface AfengisleyfiGetRequest {
    audkenni: string;
}

export interface AfgreidaSakavottordPostRequest {
    syslSkeyti: SyslSkeyti;
}

export interface AfturkallaAdfarabeidniPostRequest {
    adfarabeidniSkeyti: AdfarabeidniSkeyti;
}

export interface AlmennFyrirspurnGetRequest {
    audkenni: string;
    eining: string;
    adgerd: string;
}

export interface AlmennUmsoknPostRequest {
    applicationSystem: ApplicationSystem;
}

export interface AlmennUmsoknPost2Request {
    applicationFilesContent: ApplicationFilesContent;
}

export interface AlmennUmsoknRegluverkPostRequest {
    rootReglusett: RootReglusett;
}

export interface ArangurslausFraDagsPostRequest {
    aranuslausFyrirspurn: AranuslausFyrirspurn;
}

export interface ArangurslausFraTilDagsPostRequest {
    aranuslausFratilFyrirspurn: AranuslausFratilFyrirspurn;
}

export interface BankaupplysingarDanarbusPostRequest {
    bankaupplysingarDanarbusSkeyti: BankaupplysingarDanarbusSkeyti;
}

export interface BrennuleyfiGetRequest {
    audkenni: string;
}

export interface DanarbuAlgengTengslGetRequest {
    audkenni: string;
}

export interface DanarbuAlgengTengslUmsaekjandaGetRequest {
    audkenni: string;
}

export interface EinstaklingaSkraGetRequest {
    audkenni: string;
    kennitala: string;
}

export interface EmbaettiGetEmbaettiRequest {
    id: number;
}

export interface ErfdafjarskatturGetRequest {
    audkenni: string;
    malsnumer?: string | null;
}

export interface ErfdarskraJaNeiGetRequest {
    kennitala: string;
    audkenni: string;
}

export interface FaVottordUpplysingarGetRequest {
    audkenni: string;
    kennitala: string;
}

export interface FasteignOgEigendurGetRequest {
    fastanumer: string;
    audkenni: string;
}

export interface FasteignasalarGetRequest {
    audkenni?: string | null;
}

export interface HeimagistingarGetRequest {
    audkenni: string;
}

export interface HeimagistingarPutRequest {
    audkenni: string;
    uppfaeraHeimagistingarModel: UppfaeraHeimagistingarModel;
}

export interface InnsiglaSkjolPostRequest {
    innsiglaSkjolSkeyti: InnsiglaSkjolSkeyti;
}

export interface InnsiglunPostRequest {
    innsiglaSkeyti: InnsiglaSkeyti;
}

export interface InnskraningPostRequest {
    apiNotandi: ApiNotandi;
}

export interface KannaKonnunarvottordGetRequest {
    audkenni: string;
    kennitala?: string | null;
}

export interface KannaRafraenSkilrikiGetRequest {
    simi: string;
    kennitala: string;
    audkenni: string;
}

export interface KannaRafraenSkilrikiGet2Request {
    kennitala: string;
    audkenni: string;
}

export interface KannaSakavottordGetRequest {
    audkenni: string;
    kennitala: string;
}

export interface KaupmaliJaNeiGetRequest {
    kennitala: string;
    audkenni: string;
}

export interface LeitaAdKennitoluIThjodskraPostRequest {
    thjodskraSkeyti: ThjodskraSkeyti;
}

export interface LogadilaskraGetRequest {
    kennitalaEdaNafnEdaHeimlisfang: string;
    audkenni: string;
}

export interface LogmannalistiGetRequest {
    audkenni?: string | null;
}

export interface LogradamadurGetRequest {
    audkenni: string;
    kennitala?: string | null;
}

export interface MeistaraleyfiGetRequest {
    audkenni: string;
}

export interface MottakaRafraentSkjalPostRequest {
    webhookEventPayload: WebhookEventPayload;
}

export interface MottakaSkjalaUrUndirritunPostRequest {
    webhookEventPayload: WebhookEventPayload;
}

export interface NyskraAdfaraBeidniPostRequest {
    nyskraAdfaraBeidniSkeyti: NyskraAdfaraBeidniSkeyti;
}

export interface OkutaekiGetRequest {
    fastanumer: string;
    audkenni: string;
}

export interface PingPostRequest {
    skilabod: Skilabod;
}

export interface PostnumerGetPostnumerRequest {
    id: number;
}

export interface RettindiFyrirIslandIsGetStaktRequest {
    audkenni: string;
    locale?: string | null;
}

export interface SamkynjaTolfraediGetRequest {
    audkenni: string;
}

export interface SkiptaUmSkraningaradilaDanarbusPostRequest {
    skiptaUmSkraningaradili: SkiptaUmSkraningaradili;
}

export interface SkraMottakaGognPostRequest {
    syslSkeyti: SyslSkeyti;
}

export interface SkraSveinsbrefCreateSveinsbrefRequest {
    skraSveinsbrefModel: Array<SkraSveinsbrefModel>;
}

export interface SkraningaradiliDanarbusGetRequest {
    kennitala: string;
    audkenni: string;
}

export interface StadaUndirritunarSkjalsPostRequest {
    stadaUndirritunarSkjalsSkeyti: StadaUndirritunarSkjalsSkeyti;
}

export interface StaediskortaMalGetStaediskortRequest {
    kennitala?: string | null;
}

export interface StarfsrettindiGetRequest {
    audkenni: string;
}

export interface StofnaskjalOgSendaTilUndirritunarPostRequest {
    stofnaskjalOgSendaTilUndirritunarSkeyti: StofnaskjalOgSendaTilUndirritunarSkeyti;
}

export interface SveinsbrefGetRequest {
    audkenni: string;
}

export interface SyslMottakaGognPostRequest {
    syslSkeyti: SyslSkeyti;
}

export interface SyslMottakaVilluprofaGognPostRequest {
    syslSkeyti: SyslSkeyti;
}

export interface SyslSaekjaSkraPostRequest {
    syslSekjaSkra: SyslSekjaSkra;
}

export interface TaekifaerisleyfiGetRequest {
    audkenni: string;
}

export interface TrufelogOgLifsskodunarfelogGetRequest {
    audkenni: string;
}

export interface UppbodGetRequest {
    audkenni: string;
}

export interface UpplysingarRadstofunDanarbusPostRequest {
    fyrirspurn: Fyrirspurn;
}

export interface UpplysingarUrDanarbuiErfdafjarskattPostRequest {
    fyrirspurn: Fyrirspurn;
}

export interface UpplysingarUrDanarbuiPostRequest {
    fyrirspurn: Fyrirspurn;
}

export interface Vedbokarvottord2PostRequest {
    vedbandayfirlitMargirSkeyti: VedbandayfirlitMargirSkeyti;
}

export interface VedbokarvottordPostRequest {
    vedbandayfirlitSkeyti: VedbandayfirlitSkeyti;
}

export interface VedbokavottordRegluverkiPostRequest {
    vedbandayfirlitSkeyti: VedbandayfirlitSkeyti;
}

export interface VerdbrefamidlararGetRequest {
    audkenni: string;
}

export interface VirkLeyfiCsvGetRequest {
    audkenni: string;
}

export interface VirkLeyfiGetRequest {
    audkenni: string;
    searchBy?: string | null;
    pageNumber?: number;
    pageSize?: number;
}

export interface VirkLeyfiMedFastanumerumGetRequest {
    audkenni: string;
    searchBy?: string | null;
    pageNumber?: number;
    pageSize?: number;
}

export interface VirkarHeimagistingarGetRequest {
    audkenni: string;
}

export interface VirkarHeimagistingarGet2Request {
    audkenni: string;
    ar: string;
}

export interface YfirlitUmFramvinduSkiptaPostRequest {
    fyrirspurn: Fyrirspurn;
}

/**
 * 
 */
export class SyslumennApi extends runtime.BaseAPI {

    /**
     */
    async adfarabeidnirHeimildaflokkurGetAdfarabeidnirHeimildaflokkurRaw(requestParameters: AdfarabeidnirHeimildaflokkurGetAdfarabeidnirHeimildaflokkurRequest): Promise<runtime.ApiResponse<AdfarabeidnirHeimildaflokkur>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling adfarabeidnirHeimildaflokkurGetAdfarabeidnirHeimildaflokkur.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWTToken authentication
        }

        const response = await this.request({
            path: `/v1/AdfarabeidnirHeimildaflokkur/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AdfarabeidnirHeimildaflokkurFromJSON(jsonValue));
    }

    /**
     */
    async adfarabeidnirHeimildaflokkurGetAdfarabeidnirHeimildaflokkur(requestParameters: AdfarabeidnirHeimildaflokkurGetAdfarabeidnirHeimildaflokkurRequest): Promise<AdfarabeidnirHeimildaflokkur> {
        const response = await this.adfarabeidnirHeimildaflokkurGetAdfarabeidnirHeimildaflokkurRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async adfarabeidnirHeimildaflokkurGetAdfarabeidnirHeimildaflokkurAllRaw(): Promise<runtime.ApiResponse<Array<AdfarabeidnirHeimildaflokkur>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWTToken authentication
        }

        const response = await this.request({
            path: `/v1/AdfarabeidnirHeimildaflokkur`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AdfarabeidnirHeimildaflokkurFromJSON));
    }

    /**
     */
    async adfarabeidnirHeimildaflokkurGetAdfarabeidnirHeimildaflokkurAll(): Promise<Array<AdfarabeidnirHeimildaflokkur>> {
        const response = await this.adfarabeidnirHeimildaflokkurGetAdfarabeidnirHeimildaflokkurAllRaw();
        return await response.value();
    }

    /**
     */
    async afengisleyfiGetRaw(requestParameters: AfengisleyfiGetRequest): Promise<runtime.ApiResponse<Array<Afengisleyfi>>> {
        if (requestParameters.audkenni === null || requestParameters.audkenni === undefined) {
            throw new runtime.RequiredError('audkenni','Required parameter requestParameters.audkenni was null or undefined when calling afengisleyfiGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWTToken authentication
        }

        const response = await this.request({
            path: `/api/Afengisleyfi/{audkenni}`.replace(`{${"audkenni"}}`, encodeURIComponent(String(requestParameters.audkenni))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AfengisleyfiFromJSON));
    }

    /**
     */
    async afengisleyfiGet(requestParameters: AfengisleyfiGetRequest): Promise<Array<Afengisleyfi>> {
        const response = await this.afengisleyfiGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async afgreidaSakavottordPostRaw(requestParameters: AfgreidaSakavottordPostRequest): Promise<runtime.ApiResponse<Skilabod>> {
        if (requestParameters.syslSkeyti === null || requestParameters.syslSkeyti === undefined) {
            throw new runtime.RequiredError('syslSkeyti','Required parameter requestParameters.syslSkeyti was null or undefined when calling afgreidaSakavottordPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWTToken authentication
        }

        const response = await this.request({
            path: `/api/v1/AfgreidaSakavottord`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SyslSkeytiToJSON(requestParameters.syslSkeyti),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SkilabodFromJSON(jsonValue));
    }

    /**
     */
    async afgreidaSakavottordPost(requestParameters: AfgreidaSakavottordPostRequest): Promise<Skilabod> {
        const response = await this.afgreidaSakavottordPostRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async afturkallaAdfarabeidniPostRaw(requestParameters: AfturkallaAdfarabeidniPostRequest): Promise<runtime.ApiResponse<NyskraAdfaraBeidniSvar>> {
        if (requestParameters.adfarabeidniSkeyti === null || requestParameters.adfarabeidniSkeyti === undefined) {
            throw new runtime.RequiredError('adfarabeidniSkeyti','Required parameter requestParameters.adfarabeidniSkeyti was null or undefined when calling afturkallaAdfarabeidniPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWTToken authentication
        }

        const response = await this.request({
            path: `/v1/AfturkallaAdfarabeidni`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AdfarabeidniSkeytiToJSON(requestParameters.adfarabeidniSkeyti),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => NyskraAdfaraBeidniSvarFromJSON(jsonValue));
    }

    /**
     */
    async afturkallaAdfarabeidniPost(requestParameters: AfturkallaAdfarabeidniPostRequest): Promise<NyskraAdfaraBeidniSvar> {
        const response = await this.afturkallaAdfarabeidniPostRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async almennFyrirspurnGetRaw(requestParameters: AlmennFyrirspurnGetRequest): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.audkenni === null || requestParameters.audkenni === undefined) {
            throw new runtime.RequiredError('audkenni','Required parameter requestParameters.audkenni was null or undefined when calling almennFyrirspurnGet.');
        }

        if (requestParameters.eining === null || requestParameters.eining === undefined) {
            throw new runtime.RequiredError('eining','Required parameter requestParameters.eining was null or undefined when calling almennFyrirspurnGet.');
        }

        if (requestParameters.adgerd === null || requestParameters.adgerd === undefined) {
            throw new runtime.RequiredError('adgerd','Required parameter requestParameters.adgerd was null or undefined when calling almennFyrirspurnGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWTToken authentication
        }

        const response = await this.request({
            path: `/api/AlmennFyrirspurn/{audkenni}/{eining}/{adgerd}`.replace(`{${"audkenni"}}`, encodeURIComponent(String(requestParameters.audkenni))).replace(`{${"eining"}}`, encodeURIComponent(String(requestParameters.eining))).replace(`{${"adgerd"}}`, encodeURIComponent(String(requestParameters.adgerd))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async almennFyrirspurnGet(requestParameters: AlmennFyrirspurnGetRequest): Promise<string> {
        const response = await this.almennFyrirspurnGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async almennUmsoknPostRaw(requestParameters: AlmennUmsoknPostRequest): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.applicationSystem === null || requestParameters.applicationSystem === undefined) {
            throw new runtime.RequiredError('applicationSystem','Required parameter requestParameters.applicationSystem was null or undefined when calling almennUmsoknPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWTToken authentication
        }

        const response = await this.request({
            path: `/api/AlmennUmsokn`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApplicationSystemToJSON(requestParameters.applicationSystem),
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async almennUmsoknPost(requestParameters: AlmennUmsoknPostRequest): Promise<string> {
        const response = await this.almennUmsoknPostRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async almennUmsoknPost2Raw(requestParameters: AlmennUmsoknPost2Request): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.applicationFilesContent === null || requestParameters.applicationFilesContent === undefined) {
            throw new runtime.RequiredError('applicationFilesContent','Required parameter requestParameters.applicationFilesContent was null or undefined when calling almennUmsoknPost2.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWTToken authentication
        }

        const response = await this.request({
            path: `/api/AlmennUmsokn/Upload`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApplicationFilesContentToJSON(requestParameters.applicationFilesContent),
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async almennUmsoknPost2(requestParameters: AlmennUmsoknPost2Request): Promise<string> {
        const response = await this.almennUmsoknPost2Raw(requestParameters);
        return await response.value();
    }

    /**
     */
    async almennUmsoknRegluverkPostRaw(requestParameters: AlmennUmsoknRegluverkPostRequest): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.rootReglusett === null || requestParameters.rootReglusett === undefined) {
            throw new runtime.RequiredError('rootReglusett','Required parameter requestParameters.rootReglusett was null or undefined when calling almennUmsoknRegluverkPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWTToken authentication
        }

        const response = await this.request({
            path: `/api/AlmennUmsoknRegluverk`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RootReglusettToJSON(requestParameters.rootReglusett),
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async almennUmsoknRegluverkPost(requestParameters: AlmennUmsoknRegluverkPostRequest): Promise<string> {
        const response = await this.almennUmsoknRegluverkPostRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async arangurslausFraDagsPostRaw(requestParameters: ArangurslausFraDagsPostRequest): Promise<runtime.ApiResponse<AranuslausSvar>> {
        if (requestParameters.aranuslausFyrirspurn === null || requestParameters.aranuslausFyrirspurn === undefined) {
            throw new runtime.RequiredError('aranuslausFyrirspurn','Required parameter requestParameters.aranuslausFyrirspurn was null or undefined when calling arangurslausFraDagsPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWTToken authentication
        }

        const response = await this.request({
            path: `/v1/ArangurslausFraDags`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AranuslausFyrirspurnToJSON(requestParameters.aranuslausFyrirspurn),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AranuslausSvarFromJSON(jsonValue));
    }

    /**
     */
    async arangurslausFraDagsPost(requestParameters: ArangurslausFraDagsPostRequest): Promise<AranuslausSvar> {
        const response = await this.arangurslausFraDagsPostRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async arangurslausFraTilDagsPostRaw(requestParameters: ArangurslausFraTilDagsPostRequest): Promise<runtime.ApiResponse<AranuslausFraTilSvar>> {
        if (requestParameters.aranuslausFratilFyrirspurn === null || requestParameters.aranuslausFratilFyrirspurn === undefined) {
            throw new runtime.RequiredError('aranuslausFratilFyrirspurn','Required parameter requestParameters.aranuslausFratilFyrirspurn was null or undefined when calling arangurslausFraTilDagsPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWTToken authentication
        }

        const response = await this.request({
            path: `/v1/ArangurslausFraTilDags`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AranuslausFratilFyrirspurnToJSON(requestParameters.aranuslausFratilFyrirspurn),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AranuslausFraTilSvarFromJSON(jsonValue));
    }

    /**
     */
    async arangurslausFraTilDagsPost(requestParameters: ArangurslausFraTilDagsPostRequest): Promise<AranuslausFraTilSvar> {
        const response = await this.arangurslausFraTilDagsPostRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async bankaupplysingarDanarbusPostRaw(requestParameters: BankaupplysingarDanarbusPostRequest): Promise<runtime.ApiResponse<BankaupplysingarDanarbusSkeyti>> {
        if (requestParameters.bankaupplysingarDanarbusSkeyti === null || requestParameters.bankaupplysingarDanarbusSkeyti === undefined) {
            throw new runtime.RequiredError('bankaupplysingarDanarbusSkeyti','Required parameter requestParameters.bankaupplysingarDanarbusSkeyti was null or undefined when calling bankaupplysingarDanarbusPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWTToken authentication
        }

        const response = await this.request({
            path: `/v1/Danarbu/BankaupplysingarDanarbus`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BankaupplysingarDanarbusSkeytiToJSON(requestParameters.bankaupplysingarDanarbusSkeyti),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => BankaupplysingarDanarbusSkeytiFromJSON(jsonValue));
    }

    /**
     */
    async bankaupplysingarDanarbusPost(requestParameters: BankaupplysingarDanarbusPostRequest): Promise<BankaupplysingarDanarbusSkeyti> {
        const response = await this.bankaupplysingarDanarbusPostRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async brennuleyfiGetRaw(requestParameters: BrennuleyfiGetRequest): Promise<runtime.ApiResponse<Array<Brennuleyfi>>> {
        if (requestParameters.audkenni === null || requestParameters.audkenni === undefined) {
            throw new runtime.RequiredError('audkenni','Required parameter requestParameters.audkenni was null or undefined when calling brennuleyfiGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWTToken authentication
        }

        const response = await this.request({
            path: `/api/Brennuleyfi/{audkenni}`.replace(`{${"audkenni"}}`, encodeURIComponent(String(requestParameters.audkenni))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BrennuleyfiFromJSON));
    }

    /**
     */
    async brennuleyfiGet(requestParameters: BrennuleyfiGetRequest): Promise<Array<Brennuleyfi>> {
        const response = await this.brennuleyfiGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async danarbuAlgengTengslGetRaw(requestParameters: DanarbuAlgengTengslGetRequest): Promise<runtime.ApiResponse<Array<AlgengTengsl>>> {
        if (requestParameters.audkenni === null || requestParameters.audkenni === undefined) {
            throw new runtime.RequiredError('audkenni','Required parameter requestParameters.audkenni was null or undefined when calling danarbuAlgengTengslGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWTToken authentication
        }

        const response = await this.request({
            path: `/api/DanarbuAlgengTengsl/{audkenni}`.replace(`{${"audkenni"}}`, encodeURIComponent(String(requestParameters.audkenni))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AlgengTengslFromJSON));
    }

    /**
     */
    async danarbuAlgengTengslGet(requestParameters: DanarbuAlgengTengslGetRequest): Promise<Array<AlgengTengsl>> {
        const response = await this.danarbuAlgengTengslGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async danarbuAlgengTengslUmsaekjandaGetRaw(requestParameters: DanarbuAlgengTengslUmsaekjandaGetRequest): Promise<runtime.ApiResponse<Array<AlgengUmsaekjandaTengsl>>> {
        if (requestParameters.audkenni === null || requestParameters.audkenni === undefined) {
            throw new runtime.RequiredError('audkenni','Required parameter requestParameters.audkenni was null or undefined when calling danarbuAlgengTengslUmsaekjandaGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWTToken authentication
        }

        const response = await this.request({
            path: `/api/DanarbuAlgengTengslUmsaekjanda/{audkenni}`.replace(`{${"audkenni"}}`, encodeURIComponent(String(requestParameters.audkenni))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AlgengUmsaekjandaTengslFromJSON));
    }

    /**
     */
    async danarbuAlgengTengslUmsaekjandaGet(requestParameters: DanarbuAlgengTengslUmsaekjandaGetRequest): Promise<Array<AlgengUmsaekjandaTengsl>> {
        const response = await this.danarbuAlgengTengslUmsaekjandaGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async einstaklingaSkraGetRaw(requestParameters: EinstaklingaSkraGetRequest): Promise<runtime.ApiResponse<ThjoldskraEnstaklingar>> {
        if (requestParameters.audkenni === null || requestParameters.audkenni === undefined) {
            throw new runtime.RequiredError('audkenni','Required parameter requestParameters.audkenni was null or undefined when calling einstaklingaSkraGet.');
        }

        if (requestParameters.kennitala === null || requestParameters.kennitala === undefined) {
            throw new runtime.RequiredError('kennitala','Required parameter requestParameters.kennitala was null or undefined when calling einstaklingaSkraGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWTToken authentication
        }

        const response = await this.request({
            path: `/api/EinstaklingaSkra/{audkenni}/{kennitala}`.replace(`{${"audkenni"}}`, encodeURIComponent(String(requestParameters.audkenni))).replace(`{${"kennitala"}}`, encodeURIComponent(String(requestParameters.kennitala))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ThjoldskraEnstaklingarFromJSON(jsonValue));
    }

    /**
     */
    async einstaklingaSkraGet(requestParameters: EinstaklingaSkraGetRequest): Promise<ThjoldskraEnstaklingar> {
        const response = await this.einstaklingaSkraGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async embaettiGetEmbaettiRaw(requestParameters: EmbaettiGetEmbaettiRequest): Promise<runtime.ApiResponse<Embaetti>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling embaettiGetEmbaetti.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWTToken authentication
        }

        const response = await this.request({
            path: `/v1/Embaetti/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmbaettiFromJSON(jsonValue));
    }

    /**
     */
    async embaettiGetEmbaetti(requestParameters: EmbaettiGetEmbaettiRequest): Promise<Embaetti> {
        const response = await this.embaettiGetEmbaettiRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async embaettiGetEmbaettiAllRaw(): Promise<runtime.ApiResponse<Array<Embaetti>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWTToken authentication
        }

        const response = await this.request({
            path: `/v1/Embaetti`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EmbaettiFromJSON));
    }

    /**
     */
    async embaettiGetEmbaettiAll(): Promise<Array<Embaetti>> {
        const response = await this.embaettiGetEmbaettiAllRaw();
        return await response.value();
    }

    /**
     */
    async embaettiOgStarfsstodvarGetEmbaettiRaw(): Promise<runtime.ApiResponse<Array<EmbaettiOgStarfsstodvar>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWTToken authentication
        }

        const response = await this.request({
            path: `/v1/EmbaettiOgStarfsstodvar`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EmbaettiOgStarfsstodvarFromJSON));
    }

    /**
     */
    async embaettiOgStarfsstodvarGetEmbaetti(): Promise<Array<EmbaettiOgStarfsstodvar>> {
        const response = await this.embaettiOgStarfsstodvarGetEmbaettiRaw();
        return await response.value();
    }

    /**
     */
    async erfdafjarskatturGetRaw(requestParameters: ErfdafjarskatturGetRequest): Promise<runtime.ApiResponse<ErfdafjarskatturSvar>> {
        if (requestParameters.audkenni === null || requestParameters.audkenni === undefined) {
            throw new runtime.RequiredError('audkenni','Required parameter requestParameters.audkenni was null or undefined when calling erfdafjarskatturGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.malsnumer !== undefined) {
            queryParameters['malsnumer'] = requestParameters.malsnumer;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWTToken authentication
        }

        const response = await this.request({
            path: `/api/Erfdafjarskattur/{audkenni}`.replace(`{${"audkenni"}}`, encodeURIComponent(String(requestParameters.audkenni))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ErfdafjarskatturSvarFromJSON(jsonValue));
    }

    /**
     */
    async erfdafjarskatturGet(requestParameters: ErfdafjarskatturGetRequest): Promise<ErfdafjarskatturSvar> {
        const response = await this.erfdafjarskatturGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async erfdarskraJaNeiGetRaw(requestParameters: ErfdarskraJaNeiGetRequest): Promise<runtime.ApiResponse<ErfdarskraSkeyti>> {
        if (requestParameters.kennitala === null || requestParameters.kennitala === undefined) {
            throw new runtime.RequiredError('kennitala','Required parameter requestParameters.kennitala was null or undefined when calling erfdarskraJaNeiGet.');
        }

        if (requestParameters.audkenni === null || requestParameters.audkenni === undefined) {
            throw new runtime.RequiredError('audkenni','Required parameter requestParameters.audkenni was null or undefined when calling erfdarskraJaNeiGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWTToken authentication
        }

        const response = await this.request({
            path: `/api/ErfdarskraJaNei/{kennitala}/{audkenni}`.replace(`{${"kennitala"}}`, encodeURIComponent(String(requestParameters.kennitala))).replace(`{${"audkenni"}}`, encodeURIComponent(String(requestParameters.audkenni))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ErfdarskraSkeytiFromJSON(jsonValue));
    }

    /**
     */
    async erfdarskraJaNeiGet(requestParameters: ErfdarskraJaNeiGetRequest): Promise<ErfdarskraSkeyti> {
        const response = await this.erfdarskraJaNeiGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async faVottordUpplysingarGetRaw(requestParameters: FaVottordUpplysingarGetRequest): Promise<runtime.ApiResponse<VottordSkeyti>> {
        if (requestParameters.audkenni === null || requestParameters.audkenni === undefined) {
            throw new runtime.RequiredError('audkenni','Required parameter requestParameters.audkenni was null or undefined when calling faVottordUpplysingarGet.');
        }

        if (requestParameters.kennitala === null || requestParameters.kennitala === undefined) {
            throw new runtime.RequiredError('kennitala','Required parameter requestParameters.kennitala was null or undefined when calling faVottordUpplysingarGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWTToken authentication
        }

        const response = await this.request({
            path: `/api/FaVottordUpplysingar/{audkenni}/{kennitala}`.replace(`{${"audkenni"}}`, encodeURIComponent(String(requestParameters.audkenni))).replace(`{${"kennitala"}}`, encodeURIComponent(String(requestParameters.kennitala))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => VottordSkeytiFromJSON(jsonValue));
    }

    /**
     */
    async faVottordUpplysingarGet(requestParameters: FaVottordUpplysingarGetRequest): Promise<VottordSkeyti> {
        const response = await this.faVottordUpplysingarGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async fasteignOgEigendurGetRaw(requestParameters: FasteignOgEigendurGetRequest): Promise<runtime.ApiResponse<Array<FasteignOgEigendur>>> {
        if (requestParameters.fastanumer === null || requestParameters.fastanumer === undefined) {
            throw new runtime.RequiredError('fastanumer','Required parameter requestParameters.fastanumer was null or undefined when calling fasteignOgEigendurGet.');
        }

        if (requestParameters.audkenni === null || requestParameters.audkenni === undefined) {
            throw new runtime.RequiredError('audkenni','Required parameter requestParameters.audkenni was null or undefined when calling fasteignOgEigendurGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWTToken authentication
        }

        const response = await this.request({
            path: `/api/FasteignOgEigendur/{fastanumer}/{audkenni}`.replace(`{${"fastanumer"}}`, encodeURIComponent(String(requestParameters.fastanumer))).replace(`{${"audkenni"}}`, encodeURIComponent(String(requestParameters.audkenni))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FasteignOgEigendurFromJSON));
    }

    /**
     */
    async fasteignOgEigendurGet(requestParameters: FasteignOgEigendurGetRequest): Promise<Array<FasteignOgEigendur>> {
        const response = await this.fasteignOgEigendurGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async fasteignasalarGetRaw(requestParameters: FasteignasalarGetRequest): Promise<runtime.ApiResponse<Array<Fasteignasalar>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.audkenni !== undefined) {
            queryParameters['audkenni'] = requestParameters.audkenni;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWTToken authentication
        }

        const response = await this.request({
            path: `/api/Fasteignasalar`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FasteignasalarFromJSON));
    }

    /**
     */
    async fasteignasalarGet(requestParameters: FasteignasalarGetRequest): Promise<Array<Fasteignasalar>> {
        const response = await this.fasteignasalarGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async heimagistingarGetRaw(requestParameters: HeimagistingarGetRequest): Promise<runtime.ApiResponse<Array<HeimagistingarModel>>> {
        if (requestParameters.audkenni === null || requestParameters.audkenni === undefined) {
            throw new runtime.RequiredError('audkenni','Required parameter requestParameters.audkenni was null or undefined when calling heimagistingarGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWTToken authentication
        }

        const response = await this.request({
            path: `/v1/Heimagistingar/{audkenni}`.replace(`{${"audkenni"}}`, encodeURIComponent(String(requestParameters.audkenni))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(HeimagistingarModelFromJSON));
    }

    /**
     */
    async heimagistingarGet(requestParameters: HeimagistingarGetRequest): Promise<Array<HeimagistingarModel>> {
        const response = await this.heimagistingarGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async heimagistingarPutRaw(requestParameters: HeimagistingarPutRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.audkenni === null || requestParameters.audkenni === undefined) {
            throw new runtime.RequiredError('audkenni','Required parameter requestParameters.audkenni was null or undefined when calling heimagistingarPut.');
        }

        if (requestParameters.uppfaeraHeimagistingarModel === null || requestParameters.uppfaeraHeimagistingarModel === undefined) {
            throw new runtime.RequiredError('uppfaeraHeimagistingarModel','Required parameter requestParameters.uppfaeraHeimagistingarModel was null or undefined when calling heimagistingarPut.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWTToken authentication
        }

        const response = await this.request({
            path: `/v1/Heimagistingar/{audkenni}`.replace(`{${"audkenni"}}`, encodeURIComponent(String(requestParameters.audkenni))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UppfaeraHeimagistingarModelToJSON(requestParameters.uppfaeraHeimagistingarModel),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async heimagistingarPut(requestParameters: HeimagistingarPutRequest): Promise<void> {
        await this.heimagistingarPutRaw(requestParameters);
    }

    /**
     */
    async idngreinarMeistaraGetRaw(): Promise<runtime.ApiResponse<Array<string>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWTToken authentication
        }

        const response = await this.request({
            path: `/v1/IdngreinarMeistara`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async idngreinarMeistaraGet(): Promise<Array<string>> {
        const response = await this.idngreinarMeistaraGetRaw();
        return await response.value();
    }

    /**
     */
    async innsiglaSkjolPostRaw(requestParameters: InnsiglaSkjolPostRequest): Promise<runtime.ApiResponse<InnsigludSkjol>> {
        if (requestParameters.innsiglaSkjolSkeyti === null || requestParameters.innsiglaSkjolSkeyti === undefined) {
            throw new runtime.RequiredError('innsiglaSkjolSkeyti','Required parameter requestParameters.innsiglaSkjolSkeyti was null or undefined when calling innsiglaSkjolPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWTToken authentication
        }

        const response = await this.request({
            path: `/api/InnsiglaSkjol`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InnsiglaSkjolSkeytiToJSON(requestParameters.innsiglaSkjolSkeyti),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InnsigludSkjolFromJSON(jsonValue));
    }

    /**
     */
    async innsiglaSkjolPost(requestParameters: InnsiglaSkjolPostRequest): Promise<InnsigludSkjol> {
        const response = await this.innsiglaSkjolPostRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async innsiglunPostRaw(requestParameters: InnsiglunPostRequest): Promise<runtime.ApiResponse<SvarSkeyti>> {
        if (requestParameters.innsiglaSkeyti === null || requestParameters.innsiglaSkeyti === undefined) {
            throw new runtime.RequiredError('innsiglaSkeyti','Required parameter requestParameters.innsiglaSkeyti was null or undefined when calling innsiglunPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWTToken authentication
        }

        const response = await this.request({
            path: `/api/Innsiglun`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InnsiglaSkeytiToJSON(requestParameters.innsiglaSkeyti),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SvarSkeytiFromJSON(jsonValue));
    }

    /**
     */
    async innsiglunPost(requestParameters: InnsiglunPostRequest): Promise<SvarSkeyti> {
        const response = await this.innsiglunPostRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async innskraningPostRaw(requestParameters: InnskraningPostRequest): Promise<runtime.ApiResponse<InnskraningSvarSkeyti>> {
        if (requestParameters.apiNotandi === null || requestParameters.apiNotandi === undefined) {
            throw new runtime.RequiredError('apiNotandi','Required parameter requestParameters.apiNotandi was null or undefined when calling innskraningPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWTToken authentication
        }

        const response = await this.request({
            path: `/v1/Innskraning`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiNotandiToJSON(requestParameters.apiNotandi),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InnskraningSvarSkeytiFromJSON(jsonValue));
    }

    /**
     */
    async innskraningPost(requestParameters: InnskraningPostRequest): Promise<InnskraningSvarSkeyti> {
        const response = await this.innskraningPostRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async kannaKonnunarvottordGetRaw(requestParameters: KannaKonnunarvottordGetRequest): Promise<runtime.ApiResponse<KonnunarvottordSvar>> {
        if (requestParameters.audkenni === null || requestParameters.audkenni === undefined) {
            throw new runtime.RequiredError('audkenni','Required parameter requestParameters.audkenni was null or undefined when calling kannaKonnunarvottordGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.kennitala !== undefined) {
            queryParameters['kennitala'] = requestParameters.kennitala;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWTToken authentication
        }

        const response = await this.request({
            path: `/api/KannaKonnunarvottord/{audkenni}`.replace(`{${"audkenni"}}`, encodeURIComponent(String(requestParameters.audkenni))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => KonnunarvottordSvarFromJSON(jsonValue));
    }

    /**
     */
    async kannaKonnunarvottordGet(requestParameters: KannaKonnunarvottordGetRequest): Promise<KonnunarvottordSvar> {
        const response = await this.kannaKonnunarvottordGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async kannaRafraenSkilrikiGetRaw(requestParameters: KannaRafraenSkilrikiGetRequest): Promise<runtime.ApiResponse<KannaRafraenSkilrikiSimiKennitala>> {
        if (requestParameters.simi === null || requestParameters.simi === undefined) {
            throw new runtime.RequiredError('simi','Required parameter requestParameters.simi was null or undefined when calling kannaRafraenSkilrikiGet.');
        }

        if (requestParameters.kennitala === null || requestParameters.kennitala === undefined) {
            throw new runtime.RequiredError('kennitala','Required parameter requestParameters.kennitala was null or undefined when calling kannaRafraenSkilrikiGet.');
        }

        if (requestParameters.audkenni === null || requestParameters.audkenni === undefined) {
            throw new runtime.RequiredError('audkenni','Required parameter requestParameters.audkenni was null or undefined when calling kannaRafraenSkilrikiGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWTToken authentication
        }

        const response = await this.request({
            path: `/api/KannaRafraenSkilriki/{simi}/{kennitala}/{audkenni}`.replace(`{${"simi"}}`, encodeURIComponent(String(requestParameters.simi))).replace(`{${"kennitala"}}`, encodeURIComponent(String(requestParameters.kennitala))).replace(`{${"audkenni"}}`, encodeURIComponent(String(requestParameters.audkenni))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => KannaRafraenSkilrikiSimiKennitalaFromJSON(jsonValue));
    }

    /**
     */
    async kannaRafraenSkilrikiGet(requestParameters: KannaRafraenSkilrikiGetRequest): Promise<KannaRafraenSkilrikiSimiKennitala> {
        const response = await this.kannaRafraenSkilrikiGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async kannaRafraenSkilrikiGet2Raw(requestParameters: KannaRafraenSkilrikiGet2Request): Promise<runtime.ApiResponse<KannaRafraenSkilrikiKennitala>> {
        if (requestParameters.kennitala === null || requestParameters.kennitala === undefined) {
            throw new runtime.RequiredError('kennitala','Required parameter requestParameters.kennitala was null or undefined when calling kannaRafraenSkilrikiGet2.');
        }

        if (requestParameters.audkenni === null || requestParameters.audkenni === undefined) {
            throw new runtime.RequiredError('audkenni','Required parameter requestParameters.audkenni was null or undefined when calling kannaRafraenSkilrikiGet2.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWTToken authentication
        }

        const response = await this.request({
            path: `/api/KannaRafraenSkilriki/{kennitala}/{audkenni}`.replace(`{${"kennitala"}}`, encodeURIComponent(String(requestParameters.kennitala))).replace(`{${"audkenni"}}`, encodeURIComponent(String(requestParameters.audkenni))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => KannaRafraenSkilrikiKennitalaFromJSON(jsonValue));
    }

    /**
     */
    async kannaRafraenSkilrikiGet2(requestParameters: KannaRafraenSkilrikiGet2Request): Promise<KannaRafraenSkilrikiKennitala> {
        const response = await this.kannaRafraenSkilrikiGet2Raw(requestParameters);
        return await response.value();
    }

    /**
     */
    async kannaSakavottordAuthGetRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWTToken authentication
        }

        const response = await this.request({
            path: `/api/KannaSakavottordAuth`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async kannaSakavottordAuthGet(): Promise<void> {
        await this.kannaSakavottordAuthGetRaw();
    }

    /**
     */
    async kannaSakavottordGetRaw(requestParameters: KannaSakavottordGetRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.audkenni === null || requestParameters.audkenni === undefined) {
            throw new runtime.RequiredError('audkenni','Required parameter requestParameters.audkenni was null or undefined when calling kannaSakavottordGet.');
        }

        if (requestParameters.kennitala === null || requestParameters.kennitala === undefined) {
            throw new runtime.RequiredError('kennitala','Required parameter requestParameters.kennitala was null or undefined when calling kannaSakavottordGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWTToken authentication
        }

        const response = await this.request({
            path: `/api/KannaSakavottord/{audkenni}/{kennitala}`.replace(`{${"audkenni"}}`, encodeURIComponent(String(requestParameters.audkenni))).replace(`{${"kennitala"}}`, encodeURIComponent(String(requestParameters.kennitala))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async kannaSakavottordGet(requestParameters: KannaSakavottordGetRequest): Promise<void> {
        await this.kannaSakavottordGetRaw(requestParameters);
    }

    /**
     */
    async kaupmaliJaNeiGetRaw(requestParameters: KaupmaliJaNeiGetRequest): Promise<runtime.ApiResponse<KaupmaliSkeyti>> {
        if (requestParameters.kennitala === null || requestParameters.kennitala === undefined) {
            throw new runtime.RequiredError('kennitala','Required parameter requestParameters.kennitala was null or undefined when calling kaupmaliJaNeiGet.');
        }

        if (requestParameters.audkenni === null || requestParameters.audkenni === undefined) {
            throw new runtime.RequiredError('audkenni','Required parameter requestParameters.audkenni was null or undefined when calling kaupmaliJaNeiGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWTToken authentication
        }

        const response = await this.request({
            path: `/api/KaupmaliJaNei/{kennitala}/{audkenni}`.replace(`{${"kennitala"}}`, encodeURIComponent(String(requestParameters.kennitala))).replace(`{${"audkenni"}}`, encodeURIComponent(String(requestParameters.audkenni))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => KaupmaliSkeytiFromJSON(jsonValue));
    }

    /**
     */
    async kaupmaliJaNeiGet(requestParameters: KaupmaliJaNeiGetRequest): Promise<KaupmaliSkeyti> {
        const response = await this.kaupmaliJaNeiGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async leitaAdKennitoluIThjodskraPostRaw(requestParameters: LeitaAdKennitoluIThjodskraPostRequest): Promise<runtime.ApiResponse<ThjodskraSvarSkeyti>> {
        if (requestParameters.thjodskraSkeyti === null || requestParameters.thjodskraSkeyti === undefined) {
            throw new runtime.RequiredError('thjodskraSkeyti','Required parameter requestParameters.thjodskraSkeyti was null or undefined when calling leitaAdKennitoluIThjodskraPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWTToken authentication
        }

        const response = await this.request({
            path: `/api/LeitaAdKennitoluIThjodskra`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ThjodskraSkeytiToJSON(requestParameters.thjodskraSkeyti),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ThjodskraSvarSkeytiFromJSON(jsonValue));
    }

    /**
     */
    async leitaAdKennitoluIThjodskraPost(requestParameters: LeitaAdKennitoluIThjodskraPostRequest): Promise<ThjodskraSvarSkeyti> {
        const response = await this.leitaAdKennitoluIThjodskraPostRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async logadilaskraGetRaw(requestParameters: LogadilaskraGetRequest): Promise<runtime.ApiResponse<ThjodskraLogadilar>> {
        if (requestParameters.kennitalaEdaNafnEdaHeimlisfang === null || requestParameters.kennitalaEdaNafnEdaHeimlisfang === undefined) {
            throw new runtime.RequiredError('kennitalaEdaNafnEdaHeimlisfang','Required parameter requestParameters.kennitalaEdaNafnEdaHeimlisfang was null or undefined when calling logadilaskraGet.');
        }

        if (requestParameters.audkenni === null || requestParameters.audkenni === undefined) {
            throw new runtime.RequiredError('audkenni','Required parameter requestParameters.audkenni was null or undefined when calling logadilaskraGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWTToken authentication
        }

        const response = await this.request({
            path: `/api/Logadilaskra/{kennitalaEdaNafnEdaHeimlisfang}/{audkenni}`.replace(`{${"kennitalaEdaNafnEdaHeimlisfang"}}`, encodeURIComponent(String(requestParameters.kennitalaEdaNafnEdaHeimlisfang))).replace(`{${"audkenni"}}`, encodeURIComponent(String(requestParameters.audkenni))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ThjodskraLogadilarFromJSON(jsonValue));
    }

    /**
     */
    async logadilaskraGet(requestParameters: LogadilaskraGetRequest): Promise<ThjodskraLogadilar> {
        const response = await this.logadilaskraGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async logmannalistiGetRaw(requestParameters: LogmannalistiGetRequest): Promise<runtime.ApiResponse<Array<Logmenn>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.audkenni !== undefined) {
            queryParameters['audkenni'] = requestParameters.audkenni;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWTToken authentication
        }

        const response = await this.request({
            path: `/api/Logmannalisti`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LogmennFromJSON));
    }

    /**
     */
    async logmannalistiGet(requestParameters: LogmannalistiGetRequest): Promise<Array<Logmenn>> {
        const response = await this.logmannalistiGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async logradamadurGetRaw(requestParameters: LogradamadurGetRequest): Promise<runtime.ApiResponse<Array<LogradamadurSvar>>> {
        if (requestParameters.audkenni === null || requestParameters.audkenni === undefined) {
            throw new runtime.RequiredError('audkenni','Required parameter requestParameters.audkenni was null or undefined when calling logradamadurGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.kennitala !== undefined) {
            queryParameters['kennitala'] = requestParameters.kennitala;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWTToken authentication
        }

        const response = await this.request({
            path: `/api/Logradamadur/{audkenni}`.replace(`{${"audkenni"}}`, encodeURIComponent(String(requestParameters.audkenni))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LogradamadurSvarFromJSON));
    }

    /**
     */
    async logradamadurGet(requestParameters: LogradamadurGetRequest): Promise<Array<LogradamadurSvar>> {
        const response = await this.logradamadurGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async meistaraleyfiGetRaw(requestParameters: MeistaraleyfiGetRequest): Promise<runtime.ApiResponse<Array<Meistaraleyfi>>> {
        if (requestParameters.audkenni === null || requestParameters.audkenni === undefined) {
            throw new runtime.RequiredError('audkenni','Required parameter requestParameters.audkenni was null or undefined when calling meistaraleyfiGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWTToken authentication
        }

        const response = await this.request({
            path: `/api/Meistaraleyfi/{audkenni}`.replace(`{${"audkenni"}}`, encodeURIComponent(String(requestParameters.audkenni))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MeistaraleyfiFromJSON));
    }

    /**
     */
    async meistaraleyfiGet(requestParameters: MeistaraleyfiGetRequest): Promise<Array<Meistaraleyfi>> {
        const response = await this.meistaraleyfiGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async mottakaRafraentSkjalPostRaw(requestParameters: MottakaRafraentSkjalPostRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.webhookEventPayload === null || requestParameters.webhookEventPayload === undefined) {
            throw new runtime.RequiredError('webhookEventPayload','Required parameter requestParameters.webhookEventPayload was null or undefined when calling mottakaRafraentSkjalPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWTToken authentication
        }

        const response = await this.request({
            path: `/v1/Almennt/MottakaRafraentSkjal`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WebhookEventPayloadToJSON(requestParameters.webhookEventPayload),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async mottakaRafraentSkjalPost(requestParameters: MottakaRafraentSkjalPostRequest): Promise<void> {
        await this.mottakaRafraentSkjalPostRaw(requestParameters);
    }

    /**
     */
    async mottakaSkjalaUrUndirritunPostRaw(requestParameters: MottakaSkjalaUrUndirritunPostRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.webhookEventPayload === null || requestParameters.webhookEventPayload === undefined) {
            throw new runtime.RequiredError('webhookEventPayload','Required parameter requestParameters.webhookEventPayload was null or undefined when calling mottakaSkjalaUrUndirritunPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWTToken authentication
        }

        const response = await this.request({
            path: `/v1/Almennt/MottakaSkjalaUrUndirritun`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WebhookEventPayloadToJSON(requestParameters.webhookEventPayload),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async mottakaSkjalaUrUndirritunPost(requestParameters: MottakaSkjalaUrUndirritunPostRequest): Promise<void> {
        await this.mottakaSkjalaUrUndirritunPostRaw(requestParameters);
    }

    /**
     */
    async nyskraAdfaraBeidniPostRaw(requestParameters: NyskraAdfaraBeidniPostRequest): Promise<runtime.ApiResponse<NyskraAdfaraBeidniSvar>> {
        if (requestParameters.nyskraAdfaraBeidniSkeyti === null || requestParameters.nyskraAdfaraBeidniSkeyti === undefined) {
            throw new runtime.RequiredError('nyskraAdfaraBeidniSkeyti','Required parameter requestParameters.nyskraAdfaraBeidniSkeyti was null or undefined when calling nyskraAdfaraBeidniPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWTToken authentication
        }

        const response = await this.request({
            path: `/v1/NyskraAdfaraBeidni`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NyskraAdfaraBeidniSkeytiToJSON(requestParameters.nyskraAdfaraBeidniSkeyti),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => NyskraAdfaraBeidniSvarFromJSON(jsonValue));
    }

    /**
     */
    async nyskraAdfaraBeidniPost(requestParameters: NyskraAdfaraBeidniPostRequest): Promise<NyskraAdfaraBeidniSvar> {
        const response = await this.nyskraAdfaraBeidniPostRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async okutaekiGetRaw(requestParameters: OkutaekiGetRequest): Promise<runtime.ApiResponse<Okutaeki>> {
        if (requestParameters.fastanumer === null || requestParameters.fastanumer === undefined) {
            throw new runtime.RequiredError('fastanumer','Required parameter requestParameters.fastanumer was null or undefined when calling okutaekiGet.');
        }

        if (requestParameters.audkenni === null || requestParameters.audkenni === undefined) {
            throw new runtime.RequiredError('audkenni','Required parameter requestParameters.audkenni was null or undefined when calling okutaekiGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWTToken authentication
        }

        const response = await this.request({
            path: `/api/Okutaeki/{fastanumer}/{audkenni}`.replace(`{${"fastanumer"}}`, encodeURIComponent(String(requestParameters.fastanumer))).replace(`{${"audkenni"}}`, encodeURIComponent(String(requestParameters.audkenni))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OkutaekiFromJSON(jsonValue));
    }

    /**
     */
    async okutaekiGet(requestParameters: OkutaekiGetRequest): Promise<Okutaeki> {
        const response = await this.okutaekiGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async pingGetRaw(): Promise<runtime.ApiResponse<Array<string>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWTToken authentication
        }

        const response = await this.request({
            path: `/v1/Ping`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async pingGet(): Promise<Array<string>> {
        const response = await this.pingGetRaw();
        return await response.value();
    }

    /**
     */
    async pingPostRaw(requestParameters: PingPostRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.skilabod === null || requestParameters.skilabod === undefined) {
            throw new runtime.RequiredError('skilabod','Required parameter requestParameters.skilabod was null or undefined when calling pingPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWTToken authentication
        }

        const response = await this.request({
            path: `/v1/Ping`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SkilabodToJSON(requestParameters.skilabod),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async pingPost(requestParameters: PingPostRequest): Promise<void> {
        await this.pingPostRaw(requestParameters);
    }

    /**
     */
    async postnumerGetPostnumerRaw(requestParameters: PostnumerGetPostnumerRequest): Promise<runtime.ApiResponse<Postnumer>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling postnumerGetPostnumer.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWTToken authentication
        }

        const response = await this.request({
            path: `/v1/Postnumer/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PostnumerFromJSON(jsonValue));
    }

    /**
     */
    async postnumerGetPostnumer(requestParameters: PostnumerGetPostnumerRequest): Promise<Postnumer> {
        const response = await this.postnumerGetPostnumerRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async postnumerGetPostnumerAllRaw(): Promise<runtime.ApiResponse<Array<Postnumer>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWTToken authentication
        }

        const response = await this.request({
            path: `/v1/Postnumer`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PostnumerFromJSON));
    }

    /**
     */
    async postnumerGetPostnumerAll(): Promise<Array<Postnumer>> {
        const response = await this.postnumerGetPostnumerAllRaw();
        return await response.value();
    }

    /**
     */
    async rettindiFyrirIslandIsGetRaw(): Promise<runtime.ApiResponse<LeyfiListi>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWTToken authentication
        }

        const response = await this.request({
            path: `/RettindiFyrirIslandIs/RettindiFyrirIslandIs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => LeyfiListiFromJSON(jsonValue));
    }

    /**
     */
    async rettindiFyrirIslandIsGet(): Promise<LeyfiListi> {
        const response = await this.rettindiFyrirIslandIsGetRaw();
        return await response.value();
    }

    /**
     */
    async rettindiFyrirIslandIsGetStaktRaw(requestParameters: RettindiFyrirIslandIsGetStaktRequest): Promise<runtime.ApiResponse<LeyfiStakt>> {
        if (requestParameters.audkenni === null || requestParameters.audkenni === undefined) {
            throw new runtime.RequiredError('audkenni','Required parameter requestParameters.audkenni was null or undefined when calling rettindiFyrirIslandIsGetStakt.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.locale !== undefined) {
            queryParameters['locale'] = requestParameters.locale;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWTToken authentication
        }

        const response = await this.request({
            path: `/RettindiFyrirIslandIs/RettindiFyrirIslandIs/{audkenni}`.replace(`{${"audkenni"}}`, encodeURIComponent(String(requestParameters.audkenni))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => LeyfiStaktFromJSON(jsonValue));
    }

    /**
     */
    async rettindiFyrirIslandIsGetStakt(requestParameters: RettindiFyrirIslandIsGetStaktRequest): Promise<LeyfiStakt> {
        const response = await this.rettindiFyrirIslandIsGetStaktRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async samkynjaTolfraediGetRaw(requestParameters: SamkynjaTolfraediGetRequest): Promise<runtime.ApiResponse<Array<object>>> {
        if (requestParameters.audkenni === null || requestParameters.audkenni === undefined) {
            throw new runtime.RequiredError('audkenni','Required parameter requestParameters.audkenni was null or undefined when calling samkynjaTolfraediGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWTToken authentication
        }

        const response = await this.request({
            path: `/api/SamkynjaTolfraedi/{audkenni}`.replace(`{${"audkenni"}}`, encodeURIComponent(String(requestParameters.audkenni))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async samkynjaTolfraediGet(requestParameters: SamkynjaTolfraediGetRequest): Promise<Array<object>> {
        const response = await this.samkynjaTolfraediGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async skiptaUmSkraningaradilaDanarbusPostRaw(requestParameters: SkiptaUmSkraningaradilaDanarbusPostRequest): Promise<runtime.ApiResponse<SkiptaUmSkraningaradiliSkeyti>> {
        if (requestParameters.skiptaUmSkraningaradili === null || requestParameters.skiptaUmSkraningaradili === undefined) {
            throw new runtime.RequiredError('skiptaUmSkraningaradili','Required parameter requestParameters.skiptaUmSkraningaradili was null or undefined when calling skiptaUmSkraningaradilaDanarbusPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWTToken authentication
        }

        const response = await this.request({
            path: `/api/SkiptaUmSkraningaradilaDanarbus`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SkiptaUmSkraningaradiliToJSON(requestParameters.skiptaUmSkraningaradili),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SkiptaUmSkraningaradiliSkeytiFromJSON(jsonValue));
    }

    /**
     */
    async skiptaUmSkraningaradilaDanarbusPost(requestParameters: SkiptaUmSkraningaradilaDanarbusPostRequest): Promise<SkiptaUmSkraningaradiliSkeyti> {
        const response = await this.skiptaUmSkraningaradilaDanarbusPostRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async skraMottakaGognPostRaw(requestParameters: SkraMottakaGognPostRequest): Promise<runtime.ApiResponse<Skilabod>> {
        if (requestParameters.syslSkeyti === null || requestParameters.syslSkeyti === undefined) {
            throw new runtime.RequiredError('syslSkeyti','Required parameter requestParameters.syslSkeyti was null or undefined when calling skraMottakaGognPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWTToken authentication
        }

        const response = await this.request({
            path: `/v1/SkraMottakaGogn`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SyslSkeytiToJSON(requestParameters.syslSkeyti),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SkilabodFromJSON(jsonValue));
    }

    /**
     */
    async skraMottakaGognPost(requestParameters: SkraMottakaGognPostRequest): Promise<Skilabod> {
        const response = await this.skraMottakaGognPostRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async skraSveinsbrefCreateSveinsbrefRaw(requestParameters: SkraSveinsbrefCreateSveinsbrefRequest): Promise<runtime.ApiResponse<NyskraAdfaraBeidniSvar>> {
        if (requestParameters.skraSveinsbrefModel === null || requestParameters.skraSveinsbrefModel === undefined) {
            throw new runtime.RequiredError('skraSveinsbrefModel','Required parameter requestParameters.skraSveinsbrefModel was null or undefined when calling skraSveinsbrefCreateSveinsbref.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWTToken authentication
        }

        const response = await this.request({
            path: `/api/SkraSveinsbref`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.skraSveinsbrefModel.map(SkraSveinsbrefModelToJSON),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => NyskraAdfaraBeidniSvarFromJSON(jsonValue));
    }

    /**
     */
    async skraSveinsbrefCreateSveinsbref(requestParameters: SkraSveinsbrefCreateSveinsbrefRequest): Promise<NyskraAdfaraBeidniSvar> {
        const response = await this.skraSveinsbrefCreateSveinsbrefRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async skraningaradiliDanarbusGetRaw(requestParameters: SkraningaradiliDanarbusGetRequest): Promise<runtime.ApiResponse<Array<SkraningaradiliDanarbusSkeyti>>> {
        if (requestParameters.kennitala === null || requestParameters.kennitala === undefined) {
            throw new runtime.RequiredError('kennitala','Required parameter requestParameters.kennitala was null or undefined when calling skraningaradiliDanarbusGet.');
        }

        if (requestParameters.audkenni === null || requestParameters.audkenni === undefined) {
            throw new runtime.RequiredError('audkenni','Required parameter requestParameters.audkenni was null or undefined when calling skraningaradiliDanarbusGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWTToken authentication
        }

        const response = await this.request({
            path: `/api/SkraningaradiliDanarbus/{kennitala}/{audkenni}`.replace(`{${"kennitala"}}`, encodeURIComponent(String(requestParameters.kennitala))).replace(`{${"audkenni"}}`, encodeURIComponent(String(requestParameters.audkenni))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SkraningaradiliDanarbusSkeytiFromJSON));
    }

    /**
     */
    async skraningaradiliDanarbusGet(requestParameters: SkraningaradiliDanarbusGetRequest): Promise<Array<SkraningaradiliDanarbusSkeyti>> {
        const response = await this.skraningaradiliDanarbusGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async stadaUndirritunarSkjalsPostRaw(requestParameters: StadaUndirritunarSkjalsPostRequest): Promise<runtime.ApiResponse<StadaUndirritunarSkjalsSvarSkeyti>> {
        if (requestParameters.stadaUndirritunarSkjalsSkeyti === null || requestParameters.stadaUndirritunarSkjalsSkeyti === undefined) {
            throw new runtime.RequiredError('stadaUndirritunarSkjalsSkeyti','Required parameter requestParameters.stadaUndirritunarSkjalsSkeyti was null or undefined when calling stadaUndirritunarSkjalsPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWTToken authentication
        }

        const response = await this.request({
            path: `/api/StadaUndirritunarSkjals`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StadaUndirritunarSkjalsSkeytiToJSON(requestParameters.stadaUndirritunarSkjalsSkeyti),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => StadaUndirritunarSkjalsSvarSkeytiFromJSON(jsonValue));
    }

    /**
     */
    async stadaUndirritunarSkjalsPost(requestParameters: StadaUndirritunarSkjalsPostRequest): Promise<StadaUndirritunarSkjalsSvarSkeyti> {
        const response = await this.stadaUndirritunarSkjalsPostRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async staediskortaMalGetStaediskortRaw(requestParameters: StaediskortaMalGetStaediskortRequest): Promise<runtime.ApiResponse<StaediskortamalSvarSkeyti>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.kennitala !== undefined) {
            queryParameters['kennitala'] = requestParameters.kennitala;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWTToken authentication
        }

        const response = await this.request({
            path: `/api/StaediskortaMal/GetStaediskort`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => StaediskortamalSvarSkeytiFromJSON(jsonValue));
    }

    /**
     */
    async staediskortaMalGetStaediskort(requestParameters: StaediskortaMalGetStaediskortRequest): Promise<StaediskortamalSvarSkeyti> {
        const response = await this.staediskortaMalGetStaediskortRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async staediskortaMalGetStaediskortTokenRaw(): Promise<runtime.ApiResponse<Staediskortamal>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWTToken authentication
        }

        const response = await this.request({
            path: `/api/StaediskortaMal/GetStaediskortToken`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => StaediskortamalFromJSON(jsonValue));
    }

    /**
     */
    async staediskortaMalGetStaediskortToken(): Promise<Staediskortamal> {
        const response = await this.staediskortaMalGetStaediskortTokenRaw();
        return await response.value();
    }

    /**
     */
    async starfsrettindiGetRaw(requestParameters: StarfsrettindiGetRequest): Promise<runtime.ApiResponse<Array<StarfsrettindiModel>>> {
        if (requestParameters.audkenni === null || requestParameters.audkenni === undefined) {
            throw new runtime.RequiredError('audkenni','Required parameter requestParameters.audkenni was null or undefined when calling starfsrettindiGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWTToken authentication
        }

        const response = await this.request({
            path: `/api/Starfsrettindi/api/Starfsrettindi/{audkenni}`.replace(`{${"audkenni"}}`, encodeURIComponent(String(requestParameters.audkenni))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StarfsrettindiModelFromJSON));
    }

    /**
     */
    async starfsrettindiGet(requestParameters: StarfsrettindiGetRequest): Promise<Array<StarfsrettindiModel>> {
        const response = await this.starfsrettindiGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async stofnaskjalOgSendaTilUndirritunarPostRaw(requestParameters: StofnaskjalOgSendaTilUndirritunarPostRequest): Promise<runtime.ApiResponse<StofnaskjalOgSendaTilUndirritunarSvarSkeyti>> {
        if (requestParameters.stofnaskjalOgSendaTilUndirritunarSkeyti === null || requestParameters.stofnaskjalOgSendaTilUndirritunarSkeyti === undefined) {
            throw new runtime.RequiredError('stofnaskjalOgSendaTilUndirritunarSkeyti','Required parameter requestParameters.stofnaskjalOgSendaTilUndirritunarSkeyti was null or undefined when calling stofnaskjalOgSendaTilUndirritunarPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWTToken authentication
        }

        const response = await this.request({
            path: `/api/StofnaskjalOgSendaTilUndirritunar`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StofnaskjalOgSendaTilUndirritunarSkeytiToJSON(requestParameters.stofnaskjalOgSendaTilUndirritunarSkeyti),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => StofnaskjalOgSendaTilUndirritunarSvarSkeytiFromJSON(jsonValue));
    }

    /**
     */
    async stofnaskjalOgSendaTilUndirritunarPost(requestParameters: StofnaskjalOgSendaTilUndirritunarPostRequest): Promise<StofnaskjalOgSendaTilUndirritunarSvarSkeyti> {
        const response = await this.stofnaskjalOgSendaTilUndirritunarPostRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async sveinsbrefGetRaw(requestParameters: SveinsbrefGetRequest): Promise<runtime.ApiResponse<Array<SveinsbrefModel>>> {
        if (requestParameters.audkenni === null || requestParameters.audkenni === undefined) {
            throw new runtime.RequiredError('audkenni','Required parameter requestParameters.audkenni was null or undefined when calling sveinsbrefGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWTToken authentication
        }

        const response = await this.request({
            path: `/api/Sveinsbref/{audkenni}`.replace(`{${"audkenni"}}`, encodeURIComponent(String(requestParameters.audkenni))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SveinsbrefModelFromJSON));
    }

    /**
     */
    async sveinsbrefGet(requestParameters: SveinsbrefGetRequest): Promise<Array<SveinsbrefModel>> {
        const response = await this.sveinsbrefGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async syslMottakaGognPostRaw(requestParameters: SyslMottakaGognPostRequest): Promise<runtime.ApiResponse<Skilabod>> {
        if (requestParameters.syslSkeyti === null || requestParameters.syslSkeyti === undefined) {
            throw new runtime.RequiredError('syslSkeyti','Required parameter requestParameters.syslSkeyti was null or undefined when calling syslMottakaGognPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWTToken authentication
        }

        const response = await this.request({
            path: `/api/v1/SyslMottakaGogn`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SyslSkeytiToJSON(requestParameters.syslSkeyti),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SkilabodFromJSON(jsonValue));
    }

    /**
     */
    async syslMottakaGognPost(requestParameters: SyslMottakaGognPostRequest): Promise<Skilabod> {
        const response = await this.syslMottakaGognPostRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async syslMottakaVilluprofaGognPostRaw(requestParameters: SyslMottakaVilluprofaGognPostRequest): Promise<runtime.ApiResponse<Skilabod>> {
        if (requestParameters.syslSkeyti === null || requestParameters.syslSkeyti === undefined) {
            throw new runtime.RequiredError('syslSkeyti','Required parameter requestParameters.syslSkeyti was null or undefined when calling syslMottakaVilluprofaGognPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWTToken authentication
        }

        const response = await this.request({
            path: `/api/v1/SyslMottakaVilluprofaGogn`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SyslSkeytiToJSON(requestParameters.syslSkeyti),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SkilabodFromJSON(jsonValue));
    }

    /**
     */
    async syslMottakaVilluprofaGognPost(requestParameters: SyslMottakaVilluprofaGognPostRequest): Promise<Skilabod> {
        const response = await this.syslMottakaVilluprofaGognPostRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async syslSaekjaSkraPostRaw(requestParameters: SyslSaekjaSkraPostRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.syslSekjaSkra === null || requestParameters.syslSekjaSkra === undefined) {
            throw new runtime.RequiredError('syslSekjaSkra','Required parameter requestParameters.syslSekjaSkra was null or undefined when calling syslSaekjaSkraPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWTToken authentication
        }

        const response = await this.request({
            path: `/api/SyslSaekjaSkra`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SyslSekjaSkraToJSON(requestParameters.syslSekjaSkra),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async syslSaekjaSkraPost(requestParameters: SyslSaekjaSkraPostRequest): Promise<void> {
        await this.syslSaekjaSkraPostRaw(requestParameters);
    }

    /**
     */
    async taekifaerisleyfiGetRaw(requestParameters: TaekifaerisleyfiGetRequest): Promise<runtime.ApiResponse<Array<Taekifaerisleyfi>>> {
        if (requestParameters.audkenni === null || requestParameters.audkenni === undefined) {
            throw new runtime.RequiredError('audkenni','Required parameter requestParameters.audkenni was null or undefined when calling taekifaerisleyfiGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWTToken authentication
        }

        const response = await this.request({
            path: `/api/Taekifaerisleyfi/{audkenni}`.replace(`{${"audkenni"}}`, encodeURIComponent(String(requestParameters.audkenni))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TaekifaerisleyfiFromJSON));
    }

    /**
     */
    async taekifaerisleyfiGet(requestParameters: TaekifaerisleyfiGetRequest): Promise<Array<Taekifaerisleyfi>> {
        const response = await this.taekifaerisleyfiGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async trufelogOgLifsskodunarfelogGetRaw(requestParameters: TrufelogOgLifsskodunarfelogGetRequest): Promise<runtime.ApiResponse<Array<TrufelogOgLisskodunarfelogModel>>> {
        if (requestParameters.audkenni === null || requestParameters.audkenni === undefined) {
            throw new runtime.RequiredError('audkenni','Required parameter requestParameters.audkenni was null or undefined when calling trufelogOgLifsskodunarfelogGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWTToken authentication
        }

        const response = await this.request({
            path: `/api/TrufelogOgLifsskodunarfelog/{audkenni}`.replace(`{${"audkenni"}}`, encodeURIComponent(String(requestParameters.audkenni))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TrufelogOgLisskodunarfelogModelFromJSON));
    }

    /**
     */
    async trufelogOgLifsskodunarfelogGet(requestParameters: TrufelogOgLifsskodunarfelogGetRequest): Promise<Array<TrufelogOgLisskodunarfelogModel>> {
        const response = await this.trufelogOgLifsskodunarfelogGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async uppbodFaFasteignirGetRaw(): Promise<runtime.ApiResponse<Array<UppbodFasteignir>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWTToken authentication
        }

        const response = await this.request({
            path: `/v1/Fullnustusvid/Naudungarsala/UppbodFaFasteignir`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UppbodFasteignirFromJSON));
    }

    /**
     */
    async uppbodFaFasteignirGet(): Promise<Array<UppbodFasteignir>> {
        const response = await this.uppbodFaFasteignirGetRaw();
        return await response.value();
    }

    /**
     */
    async uppbodGetRaw(requestParameters: UppbodGetRequest): Promise<runtime.ApiResponse<Array<Uppbod>>> {
        if (requestParameters.audkenni === null || requestParameters.audkenni === undefined) {
            throw new runtime.RequiredError('audkenni','Required parameter requestParameters.audkenni was null or undefined when calling uppbodGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWTToken authentication
        }

        const response = await this.request({
            path: `/api/Uppbod/{audkenni}`.replace(`{${"audkenni"}}`, encodeURIComponent(String(requestParameters.audkenni))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UppbodFromJSON));
    }

    /**
     */
    async uppbodGet(requestParameters: UppbodGetRequest): Promise<Array<Uppbod>> {
        const response = await this.uppbodGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async upplysingarRadstofunDanarbusPostRaw(requestParameters: UpplysingarRadstofunDanarbusPostRequest): Promise<runtime.ApiResponse<UpplysingarUrDanarbuiRadstofunSkeyti>> {
        if (requestParameters.fyrirspurn === null || requestParameters.fyrirspurn === undefined) {
            throw new runtime.RequiredError('fyrirspurn','Required parameter requestParameters.fyrirspurn was null or undefined when calling upplysingarRadstofunDanarbusPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWTToken authentication
        }

        const response = await this.request({
            path: `/api/UpplysingarRadstofunDanarbus`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FyrirspurnToJSON(requestParameters.fyrirspurn),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UpplysingarUrDanarbuiRadstofunSkeytiFromJSON(jsonValue));
    }

    /**
     */
    async upplysingarRadstofunDanarbusPost(requestParameters: UpplysingarRadstofunDanarbusPostRequest): Promise<UpplysingarUrDanarbuiRadstofunSkeyti> {
        const response = await this.upplysingarRadstofunDanarbusPostRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async upplysingarUrDanarbuiErfdafjarskattPostRaw(requestParameters: UpplysingarUrDanarbuiErfdafjarskattPostRequest): Promise<runtime.ApiResponse<UpplysingarUrDanarbuiSkeytiErfdafjarskatt>> {
        if (requestParameters.fyrirspurn === null || requestParameters.fyrirspurn === undefined) {
            throw new runtime.RequiredError('fyrirspurn','Required parameter requestParameters.fyrirspurn was null or undefined when calling upplysingarUrDanarbuiErfdafjarskattPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWTToken authentication
        }

        const response = await this.request({
            path: `/v1/Danarbu/UpplysingarUrDanarbuiErfdafjarskatt`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FyrirspurnToJSON(requestParameters.fyrirspurn),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UpplysingarUrDanarbuiSkeytiErfdafjarskattFromJSON(jsonValue));
    }

    /**
     */
    async upplysingarUrDanarbuiErfdafjarskattPost(requestParameters: UpplysingarUrDanarbuiErfdafjarskattPostRequest): Promise<UpplysingarUrDanarbuiSkeytiErfdafjarskatt> {
        const response = await this.upplysingarUrDanarbuiErfdafjarskattPostRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async upplysingarUrDanarbuiPostRaw(requestParameters: UpplysingarUrDanarbuiPostRequest): Promise<runtime.ApiResponse<UpplysingarUrDanarbuiSkeyti>> {
        if (requestParameters.fyrirspurn === null || requestParameters.fyrirspurn === undefined) {
            throw new runtime.RequiredError('fyrirspurn','Required parameter requestParameters.fyrirspurn was null or undefined when calling upplysingarUrDanarbuiPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWTToken authentication
        }

        const response = await this.request({
            path: `/v1/Danarbu/UpplysingarUrDanarbui`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FyrirspurnToJSON(requestParameters.fyrirspurn),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UpplysingarUrDanarbuiSkeytiFromJSON(jsonValue));
    }

    /**
     */
    async upplysingarUrDanarbuiPost(requestParameters: UpplysingarUrDanarbuiPostRequest): Promise<UpplysingarUrDanarbuiSkeyti> {
        const response = await this.upplysingarUrDanarbuiPostRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async vedbokarvottord2PostRaw(requestParameters: Vedbokarvottord2PostRequest): Promise<runtime.ApiResponse<VedbandayfirlitMargirSvarSkeyti>> {
        if (requestParameters.vedbandayfirlitMargirSkeyti === null || requestParameters.vedbandayfirlitMargirSkeyti === undefined) {
            throw new runtime.RequiredError('vedbandayfirlitMargirSkeyti','Required parameter requestParameters.vedbandayfirlitMargirSkeyti was null or undefined when calling vedbokarvottord2Post.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWTToken authentication
        }

        const response = await this.request({
            path: `/api/Vedbokarvottord2`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VedbandayfirlitMargirSkeytiToJSON(requestParameters.vedbandayfirlitMargirSkeyti),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => VedbandayfirlitMargirSvarSkeytiFromJSON(jsonValue));
    }

    /**
     */
    async vedbokarvottord2Post(requestParameters: Vedbokarvottord2PostRequest): Promise<VedbandayfirlitMargirSvarSkeyti> {
        const response = await this.vedbokarvottord2PostRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async vedbokarvottordPostRaw(requestParameters: VedbokarvottordPostRequest): Promise<runtime.ApiResponse<VedbandayfirlitSvarSkeyti>> {
        if (requestParameters.vedbandayfirlitSkeyti === null || requestParameters.vedbandayfirlitSkeyti === undefined) {
            throw new runtime.RequiredError('vedbandayfirlitSkeyti','Required parameter requestParameters.vedbandayfirlitSkeyti was null or undefined when calling vedbokarvottordPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWTToken authentication
        }

        const response = await this.request({
            path: `/api/Vedbokarvottord`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VedbandayfirlitSkeytiToJSON(requestParameters.vedbandayfirlitSkeyti),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => VedbandayfirlitSvarSkeytiFromJSON(jsonValue));
    }

    /**
     */
    async vedbokarvottordPost(requestParameters: VedbokarvottordPostRequest): Promise<VedbandayfirlitSvarSkeyti> {
        const response = await this.vedbokarvottordPostRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async vedbokavottordRegluverkiPostRaw(requestParameters: VedbokavottordRegluverkiPostRequest): Promise<runtime.ApiResponse<VedbandayfirlitRegluverkGeneralSvar>> {
        if (requestParameters.vedbandayfirlitSkeyti === null || requestParameters.vedbandayfirlitSkeyti === undefined) {
            throw new runtime.RequiredError('vedbandayfirlitSkeyti','Required parameter requestParameters.vedbandayfirlitSkeyti was null or undefined when calling vedbokavottordRegluverkiPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWTToken authentication
        }

        const response = await this.request({
            path: `/api/VedbokavottordRegluverki`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VedbandayfirlitSkeytiToJSON(requestParameters.vedbandayfirlitSkeyti),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => VedbandayfirlitRegluverkGeneralSvarFromJSON(jsonValue));
    }

    /**
     */
    async vedbokavottordRegluverkiPost(requestParameters: VedbokavottordRegluverkiPostRequest): Promise<VedbandayfirlitRegluverkGeneralSvar> {
        const response = await this.vedbokavottordRegluverkiPostRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async verdbrefamidlararGetRaw(requestParameters: VerdbrefamidlararGetRequest): Promise<runtime.ApiResponse<Array<Verdbrefamidlari>>> {
        if (requestParameters.audkenni === null || requestParameters.audkenni === undefined) {
            throw new runtime.RequiredError('audkenni','Required parameter requestParameters.audkenni was null or undefined when calling verdbrefamidlararGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWTToken authentication
        }

        const response = await this.request({
            path: `/api/Verdbrefamidlarar/{audkenni}`.replace(`{${"audkenni"}}`, encodeURIComponent(String(requestParameters.audkenni))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(VerdbrefamidlariFromJSON));
    }

    /**
     */
    async verdbrefamidlararGet(requestParameters: VerdbrefamidlararGetRequest): Promise<Array<Verdbrefamidlari>> {
        const response = await this.verdbrefamidlararGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async versionGetRaw(): Promise<runtime.ApiResponse<Array<string>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWTToken authentication
        }

        const response = await this.request({
            path: `/Version`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async versionGet(): Promise<Array<string>> {
        const response = await this.versionGetRaw();
        return await response.value();
    }

    /**
     */
    async virkLeyfiCsvGetRaw(requestParameters: VirkLeyfiCsvGetRequest): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.audkenni === null || requestParameters.audkenni === undefined) {
            throw new runtime.RequiredError('audkenni','Required parameter requestParameters.audkenni was null or undefined when calling virkLeyfiCsvGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWTToken authentication
        }

        const response = await this.request({
            path: `/api/VirkLeyfiCsv/{audkenni}`.replace(`{${"audkenni"}}`, encodeURIComponent(String(requestParameters.audkenni))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    async virkLeyfiCsvGet(requestParameters: VirkLeyfiCsvGetRequest): Promise<string> {
        const response = await this.virkLeyfiCsvGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async virkLeyfiGetRaw(requestParameters: VirkLeyfiGetRequest): Promise<runtime.ApiResponse<Array<VirkLeyfi>>> {
        if (requestParameters.audkenni === null || requestParameters.audkenni === undefined) {
            throw new runtime.RequiredError('audkenni','Required parameter requestParameters.audkenni was null or undefined when calling virkLeyfiGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.searchBy !== undefined) {
            queryParameters['SearchBy'] = requestParameters.searchBy;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['PageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['PageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWTToken authentication
        }

        const response = await this.request({
            path: `/api/VirkLeyfi/{audkenni}`.replace(`{${"audkenni"}}`, encodeURIComponent(String(requestParameters.audkenni))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(VirkLeyfiFromJSON));
    }

    /**
     */
    async virkLeyfiGet(requestParameters: VirkLeyfiGetRequest): Promise<Array<VirkLeyfi>> {
        const response = await this.virkLeyfiGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async virkLeyfiMedFastanumerumGetRaw(requestParameters: VirkLeyfiMedFastanumerumGetRequest): Promise<runtime.ApiResponse<Array<VirkLeyfiMedfastanumer>>> {
        if (requestParameters.audkenni === null || requestParameters.audkenni === undefined) {
            throw new runtime.RequiredError('audkenni','Required parameter requestParameters.audkenni was null or undefined when calling virkLeyfiMedFastanumerumGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.searchBy !== undefined) {
            queryParameters['SearchBy'] = requestParameters.searchBy;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['PageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['PageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWTToken authentication
        }

        const response = await this.request({
            path: `/api/VirkLeyfiMedFastanumerum/{audkenni}`.replace(`{${"audkenni"}}`, encodeURIComponent(String(requestParameters.audkenni))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(VirkLeyfiMedfastanumerFromJSON));
    }

    /**
     */
    async virkLeyfiMedFastanumerumGet(requestParameters: VirkLeyfiMedFastanumerumGetRequest): Promise<Array<VirkLeyfiMedfastanumer>> {
        const response = await this.virkLeyfiMedFastanumerumGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async virkarHeimagistingarGetRaw(requestParameters: VirkarHeimagistingarGetRequest): Promise<runtime.ApiResponse<Array<VirkarHeimagistingar>>> {
        if (requestParameters.audkenni === null || requestParameters.audkenni === undefined) {
            throw new runtime.RequiredError('audkenni','Required parameter requestParameters.audkenni was null or undefined when calling virkarHeimagistingarGet.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWTToken authentication
        }

        const response = await this.request({
            path: `/v1/VirkarHeimagistingar/{audkenni}`.replace(`{${"audkenni"}}`, encodeURIComponent(String(requestParameters.audkenni))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(VirkarHeimagistingarFromJSON));
    }

    /**
     */
    async virkarHeimagistingarGet(requestParameters: VirkarHeimagistingarGetRequest): Promise<Array<VirkarHeimagistingar>> {
        const response = await this.virkarHeimagistingarGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async virkarHeimagistingarGet2Raw(requestParameters: VirkarHeimagistingarGet2Request): Promise<runtime.ApiResponse<Array<VirkarHeimagistingar>>> {
        if (requestParameters.audkenni === null || requestParameters.audkenni === undefined) {
            throw new runtime.RequiredError('audkenni','Required parameter requestParameters.audkenni was null or undefined when calling virkarHeimagistingarGet2.');
        }

        if (requestParameters.ar === null || requestParameters.ar === undefined) {
            throw new runtime.RequiredError('ar','Required parameter requestParameters.ar was null or undefined when calling virkarHeimagistingarGet2.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWTToken authentication
        }

        const response = await this.request({
            path: `/v1/VirkarHeimagistingar/{audkenni}/{ar}`.replace(`{${"audkenni"}}`, encodeURIComponent(String(requestParameters.audkenni))).replace(`{${"ar"}}`, encodeURIComponent(String(requestParameters.ar))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(VirkarHeimagistingarFromJSON));
    }

    /**
     */
    async virkarHeimagistingarGet2(requestParameters: VirkarHeimagistingarGet2Request): Promise<Array<VirkarHeimagistingar>> {
        const response = await this.virkarHeimagistingarGet2Raw(requestParameters);
        return await response.value();
    }

    /**
     */
    async yfirlitUmFramvinduSkiptaPostRaw(requestParameters: YfirlitUmFramvinduSkiptaPostRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.fyrirspurn === null || requestParameters.fyrirspurn === undefined) {
            throw new runtime.RequiredError('fyrirspurn','Required parameter requestParameters.fyrirspurn was null or undefined when calling yfirlitUmFramvinduSkiptaPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWTToken authentication
        }

        const response = await this.request({
            path: `/v1/Danarbu/YfirlitUmFramvinduSkipta`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FyrirspurnToJSON(requestParameters.fyrirspurn),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async yfirlitUmFramvinduSkiptaPost(requestParameters: YfirlitUmFramvinduSkiptaPostRequest): Promise<void> {
        await this.yfirlitUmFramvinduSkiptaPostRaw(requestParameters);
    }

}
