/* tslint:disable */
/* eslint-disable */
/**
 * Vinnuvélauppfletting
 * Vefþjónusta til þess að fletta upp á vinnuvélum.
 *
 * The version of the OpenAPI document: v1
 * Contact: ut@vinnueftirlit.is
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    MachineOwnerChangeCompleteDto,
    MachineOwnerChangeCompleteDtoFromJSON,
    MachineOwnerChangeCompleteDtoToJSON,
    MachineOwnerChangeCreateDto,
    MachineOwnerChangeCreateDtoFromJSON,
    MachineOwnerChangeCreateDtoToJSON,
    ProblemDetails,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    ValidationProblemDetails,
    ValidationProblemDetailsFromJSON,
    ValidationProblemDetailsToJSON,
} from '../models';

export interface ApiMachineOwnerChangeOwnerchangeIdDeleteRequest {
    ownerchangeId: string;
    xCorrelationID?: string;
}

export interface ApiMachineOwnerChangePostRequest {
    xCorrelationID?: string;
    machineOwnerChangeCreateDto?: MachineOwnerChangeCreateDto;
}

export interface ApiMachineOwnerChangePutRequest {
    xCorrelationID?: string;
    machineOwnerChangeCompleteDto?: MachineOwnerChangeCompleteDto;
}

/**
 * 
 */
export class MachineOwnerChangeApi extends runtime.BaseAPI {

    /**
     */
    async apiMachineOwnerChangeOwnerchangeIdDeleteRaw(requestParameters: ApiMachineOwnerChangeOwnerchangeIdDeleteRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.ownerchangeId === null || requestParameters.ownerchangeId === undefined) {
            throw new runtime.RequiredError('ownerchangeId','Required parameter requestParameters.ownerchangeId was null or undefined when calling apiMachineOwnerChangeOwnerchangeIdDelete.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xCorrelationID !== undefined && requestParameters.xCorrelationID !== null) {
            headerParameters['X-Correlation-ID'] = String(requestParameters.xCorrelationID);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/MachineOwnerChange/{OwnerchangeId}`.replace(`{${"OwnerchangeId"}}`, encodeURIComponent(String(requestParameters.ownerchangeId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiMachineOwnerChangeOwnerchangeIdDelete(requestParameters: ApiMachineOwnerChangeOwnerchangeIdDeleteRequest): Promise<void> {
        await this.apiMachineOwnerChangeOwnerchangeIdDeleteRaw(requestParameters);
    }

    /**
     * An enpoint to post an ownerChange application that hasn\'t been confirmed by the buyer.
     */
    async apiMachineOwnerChangePostRaw(requestParameters: ApiMachineOwnerChangePostRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xCorrelationID !== undefined && requestParameters.xCorrelationID !== null) {
            headerParameters['X-Correlation-ID'] = String(requestParameters.xCorrelationID);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/MachineOwnerChange`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MachineOwnerChangeCreateDtoToJSON(requestParameters.machineOwnerChangeCreateDto),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * An enpoint to post an ownerChange application that hasn\'t been confirmed by the buyer.
     */
    async apiMachineOwnerChangePost(requestParameters: ApiMachineOwnerChangePostRequest): Promise<void> {
        await this.apiMachineOwnerChangePostRaw(requestParameters);
    }

    /**
     * An enpoint that completes the ownerchange process when the buyer has confirmed ownership.
     */
    async apiMachineOwnerChangePutRaw(requestParameters: ApiMachineOwnerChangePutRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xCorrelationID !== undefined && requestParameters.xCorrelationID !== null) {
            headerParameters['X-Correlation-ID'] = String(requestParameters.xCorrelationID);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/MachineOwnerChange`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MachineOwnerChangeCompleteDtoToJSON(requestParameters.machineOwnerChangeCompleteDto),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * An enpoint that completes the ownerchange process when the buyer has confirmed ownership.
     */
    async apiMachineOwnerChangePut(requestParameters: ApiMachineOwnerChangePutRequest): Promise<void> {
        await this.apiMachineOwnerChangePutRaw(requestParameters);
    }

}
