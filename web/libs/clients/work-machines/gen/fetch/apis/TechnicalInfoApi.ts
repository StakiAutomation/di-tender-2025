/* tslint:disable */
/* eslint-disable */
/**
 * Vinnuvélauppfletting
 * Vefþjónusta til þess að fletta upp á vinnuvélum.
 *
 * The version of the OpenAPI document: v1
 * Contact: ut@vinnueftirlit.is
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    TechInfoItemDto,
    TechInfoItemDtoFromJSON,
    TechInfoItemDtoToJSON,
    TechInfoListItemDto,
    TechInfoListItemDtoFromJSON,
    TechInfoListItemDtoToJSON,
} from '../models';

export interface ApiTechnicalInfoBaseTypesGetRequest {
    xCorrelationID?: string;
}

export interface ApiTechnicalInfoBearingCablesGetRequest {
    xCorrelationID?: string;
}

export interface ApiTechnicalInfoChemicalsGetRequest {
    xCorrelationID?: string;
}

export interface ApiTechnicalInfoHeatingEquipmentGetRequest {
    xCorrelationID?: string;
}

export interface ApiTechnicalInfoInputsGetRequest {
    parentCategory?: string;
    subCategory?: string;
    locale?: string;
    xCorrelationID?: string;
}

export interface ApiTechnicalInfoLiftingEquiptmentGetRequest {
    xCorrelationID?: string;
}

export interface ApiTechnicalInfoPowerSourceGetRequest {
    xCorrelationID?: string;
}

export interface ApiTechnicalInfoPullingCablesGetRequest {
    xCorrelationID?: string;
}

export interface ApiTechnicalInfoRunningSpeedGetRequest {
    xCorrelationID?: string;
}

/**
 * 
 */
export class TechnicalInfoApi extends runtime.BaseAPI {

    /**
     */
    async apiTechnicalInfoBaseTypesGetRaw(requestParameters: ApiTechnicalInfoBaseTypesGetRequest): Promise<runtime.ApiResponse<Array<TechInfoListItemDto>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xCorrelationID !== undefined && requestParameters.xCorrelationID !== null) {
            headerParameters['X-Correlation-ID'] = String(requestParameters.xCorrelationID);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/TechnicalInfo/BaseTypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TechInfoListItemDtoFromJSON));
    }

    /**
     */
    async apiTechnicalInfoBaseTypesGet(requestParameters: ApiTechnicalInfoBaseTypesGetRequest): Promise<Array<TechInfoListItemDto>> {
        const response = await this.apiTechnicalInfoBaseTypesGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiTechnicalInfoBearingCablesGetRaw(requestParameters: ApiTechnicalInfoBearingCablesGetRequest): Promise<runtime.ApiResponse<Array<TechInfoListItemDto>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xCorrelationID !== undefined && requestParameters.xCorrelationID !== null) {
            headerParameters['X-Correlation-ID'] = String(requestParameters.xCorrelationID);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/TechnicalInfo/BearingCables`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TechInfoListItemDtoFromJSON));
    }

    /**
     */
    async apiTechnicalInfoBearingCablesGet(requestParameters: ApiTechnicalInfoBearingCablesGetRequest): Promise<Array<TechInfoListItemDto>> {
        const response = await this.apiTechnicalInfoBearingCablesGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiTechnicalInfoChemicalsGetRaw(requestParameters: ApiTechnicalInfoChemicalsGetRequest): Promise<runtime.ApiResponse<Array<TechInfoListItemDto>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xCorrelationID !== undefined && requestParameters.xCorrelationID !== null) {
            headerParameters['X-Correlation-ID'] = String(requestParameters.xCorrelationID);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/TechnicalInfo/Chemicals`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TechInfoListItemDtoFromJSON));
    }

    /**
     */
    async apiTechnicalInfoChemicalsGet(requestParameters: ApiTechnicalInfoChemicalsGetRequest): Promise<Array<TechInfoListItemDto>> {
        const response = await this.apiTechnicalInfoChemicalsGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiTechnicalInfoHeatingEquipmentGetRaw(requestParameters: ApiTechnicalInfoHeatingEquipmentGetRequest): Promise<runtime.ApiResponse<Array<TechInfoListItemDto>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xCorrelationID !== undefined && requestParameters.xCorrelationID !== null) {
            headerParameters['X-Correlation-ID'] = String(requestParameters.xCorrelationID);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/TechnicalInfo/HeatingEquipment`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TechInfoListItemDtoFromJSON));
    }

    /**
     */
    async apiTechnicalInfoHeatingEquipmentGet(requestParameters: ApiTechnicalInfoHeatingEquipmentGetRequest): Promise<Array<TechInfoListItemDto>> {
        const response = await this.apiTechnicalInfoHeatingEquipmentGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiTechnicalInfoInputsGetRaw(requestParameters: ApiTechnicalInfoInputsGetRequest): Promise<runtime.ApiResponse<Array<TechInfoItemDto>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.parentCategory !== undefined) {
            queryParameters['parentCategory'] = requestParameters.parentCategory;
        }

        if (requestParameters.subCategory !== undefined) {
            queryParameters['subCategory'] = requestParameters.subCategory;
        }

        if (requestParameters.locale !== undefined) {
            queryParameters['locale'] = requestParameters.locale;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xCorrelationID !== undefined && requestParameters.xCorrelationID !== null) {
            headerParameters['X-Correlation-ID'] = String(requestParameters.xCorrelationID);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/TechnicalInfo/Inputs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TechInfoItemDtoFromJSON));
    }

    /**
     */
    async apiTechnicalInfoInputsGet(requestParameters: ApiTechnicalInfoInputsGetRequest): Promise<Array<TechInfoItemDto>> {
        const response = await this.apiTechnicalInfoInputsGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiTechnicalInfoLiftingEquiptmentGetRaw(requestParameters: ApiTechnicalInfoLiftingEquiptmentGetRequest): Promise<runtime.ApiResponse<Array<TechInfoListItemDto>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xCorrelationID !== undefined && requestParameters.xCorrelationID !== null) {
            headerParameters['X-Correlation-ID'] = String(requestParameters.xCorrelationID);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/TechnicalInfo/LiftingEquiptment`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TechInfoListItemDtoFromJSON));
    }

    /**
     */
    async apiTechnicalInfoLiftingEquiptmentGet(requestParameters: ApiTechnicalInfoLiftingEquiptmentGetRequest): Promise<Array<TechInfoListItemDto>> {
        const response = await this.apiTechnicalInfoLiftingEquiptmentGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiTechnicalInfoPowerSourceGetRaw(requestParameters: ApiTechnicalInfoPowerSourceGetRequest): Promise<runtime.ApiResponse<Array<TechInfoListItemDto>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xCorrelationID !== undefined && requestParameters.xCorrelationID !== null) {
            headerParameters['X-Correlation-ID'] = String(requestParameters.xCorrelationID);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/TechnicalInfo/PowerSource`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TechInfoListItemDtoFromJSON));
    }

    /**
     */
    async apiTechnicalInfoPowerSourceGet(requestParameters: ApiTechnicalInfoPowerSourceGetRequest): Promise<Array<TechInfoListItemDto>> {
        const response = await this.apiTechnicalInfoPowerSourceGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiTechnicalInfoPullingCablesGetRaw(requestParameters: ApiTechnicalInfoPullingCablesGetRequest): Promise<runtime.ApiResponse<Array<TechInfoListItemDto>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xCorrelationID !== undefined && requestParameters.xCorrelationID !== null) {
            headerParameters['X-Correlation-ID'] = String(requestParameters.xCorrelationID);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/TechnicalInfo/PullingCables`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TechInfoListItemDtoFromJSON));
    }

    /**
     */
    async apiTechnicalInfoPullingCablesGet(requestParameters: ApiTechnicalInfoPullingCablesGetRequest): Promise<Array<TechInfoListItemDto>> {
        const response = await this.apiTechnicalInfoPullingCablesGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiTechnicalInfoRunningSpeedGetRaw(requestParameters: ApiTechnicalInfoRunningSpeedGetRequest): Promise<runtime.ApiResponse<Array<TechInfoListItemDto>>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xCorrelationID !== undefined && requestParameters.xCorrelationID !== null) {
            headerParameters['X-Correlation-ID'] = String(requestParameters.xCorrelationID);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/TechnicalInfo/RunningSpeed`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TechInfoListItemDtoFromJSON));
    }

    /**
     */
    async apiTechnicalInfoRunningSpeedGet(requestParameters: ApiTechnicalInfoRunningSpeedGetRequest): Promise<Array<TechInfoListItemDto>> {
        const response = await this.apiTechnicalInfoRunningSpeedGetRaw(requestParameters);
        return await response.value();
    }

}
