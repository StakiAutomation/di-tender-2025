/* tslint:disable */
/* eslint-disable */
/**
 * Vinnuvélauppfletting
 * Vefþjónusta til þess að fletta upp á vinnuvélum.
 *
 * The version of the OpenAPI document: v1
 * Contact: ut@vinnueftirlit.is
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    MachineHateoasDto,
    MachineHateoasDtoFromJSON,
    MachineHateoasDtoToJSON,
    MachineRegistrationCreateDto,
    MachineRegistrationCreateDtoFromJSON,
    MachineRegistrationCreateDtoToJSON,
    MachinesFriendlyHateaosDto,
    MachinesFriendlyHateaosDtoFromJSON,
    MachinesFriendlyHateaosDtoToJSON,
    ProblemDetails,
    ProblemDetailsFromJSON,
    ProblemDetailsToJSON,
    ValidationProblemDetails,
    ValidationProblemDetailsFromJSON,
    ValidationProblemDetailsToJSON,
} from '../models';

export interface ApiMachinesGetRequest {
    searchQuery?: string;
    pageNumber?: number;
    pageSize?: number;
    orderBy?: string;
    showDeregisteredMachines?: boolean;
    supervisorRegistered?: boolean;
    onlyInOwnerChangeProcess?: boolean;
    onlyShowOwnedMachines?: boolean;
    locale?: string;
    xCorrelationID?: string;
}

export interface ApiMachinesPostRequest {
    xCorrelationID?: string;
    machineRegistrationCreateDto?: MachineRegistrationCreateDto;
}

export interface GetMachineRequest {
    id: string;
    locale?: string;
    xCorrelationID?: string;
}

/**
 * 
 */
export class MachinesApi extends runtime.BaseAPI {

    /**
     * Endpoint that returns Machines
     */
    async apiMachinesGetRaw(requestParameters: ApiMachinesGetRequest): Promise<runtime.ApiResponse<MachinesFriendlyHateaosDto>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.searchQuery !== undefined) {
            queryParameters['searchQuery'] = requestParameters.searchQuery;
        }

        if (requestParameters.pageNumber !== undefined) {
            queryParameters['PageNumber'] = requestParameters.pageNumber;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['PageSize'] = requestParameters.pageSize;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['OrderBy'] = requestParameters.orderBy;
        }

        if (requestParameters.showDeregisteredMachines !== undefined) {
            queryParameters['ShowDeregisteredMachines'] = requestParameters.showDeregisteredMachines;
        }

        if (requestParameters.supervisorRegistered !== undefined) {
            queryParameters['supervisorRegistered'] = requestParameters.supervisorRegistered;
        }

        if (requestParameters.onlyInOwnerChangeProcess !== undefined) {
            queryParameters['onlyInOwnerChangeProcess'] = requestParameters.onlyInOwnerChangeProcess;
        }

        if (requestParameters.onlyShowOwnedMachines !== undefined) {
            queryParameters['onlyShowOwnedMachines'] = requestParameters.onlyShowOwnedMachines;
        }

        if (requestParameters.locale !== undefined) {
            queryParameters['locale'] = requestParameters.locale;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xCorrelationID !== undefined && requestParameters.xCorrelationID !== null) {
            headerParameters['X-Correlation-ID'] = String(requestParameters.xCorrelationID);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Machines`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MachinesFriendlyHateaosDtoFromJSON(jsonValue));
    }

    /**
     * Endpoint that returns Machines
     */
    async apiMachinesGet(requestParameters: ApiMachinesGetRequest): Promise<MachinesFriendlyHateaosDto> {
        const response = await this.apiMachinesGetRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async apiMachinesPostRaw(requestParameters: ApiMachinesPostRequest): Promise<runtime.ApiResponse<void>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xCorrelationID !== undefined && requestParameters.xCorrelationID !== null) {
            headerParameters['X-Correlation-ID'] = String(requestParameters.xCorrelationID);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Machines`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MachineRegistrationCreateDtoToJSON(requestParameters.machineRegistrationCreateDto),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async apiMachinesPost(requestParameters: ApiMachinesPostRequest): Promise<void> {
        await this.apiMachinesPostRaw(requestParameters);
    }

    /**
     */
    async getMachineRaw(requestParameters: GetMachineRequest): Promise<runtime.ApiResponse<MachineHateoasDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getMachine.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.locale !== undefined) {
            queryParameters['locale'] = requestParameters.locale;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xCorrelationID !== undefined && requestParameters.xCorrelationID !== null) {
            headerParameters['X-Correlation-ID'] = String(requestParameters.xCorrelationID);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Machines/{Id}`.replace(`{${"Id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MachineHateoasDtoFromJSON(jsonValue));
    }

    /**
     */
    async getMachine(requestParameters: GetMachineRequest): Promise<MachineHateoasDto> {
        const response = await this.getMachineRaw(requestParameters);
        return await response.value();
    }

}
