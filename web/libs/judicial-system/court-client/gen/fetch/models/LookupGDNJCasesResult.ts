/* tslint:disable */
/* eslint-disable */
/**
 * GoPro.JusticePortal.Rest
 * Provides access to Justice Portal rest service
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@gopro.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    BaseOutcome,
    BaseOutcomeFromJSON,
    BaseOutcomeFromJSONTyped,
    BaseOutcomeToJSON,
    BasePerson,
    BasePersonFromJSON,
    BasePersonFromJSONTyped,
    BasePersonToJSON,
} from './';

/**
 * 
 * @export
 * @interface LookupGDNJCasesResult
 */
export interface LookupGDNJCasesResult {
    /**
     * 
     * @type {string}
     * @memberof LookupGDNJCasesResult
     */
    caseNumber?: string;
    /**
     * 
     * @type {string}
     * @memberof LookupGDNJCasesResult
     */
    caseType?: string;
    /**
     * 
     * @type {string}
     * @memberof LookupGDNJCasesResult
     */
    court?: string;
    /**
     * 
     * @type {string}
     * @memberof LookupGDNJCasesResult
     */
    subject?: string;
    /**
     * Sóknaraðili (t.d. Skiptabeiðandi)
     * @type {Array<BasePerson>}
     * @memberof LookupGDNJCasesResult
     */
    plaintiff?: Array<BasePerson>;
    /**
     * Varnaraðili (t.d. Skuldari)
     * @type {Array<BasePerson>}
     * @memberof LookupGDNJCasesResult
     */
    defendant?: Array<BasePerson>;
    /**
     * Skiptastjórar
     * @type {Array<BasePerson>}
     * @memberof LookupGDNJCasesResult
     */
    liquidators?: Array<BasePerson>;
    /**
     * Móttökudagur
     * @type {string}
     * @memberof LookupGDNJCasesResult
     */
    receivalDate?: string;
    /**
     * Tekið til úrskurðar
     * @type {string}
     * @memberof LookupGDNJCasesResult
     */
    adjudicationDate?: string;
    /**
     * Skiptalok dags
     * @type {string}
     * @memberof LookupGDNJCasesResult
     */
    finalizationDate?: string;
    /**
     * Endurupptaka skipta
     * @type {string}
     * @memberof LookupGDNJCasesResult
     */
    reconsiderationDate?: string;
    /**
     * Lyktir
     * @type {Array<BaseOutcome>}
     * @memberof LookupGDNJCasesResult
     */
    outcome?: Array<BaseOutcome>;
    /**
     * Fyrri lyktir (eingöngu ef mál var endurupptekið)
     * @type {Array<BaseOutcome>}
     * @memberof LookupGDNJCasesResult
     */
    outcomeHistory?: Array<BaseOutcome>;
    /**
     * 
     * @type {string}
     * @memberof LookupGDNJCasesResult
     */
    created?: string;
    /**
     * 
     * @type {string}
     * @memberof LookupGDNJCasesResult
     */
    updated?: string;
    /**
     * 
     * @type {string}
     * @memberof LookupGDNJCasesResult
     */
    resultDate?: string;
}

export function LookupGDNJCasesResultFromJSON(json: any): LookupGDNJCasesResult {
    return LookupGDNJCasesResultFromJSONTyped(json, false);
}

export function LookupGDNJCasesResultFromJSONTyped(json: any, ignoreDiscriminator: boolean): LookupGDNJCasesResult {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'caseNumber': !exists(json, 'caseNumber') ? undefined : json['caseNumber'],
        'caseType': !exists(json, 'caseType') ? undefined : json['caseType'],
        'court': !exists(json, 'court') ? undefined : json['court'],
        'subject': !exists(json, 'subject') ? undefined : json['subject'],
        'plaintiff': !exists(json, 'plaintiff') ? undefined : ((json['plaintiff'] as Array<any>).map(BasePersonFromJSON)),
        'defendant': !exists(json, 'defendant') ? undefined : ((json['defendant'] as Array<any>).map(BasePersonFromJSON)),
        'liquidators': !exists(json, 'liquidators') ? undefined : ((json['liquidators'] as Array<any>).map(BasePersonFromJSON)),
        'receivalDate': !exists(json, 'receivalDate') ? undefined : json['receivalDate'],
        'adjudicationDate': !exists(json, 'adjudicationDate') ? undefined : json['adjudicationDate'],
        'finalizationDate': !exists(json, 'finalizationDate') ? undefined : json['finalizationDate'],
        'reconsiderationDate': !exists(json, 'reconsiderationDate') ? undefined : json['reconsiderationDate'],
        'outcome': !exists(json, 'outcome') ? undefined : ((json['outcome'] as Array<any>).map(BaseOutcomeFromJSON)),
        'outcomeHistory': !exists(json, 'outcomeHistory') ? undefined : ((json['outcomeHistory'] as Array<any>).map(BaseOutcomeFromJSON)),
        'created': !exists(json, 'created') ? undefined : json['created'],
        'updated': !exists(json, 'updated') ? undefined : json['updated'],
        'resultDate': !exists(json, 'resultDate') ? undefined : json['resultDate'],
    };
}

export function LookupGDNJCasesResultToJSON(value?: LookupGDNJCasesResult | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'caseNumber': value.caseNumber,
        'caseType': value.caseType,
        'court': value.court,
        'subject': value.subject,
        'plaintiff': value.plaintiff === undefined ? undefined : ((value.plaintiff as Array<any>).map(BasePersonToJSON)),
        'defendant': value.defendant === undefined ? undefined : ((value.defendant as Array<any>).map(BasePersonToJSON)),
        'liquidators': value.liquidators === undefined ? undefined : ((value.liquidators as Array<any>).map(BasePersonToJSON)),
        'receivalDate': value.receivalDate,
        'adjudicationDate': value.adjudicationDate,
        'finalizationDate': value.finalizationDate,
        'reconsiderationDate': value.reconsiderationDate,
        'outcome': value.outcome === undefined ? undefined : ((value.outcome as Array<any>).map(BaseOutcomeToJSON)),
        'outcomeHistory': value.outcomeHistory === undefined ? undefined : ((value.outcomeHistory as Array<any>).map(BaseOutcomeToJSON)),
        'created': value.created,
        'updated': value.updated,
        'resultDate': value.resultDate,
    };
}


