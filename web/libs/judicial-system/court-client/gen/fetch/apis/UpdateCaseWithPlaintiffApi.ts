/* tslint:disable */
/* eslint-disable */
/**
 * GoPro.JusticePortal.Rest
 * Provides access to Justice Portal rest service
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@gopro.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    UpdateCaseWithPlaintiffData,
    UpdateCaseWithPlaintiffDataFromJSON,
    UpdateCaseWithPlaintiffDataToJSON,
} from '../models';

export interface UpdateCaseWithPlaintiffRequest {
    updateCaseWithPlaintiffData: UpdateCaseWithPlaintiffData;
}

/**
 * 
 */
export class UpdateCaseWithPlaintiffApi extends runtime.BaseAPI {

    /**
     * Updates cases with plaintiffs.
     */
    async updateCaseWithPlaintiffRaw(requestParameters: UpdateCaseWithPlaintiffRequest): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.updateCaseWithPlaintiffData === null || requestParameters.updateCaseWithPlaintiffData === undefined) {
            throw new runtime.RequiredError('updateCaseWithPlaintiffData','Required parameter requestParameters.updateCaseWithPlaintiffData was null or undefined when calling updateCaseWithPlaintiff.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/UpdateCaseWithPlaintiff`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateCaseWithPlaintiffDataToJSON(requestParameters.updateCaseWithPlaintiffData),
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Updates cases with plaintiffs.
     */
    async updateCaseWithPlaintiff(requestParameters: UpdateCaseWithPlaintiffRequest): Promise<string> {
        const response = await this.updateCaseWithPlaintiffRaw(requestParameters);
        return await response.value();
    }

}
