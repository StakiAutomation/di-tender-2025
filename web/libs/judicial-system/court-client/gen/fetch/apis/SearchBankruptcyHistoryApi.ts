/* tslint:disable */
/* eslint-disable */
/**
 * GoPro.JusticePortal.Rest
 * Provides access to Justice Portal rest service
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@gopro.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    BankruptcyHistoryResult,
    BankruptcyHistoryResultFromJSON,
    BankruptcyHistoryResultToJSON,
} from '../models';

export interface SearchBankruptcyHistoryRequest {
    authenticationToken: string;
    idNumber: string;
}

/**
 * 
 */
export class SearchBankruptcyHistoryApi extends runtime.BaseAPI {

    /**
     * bankruptcyStatus meaning: 1. Með forræði og enga sögu; 2. Með forræði og með sögu; 3. Ekki með forræði og með sögu; 0. Ekki með forræði og enga sögu. Note: bankruptcyStatus is the same for all elements in the returned collection, so you can make global conclusion by checking only the first one.
     */
    async searchBankruptcyHistoryRaw(requestParameters: SearchBankruptcyHistoryRequest): Promise<runtime.ApiResponse<Array<BankruptcyHistoryResult>>> {
        if (requestParameters.authenticationToken === null || requestParameters.authenticationToken === undefined) {
            throw new runtime.RequiredError('authenticationToken','Required parameter requestParameters.authenticationToken was null or undefined when calling searchBankruptcyHistory.');
        }

        if (requestParameters.idNumber === null || requestParameters.idNumber === undefined) {
            throw new runtime.RequiredError('idNumber','Required parameter requestParameters.idNumber was null or undefined when calling searchBankruptcyHistory.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.authenticationToken !== undefined) {
            queryParameters['authenticationToken'] = requestParameters.authenticationToken;
        }

        if (requestParameters.idNumber !== undefined) {
            queryParameters['idNumber'] = requestParameters.idNumber;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/SearchBankruptcyHistory`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BankruptcyHistoryResultFromJSON));
    }

    /**
     * bankruptcyStatus meaning: 1. Með forræði og enga sögu; 2. Með forræði og með sögu; 3. Ekki með forræði og með sögu; 0. Ekki með forræði og enga sögu. Note: bankruptcyStatus is the same for all elements in the returned collection, so you can make global conclusion by checking only the first one.
     */
    async searchBankruptcyHistory(requestParameters: SearchBankruptcyHistoryRequest): Promise<Array<BankruptcyHistoryResult>> {
        const response = await this.searchBankruptcyHistoryRaw(requestParameters);
        return await response.value();
    }

}
