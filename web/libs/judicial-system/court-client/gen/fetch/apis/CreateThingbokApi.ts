/* tslint:disable */
/* eslint-disable */
/**
 * GoPro.JusticePortal.Rest
 * Provides access to Justice Portal rest service
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@gopro.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface CreateThingbokRequest {
    caseNumber: string;
    subject: string;
    fileName: string;
    streamID: string;
    authenticationToken: string;
}

/**
 * 
 */
export class CreateThingbokApi extends runtime.BaseAPI {

    /**
     * Creates Thingbok and returns document identificator (Guid)
     */
    async createThingbokRaw(requestParameters: CreateThingbokRequest): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.caseNumber === null || requestParameters.caseNumber === undefined) {
            throw new runtime.RequiredError('caseNumber','Required parameter requestParameters.caseNumber was null or undefined when calling createThingbok.');
        }

        if (requestParameters.subject === null || requestParameters.subject === undefined) {
            throw new runtime.RequiredError('subject','Required parameter requestParameters.subject was null or undefined when calling createThingbok.');
        }

        if (requestParameters.fileName === null || requestParameters.fileName === undefined) {
            throw new runtime.RequiredError('fileName','Required parameter requestParameters.fileName was null or undefined when calling createThingbok.');
        }

        if (requestParameters.streamID === null || requestParameters.streamID === undefined) {
            throw new runtime.RequiredError('streamID','Required parameter requestParameters.streamID was null or undefined when calling createThingbok.');
        }

        if (requestParameters.authenticationToken === null || requestParameters.authenticationToken === undefined) {
            throw new runtime.RequiredError('authenticationToken','Required parameter requestParameters.authenticationToken was null or undefined when calling createThingbok.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.caseNumber !== undefined) {
            queryParameters['caseNumber'] = requestParameters.caseNumber;
        }

        if (requestParameters.subject !== undefined) {
            queryParameters['subject'] = requestParameters.subject;
        }

        if (requestParameters.fileName !== undefined) {
            queryParameters['fileName'] = requestParameters.fileName;
        }

        if (requestParameters.streamID !== undefined) {
            queryParameters['streamID'] = requestParameters.streamID;
        }

        if (requestParameters.authenticationToken !== undefined) {
            queryParameters['authenticationToken'] = requestParameters.authenticationToken;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/CreateThingbok`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Creates Thingbok and returns document identificator (Guid)
     */
    async createThingbok(requestParameters: CreateThingbokRequest): Promise<string> {
        const response = await this.createThingbokRaw(requestParameters);
        return await response.value();
    }

}
