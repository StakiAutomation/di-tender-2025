/* tslint:disable */
/* eslint-disable */
/**
 * GoPro.JusticePortal.Rest
 * Provides access to Justice Portal rest service
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@gopro.net
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    LookupGDNJCasesData,
    LookupGDNJCasesDataFromJSON,
    LookupGDNJCasesDataToJSON,
    LookupGDNJCasesResult,
    LookupGDNJCasesResultFromJSON,
    LookupGDNJCasesResultToJSON,
} from '../models';

export interface LookupDataGDNJCasesRequest {
    lookupParameters: LookupGDNJCasesData;
}

/**
 * 
 */
export class LookupDataGDNJCasesApi extends runtime.BaseAPI {

    /**
     * When there are no matches returns empty array, otherwise array with matching results. If caseNumber is not specified, caseType must be specified. Returns max one year of results. Lookup allows for one case type at a time.
     */
    async lookupDataGDNJCasesRaw(requestParameters: LookupDataGDNJCasesRequest): Promise<runtime.ApiResponse<Array<LookupGDNJCasesResult>>> {
        if (requestParameters.lookupParameters === null || requestParameters.lookupParameters === undefined) {
            throw new runtime.RequiredError('lookupParameters','Required parameter requestParameters.lookupParameters was null or undefined when calling lookupDataGDNJCases.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/LookupDataGDNJCases`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LookupGDNJCasesDataToJSON(requestParameters.lookupParameters),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LookupGDNJCasesResultFromJSON));
    }

    /**
     * When there are no matches returns empty array, otherwise array with matching results. If caseNumber is not specified, caseType must be specified. Returns max one year of results. Lookup allows for one case type at a time.
     */
    async lookupDataGDNJCases(requestParameters: LookupDataGDNJCasesRequest): Promise<Array<LookupGDNJCasesResult>> {
        const response = await this.lookupDataGDNJCasesRaw(requestParameters);
        return await response.value();
    }

}
