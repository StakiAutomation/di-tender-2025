/* tslint:disable */
/* eslint-disable */
/**
 * X-Road Service Metadata API for REST
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    MethodList,
    MethodListFromJSON,
    MethodListToJSON,
} from '../models';

export interface AllowedMethodsRequest {
    xRoadInstance: string;
    memberClass: string;
    memberCode: string;
    subsystemCode: string;
    serviceId?: string;
    xRoadClient?: string;
}

export interface GetOpenAPIRequest {
    xRoadInstance: string;
    memberClass: string;
    memberCode: string;
    subsystemCode: string;
    serviceCode?: string;
    xRoadClient?: string;
}

export interface ListMethodsRequest {
    xRoadInstance: string;
    memberClass: string;
    memberCode: string;
    subsystemCode: string;
    serviceId?: string;
    xRoadClient?: string;
}

/**
 * 
 */
export class RestMetaservicesApi extends runtime.BaseAPI {

    /**
     * List of allowed REST services for a service provider
     */
    async allowedMethodsRaw(requestParameters: AllowedMethodsRequest): Promise<runtime.ApiResponse<MethodList>> {
        if (requestParameters.xRoadInstance === null || requestParameters.xRoadInstance === undefined) {
            throw new runtime.RequiredError('xRoadInstance','Required parameter requestParameters.xRoadInstance was null or undefined when calling allowedMethods.');
        }

        if (requestParameters.memberClass === null || requestParameters.memberClass === undefined) {
            throw new runtime.RequiredError('memberClass','Required parameter requestParameters.memberClass was null or undefined when calling allowedMethods.');
        }

        if (requestParameters.memberCode === null || requestParameters.memberCode === undefined) {
            throw new runtime.RequiredError('memberCode','Required parameter requestParameters.memberCode was null or undefined when calling allowedMethods.');
        }

        if (requestParameters.subsystemCode === null || requestParameters.subsystemCode === undefined) {
            throw new runtime.RequiredError('subsystemCode','Required parameter requestParameters.subsystemCode was null or undefined when calling allowedMethods.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.serviceId !== undefined) {
            queryParameters['serviceId'] = requestParameters.serviceId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xRoadClient !== undefined && requestParameters.xRoadClient !== null) {
            headerParameters['X-Road-Client'] = String(requestParameters.xRoadClient);
        }

        const response = await this.request({
            path: `/{xRoadInstance}/{memberClass}/{memberCode}/{subsystemCode}/allowedMethods`.replace(`{${"xRoadInstance"}}`, encodeURIComponent(String(requestParameters.xRoadInstance))).replace(`{${"memberClass"}}`, encodeURIComponent(String(requestParameters.memberClass))).replace(`{${"memberCode"}}`, encodeURIComponent(String(requestParameters.memberCode))).replace(`{${"subsystemCode"}}`, encodeURIComponent(String(requestParameters.subsystemCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MethodListFromJSON(jsonValue));
    }

    /**
     * List of allowed REST services for a service provider
     */
    async allowedMethods(requestParameters: AllowedMethodsRequest): Promise<MethodList> {
        const response = await this.allowedMethodsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns OpenAPI service description for a REST service
     */
    async getOpenAPIRaw(requestParameters: GetOpenAPIRequest): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.xRoadInstance === null || requestParameters.xRoadInstance === undefined) {
            throw new runtime.RequiredError('xRoadInstance','Required parameter requestParameters.xRoadInstance was null or undefined when calling getOpenAPI.');
        }

        if (requestParameters.memberClass === null || requestParameters.memberClass === undefined) {
            throw new runtime.RequiredError('memberClass','Required parameter requestParameters.memberClass was null or undefined when calling getOpenAPI.');
        }

        if (requestParameters.memberCode === null || requestParameters.memberCode === undefined) {
            throw new runtime.RequiredError('memberCode','Required parameter requestParameters.memberCode was null or undefined when calling getOpenAPI.');
        }

        if (requestParameters.subsystemCode === null || requestParameters.subsystemCode === undefined) {
            throw new runtime.RequiredError('subsystemCode','Required parameter requestParameters.subsystemCode was null or undefined when calling getOpenAPI.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.serviceCode !== undefined) {
            queryParameters['serviceCode'] = requestParameters.serviceCode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xRoadClient !== undefined && requestParameters.xRoadClient !== null) {
            headerParameters['X-Road-Client'] = String(requestParameters.xRoadClient);
        }

        const response = await this.request({
            path: `/{xRoadInstance}/{memberClass}/{memberCode}/{subsystemCode}/getOpenAPI`.replace(`{${"xRoadInstance"}}`, encodeURIComponent(String(requestParameters.xRoadInstance))).replace(`{${"memberClass"}}`, encodeURIComponent(String(requestParameters.memberClass))).replace(`{${"memberCode"}}`, encodeURIComponent(String(requestParameters.memberCode))).replace(`{${"subsystemCode"}}`, encodeURIComponent(String(requestParameters.subsystemCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Returns OpenAPI service description for a REST service
     */
    async getOpenAPI(requestParameters: GetOpenAPIRequest): Promise<string> {
        const response = await this.getOpenAPIRaw(requestParameters);
        return await response.value();
    }

    /**
     * List REST services for a service provider
     */
    async listMethodsRaw(requestParameters: ListMethodsRequest): Promise<runtime.ApiResponse<MethodList>> {
        if (requestParameters.xRoadInstance === null || requestParameters.xRoadInstance === undefined) {
            throw new runtime.RequiredError('xRoadInstance','Required parameter requestParameters.xRoadInstance was null or undefined when calling listMethods.');
        }

        if (requestParameters.memberClass === null || requestParameters.memberClass === undefined) {
            throw new runtime.RequiredError('memberClass','Required parameter requestParameters.memberClass was null or undefined when calling listMethods.');
        }

        if (requestParameters.memberCode === null || requestParameters.memberCode === undefined) {
            throw new runtime.RequiredError('memberCode','Required parameter requestParameters.memberCode was null or undefined when calling listMethods.');
        }

        if (requestParameters.subsystemCode === null || requestParameters.subsystemCode === undefined) {
            throw new runtime.RequiredError('subsystemCode','Required parameter requestParameters.subsystemCode was null or undefined when calling listMethods.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.serviceId !== undefined) {
            queryParameters['serviceId'] = requestParameters.serviceId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xRoadClient !== undefined && requestParameters.xRoadClient !== null) {
            headerParameters['X-Road-Client'] = String(requestParameters.xRoadClient);
        }

        const response = await this.request({
            path: `/{xRoadInstance}/{memberClass}/{memberCode}/{subsystemCode}/listMethods`.replace(`{${"xRoadInstance"}}`, encodeURIComponent(String(requestParameters.xRoadInstance))).replace(`{${"memberClass"}}`, encodeURIComponent(String(requestParameters.memberClass))).replace(`{${"memberCode"}}`, encodeURIComponent(String(requestParameters.memberCode))).replace(`{${"subsystemCode"}}`, encodeURIComponent(String(requestParameters.subsystemCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MethodListFromJSON(jsonValue));
    }

    /**
     * List REST services for a service provider
     */
    async listMethods(requestParameters: ListMethodsRequest): Promise<MethodList> {
        const response = await this.listMethodsRaw(requestParameters);
        return await response.value();
    }

}
