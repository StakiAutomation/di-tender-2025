/* tslint:disable */
/* eslint-disable */
/**
 * Documents backend
 * Backend providing documents and document-providers info
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Liveness,
    LivenessFromJSON,
    LivenessToJSON,
    Readiness,
    ReadinessFromJSON,
    ReadinessToJSON,
    Version,
    VersionFromJSON,
    VersionToJSON,
} from '../models';

/**
 * 
 */
export class InternalApi extends runtime.BaseAPI {

    /**
     */
    async documentsInfraControllerLivenessRaw(): Promise<runtime.ApiResponse<Liveness>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/liveness`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => LivenessFromJSON(jsonValue));
    }

    /**
     */
    async documentsInfraControllerLiveness(): Promise<Liveness> {
        const response = await this.documentsInfraControllerLivenessRaw();
        return await response.value();
    }

    /**
     */
    async documentsInfraControllerReadinessRaw(): Promise<runtime.ApiResponse<Readiness>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/readiness`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ReadinessFromJSON(jsonValue));
    }

    /**
     */
    async documentsInfraControllerReadiness(): Promise<Readiness> {
        const response = await this.documentsInfraControllerReadinessRaw();
        return await response.value();
    }

    /**
     */
    async documentsInfraControllerVersionRaw(): Promise<runtime.ApiResponse<Version>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/version`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionFromJSON(jsonValue));
    }

    /**
     */
    async documentsInfraControllerVersion(): Promise<Version> {
        const response = await this.documentsInfraControllerVersionRaw();
        return await response.value();
    }

}
