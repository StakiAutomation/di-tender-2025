/* tslint:disable */
/* eslint-disable */
/**
 * Application backend
 * This is provided as a reference to implement other backends.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    PaymentStatusResponseDto,
    PaymentStatusResponseDtoFromJSON,
    PaymentStatusResponseDtoToJSON,
} from '../models';

export interface PaymentControllerGetPaymentStatusRequest {
    applicationId: string;
    locale?: string;
}

/**
 * 
 */
export class PaymentsApi extends runtime.BaseAPI {

    /**
     */
    async paymentControllerGetPaymentStatusRaw(requestParameters: PaymentControllerGetPaymentStatusRequest): Promise<runtime.ApiResponse<PaymentStatusResponseDto>> {
        if (requestParameters.applicationId === null || requestParameters.applicationId === undefined) {
            throw new runtime.RequiredError('applicationId','Required parameter requestParameters.applicationId was null or undefined when calling paymentControllerGetPaymentStatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.locale !== undefined && requestParameters.locale !== null) {
            headerParameters['locale'] = String(requestParameters.locale);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/applications/{applicationId}/payment-status`.replace(`{${"applicationId"}}`, encodeURIComponent(String(requestParameters.applicationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PaymentStatusResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async paymentControllerGetPaymentStatus(requestParameters: PaymentControllerGetPaymentStatusRequest): Promise<PaymentStatusResponseDto> {
        const response = await this.paymentControllerGetPaymentStatusRaw(requestParameters);
        return await response.value();
    }

}
