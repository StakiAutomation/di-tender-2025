/* tslint:disable */
/* eslint-disable */
/**
 * Application backend
 * This is provided as a reference to implement other backends.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ApiClientCallback,
    ApiClientCallbackFromJSON,
    ApiClientCallbackToJSON,
    Callback,
    CallbackFromJSON,
    CallbackToJSON,
} from '../models';

export interface PaymentCallbackControllerApiClientPaymentCallbackRequest {
    apiClientCallback: ApiClientCallback;
}

export interface PaymentCallbackControllerPaymentApprovedRequest {
    applicationId: string;
    id: string;
    callback: Callback;
}

/**
 * 
 */
export class PaymentCallbackApi extends runtime.BaseAPI {

    /**
     */
    async paymentCallbackControllerApiClientPaymentCallbackRaw(requestParameters: PaymentCallbackControllerApiClientPaymentCallbackRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.apiClientCallback === null || requestParameters.apiClientCallback === undefined) {
            throw new runtime.RequiredError('apiClientCallback','Required parameter requestParameters.apiClientCallback was null or undefined when calling paymentCallbackControllerApiClientPaymentCallback.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/application-payment/api-client-payment-callback`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiClientCallbackToJSON(requestParameters.apiClientCallback),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async paymentCallbackControllerApiClientPaymentCallback(requestParameters: PaymentCallbackControllerApiClientPaymentCallbackRequest): Promise<void> {
        await this.paymentCallbackControllerApiClientPaymentCallbackRaw(requestParameters);
    }

    /**
     */
    async paymentCallbackControllerPaymentApprovedRaw(requestParameters: PaymentCallbackControllerPaymentApprovedRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.applicationId === null || requestParameters.applicationId === undefined) {
            throw new runtime.RequiredError('applicationId','Required parameter requestParameters.applicationId was null or undefined when calling paymentCallbackControllerPaymentApproved.');
        }

        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling paymentCallbackControllerPaymentApproved.');
        }

        if (requestParameters.callback === null || requestParameters.callback === undefined) {
            throw new runtime.RequiredError('callback','Required parameter requestParameters.callback was null or undefined when calling paymentCallbackControllerPaymentApproved.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/application-payment/{applicationId}/{id}`.replace(`{${"applicationId"}}`, encodeURIComponent(String(requestParameters.applicationId))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CallbackToJSON(requestParameters.callback),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async paymentCallbackControllerPaymentApproved(requestParameters: PaymentCallbackControllerPaymentApprovedRequest): Promise<void> {
        await this.paymentCallbackControllerPaymentApprovedRaw(requestParameters);
    }

}
