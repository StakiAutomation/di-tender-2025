/* tslint:disable */
/* eslint-disable */
/**
 * Application backend
 * This is provided as a reference to implement other backends.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AddAttachmentDto,
    AddAttachmentDtoFromJSON,
    AddAttachmentDtoToJSON,
    ApplicationAdminPaginatedResponse,
    ApplicationAdminPaginatedResponseFromJSON,
    ApplicationAdminPaginatedResponseToJSON,
    ApplicationListAdminResponseDto,
    ApplicationListAdminResponseDtoFromJSON,
    ApplicationListAdminResponseDtoToJSON,
    ApplicationResponseDto,
    ApplicationResponseDtoFromJSON,
    ApplicationResponseDtoToJSON,
    ApplicationStatistics,
    ApplicationStatisticsFromJSON,
    ApplicationStatisticsToJSON,
    AssignApplicationDto,
    AssignApplicationDtoFromJSON,
    AssignApplicationDtoToJSON,
    CreateApplicationDto,
    CreateApplicationDtoFromJSON,
    CreateApplicationDtoToJSON,
    DeleteAttachmentDto,
    DeleteAttachmentDtoFromJSON,
    DeleteAttachmentDtoToJSON,
    HttpProblemResponse,
    HttpProblemResponseFromJSON,
    HttpProblemResponseToJSON,
    PopulateExternalDataDto,
    PopulateExternalDataDtoFromJSON,
    PopulateExternalDataDtoToJSON,
    PresignedUrlResponseDto,
    PresignedUrlResponseDtoFromJSON,
    PresignedUrlResponseDtoToJSON,
    UpdateApplicationDto,
    UpdateApplicationDtoFromJSON,
    UpdateApplicationDtoToJSON,
    UpdateApplicationStateDto,
    UpdateApplicationStateDtoFromJSON,
    UpdateApplicationStateDtoToJSON,
} from '../models';

export interface AdminControllerFindAllAdminRequest {
    nationalId: string;
    locale?: string;
    typeId?: string;
    status?: string;
}

export interface AdminControllerFindAllInstitutionAdminRequest {
    nationalId: string;
    page: number;
    count: number;
    locale?: string;
    status?: string;
    applicantNationalId?: string;
    from?: string;
    to?: string;
}

export interface AdminControllerGetCountByTypeIdAndStatusRequest {
    startDate: string;
    endDate: string;
    locale?: string;
}

export interface ApplicationControllerAddAttachmentRequest {
    id: string;
    addAttachmentDto: AddAttachmentDto;
    locale?: string;
}

export interface ApplicationControllerAssignApplicationRequest {
    assignApplicationDto: AssignApplicationDto;
    locale?: string;
}

export interface ApplicationControllerCreateRequest {
    createApplicationDto: CreateApplicationDto;
    locale?: string;
}

export interface ApplicationControllerDeleteRequest {
    id: string;
    locale?: string;
}

export interface ApplicationControllerDeleteAttachmentRequest {
    id: string;
    deleteAttachmentDto: DeleteAttachmentDto;
    locale?: string;
}

export interface ApplicationControllerFindAllRequest {
    nationalId: string;
    locale?: string;
    typeId?: string;
    status?: string;
    scopeCheck?: boolean;
}

export interface ApplicationControllerFindOneRequest {
    id: string;
    locale?: string;
}

export interface ApplicationControllerGetAttachmentPresignedURLRequest {
    id: string;
    attachmentKey: string;
    locale?: string;
}

export interface ApplicationControllerSubmitApplicationRequest {
    id: string;
    updateApplicationStateDto: UpdateApplicationStateDto;
    locale?: string;
}

export interface ApplicationControllerUpdateRequest {
    id: string;
    updateApplicationDto: UpdateApplicationDto;
    locale?: string;
}

export interface ApplicationControllerUpdateExternalDataRequest {
    id: string;
    populateExternalDataDto: PopulateExternalDataDto;
    locale?: string;
}

/**
 * 
 */
export class ApplicationsApi extends runtime.BaseAPI {

    /**
     * Get applications for a specific user
     */
    async adminControllerFindAllAdminRaw(requestParameters: AdminControllerFindAllAdminRequest): Promise<runtime.ApiResponse<Array<ApplicationListAdminResponseDto>>> {
        if (requestParameters.nationalId === null || requestParameters.nationalId === undefined) {
            throw new runtime.RequiredError('nationalId','Required parameter requestParameters.nationalId was null or undefined when calling adminControllerFindAllAdmin.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.typeId !== undefined) {
            queryParameters['typeId'] = requestParameters.typeId;
        }

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.locale !== undefined && requestParameters.locale !== null) {
            headerParameters['locale'] = String(requestParameters.locale);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/admin/{nationalId}/applications`.replace(`{${"nationalId"}}`, encodeURIComponent(String(requestParameters.nationalId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ApplicationListAdminResponseDtoFromJSON));
    }

    /**
     * Get applications for a specific user
     */
    async adminControllerFindAllAdmin(requestParameters: AdminControllerFindAllAdminRequest): Promise<Array<ApplicationListAdminResponseDto>> {
        const response = await this.adminControllerFindAllAdminRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get applications for a specific institution
     */
    async adminControllerFindAllInstitutionAdminRaw(requestParameters: AdminControllerFindAllInstitutionAdminRequest): Promise<runtime.ApiResponse<ApplicationAdminPaginatedResponse>> {
        if (requestParameters.nationalId === null || requestParameters.nationalId === undefined) {
            throw new runtime.RequiredError('nationalId','Required parameter requestParameters.nationalId was null or undefined when calling adminControllerFindAllInstitutionAdmin.');
        }

        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling adminControllerFindAllInstitutionAdmin.');
        }

        if (requestParameters.count === null || requestParameters.count === undefined) {
            throw new runtime.RequiredError('count','Required parameter requestParameters.count was null or undefined when calling adminControllerFindAllInstitutionAdmin.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        if (requestParameters.applicantNationalId !== undefined) {
            queryParameters['applicantNationalId'] = requestParameters.applicantNationalId;
        }

        if (requestParameters.from !== undefined) {
            queryParameters['from'] = requestParameters.from;
        }

        if (requestParameters.to !== undefined) {
            queryParameters['to'] = requestParameters.to;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.locale !== undefined && requestParameters.locale !== null) {
            headerParameters['locale'] = String(requestParameters.locale);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/admin/institution/{nationalId}/applications/{page}/{count}`.replace(`{${"nationalId"}}`, encodeURIComponent(String(requestParameters.nationalId))).replace(`{${"page"}}`, encodeURIComponent(String(requestParameters.page))).replace(`{${"count"}}`, encodeURIComponent(String(requestParameters.count))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationAdminPaginatedResponseFromJSON(jsonValue));
    }

    /**
     * Get applications for a specific institution
     */
    async adminControllerFindAllInstitutionAdmin(requestParameters: AdminControllerFindAllInstitutionAdminRequest): Promise<ApplicationAdminPaginatedResponse> {
        const response = await this.adminControllerFindAllInstitutionAdminRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get applications statistics
     */
    async adminControllerGetCountByTypeIdAndStatusRaw(requestParameters: AdminControllerGetCountByTypeIdAndStatusRequest): Promise<runtime.ApiResponse<Array<ApplicationStatistics>>> {
        if (requestParameters.startDate === null || requestParameters.startDate === undefined) {
            throw new runtime.RequiredError('startDate','Required parameter requestParameters.startDate was null or undefined when calling adminControllerGetCountByTypeIdAndStatus.');
        }

        if (requestParameters.endDate === null || requestParameters.endDate === undefined) {
            throw new runtime.RequiredError('endDate','Required parameter requestParameters.endDate was null or undefined when calling adminControllerGetCountByTypeIdAndStatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = requestParameters.startDate;
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = requestParameters.endDate;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.locale !== undefined && requestParameters.locale !== null) {
            headerParameters['locale'] = String(requestParameters.locale);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/admin/applications-statistics`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ApplicationStatisticsFromJSON));
    }

    /**
     * Get applications statistics
     */
    async adminControllerGetCountByTypeIdAndStatus(requestParameters: AdminControllerGetCountByTypeIdAndStatusRequest): Promise<Array<ApplicationStatistics>> {
        const response = await this.adminControllerGetCountByTypeIdAndStatusRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async applicationControllerAddAttachmentRaw(requestParameters: ApplicationControllerAddAttachmentRequest): Promise<runtime.ApiResponse<ApplicationResponseDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling applicationControllerAddAttachment.');
        }

        if (requestParameters.addAttachmentDto === null || requestParameters.addAttachmentDto === undefined) {
            throw new runtime.RequiredError('addAttachmentDto','Required parameter requestParameters.addAttachmentDto was null or undefined when calling applicationControllerAddAttachment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.locale !== undefined && requestParameters.locale !== null) {
            headerParameters['locale'] = String(requestParameters.locale);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/applications/{id}/attachments`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AddAttachmentDtoToJSON(requestParameters.addAttachmentDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async applicationControllerAddAttachment(requestParameters: ApplicationControllerAddAttachmentRequest): Promise<ApplicationResponseDto> {
        const response = await this.applicationControllerAddAttachmentRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async applicationControllerAssignApplicationRaw(requestParameters: ApplicationControllerAssignApplicationRequest): Promise<runtime.ApiResponse<ApplicationResponseDto>> {
        if (requestParameters.assignApplicationDto === null || requestParameters.assignApplicationDto === undefined) {
            throw new runtime.RequiredError('assignApplicationDto','Required parameter requestParameters.assignApplicationDto was null or undefined when calling applicationControllerAssignApplication.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.locale !== undefined && requestParameters.locale !== null) {
            headerParameters['locale'] = String(requestParameters.locale);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/applications/assign`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AssignApplicationDtoToJSON(requestParameters.assignApplicationDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async applicationControllerAssignApplication(requestParameters: ApplicationControllerAssignApplicationRequest): Promise<ApplicationResponseDto> {
        const response = await this.applicationControllerAssignApplicationRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async applicationControllerCreateRaw(requestParameters: ApplicationControllerCreateRequest): Promise<runtime.ApiResponse<ApplicationResponseDto>> {
        if (requestParameters.createApplicationDto === null || requestParameters.createApplicationDto === undefined) {
            throw new runtime.RequiredError('createApplicationDto','Required parameter requestParameters.createApplicationDto was null or undefined when calling applicationControllerCreate.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.locale !== undefined && requestParameters.locale !== null) {
            headerParameters['locale'] = String(requestParameters.locale);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/applications`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateApplicationDtoToJSON(requestParameters.createApplicationDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async applicationControllerCreate(requestParameters: ApplicationControllerCreateRequest): Promise<ApplicationResponseDto> {
        const response = await this.applicationControllerCreateRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async applicationControllerDeleteRaw(requestParameters: ApplicationControllerDeleteRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling applicationControllerDelete.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.locale !== undefined && requestParameters.locale !== null) {
            headerParameters['locale'] = String(requestParameters.locale);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/applications/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async applicationControllerDelete(requestParameters: ApplicationControllerDeleteRequest): Promise<void> {
        await this.applicationControllerDeleteRaw(requestParameters);
    }

    /**
     */
    async applicationControllerDeleteAttachmentRaw(requestParameters: ApplicationControllerDeleteAttachmentRequest): Promise<runtime.ApiResponse<ApplicationResponseDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling applicationControllerDeleteAttachment.');
        }

        if (requestParameters.deleteAttachmentDto === null || requestParameters.deleteAttachmentDto === undefined) {
            throw new runtime.RequiredError('deleteAttachmentDto','Required parameter requestParameters.deleteAttachmentDto was null or undefined when calling applicationControllerDeleteAttachment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.locale !== undefined && requestParameters.locale !== null) {
            headerParameters['locale'] = String(requestParameters.locale);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/applications/{id}/attachments`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: DeleteAttachmentDtoToJSON(requestParameters.deleteAttachmentDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async applicationControllerDeleteAttachment(requestParameters: ApplicationControllerDeleteAttachmentRequest): Promise<ApplicationResponseDto> {
        const response = await this.applicationControllerDeleteAttachmentRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async applicationControllerFindAllRaw(requestParameters: ApplicationControllerFindAllRequest): Promise<runtime.ApiResponse<Array<ApplicationResponseDto>>> {
        if (requestParameters.nationalId === null || requestParameters.nationalId === undefined) {
            throw new runtime.RequiredError('nationalId','Required parameter requestParameters.nationalId was null or undefined when calling applicationControllerFindAll.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.typeId !== undefined) {
            queryParameters['typeId'] = requestParameters.typeId;
        }

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        if (requestParameters.scopeCheck !== undefined) {
            queryParameters['scopeCheck'] = requestParameters.scopeCheck;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.locale !== undefined && requestParameters.locale !== null) {
            headerParameters['locale'] = String(requestParameters.locale);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/{nationalId}/applications`.replace(`{${"nationalId"}}`, encodeURIComponent(String(requestParameters.nationalId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ApplicationResponseDtoFromJSON));
    }

    /**
     */
    async applicationControllerFindAll(requestParameters: ApplicationControllerFindAllRequest): Promise<Array<ApplicationResponseDto>> {
        const response = await this.applicationControllerFindAllRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async applicationControllerFindOneRaw(requestParameters: ApplicationControllerFindOneRequest): Promise<runtime.ApiResponse<ApplicationResponseDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling applicationControllerFindOne.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.locale !== undefined && requestParameters.locale !== null) {
            headerParameters['locale'] = String(requestParameters.locale);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/applications/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async applicationControllerFindOne(requestParameters: ApplicationControllerFindOneRequest): Promise<ApplicationResponseDto> {
        const response = await this.applicationControllerFindOneRaw(requestParameters);
        return await response.value();
    }

    /**
     * Gets a presigned url for attachments
     */
    async applicationControllerGetAttachmentPresignedURLRaw(requestParameters: ApplicationControllerGetAttachmentPresignedURLRequest): Promise<runtime.ApiResponse<PresignedUrlResponseDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling applicationControllerGetAttachmentPresignedURL.');
        }

        if (requestParameters.attachmentKey === null || requestParameters.attachmentKey === undefined) {
            throw new runtime.RequiredError('attachmentKey','Required parameter requestParameters.attachmentKey was null or undefined when calling applicationControllerGetAttachmentPresignedURL.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.locale !== undefined && requestParameters.locale !== null) {
            headerParameters['locale'] = String(requestParameters.locale);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/applications/{id}/attachments/{attachmentKey}/presigned-url`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"attachmentKey"}}`, encodeURIComponent(String(requestParameters.attachmentKey))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PresignedUrlResponseDtoFromJSON(jsonValue));
    }

    /**
     * Gets a presigned url for attachments
     */
    async applicationControllerGetAttachmentPresignedURL(requestParameters: ApplicationControllerGetAttachmentPresignedURLRequest): Promise<PresignedUrlResponseDto> {
        const response = await this.applicationControllerGetAttachmentPresignedURLRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async applicationControllerSubmitApplicationRaw(requestParameters: ApplicationControllerSubmitApplicationRequest): Promise<runtime.ApiResponse<ApplicationResponseDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling applicationControllerSubmitApplication.');
        }

        if (requestParameters.updateApplicationStateDto === null || requestParameters.updateApplicationStateDto === undefined) {
            throw new runtime.RequiredError('updateApplicationStateDto','Required parameter requestParameters.updateApplicationStateDto was null or undefined when calling applicationControllerSubmitApplication.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.locale !== undefined && requestParameters.locale !== null) {
            headerParameters['locale'] = String(requestParameters.locale);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/applications/{id}/submit`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateApplicationStateDtoToJSON(requestParameters.updateApplicationStateDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async applicationControllerSubmitApplication(requestParameters: ApplicationControllerSubmitApplicationRequest): Promise<ApplicationResponseDto> {
        const response = await this.applicationControllerSubmitApplicationRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async applicationControllerUpdateRaw(requestParameters: ApplicationControllerUpdateRequest): Promise<runtime.ApiResponse<ApplicationResponseDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling applicationControllerUpdate.');
        }

        if (requestParameters.updateApplicationDto === null || requestParameters.updateApplicationDto === undefined) {
            throw new runtime.RequiredError('updateApplicationDto','Required parameter requestParameters.updateApplicationDto was null or undefined when calling applicationControllerUpdate.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.locale !== undefined && requestParameters.locale !== null) {
            headerParameters['locale'] = String(requestParameters.locale);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/applications/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateApplicationDtoToJSON(requestParameters.updateApplicationDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async applicationControllerUpdate(requestParameters: ApplicationControllerUpdateRequest): Promise<ApplicationResponseDto> {
        const response = await this.applicationControllerUpdateRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async applicationControllerUpdateExternalDataRaw(requestParameters: ApplicationControllerUpdateExternalDataRequest): Promise<runtime.ApiResponse<ApplicationResponseDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling applicationControllerUpdateExternalData.');
        }

        if (requestParameters.populateExternalDataDto === null || requestParameters.populateExternalDataDto === undefined) {
            throw new runtime.RequiredError('populateExternalDataDto','Required parameter requestParameters.populateExternalDataDto was null or undefined when calling applicationControllerUpdateExternalData.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.locale !== undefined && requestParameters.locale !== null) {
            headerParameters['locale'] = String(requestParameters.locale);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/applications/{id}/externalData`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PopulateExternalDataDtoToJSON(requestParameters.populateExternalDataDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async applicationControllerUpdateExternalData(requestParameters: ApplicationControllerUpdateExternalDataRequest): Promise<ApplicationResponseDto> {
        const response = await this.applicationControllerUpdateExternalDataRaw(requestParameters);
        return await response.value();
    }

}
