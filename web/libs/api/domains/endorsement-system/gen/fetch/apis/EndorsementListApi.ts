/* tslint:disable */
/* eslint-disable */
/**
 * EndorsementSystem
 * This API manages endorsement lists and associated endorsements collected by systems within island.is.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ChangeEndorsmentListClosedDateDto,
    ChangeEndorsmentListClosedDateDtoFromJSON,
    ChangeEndorsmentListClosedDateDtoToJSON,
    EndorsementList,
    EndorsementListFromJSON,
    EndorsementListToJSON,
    EndorsementListDto,
    EndorsementListDtoFromJSON,
    EndorsementListDtoToJSON,
    EndorsementListExportUrlResponse,
    EndorsementListExportUrlResponseFromJSON,
    EndorsementListExportUrlResponseToJSON,
    PaginatedEndorsementDto,
    PaginatedEndorsementDtoFromJSON,
    PaginatedEndorsementDtoToJSON,
    PaginatedEndorsementListDto,
    PaginatedEndorsementListDtoFromJSON,
    PaginatedEndorsementListDtoToJSON,
    SendPdfEmailResponse,
    SendPdfEmailResponseFromJSON,
    SendPdfEmailResponseToJSON,
    UpdateEndorsementListDto,
    UpdateEndorsementListDtoFromJSON,
    UpdateEndorsementListDtoToJSON,
} from '../models';

export interface EndorsementListControllerCloseRequest {
    listId: string;
}

export interface EndorsementListControllerCreateRequest {
    endorsementListDto: EndorsementListDto;
}

export interface EndorsementListControllerEmailEndorsementsPDFRequest {
    listId: string;
    emailAddress: string;
}

export interface EndorsementListControllerExportEndorsementListRequest {
    listId: string;
    fileType: EndorsementListControllerExportEndorsementListFileTypeEnum;
}

export interface EndorsementListControllerFindByTagsRequest {
    tags: Array<EndorsementListControllerFindByTagsTagsEnum>;
    limit?: number;
    before?: string;
    after?: string;
}

export interface EndorsementListControllerFindEndorsementListsRequest {
    limit?: number;
    before?: string;
    after?: string;
}

export interface EndorsementListControllerFindEndorsementsRequest {
    limit?: number;
    before?: string;
    after?: string;
}

export interface EndorsementListControllerFindOneRequest {
    listId: string;
}

export interface EndorsementListControllerGetGeneralPetitionListRequest {
    listId: string;
}

export interface EndorsementListControllerGetGeneralPetitionListsRequest {
    limit?: number;
    before?: string;
    after?: string;
}

export interface EndorsementListControllerGetOwnerInfoRequest {
    listId: string;
}

export interface EndorsementListControllerLockRequest {
    listId: string;
}

export interface EndorsementListControllerOpenRequest {
    listId: string;
    changeEndorsmentListClosedDateDto: ChangeEndorsmentListClosedDateDto;
}

export interface EndorsementListControllerUnlockRequest {
    listId: string;
}

export interface EndorsementListControllerUpdateRequest {
    listId: string;
    updateEndorsementListDto: UpdateEndorsementListDto;
}

/**
 * 
 */
export class EndorsementListApi extends runtime.BaseAPI {

    /**
     * Close a single endorsements list by id
     */
    async endorsementListControllerCloseRaw(requestParameters: EndorsementListControllerCloseRequest): Promise<runtime.ApiResponse<EndorsementList>> {
        if (requestParameters.listId === null || requestParameters.listId === undefined) {
            throw new runtime.RequiredError('listId','Required parameter requestParameters.listId was null or undefined when calling endorsementListControllerClose.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/endorsement-list/{listId}/close`.replace(`{${"listId"}}`, encodeURIComponent(String(requestParameters.listId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EndorsementListFromJSON(jsonValue));
    }

    /**
     * Close a single endorsements list by id
     */
    async endorsementListControllerClose(requestParameters: EndorsementListControllerCloseRequest): Promise<EndorsementList> {
        const response = await this.endorsementListControllerCloseRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create an endorsements list
     */
    async endorsementListControllerCreateRaw(requestParameters: EndorsementListControllerCreateRequest): Promise<runtime.ApiResponse<EndorsementList>> {
        if (requestParameters.endorsementListDto === null || requestParameters.endorsementListDto === undefined) {
            throw new runtime.RequiredError('endorsementListDto','Required parameter requestParameters.endorsementListDto was null or undefined when calling endorsementListControllerCreate.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/endorsement-list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EndorsementListDtoToJSON(requestParameters.endorsementListDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EndorsementListFromJSON(jsonValue));
    }

    /**
     * Create an endorsements list
     */
    async endorsementListControllerCreate(requestParameters: EndorsementListControllerCreateRequest): Promise<EndorsementList> {
        const response = await this.endorsementListControllerCreateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Emails a PDF with list endorsements data
     */
    async endorsementListControllerEmailEndorsementsPDFRaw(requestParameters: EndorsementListControllerEmailEndorsementsPDFRequest): Promise<runtime.ApiResponse<SendPdfEmailResponse>> {
        if (requestParameters.listId === null || requestParameters.listId === undefined) {
            throw new runtime.RequiredError('listId','Required parameter requestParameters.listId was null or undefined when calling endorsementListControllerEmailEndorsementsPDF.');
        }

        if (requestParameters.emailAddress === null || requestParameters.emailAddress === undefined) {
            throw new runtime.RequiredError('emailAddress','Required parameter requestParameters.emailAddress was null or undefined when calling endorsementListControllerEmailEndorsementsPDF.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.emailAddress !== undefined) {
            queryParameters['emailAddress'] = requestParameters.emailAddress;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/endorsement-list/{listId}/email-pdf`.replace(`{${"listId"}}`, encodeURIComponent(String(requestParameters.listId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SendPdfEmailResponseFromJSON(jsonValue));
    }

    /**
     * Emails a PDF with list endorsements data
     */
    async endorsementListControllerEmailEndorsementsPDF(requestParameters: EndorsementListControllerEmailEndorsementsPDFRequest): Promise<SendPdfEmailResponse> {
        const response = await this.endorsementListControllerEmailEndorsementsPDFRaw(requestParameters);
        return await response.value();
    }

    /**
     * Export an endorsement list as PDF or CSV
     */
    async endorsementListControllerExportEndorsementListRaw(requestParameters: EndorsementListControllerExportEndorsementListRequest): Promise<runtime.ApiResponse<EndorsementListExportUrlResponse>> {
        if (requestParameters.listId === null || requestParameters.listId === undefined) {
            throw new runtime.RequiredError('listId','Required parameter requestParameters.listId was null or undefined when calling endorsementListControllerExportEndorsementList.');
        }

        if (requestParameters.fileType === null || requestParameters.fileType === undefined) {
            throw new runtime.RequiredError('fileType','Required parameter requestParameters.fileType was null or undefined when calling endorsementListControllerExportEndorsementList.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/endorsement-list/{listId}/export/{fileType}`.replace(`{${"listId"}}`, encodeURIComponent(String(requestParameters.listId))).replace(`{${"fileType"}}`, encodeURIComponent(String(requestParameters.fileType))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EndorsementListExportUrlResponseFromJSON(jsonValue));
    }

    /**
     * Export an endorsement list as PDF or CSV
     */
    async endorsementListControllerExportEndorsementList(requestParameters: EndorsementListControllerExportEndorsementListRequest): Promise<EndorsementListExportUrlResponse> {
        const response = await this.endorsementListControllerExportEndorsementListRaw(requestParameters);
        return await response.value();
    }

    /**
     * Finds all endorsement lists belonging to given tags, if user is not admin then no locked lists will appear
     */
    async endorsementListControllerFindByTagsRaw(requestParameters: EndorsementListControllerFindByTagsRequest): Promise<runtime.ApiResponse<PaginatedEndorsementListDto>> {
        if (requestParameters.tags === null || requestParameters.tags === undefined) {
            throw new runtime.RequiredError('tags','Required parameter requestParameters.tags was null or undefined when calling endorsementListControllerFindByTags.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.tags) {
            queryParameters['tags'] = requestParameters.tags;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.before !== undefined) {
            queryParameters['before'] = requestParameters.before;
        }

        if (requestParameters.after !== undefined) {
            queryParameters['after'] = requestParameters.after;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/endorsement-list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedEndorsementListDtoFromJSON(jsonValue));
    }

    /**
     * Finds all endorsement lists belonging to given tags, if user is not admin then no locked lists will appear
     */
    async endorsementListControllerFindByTags(requestParameters: EndorsementListControllerFindByTagsRequest): Promise<PaginatedEndorsementListDto> {
        const response = await this.endorsementListControllerFindByTagsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Finds all endorsement lists owned by the currently authenticated user
     */
    async endorsementListControllerFindEndorsementListsRaw(requestParameters: EndorsementListControllerFindEndorsementListsRequest): Promise<runtime.ApiResponse<PaginatedEndorsementListDto>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.before !== undefined) {
            queryParameters['before'] = requestParameters.before;
        }

        if (requestParameters.after !== undefined) {
            queryParameters['after'] = requestParameters.after;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/endorsement-list/endorsementLists`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedEndorsementListDtoFromJSON(jsonValue));
    }

    /**
     * Finds all endorsement lists owned by the currently authenticated user
     */
    async endorsementListControllerFindEndorsementLists(requestParameters: EndorsementListControllerFindEndorsementListsRequest): Promise<PaginatedEndorsementListDto> {
        const response = await this.endorsementListControllerFindEndorsementListsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Finds all endorsements for the currently authenticated user
     */
    async endorsementListControllerFindEndorsementsRaw(requestParameters: EndorsementListControllerFindEndorsementsRequest): Promise<runtime.ApiResponse<PaginatedEndorsementDto>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.before !== undefined) {
            queryParameters['before'] = requestParameters.before;
        }

        if (requestParameters.after !== undefined) {
            queryParameters['after'] = requestParameters.after;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/endorsement-list/endorsements`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedEndorsementDtoFromJSON(jsonValue));
    }

    /**
     * Finds all endorsements for the currently authenticated user
     */
    async endorsementListControllerFindEndorsements(requestParameters: EndorsementListControllerFindEndorsementsRequest): Promise<PaginatedEndorsementDto> {
        const response = await this.endorsementListControllerFindEndorsementsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Finds a single endorsements list by id
     */
    async endorsementListControllerFindOneRaw(requestParameters: EndorsementListControllerFindOneRequest): Promise<runtime.ApiResponse<EndorsementList>> {
        if (requestParameters.listId === null || requestParameters.listId === undefined) {
            throw new runtime.RequiredError('listId','Required parameter requestParameters.listId was null or undefined when calling endorsementListControllerFindOne.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/endorsement-list/{listId}`.replace(`{${"listId"}}`, encodeURIComponent(String(requestParameters.listId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EndorsementListFromJSON(jsonValue));
    }

    /**
     * Finds a single endorsements list by id
     */
    async endorsementListControllerFindOne(requestParameters: EndorsementListControllerFindOneRequest): Promise<EndorsementList> {
        const response = await this.endorsementListControllerFindOneRaw(requestParameters);
        return await response.value();
    }

    /**
     * Gets a General Petition List by Id
     */
    async endorsementListControllerGetGeneralPetitionListRaw(requestParameters: EndorsementListControllerGetGeneralPetitionListRequest): Promise<runtime.ApiResponse<EndorsementList>> {
        if (requestParameters.listId === null || requestParameters.listId === undefined) {
            throw new runtime.RequiredError('listId','Required parameter requestParameters.listId was null or undefined when calling endorsementListControllerGetGeneralPetitionList.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/endorsement-list/general-petition-list/{listId}`.replace(`{${"listId"}}`, encodeURIComponent(String(requestParameters.listId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EndorsementListFromJSON(jsonValue));
    }

    /**
     * Gets a General Petition List by Id
     */
    async endorsementListControllerGetGeneralPetitionList(requestParameters: EndorsementListControllerGetGeneralPetitionListRequest): Promise<EndorsementList> {
        const response = await this.endorsementListControllerGetGeneralPetitionListRaw(requestParameters);
        return await response.value();
    }

    /**
     * Gets General Petition Lists
     */
    async endorsementListControllerGetGeneralPetitionListsRaw(requestParameters: EndorsementListControllerGetGeneralPetitionListsRequest): Promise<runtime.ApiResponse<PaginatedEndorsementListDto>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.before !== undefined) {
            queryParameters['before'] = requestParameters.before;
        }

        if (requestParameters.after !== undefined) {
            queryParameters['after'] = requestParameters.after;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/endorsement-list/general-petition-lists`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedEndorsementListDtoFromJSON(jsonValue));
    }

    /**
     * Gets General Petition Lists
     */
    async endorsementListControllerGetGeneralPetitionLists(requestParameters: EndorsementListControllerGetGeneralPetitionListsRequest): Promise<PaginatedEndorsementListDto> {
        const response = await this.endorsementListControllerGetGeneralPetitionListsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Fetches owner info from national registry
     */
    async endorsementListControllerGetOwnerInfoRaw(requestParameters: EndorsementListControllerGetOwnerInfoRequest): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.listId === null || requestParameters.listId === undefined) {
            throw new runtime.RequiredError('listId','Required parameter requestParameters.listId was null or undefined when calling endorsementListControllerGetOwnerInfo.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/endorsement-list/{listId}/ownerInfo`.replace(`{${"listId"}}`, encodeURIComponent(String(requestParameters.listId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Fetches owner info from national registry
     */
    async endorsementListControllerGetOwnerInfo(requestParameters: EndorsementListControllerGetOwnerInfoRequest): Promise<string> {
        const response = await this.endorsementListControllerGetOwnerInfoRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async endorsementListControllerLockRaw(requestParameters: EndorsementListControllerLockRequest): Promise<runtime.ApiResponse<EndorsementList>> {
        if (requestParameters.listId === null || requestParameters.listId === undefined) {
            throw new runtime.RequiredError('listId','Required parameter requestParameters.listId was null or undefined when calling endorsementListControllerLock.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/endorsement-list/{listId}/lock`.replace(`{${"listId"}}`, encodeURIComponent(String(requestParameters.listId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EndorsementListFromJSON(jsonValue));
    }

    /**
     */
    async endorsementListControllerLock(requestParameters: EndorsementListControllerLockRequest): Promise<EndorsementList> {
        const response = await this.endorsementListControllerLockRaw(requestParameters);
        return await response.value();
    }

    /**
     * Open a single endorsements list by id
     */
    async endorsementListControllerOpenRaw(requestParameters: EndorsementListControllerOpenRequest): Promise<runtime.ApiResponse<EndorsementList>> {
        if (requestParameters.listId === null || requestParameters.listId === undefined) {
            throw new runtime.RequiredError('listId','Required parameter requestParameters.listId was null or undefined when calling endorsementListControllerOpen.');
        }

        if (requestParameters.changeEndorsmentListClosedDateDto === null || requestParameters.changeEndorsmentListClosedDateDto === undefined) {
            throw new runtime.RequiredError('changeEndorsmentListClosedDateDto','Required parameter requestParameters.changeEndorsmentListClosedDateDto was null or undefined when calling endorsementListControllerOpen.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/endorsement-list/{listId}/open`.replace(`{${"listId"}}`, encodeURIComponent(String(requestParameters.listId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChangeEndorsmentListClosedDateDtoToJSON(requestParameters.changeEndorsmentListClosedDateDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EndorsementListFromJSON(jsonValue));
    }

    /**
     * Open a single endorsements list by id
     */
    async endorsementListControllerOpen(requestParameters: EndorsementListControllerOpenRequest): Promise<EndorsementList> {
        const response = await this.endorsementListControllerOpenRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async endorsementListControllerUnlockRaw(requestParameters: EndorsementListControllerUnlockRequest): Promise<runtime.ApiResponse<EndorsementList>> {
        if (requestParameters.listId === null || requestParameters.listId === undefined) {
            throw new runtime.RequiredError('listId','Required parameter requestParameters.listId was null or undefined when calling endorsementListControllerUnlock.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/endorsement-list/{listId}/unlock`.replace(`{${"listId"}}`, encodeURIComponent(String(requestParameters.listId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EndorsementListFromJSON(jsonValue));
    }

    /**
     */
    async endorsementListControllerUnlock(requestParameters: EndorsementListControllerUnlockRequest): Promise<EndorsementList> {
        const response = await this.endorsementListControllerUnlockRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async endorsementListControllerUpdateRaw(requestParameters: EndorsementListControllerUpdateRequest): Promise<runtime.ApiResponse<EndorsementList>> {
        if (requestParameters.listId === null || requestParameters.listId === undefined) {
            throw new runtime.RequiredError('listId','Required parameter requestParameters.listId was null or undefined when calling endorsementListControllerUpdate.');
        }

        if (requestParameters.updateEndorsementListDto === null || requestParameters.updateEndorsementListDto === undefined) {
            throw new runtime.RequiredError('updateEndorsementListDto','Required parameter requestParameters.updateEndorsementListDto was null or undefined when calling endorsementListControllerUpdate.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/endorsement-list/{listId}/update`.replace(`{${"listId"}}`, encodeURIComponent(String(requestParameters.listId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateEndorsementListDtoToJSON(requestParameters.updateEndorsementListDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EndorsementListFromJSON(jsonValue));
    }

    /**
     */
    async endorsementListControllerUpdate(requestParameters: EndorsementListControllerUpdateRequest): Promise<EndorsementList> {
        const response = await this.endorsementListControllerUpdateRaw(requestParameters);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum EndorsementListControllerExportEndorsementListFileTypeEnum {
    pdf = 'pdf',
    csv = 'csv'
}
/**
    * @export
    * @enum {string}
    */
export enum EndorsementListControllerFindByTagsTagsEnum {
    generalPetition = 'generalPetition'
}
