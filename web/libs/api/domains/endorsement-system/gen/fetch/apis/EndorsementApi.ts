/* tslint:disable */
/* eslint-disable */
/**
 * EndorsementSystem
 * This API manages endorsement lists and associated endorsements collected by systems within island.is.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Endorsement,
    EndorsementFromJSON,
    EndorsementToJSON,
    EndorsementDto,
    EndorsementDtoFromJSON,
    EndorsementDtoToJSON,
    ExistsEndorsementResponse,
    ExistsEndorsementResponseFromJSON,
    ExistsEndorsementResponseToJSON,
    PaginatedEndorsementDto,
    PaginatedEndorsementDtoFromJSON,
    PaginatedEndorsementDtoToJSON,
} from '../models';

export interface EndorsementControllerCreateRequest {
    listId: string;
    endorsementDto: EndorsementDto;
}

export interface EndorsementControllerDeleteRequest {
    listId: string;
}

export interface EndorsementControllerFindRequest {
    listId: string;
    limit?: number;
    before?: string;
    after?: string;
}

export interface EndorsementControllerFindAllRequest {
    listId: string;
    limit?: number;
    before?: string;
    after?: string;
}

export interface EndorsementControllerFindByAuthRequest {
    listId: string;
}

/**
 * 
 */
export class EndorsementApi extends runtime.BaseAPI {

    /**
     * Uses the authenticated users national id to create an endorsement
     */
    async endorsementControllerCreateRaw(requestParameters: EndorsementControllerCreateRequest): Promise<runtime.ApiResponse<Endorsement>> {
        if (requestParameters.listId === null || requestParameters.listId === undefined) {
            throw new runtime.RequiredError('listId','Required parameter requestParameters.listId was null or undefined when calling endorsementControllerCreate.');
        }

        if (requestParameters.endorsementDto === null || requestParameters.endorsementDto === undefined) {
            throw new runtime.RequiredError('endorsementDto','Required parameter requestParameters.endorsementDto was null or undefined when calling endorsementControllerCreate.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/endorsement-list/{listId}/endorsement`.replace(`{${"listId"}}`, encodeURIComponent(String(requestParameters.listId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EndorsementDtoToJSON(requestParameters.endorsementDto),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EndorsementFromJSON(jsonValue));
    }

    /**
     * Uses the authenticated users national id to create an endorsement
     */
    async endorsementControllerCreate(requestParameters: EndorsementControllerCreateRequest): Promise<Endorsement> {
        const response = await this.endorsementControllerCreateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Uses the authenticated users national id to remove endorsement form a given list
     */
    async endorsementControllerDeleteRaw(requestParameters: EndorsementControllerDeleteRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.listId === null || requestParameters.listId === undefined) {
            throw new runtime.RequiredError('listId','Required parameter requestParameters.listId was null or undefined when calling endorsementControllerDelete.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/endorsement-list/{listId}/endorsement`.replace(`{${"listId"}}`, encodeURIComponent(String(requestParameters.listId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Uses the authenticated users national id to remove endorsement form a given list
     */
    async endorsementControllerDelete(requestParameters: EndorsementControllerDeleteRequest): Promise<void> {
        await this.endorsementControllerDeleteRaw(requestParameters);
    }

    /**
     * Finds all endorsements in a given general petition list
     */
    async endorsementControllerFindRaw(requestParameters: EndorsementControllerFindRequest): Promise<runtime.ApiResponse<PaginatedEndorsementDto>> {
        if (requestParameters.listId === null || requestParameters.listId === undefined) {
            throw new runtime.RequiredError('listId','Required parameter requestParameters.listId was null or undefined when calling endorsementControllerFind.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.before !== undefined) {
            queryParameters['before'] = requestParameters.before;
        }

        if (requestParameters.after !== undefined) {
            queryParameters['after'] = requestParameters.after;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/endorsement-list/{listId}/endorsement/general-petition`.replace(`{${"listId"}}`, encodeURIComponent(String(requestParameters.listId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedEndorsementDtoFromJSON(jsonValue));
    }

    /**
     * Finds all endorsements in a given general petition list
     */
    async endorsementControllerFind(requestParameters: EndorsementControllerFindRequest): Promise<PaginatedEndorsementDto> {
        const response = await this.endorsementControllerFindRaw(requestParameters);
        return await response.value();
    }

    /**
     * Finds all endorsements in a given list
     */
    async endorsementControllerFindAllRaw(requestParameters: EndorsementControllerFindAllRequest): Promise<runtime.ApiResponse<PaginatedEndorsementDto>> {
        if (requestParameters.listId === null || requestParameters.listId === undefined) {
            throw new runtime.RequiredError('listId','Required parameter requestParameters.listId was null or undefined when calling endorsementControllerFindAll.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.before !== undefined) {
            queryParameters['before'] = requestParameters.before;
        }

        if (requestParameters.after !== undefined) {
            queryParameters['after'] = requestParameters.after;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/endorsement-list/{listId}/endorsement`.replace(`{${"listId"}}`, encodeURIComponent(String(requestParameters.listId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedEndorsementDtoFromJSON(jsonValue));
    }

    /**
     * Finds all endorsements in a given list
     */
    async endorsementControllerFindAll(requestParameters: EndorsementControllerFindAllRequest): Promise<PaginatedEndorsementDto> {
        const response = await this.endorsementControllerFindAllRaw(requestParameters);
        return await response.value();
    }

    /**
     * Find any existing endorsement in a given list by national Id
     */
    async endorsementControllerFindByAuthRaw(requestParameters: EndorsementControllerFindByAuthRequest): Promise<runtime.ApiResponse<ExistsEndorsementResponse>> {
        if (requestParameters.listId === null || requestParameters.listId === undefined) {
            throw new runtime.RequiredError('listId','Required parameter requestParameters.listId was null or undefined when calling endorsementControllerFindByAuth.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oauth2", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/endorsement-list/{listId}/endorsement/exists`.replace(`{${"listId"}}`, encodeURIComponent(String(requestParameters.listId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ExistsEndorsementResponseFromJSON(jsonValue));
    }

    /**
     * Find any existing endorsement in a given list by national Id
     */
    async endorsementControllerFindByAuth(requestParameters: EndorsementControllerFindByAuthRequest): Promise<ExistsEndorsementResponse> {
        const response = await this.endorsementControllerFindByAuthRaw(requestParameters);
        return await response.value();
    }

}
