import {
  GraphQLResolveInfo,
  GraphQLScalarType,
  GraphQLScalarTypeConfig,
} from 'graphql'
export type Maybe<T> = T | null
export type InputMaybe<T> = Maybe<T>
export type Exact<T extends { [key: string]: unknown }> = {
  [K in keyof T]: T[K]
}
export type MakeOptional<T, K extends keyof T> = Omit<T, K> &
  { [SubKey in K]?: Maybe<T[SubKey]> }
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> &
  { [SubKey in K]: Maybe<T[SubKey]> }
export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>
export type RequireFields<T, K extends keyof T> = Omit<T, K> &
  { [P in K]-?: NonNullable<T[P]> }
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string
  String: string
  Boolean: boolean
  Int: number
  Float: number
  /** A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format. */
  DateTime: any
  /** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
  JSON: any
  /** The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
  JSONObject: any
}

export type AccessCategory = 'APIGW' | 'XROAD'

export type AccidentNotificationAttachment = {
  __typename?: 'AccidentNotificationAttachment'
  InjuryCertificate?: Maybe<Scalars['Boolean']>
  PoliceReport?: Maybe<Scalars['Boolean']>
  ProxyDocument?: Maybe<Scalars['Boolean']>
  Unknown?: Maybe<Scalars['Boolean']>
}

export type AccidentNotificationConfirmation = {
  __typename?: 'AccidentNotificationConfirmation'
  CompanyParty?: Maybe<Scalars['Boolean']>
  InjuredOrRepresentativeParty?: Maybe<Scalars['Boolean']>
  Unknown?: Maybe<Scalars['Boolean']>
}

export type AccidentNotificationStatus = {
  __typename?: 'AccidentNotificationStatus'
  numberIHI: Scalars['Float']
  receivedAttachments?: Maybe<AccidentNotificationAttachment>
  receivedConfirmations?: Maybe<AccidentNotificationConfirmation>
  status: HealthInsuranceAccidentNotificationStatusTypes
}

export type AccordionSlice = {
  __typename?: 'AccordionSlice'
  accordionItems?: Maybe<Array<OneColumnText>>
  hasBorderAbove?: Maybe<Scalars['Boolean']>
  id: Scalars['ID']
  showTitle?: Maybe<Scalars['Boolean']>
  title: Scalars['String']
  titleHeadingLevel?: Maybe<Scalars['String']>
  type: Scalars['String']
}

export type ActionCardMetaData = {
  __typename?: 'ActionCardMetaData'
  deleteButton?: Maybe<Scalars['Boolean']>
  description?: Maybe<Scalars['String']>
  draftFinishedSteps?: Maybe<Scalars['Float']>
  draftTotalSteps?: Maybe<Scalars['Float']>
  history?: Maybe<Array<ApplicationHistory>>
  historyButton?: Maybe<Scalars['String']>
  pendingAction?: Maybe<PendingAction>
  tag?: Maybe<ActionCardTag>
  title?: Maybe<Scalars['String']>
}

export type ActionCardTag = {
  __typename?: 'ActionCardTag'
  label?: Maybe<Scalars['String']>
  variant?: Maybe<Scalars['String']>
}

export type ActionMailBody = {
  __typename?: 'ActionMailBody'
  action: Scalars['String']
  messageId: Scalars['String']
  success: Scalars['Boolean']
}

export type AddAttachmentInput = {
  id: Scalars['String']
  key: Scalars['String']
  url: Scalars['String']
}

export type Address = {
  city: Scalars['String']
  postalCode: Scalars['String']
  streetAddress: Scalars['String']
}

export type AdminNotification = {
  __typename?: 'AdminNotification'
  id: Scalars['Int']
  notificationId: Scalars['ID']
  sender: NotificationSender
  sent: Scalars['DateTime']
}

export type AdminNotifications = {
  __typename?: 'AdminNotifications'
  data: Array<AdminNotification>
  pageInfo: PageInfoDto
  totalCount: Scalars['Float']
}

export type AdministrationofOccupationalSafetyandHealthCourseModel = {
  __typename?: 'AdministrationofOccupationalSafetyandHealthCourseModel'
  alwaysOpen?: Maybe<Scalars['Boolean']>
  category: Scalars['String']
  dateFrom: Scalars['String']
  dateTo: Scalars['String']
  description: Scalars['String']
  id: Scalars['Float']
  location: Scalars['String']
  name: Scalars['String']
  price: Scalars['Float']
  registrationUrl: Scalars['String']
  status: Scalars['String']
  subCategory: Scalars['String']
  time: Scalars['String']
}

export type AdministrationofOccupationalSafetyandHealthCoursesResponseModel = {
  __typename?: 'AdministrationofOccupationalSafetyandHealthCoursesResponseModel'
  courses: Array<AdministrationofOccupationalSafetyandHealthCourseModel>
}

export type AirDiscountSchemeConfirmInvoiceInput = {
  age: AirDiscountSchemeRangeInput
  airline?: InputMaybe<Scalars['String']>
  flightLeg?: InputMaybe<AirDiscountSchemeTravelInput>
  gender?: InputMaybe<AirDiscountSchemeFlightLegGender>
  isExplicit?: InputMaybe<Scalars['Boolean']>
  nationalId?: InputMaybe<Scalars['String']>
  period: AirDiscountSchemePeriodInput
  postalCode?: InputMaybe<Scalars['Int']>
  state?: InputMaybe<Array<AirDiscountSchemeFlightLegState>>
}

export type AirDiscountSchemeConnectionDiscountCode = {
  __typename?: 'AirDiscountSchemeConnectionDiscountCode'
  code: Scalars['ID']
  flightDesc: Scalars['String']
  flightId: Scalars['String']
  validUntil: Scalars['String']
}

export type AirDiscountSchemeCreateExplicitDiscountCodeInput = {
  comment: Scalars['String']
  isExplicit: Scalars['Boolean']
  nationalId: Scalars['String']
  needsConnectionFlight: Scalars['Boolean']
  numberOfDaysUntilExpiration: Scalars['Int']
  postalcode: Scalars['Int']
}

export type AirDiscountSchemeDiscount = {
  __typename?: 'AirDiscountSchemeDiscount'
  connectionDiscountCodes: Array<AirDiscountSchemeConnectionDiscountCode>
  discountCode?: Maybe<Scalars['String']>
  expiresIn: Scalars['Float']
  nationalId: Scalars['ID']
  user: AirDiscountSchemeUser
}

export type AirDiscountSchemeFlight = {
  __typename?: 'AirDiscountSchemeFlight'
  bookingDate: Scalars['DateTime']
  flightLegs: Array<AirDiscountSchemeFlightLeg>
  id: Scalars['ID']
  user: AirDiscountSchemeUser
  userInfo: AirDiscountSchemeUserInfo
}

export type AirDiscountSchemeFlightLeg = {
  __typename?: 'AirDiscountSchemeFlightLeg'
  airline: Scalars['String']
  cooperation?: Maybe<Scalars['String']>
  discountPrice: Scalars['Float']
  financialState: Scalars['String']
  flight: AirDiscountSchemeFlight
  id: Scalars['ID']
  originalPrice: Scalars['Float']
  travel: Scalars['String']
}

export type AirDiscountSchemeFlightLegGender = 'kk' | 'kvk' | 'manneskja' | 'x'

export type AirDiscountSchemeFlightLegState =
  | 'AWAITING_CREDIT'
  | 'AWAITING_DEBIT'
  | 'CANCELLED'
  | 'SENT_CREDIT'
  | 'SENT_DEBIT'

export type AirDiscountSchemeFlightLegsInput = {
  age: AirDiscountSchemeRangeInput
  airline?: InputMaybe<Scalars['String']>
  flightLeg?: InputMaybe<AirDiscountSchemeTravelInput>
  gender?: InputMaybe<AirDiscountSchemeFlightLegGender>
  isExplicit?: InputMaybe<Scalars['Boolean']>
  nationalId?: InputMaybe<Scalars['String']>
  period: AirDiscountSchemePeriodInput
  postalCode?: InputMaybe<Scalars['Int']>
  state?: InputMaybe<Array<AirDiscountSchemeFlightLegState>>
}

export type AirDiscountSchemeFund = {
  __typename?: 'AirDiscountSchemeFund'
  credit: Scalars['Float']
  total: Scalars['Float']
  used: Scalars['Float']
}

export type AirDiscountSchemePeriodInput = {
  from: Scalars['DateTime']
  to: Scalars['DateTime']
}

export type AirDiscountSchemeRangeInput = {
  from: Scalars['Int']
  to: Scalars['Int']
}

export type AirDiscountSchemeTravelInput = {
  from?: InputMaybe<Scalars['String']>
  to?: InputMaybe<Scalars['String']>
}

export type AirDiscountSchemeUser = {
  __typename?: 'AirDiscountSchemeUser'
  flightLegs?: Maybe<Array<AirDiscountSchemeFlightLeg>>
  fund?: Maybe<AirDiscountSchemeFund>
  meetsADSRequirements: Scalars['Boolean']
  mobile?: Maybe<Scalars['String']>
  name: Scalars['String']
  nationalId: Scalars['ID']
  role: Scalars['String']
}

export type AirDiscountSchemeUserInfo = {
  __typename?: 'AirDiscountSchemeUserInfo'
  age: Scalars['Float']
  gender: Scalars['String']
  postalCode: Scalars['Float']
}

export type AircraftRegistryAircraft = {
  __typename?: 'AircraftRegistryAircraft'
  identifiers?: Maybe<Scalars['String']>
  maxWeight?: Maybe<Scalars['Float']>
  operator?: Maybe<AircraftRegistryPerson>
  owners?: Maybe<Array<AircraftRegistryPerson>>
  productionYear?: Maybe<Scalars['Float']>
  registrationNumber?: Maybe<Scalars['Float']>
  serialNumber?: Maybe<Scalars['String']>
  type?: Maybe<Scalars['String']>
  unregistered?: Maybe<Scalars['Boolean']>
  unregisteredDate?: Maybe<Scalars['DateTime']>
}

export type AircraftRegistryAllAircraftsInput = {
  pageNumber: Scalars['Float']
  pageSize: Scalars['Float']
  searchTerm?: InputMaybe<Scalars['String']>
}

export type AircraftRegistryAllAircraftsResponse = {
  __typename?: 'AircraftRegistryAllAircraftsResponse'
  aircrafts?: Maybe<Array<AircraftRegistryAircraft>>
  pageNumber?: Maybe<Scalars['Float']>
  pageSize?: Maybe<Scalars['Float']>
  totalCount?: Maybe<Scalars['Float']>
}

export type AircraftRegistryPerson = {
  __typename?: 'AircraftRegistryPerson'
  address?: Maybe<Scalars['String']>
  city?: Maybe<Scalars['String']>
  country?: Maybe<Scalars['String']>
  email?: Maybe<Scalars['String']>
  name?: Maybe<Scalars['String']>
  phone?: Maybe<Scalars['String']>
  postcode?: Maybe<Scalars['String']>
  ssn?: Maybe<Scalars['Float']>
}

export type AlcoholLicence = {
  __typename?: 'AlcoholLicence'
  issuedBy?: Maybe<Scalars['String']>
  licenceSubType?: Maybe<Scalars['String']>
  licenceType?: Maybe<Scalars['String']>
  licenseHolder?: Maybe<Scalars['String']>
  licenseNumber?: Maybe<Scalars['String']>
  licenseResponsible?: Maybe<Scalars['String']>
  location?: Maybe<Scalars['String']>
  office?: Maybe<Scalars['String']>
  validFrom?: Maybe<Scalars['DateTime']>
  validTo?: Maybe<Scalars['DateTime']>
  year?: Maybe<Scalars['Float']>
}

export type AlertBanner = {
  __typename?: 'AlertBanner'
  bannerVariant: Scalars['String']
  description?: Maybe<Scalars['String']>
  dismissedForDays: Scalars['Int']
  id: Scalars['ID']
  isDismissable: Scalars['Boolean']
  link?: Maybe<ReferenceLink>
  linkTitle?: Maybe<Scalars['String']>
  servicePortalPaths?: Maybe<Array<Scalars['String']>>
  showAlertBanner: Scalars['Boolean']
  title?: Maybe<Scalars['String']>
}

export type AnchorPage = {
  __typename?: 'AnchorPage'
  category?: Maybe<ArticleCategory>
  content: Array<Slice>
  featuredImage?: Maybe<Image>
  id: Scalars['ID']
  image?: Maybe<Image>
  intro?: Maybe<Scalars['String']>
  pageType?: Maybe<Scalars['String']>
  seeMoreText?: Maybe<Scalars['String']>
  shortIntro?: Maybe<Scalars['String']>
  shortTitle?: Maybe<Scalars['String']>
  slug: Scalars['String']
  thumbnail?: Maybe<Image>
  tinyThumbnail?: Maybe<Image>
  title: Scalars['String']
}

export type AnchorPageListSlice = {
  __typename?: 'AnchorPageListSlice'
  id: Scalars['ID']
  pages: Array<AnchorPage>
  title: Scalars['String']
}

export type ApiCatalogue = {
  __typename?: 'ApiCatalogue'
  pageInfo?: Maybe<PageInfo>
  services: Array<Service>
}

export type Appendix = {
  __typename?: 'Appendix'
  text?: Maybe<Scalars['String']>
  title?: Maybe<Scalars['String']>
}

export type AppendixInput = {
  text?: InputMaybe<Scalars['String']>
  title?: InputMaybe<Scalars['String']>
}

export type Application = {
  __typename?: 'Application'
  actionCard?: Maybe<ActionCardMetaData>
  answers: Scalars['JSON']
  applicant: Scalars['String']
  applicantActors: Array<Scalars['String']>
  assignees: Array<Scalars['String']>
  created: Scalars['DateTime']
  externalData: Scalars['JSON']
  id: Scalars['ID']
  institution?: Maybe<Scalars['String']>
  modified: Scalars['DateTime']
  name?: Maybe<Scalars['String']>
  progress?: Maybe<Scalars['Float']>
  pruned?: Maybe<Scalars['Boolean']>
  state: Scalars['String']
  status: ApplicationResponseDtoStatusEnum
  typeId: ApplicationResponseDtoTypeIdEnum
}

export type ApplicationAdmin = {
  __typename?: 'ApplicationAdmin'
  actionCard?: Maybe<ActionCardMetaData>
  applicant: Scalars['String']
  applicantActors: Array<Scalars['String']>
  applicantName?: Maybe<Scalars['String']>
  assignees: Array<Scalars['String']>
  created: Scalars['DateTime']
  id: Scalars['ID']
  institution?: Maybe<Scalars['String']>
  modified: Scalars['DateTime']
  name?: Maybe<Scalars['String']>
  paymentStatus?: Maybe<Scalars['String']>
  progress?: Maybe<Scalars['Float']>
  pruneAt?: Maybe<Scalars['DateTime']>
  pruned?: Maybe<Scalars['Boolean']>
  state: Scalars['String']
  status: ApplicationListAdminResponseDtoStatusEnum
  typeId: ApplicationListAdminResponseDtoTypeIdEnum
}

export type ApplicationAdminPaginatedResponse = {
  __typename?: 'ApplicationAdminPaginatedResponse'
  count: Scalars['Float']
  rows: Array<ApplicationAdmin>
}

export type ApplicationApplicationInput = {
  id: Scalars['String']
}

export type ApplicationApplicationsAdminInput = {
  nationalId: Scalars['String']
  status?: InputMaybe<Array<Scalars['String']>>
  typeId?: InputMaybe<Array<Scalars['String']>>
}

export type ApplicationApplicationsAdminStatisticsInput = {
  endDate: Scalars['String']
  startDate: Scalars['String']
}

export type ApplicationApplicationsInput = {
  scopeCheck?: InputMaybe<Scalars['Boolean']>
  status?: InputMaybe<Array<Scalars['String']>>
  typeId?: InputMaybe<Array<Scalars['String']>>
}

export type ApplicationApplicationsInstitutionAdminInput = {
  applicantNationalId?: InputMaybe<Scalars['String']>
  count: Scalars['Float']
  from?: InputMaybe<Scalars['String']>
  nationalId: Scalars['String']
  page: Scalars['Float']
  status?: InputMaybe<Array<Scalars['String']>>
  to?: InputMaybe<Scalars['String']>
}

export type ApplicationEligibility = {
  __typename?: 'ApplicationEligibility'
  isEligible: Scalars['Boolean']
  requirements: Array<ApplicationEligibilityRequirement>
}

export type ApplicationEligibilityInput = {
  applicationFor: Scalars['String']
}

export type ApplicationEligibilityRequirement = {
  __typename?: 'ApplicationEligibilityRequirement'
  daysOfResidency?: Maybe<Scalars['Float']>
  key: RequirementKey
  requirementMet: Scalars['Boolean']
}

export type ApplicationFileInput = {
  applicationId: Scalars['String']
  key: Scalars['String']
  name: Scalars['String']
  size: Scalars['Float']
  type: Scalars['String']
}

export type ApplicationHistory = {
  __typename?: 'ApplicationHistory'
  date: Scalars['DateTime']
  log?: Maybe<Scalars['String']>
}

export type ApplicationInformation = {
  __typename?: 'ApplicationInformation'
  applicantId: Scalars['String']
  applicationFundId: Scalars['String']
  applicationId: Scalars['ID']
  applicationRights: Array<ApplicationRights>
  children: Array<ApplicationInformationChildren>
  dateOfBirth: Scalars['String']
  email: Scalars['String']
  employers: Array<ApplicationInformationEmployer>
  expectedDateOfBirth: Scalars['String']
  nationalRegisteryId: Scalars['String']
  otherParentId?: Maybe<Scalars['String']>
  otherParentName?: Maybe<Scalars['String']>
  paymentInfo: ParentalLeavePaymentInfo
  periods: Array<ApplicationInformationPeriod>
  phoneNumber: Scalars['String']
  result: Scalars['String']
  status: Scalars['String']
  testData?: Maybe<Scalars['String']>
}

export type ApplicationInformationChildren = {
  __typename?: 'ApplicationInformationChildren'
  dateOfBirth: Scalars['String']
  expectedDateOfBirth: Scalars['String']
  name: Scalars['String']
  nationalRegistryId: Scalars['String']
}

export type ApplicationInformationEmployer = {
  __typename?: 'ApplicationInformationEmployer'
  email?: Maybe<Scalars['String']>
  employerId?: Maybe<Scalars['String']>
  nationalRegistryId?: Maybe<Scalars['String']>
}

export type ApplicationInformationPeriod = {
  __typename?: 'ApplicationInformationPeriod'
  approved: Scalars['Boolean']
  days: Scalars['String']
  firstPeriodStart: Scalars['String']
  from: Scalars['String']
  paid: Scalars['Boolean']
  ratio: Scalars['String']
  rightsCodePeriod: Scalars['String']
  to: Scalars['String']
}

export type ApplicationListAdminResponseDtoStatusEnum =
  | 'approved'
  | 'completed'
  | 'draft'
  | 'inprogress'
  | 'notstarted'
  | 'rejected'

export type ApplicationListAdminResponseDtoTypeIdEnum =
  | 'AccidentNotification'
  | 'AdditionalSupportForTheElderly'
  | 'AlcoholTaxRedemption'
  | 'AnnouncementOfDeath'
  | 'AnonymityInVehicleRegistry'
  | 'CarRecycling'
  | 'ChangeCoOwnerOfVehicle'
  | 'ChangeMachineSupervisor'
  | 'ChangeOperatorOfVehicle'
  | 'ChildrenResidenceChangeV2'
  | 'Citizenship'
  | 'ComplaintsToAlthingiOmbudsman'
  | 'CriminalRecord'
  | 'DataProtectionAuthorityComplaint'
  | 'DeathBenefits'
  | 'DeregisterMachine'
  | 'DigitalTachographDriversCard'
  | 'DocumentProviderOnboarding'
  | 'DrivingAssessmentApproval'
  | 'DrivingInstructorRegistrations'
  | 'DrivingLearnersPermit'
  | 'DrivingLicense'
  | 'DrivingLicenseBookUpdateInstructor'
  | 'DrivingLicenseDuplicate'
  | 'DrivingSchoolConfirmation'
  | 'EnergyFunds'
  | 'Estate'
  | 'EuropeanHealthInsuranceCard'
  | 'ExampleCommonActions'
  | 'ExampleForm'
  | 'ExampleInputs'
  | 'ExampleNoInputs'
  | 'ExamplePayment'
  | 'ExampleStateTransfers'
  | 'FinancialAid'
  | 'FinancialStatementCemetery'
  | 'FinancialStatementIndividualElection'
  | 'FinancialStatementPoliticalParty'
  | 'FinancialStatementsInao'
  | 'FundingGovernmentProjects'
  | 'GeneralFishingLicense'
  | 'GeneralPetitionService'
  | 'GrindavikHousingBuyout'
  | 'HealthInsurance'
  | 'HealthInsuranceDeclaration'
  | 'HealthcareLicenseCertificate'
  | 'HealthcareWorkPermit'
  | 'HomeSupport'
  | 'HouseholdSupplement'
  | 'IdCard'
  | 'IncomePlan'
  | 'InheritanceReport'
  | 'InstitutionCollaboration'
  | 'LicensePlateRenewal'
  | 'LoginService'
  | 'MachineRegistration'
  | 'MarriageConditions'
  | 'MortgageCertificate'
  | 'MunicipalListCreation'
  | 'MunicipalListSigning'
  | 'NewPrimarySchool'
  | 'NoDebtCertificate'
  | 'OfficialJournalOfIceland'
  | 'OldAgePension'
  | 'OperatingLicense'
  | 'OrderVehicleLicensePlate'
  | 'OrderVehicleRegistrationCertificate'
  | 'PSign'
  | 'ParentalLeave'
  | 'ParliamentaryListCreation'
  | 'ParliamentaryListSigning'
  | 'Passport'
  | 'PassportAnnulment'
  | 'PensionSupplement'
  | 'PresidentialListCreation'
  | 'PresidentialListSigning'
  | 'PublicDebtPaymentPlan'
  | 'RequestInspectionForMachine'
  | 'SecondarySchool'
  | 'SeminarRegistration'
  | 'StreetRegistration'
  | 'TrainingLicenseOnAWorkMachine'
  | 'TransferOfMachineOwnership'
  | 'TransferOfVehicleOwnership'
  | 'University'
  | 'WorkAccidentNotification'

export type ApplicationPayment = {
  __typename?: 'ApplicationPayment'
  fulfilled: Scalars['Boolean']
  paymentUrl: Scalars['String']
}

export type ApplicationResponseDtoStatusEnum =
  | 'approved'
  | 'completed'
  | 'draft'
  | 'inprogress'
  | 'notstarted'
  | 'rejected'

export type ApplicationResponseDtoTypeIdEnum =
  | 'AccidentNotification'
  | 'AdditionalSupportForTheElderly'
  | 'AlcoholTaxRedemption'
  | 'AnnouncementOfDeath'
  | 'AnonymityInVehicleRegistry'
  | 'CarRecycling'
  | 'ChangeCoOwnerOfVehicle'
  | 'ChangeMachineSupervisor'
  | 'ChangeOperatorOfVehicle'
  | 'ChildrenResidenceChangeV2'
  | 'Citizenship'
  | 'ComplaintsToAlthingiOmbudsman'
  | 'CriminalRecord'
  | 'DataProtectionAuthorityComplaint'
  | 'DeathBenefits'
  | 'DeregisterMachine'
  | 'DigitalTachographDriversCard'
  | 'DocumentProviderOnboarding'
  | 'DrivingAssessmentApproval'
  | 'DrivingInstructorRegistrations'
  | 'DrivingLearnersPermit'
  | 'DrivingLicense'
  | 'DrivingLicenseBookUpdateInstructor'
  | 'DrivingLicenseDuplicate'
  | 'DrivingSchoolConfirmation'
  | 'EnergyFunds'
  | 'Estate'
  | 'EuropeanHealthInsuranceCard'
  | 'ExampleCommonActions'
  | 'ExampleForm'
  | 'ExampleInputs'
  | 'ExampleNoInputs'
  | 'ExamplePayment'
  | 'ExampleStateTransfers'
  | 'FinancialAid'
  | 'FinancialStatementCemetery'
  | 'FinancialStatementIndividualElection'
  | 'FinancialStatementPoliticalParty'
  | 'FinancialStatementsInao'
  | 'FundingGovernmentProjects'
  | 'GeneralFishingLicense'
  | 'GeneralPetitionService'
  | 'GrindavikHousingBuyout'
  | 'HealthInsurance'
  | 'HealthInsuranceDeclaration'
  | 'HealthcareLicenseCertificate'
  | 'HealthcareWorkPermit'
  | 'HomeSupport'
  | 'HouseholdSupplement'
  | 'IdCard'
  | 'IncomePlan'
  | 'InheritanceReport'
  | 'InstitutionCollaboration'
  | 'LicensePlateRenewal'
  | 'LoginService'
  | 'MachineRegistration'
  | 'MarriageConditions'
  | 'MortgageCertificate'
  | 'MunicipalListCreation'
  | 'MunicipalListSigning'
  | 'NewPrimarySchool'
  | 'NoDebtCertificate'
  | 'OfficialJournalOfIceland'
  | 'OldAgePension'
  | 'OperatingLicense'
  | 'OrderVehicleLicensePlate'
  | 'OrderVehicleRegistrationCertificate'
  | 'PSign'
  | 'ParentalLeave'
  | 'ParliamentaryListCreation'
  | 'ParliamentaryListSigning'
  | 'Passport'
  | 'PassportAnnulment'
  | 'PensionSupplement'
  | 'PresidentialListCreation'
  | 'PresidentialListSigning'
  | 'PublicDebtPaymentPlan'
  | 'RequestInspectionForMachine'
  | 'SecondarySchool'
  | 'SeminarRegistration'
  | 'StreetRegistration'
  | 'TrainingLicenseOnAWorkMachine'
  | 'TransferOfMachineOwnership'
  | 'TransferOfVehicleOwnership'
  | 'University'
  | 'WorkAccidentNotification'

export type ApplicationRights = {
  __typename?: 'ApplicationRights'
  days: Scalars['String']
  daysLeft: Scalars['String']
  months: Scalars['String']
  rightsDescription: Scalars['String']
  rightsUnit: Scalars['String']
}

export type ApplicationStatistics = {
  __typename?: 'ApplicationStatistics'
  approved: Scalars['Float']
  completed: Scalars['Float']
  count: Scalars['Float']
  draft: Scalars['Float']
  inprogress: Scalars['Float']
  name: Scalars['String']
  rejected: Scalars['Float']
  typeid: Scalars['String']
}

export type Appraisal = {
  __typename?: 'Appraisal'
  activeAppraisal?: Maybe<Scalars['Float']>
  activePlotAssessment?: Maybe<Scalars['Float']>
  activeStructureAppraisal?: Maybe<Scalars['Float']>
  activeYear?: Maybe<Scalars['Float']>
  plannedAppraisal?: Maybe<Scalars['Float']>
  plannedPlotAssessment?: Maybe<Scalars['Float']>
  plannedStructureAppraisal?: Maybe<Scalars['Float']>
  plannedYear?: Maybe<Scalars['Float']>
}

export type Article = {
  __typename?: 'Article'
  activeTranslations?: Maybe<Scalars['JSON']>
  alertBanner?: Maybe<AlertBanner>
  body: Array<Slice>
  category?: Maybe<ArticleCategory>
  featuredImage?: Maybe<Image>
  group?: Maybe<ArticleGroup>
  id: Scalars['ID']
  importance?: Maybe<Scalars['Float']>
  intro?: Maybe<Scalars['String']>
  keywords?: Maybe<Array<Scalars['String']>>
  organization?: Maybe<Array<Organization>>
  otherCategories?: Maybe<Array<ArticleCategory>>
  otherGroups?: Maybe<Array<ArticleGroup>>
  otherSubgroups?: Maybe<Array<ArticleSubgroup>>
  processEntry?: Maybe<ProcessEntry>
  processEntryButtonText?: Maybe<Scalars['String']>
  relatedArticles?: Maybe<Array<Article>>
  relatedContent?: Maybe<Array<Link>>
  relatedOrganization?: Maybe<Array<Organization>>
  responsibleParty?: Maybe<Array<Organization>>
  shortTitle?: Maybe<Scalars['String']>
  showTableOfContents?: Maybe<Scalars['Boolean']>
  signLanguageVideo?: Maybe<EmbeddedVideo>
  slug: Scalars['String']
  stepper?: Maybe<Stepper>
  subArticles: Array<SubArticle>
  subgroup?: Maybe<ArticleSubgroup>
  title: Scalars['String']
}

export type ArticleCategory = {
  __typename?: 'ArticleCategory'
  description?: Maybe<Scalars['String']>
  id: Scalars['ID']
  slug: Scalars['String']
  title: Scalars['String']
}

export type ArticleGroup = {
  __typename?: 'ArticleGroup'
  description?: Maybe<Scalars['String']>
  importance?: Maybe<Scalars['Float']>
  slug: Scalars['String']
  title: Scalars['String']
}

export type ArticleReference = {
  __typename?: 'ArticleReference'
  category?: Maybe<ArticleCategory>
  group?: Maybe<ArticleGroup>
  id: Scalars['ID']
  intro: Scalars['String']
  organization?: Maybe<Array<Organization>>
  processEntry?: Maybe<ProcessEntry>
  processEntryButtonText: Scalars['String']
  slug: Scalars['String']
  title: Scalars['String']
}

export type ArticleSubgroup = {
  __typename?: 'ArticleSubgroup'
  importance?: Maybe<Scalars['Float']>
  slug: Scalars['String']
  title: Scalars['String']
}

export type Asset = {
  __typename?: 'Asset'
  contentType: Scalars['String']
  id: Scalars['ID']
  title: Scalars['String']
  typename: Scalars['String']
  url: Scalars['String']
}

export type AssetName = {
  __typename?: 'AssetName'
  name: Scalars['String']
}

export type AssignApplicationInput = {
  token: Scalars['String']
}

export type AttachmentPresignedUrlInput = {
  attachmentKey: Scalars['String']
  id: Scalars['String']
}

export type Auction = {
  __typename?: 'Auction'
  content?: Maybe<Array<Slice>>
  date: Scalars['String']
  id: Scalars['ID']
  organization: Organization
  title: Scalars['String']
  type: Scalars['String']
  updatedAt: Scalars['String']
}

export type AudienceAndScope = {
  __typename?: 'AudienceAndScope'
  audience: Scalars['String']
  scope: Scalars['String']
}

export type AuthActorDelegationInput = {
  delegationTypes?: InputMaybe<Array<AuthDelegationType>>
}

export type AuthAdminClient = {
  __typename?: 'AuthAdminClient'
  availableEnvironments: Array<AuthAdminEnvironment>
  clientId: Scalars['ID']
  clientType: AuthAdminClientType
  defaultEnvironment: AuthAdminClientEnvironment
  environments: Array<AuthAdminClientEnvironment>
  sso: AuthAdminClientSso
}

export type AuthAdminClientAllowedScope = {
  __typename?: 'AuthAdminClientAllowedScope'
  description?: Maybe<Array<AuthAdminTranslatedValue>>
  displayName: Array<AuthAdminTranslatedValue>
  domainName?: Maybe<Scalars['String']>
  name: Scalars['ID']
}

export type AuthAdminClientClaim = {
  __typename?: 'AuthAdminClientClaim'
  type: Scalars['String']
  value: Scalars['String']
}

export type AuthAdminClientClaimInput = {
  type: Scalars['String']
  value: Scalars['String']
}

export type AuthAdminClientEnvironment = {
  __typename?: 'AuthAdminClientEnvironment'
  absoluteRefreshTokenLifetime: Scalars['Int']
  accessTokenLifetime: Scalars['Int']
  allowOfflineAccess: Scalars['Boolean']
  allowedScopes?: Maybe<Array<AuthAdminClientAllowedScope>>
  clientId: Scalars['String']
  clientType: AuthAdminClientType
  customClaims?: Maybe<Array<AuthAdminClientClaim>>
  displayName: Array<AuthAdminTranslatedValue>
  environment: AuthAdminEnvironment
  id: Scalars['ID']
  postLogoutRedirectUris: Array<Scalars['String']>
  promptDelegations: Scalars['Boolean']
  redirectUris: Array<Scalars['String']>
  refreshTokenExpiration: AuthAdminRefreshTokenExpiration
  requireApiScopes: Scalars['Boolean']
  requireConsent: Scalars['Boolean']
  requirePkce: Scalars['Boolean']
  secrets: Array<AuthAdminClientSecret>
  singleSession: Scalars['Boolean']
  slidingRefreshTokenLifetime: Scalars['Int']
  sso: AuthAdminClientSso
  supportTokenExchange: Scalars['Boolean']
  supportedDelegationTypes?: Maybe<Array<Scalars['String']>>
  /** @deprecated Use supportedDelegationTypes instead */
  supportsCustomDelegation: Scalars['Boolean']
  /** @deprecated Use supportedDelegationTypes instead */
  supportsLegalGuardians: Scalars['Boolean']
  /** @deprecated Use supportedDelegationTypes instead */
  supportsPersonalRepresentatives: Scalars['Boolean']
  /** @deprecated Use supportedDelegationTypes instead */
  supportsProcuringHolders: Scalars['Boolean']
  tenantId: Scalars['String']
}

export type AuthAdminClientInput = {
  clientId: Scalars['String']
  includeArchived?: InputMaybe<Scalars['Boolean']>
  tenantId: Scalars['String']
}

export type AuthAdminClientSecret = {
  __typename?: 'AuthAdminClientSecret'
  clientId: Scalars['String']
  decryptedValue?: Maybe<Scalars['String']>
  secretId: Scalars['ID']
}

export type AuthAdminClientSso = 'disabled' | 'enabled'

export type AuthAdminClientType = 'machine' | 'native' | 'spa' | 'web'

export type AuthAdminClientsInput = {
  tenantId: Scalars['String']
}

export type AuthAdminClientsPayload = {
  __typename?: 'AuthAdminClientsPayload'
  data: Array<AuthAdminClient>
  pageInfo: PageInfoDto
  totalCount: Scalars['Float']
}

export type AuthAdminCreateClientResponse = {
  __typename?: 'AuthAdminCreateClientResponse'
  clientId: Scalars['String']
  environment: AuthAdminEnvironment
}

export type AuthAdminCreateClientType = 'machine' | 'native' | 'web'

export type AuthAdminCreateScopeResponse = {
  __typename?: 'AuthAdminCreateScopeResponse'
  environment: AuthAdminEnvironment
  scopeName: Scalars['String']
}

export type AuthAdminDelegationProvider = {
  __typename?: 'AuthAdminDelegationProvider'
  delegationTypes: Array<AuthAdminDelegationType>
  description: Scalars['String']
  id: Scalars['ID']
  name: Scalars['String']
}

export type AuthAdminDelegationType = {
  __typename?: 'AuthAdminDelegationType'
  description: Scalars['String']
  id: Scalars['ID']
  name: Scalars['String']
  providerId: Scalars['String']
}

export type AuthAdminDeleteClientInput = {
  clientId: Scalars['String']
  tenantId: Scalars['String']
}

export type AuthAdminEnvironment = 'Development' | 'Production' | 'Staging'

export type AuthAdminPatchClientInput = {
  absoluteRefreshTokenLifetime?: InputMaybe<Scalars['Int']>
  accessTokenLifetime?: InputMaybe<Scalars['Int']>
  addedDelegationTypes?: InputMaybe<Array<Scalars['String']>>
  addedScopes?: InputMaybe<Array<Scalars['String']>>
  allowOfflineAccess?: InputMaybe<Scalars['Boolean']>
  clientId: Scalars['String']
  customClaims?: InputMaybe<Array<AuthAdminClientClaimInput>>
  displayName?: InputMaybe<Array<AuthAdminTranslatedValueInput>>
  environments: Array<AuthAdminEnvironment>
  postLogoutRedirectUris?: InputMaybe<Array<Scalars['String']>>
  promptDelegations?: InputMaybe<Scalars['Boolean']>
  redirectUris?: InputMaybe<Array<Scalars['String']>>
  refreshTokenExpiration?: InputMaybe<AuthAdminRefreshTokenExpiration>
  removedDelegationTypes?: InputMaybe<Array<Scalars['String']>>
  removedScopes?: InputMaybe<Array<Scalars['String']>>
  requireApiScopes?: InputMaybe<Scalars['Boolean']>
  requireConsent?: InputMaybe<Scalars['Boolean']>
  requirePkce?: InputMaybe<Scalars['Boolean']>
  singleSession?: InputMaybe<Scalars['Boolean']>
  slidingRefreshTokenLifetime?: InputMaybe<Scalars['Int']>
  sso?: InputMaybe<AuthAdminClientSso>
  supportTokenExchange?: InputMaybe<Scalars['Boolean']>
  supportsCustomDelegation?: InputMaybe<Scalars['Boolean']>
  supportsLegalGuardians?: InputMaybe<Scalars['Boolean']>
  supportsPersonalRepresentatives?: InputMaybe<Scalars['Boolean']>
  supportsProcuringHolders?: InputMaybe<Scalars['Boolean']>
  tenantId: Scalars['String']
}

export type AuthAdminPatchScopeInput = {
  addedDelegationTypes?: InputMaybe<Array<Scalars['String']>>
  allowExplicitDelegationGrant?: InputMaybe<Scalars['Boolean']>
  automaticDelegationGrant?: InputMaybe<Scalars['Boolean']>
  description?: InputMaybe<Array<AuthAdminTranslatedValueInput>>
  displayName?: InputMaybe<Array<AuthAdminTranslatedValueInput>>
  environments: Array<AuthAdminEnvironment>
  grantToAuthenticatedUser?: InputMaybe<Scalars['Boolean']>
  grantToLegalGuardians?: InputMaybe<Scalars['Boolean']>
  grantToPersonalRepresentatives?: InputMaybe<Scalars['Boolean']>
  grantToProcuringHolders?: InputMaybe<Scalars['Boolean']>
  isAccessControlled?: InputMaybe<Scalars['Boolean']>
  removedDelegationTypes?: InputMaybe<Array<Scalars['String']>>
  scopeName: Scalars['String']
  tenantId: Scalars['String']
}

export type AuthAdminPublishClientInput = {
  clientId: Scalars['String']
  sourceEnvironment: AuthAdminEnvironment
  targetEnvironment: AuthAdminEnvironment
  tenantId: Scalars['String']
}

export type AuthAdminPublishScopeInput = {
  scopeName: Scalars['String']
  sourceEnvironment: AuthAdminEnvironment
  targetEnvironment: AuthAdminEnvironment
  tenantId: Scalars['String']
}

export type AuthAdminRefreshTokenExpiration = 'Absolute' | 'Sliding'

export type AuthAdminRevokeSecretsInput = {
  clientId: Scalars['String']
  environment: AuthAdminEnvironment
  tenantId: Scalars['String']
}

export type AuthAdminRotateSecretInput = {
  clientId: Scalars['String']
  environment: AuthAdminEnvironment
  revokeOldSecrets?: InputMaybe<Scalars['Boolean']>
  tenantId: Scalars['String']
}

export type AuthAdminScope = {
  __typename?: 'AuthAdminScope'
  availableEnvironments: Array<AuthAdminEnvironment>
  defaultEnvironment: AuthAdminScopeEnvironment
  environments: Array<AuthAdminScopeEnvironment>
  scopeName: Scalars['ID']
}

export type AuthAdminScopeEnvironment = {
  __typename?: 'AuthAdminScopeEnvironment'
  /** @deprecated Use supportedDelegationTypes instead */
  allowExplicitDelegationGrant: Scalars['Boolean']
  alsoForDelegatedUser: Scalars['Boolean']
  automaticDelegationGrant: Scalars['Boolean']
  description: Array<AuthAdminTranslatedValue>
  displayName: Array<AuthAdminTranslatedValue>
  domainName: Scalars['String']
  emphasize: Scalars['Boolean']
  environment: AuthAdminEnvironment
  grantToAuthenticatedUser: Scalars['Boolean']
  /** @deprecated Use supportedDelegationTypes instead */
  grantToLegalGuardians: Scalars['Boolean']
  /** @deprecated Use supportedDelegationTypes instead */
  grantToPersonalRepresentatives: Scalars['Boolean']
  /** @deprecated Use supportedDelegationTypes instead */
  grantToProcuringHolders: Scalars['Boolean']
  groupId?: Maybe<Scalars['String']>
  isAccessControlled: Scalars['Boolean']
  name: Scalars['ID']
  order?: Maybe<Scalars['Float']>
  required: Scalars['Boolean']
  showInDiscoveryDocument: Scalars['Boolean']
  supportedDelegationTypes: Array<Scalars['String']>
}

export type AuthAdminScopesPayload = {
  __typename?: 'AuthAdminScopesPayload'
  data: Array<AuthAdminScope>
  pageInfo: PageInfoDto
  totalCount: Scalars['Float']
}

export type AuthAdminTenant = {
  __typename?: 'AuthAdminTenant'
  availableEnvironments: Array<AuthAdminEnvironment>
  defaultEnvironment: AuthAdminTenantEnvironment
  environments: Array<AuthAdminTenantEnvironment>
  id: Scalars['ID']
}

export type AuthAdminTenantEnvironment = {
  __typename?: 'AuthAdminTenantEnvironment'
  displayName: Array<AuthAdminTranslatedValue>
  environment: AuthAdminEnvironment
  id: Scalars['ID']
  name: Scalars['String']
}

export type AuthAdminTenantsPayload = {
  __typename?: 'AuthAdminTenantsPayload'
  data: Array<AuthAdminTenant>
  pageInfo: PageInfoDto
  totalCount: Scalars['Float']
}

export type AuthAdminTranslatedValue = {
  __typename?: 'AuthAdminTranslatedValue'
  locale: Scalars['String']
  value: Scalars['String']
}

export type AuthAdminTranslatedValueInput = {
  locale: Scalars['String']
  value: Scalars['String']
}

export type AuthApiScope = {
  __typename?: 'AuthApiScope'
  description?: Maybe<Scalars['String']>
  displayName: Scalars['String']
  group?: Maybe<AuthApiScopeGroup>
  name: Scalars['ID']
}

export type AuthApiScopeGroup = {
  __typename?: 'AuthApiScopeGroup'
  children?: Maybe<Array<AuthApiScope>>
  description?: Maybe<Scalars['String']>
  displayName: Scalars['String']
  name: Scalars['ID']
}

export type AuthApiScopesInput = {
  direction?: InputMaybe<AuthDomainDirection>
  domain?: InputMaybe<Scalars['String']>
  lang?: InputMaybe<Scalars['String']>
}

export type AuthClient = {
  __typename?: 'AuthClient'
  clientId: Scalars['ID']
  clientName?: Maybe<Scalars['String']>
  domain?: Maybe<AuthDomain>
  domainName?: Maybe<Scalars['String']>
}

export type AuthClientDomainArgs = {
  lang?: InputMaybe<Scalars['String']>
}

export type AuthConsent = {
  __typename?: 'AuthConsent'
  client: AuthClient
  tenants: Array<AuthConsentTenant>
}

export type AuthConsentClientArgs = {
  lang?: InputMaybe<Scalars['String']>
}

export type AuthConsentTenantsArgs = {
  lang?: InputMaybe<Scalars['String']>
}

export type AuthConsentScopeNode = {
  __typename?: 'AuthConsentScopeNode'
  children?: Maybe<Array<AuthConsentScopeNode>>
  description?: Maybe<Scalars['String']>
  displayName: Scalars['String']
  hasConsent?: Maybe<Scalars['Boolean']>
  name: Scalars['ID']
}

export type AuthConsentTenant = {
  __typename?: 'AuthConsentTenant'
  scopes?: Maybe<Array<AuthConsentScopeNode>>
  tenant: AuthDomain
}

export type AuthConsentTenantTenantArgs = {
  lang?: InputMaybe<Scalars['String']>
}

export type AuthConsentsPaginated = {
  __typename?: 'AuthConsentsPaginated'
  data: Array<AuthConsent>
  pageInfo: PageInfoDto
  totalCount: Scalars['Float']
}

export type AuthCustomDelegation = AuthDelegation & {
  __typename?: 'AuthCustomDelegation'
  createdBy?: Maybe<Identity>
  domain: AuthDomain
  from: Identity
  id?: Maybe<Scalars['ID']>
  provider: AuthDelegationProvider
  referenceId?: Maybe<Scalars['String']>
  scopes: Array<AuthDelegationScope>
  to: Identity
  type: AuthDelegationType
  validTo?: Maybe<Scalars['DateTime']>
}

export type AuthCustomDelegationDomainArgs = {
  lang?: InputMaybe<Scalars['String']>
}

export type AuthDelegation = {
  createdBy?: Maybe<Identity>
  from: Identity
  id?: Maybe<Scalars['ID']>
  provider: AuthDelegationProvider
  referenceId?: Maybe<Scalars['String']>
  to?: Maybe<Identity>
  type: AuthDelegationType
  validTo?: Maybe<Scalars['DateTime']>
}

export type AuthDelegationDirection = 'incoming' | 'outgoing'

export type AuthDelegationInput = {
  delegationId: Scalars['String']
}

export type AuthDelegationProvider =
  | 'delegationdb'
  | 'fyrirtaekjaskra'
  | 'syslumenn'
  | 'talsmannagrunnur'
  | 'thjodskra'

export type AuthDelegationProviderEnvironment = {
  __typename?: 'AuthDelegationProviderEnvironment'
  environment: AuthAdminEnvironment
  providers: Array<AuthAdminDelegationProvider>
}

export type AuthDelegationProviderPayload = {
  __typename?: 'AuthDelegationProviderPayload'
  environments: Array<AuthDelegationProviderEnvironment>
}

export type AuthDelegationScope = {
  __typename?: 'AuthDelegationScope'
  apiScope?: Maybe<AuthApiScope>
  displayName: Scalars['String']
  id: Scalars['String']
  name: Scalars['String']
  validTo?: Maybe<Scalars['DateTime']>
}

export type AuthDelegationScopeApiScopeArgs = {
  lang?: InputMaybe<Scalars['String']>
}

export type AuthDelegationScopeInput = {
  name: Scalars['String']
  validTo: Scalars['DateTime']
}

export type AuthDelegationType =
  | 'Custom'
  | 'GeneralMandate'
  | 'LegalGuardian'
  | 'LegalGuardianMinor'
  | 'LegalRepresentative'
  | 'PersonalRepresentative'
  | 'ProcurationHolder'

export type AuthDelegationsInput = {
  direction?: InputMaybe<AuthDelegationDirection>
  domain?: InputMaybe<Scalars['String']>
}

export type AuthDomain = {
  __typename?: 'AuthDomain'
  description: Scalars['String']
  displayName: Scalars['String']
  name: Scalars['String']
  nationalId: Scalars['String']
  organisationLogoKey: Scalars['String']
  organisationLogoUrl?: Maybe<Scalars['String']>
}

export type AuthDomainDirection = 'outgoing'

export type AuthDomainsInput = {
  direction?: InputMaybe<AuthDomainDirection>
  lang?: InputMaybe<Scalars['String']>
}

export type AuthExtensionCredProps = {
  rk?: InputMaybe<Scalars['Boolean']>
}

export type AuthGeneralMandate = AuthDelegation & {
  __typename?: 'AuthGeneralMandate'
  createdBy?: Maybe<Identity>
  from: Identity
  id?: Maybe<Scalars['ID']>
  provider: AuthDelegationProvider
  referenceId?: Maybe<Scalars['String']>
  to?: Maybe<Identity>
  type: AuthDelegationType
  validTo?: Maybe<Scalars['DateTime']>
}

export type AuthLegalGuardianDelegation = AuthDelegation & {
  __typename?: 'AuthLegalGuardianDelegation'
  createdBy?: Maybe<Identity>
  from: Identity
  id?: Maybe<Scalars['ID']>
  provider: AuthDelegationProvider
  referenceId?: Maybe<Scalars['String']>
  to?: Maybe<Identity>
  type: AuthDelegationType
  validTo?: Maybe<Scalars['DateTime']>
}

export type AuthLegalGuardianMinorDelegation = AuthDelegation & {
  __typename?: 'AuthLegalGuardianMinorDelegation'
  createdBy?: Maybe<Identity>
  from: Identity
  id?: Maybe<Scalars['ID']>
  provider: AuthDelegationProvider
  referenceId?: Maybe<Scalars['String']>
  to?: Maybe<Identity>
  type: AuthDelegationType
  validTo?: Maybe<Scalars['DateTime']>
}

export type AuthLegalRepresentativeDelegation = AuthDelegation & {
  __typename?: 'AuthLegalRepresentativeDelegation'
  createdBy?: Maybe<Identity>
  from: Identity
  id?: Maybe<Scalars['ID']>
  provider: AuthDelegationProvider
  referenceId?: Maybe<Scalars['String']>
  to?: Maybe<Identity>
  type: AuthDelegationType
  validTo?: Maybe<Scalars['DateTime']>
}

export type AuthLoginRestriction = {
  __typename?: 'AuthLoginRestriction'
  restricted: Scalars['Boolean']
  until?: Maybe<Scalars['DateTime']>
}

export type AuthMergedDelegation = {
  __typename?: 'AuthMergedDelegation'
  from: Identity
  to: Identity
  /** @deprecated Use types instead */
  type: AuthDelegationType
  types: Array<AuthDelegationType>
}

export type AuthPasskeyAuthenticationOptions = {
  __typename?: 'AuthPasskeyAuthenticationOptions'
  allowCredentials: Array<AuthPasskeyAuthenticationOptionsCredentials>
  challenge: Scalars['String']
  rpId: Scalars['String']
  timeout: Scalars['Float']
  userVerification: Scalars['String']
}

export type AuthPasskeyAuthenticationOptionsCredentials = {
  __typename?: 'AuthPasskeyAuthenticationOptionsCredentials'
  id: Scalars['String']
  transports: Array<Scalars['String']>
  type: Scalars['String']
}

export type AuthPasskeyRegistrationObject = {
  authenticatorAttachment?: InputMaybe<Scalars['String']>
  clientExtensionResults: AuthPasskeyRegistrationObjectClientExtensionResults
  id: Scalars['String']
  rawId: Scalars['String']
  response: AuthPasskeyRegistrationObjectResponse
  type: Scalars['String']
}

export type AuthPasskeyRegistrationObjectClientExtensionResults = {
  appid?: InputMaybe<Scalars['Boolean']>
  credProps?: InputMaybe<AuthExtensionCredProps>
  hmacCreateSecret?: InputMaybe<Scalars['Boolean']>
}

export type AuthPasskeyRegistrationObjectResponse = {
  attestationObject: Scalars['String']
  authenticatorData?: InputMaybe<Scalars['String']>
  clientDataJSON: Scalars['String']
  publicKey?: InputMaybe<Scalars['String']>
  publicKeyAlgorithm?: InputMaybe<Scalars['Float']>
  transports?: InputMaybe<Array<Scalars['String']>>
}

export type AuthPasskeyRegistrationOptions = {
  __typename?: 'AuthPasskeyRegistrationOptions'
  attestation?: Maybe<Scalars['String']>
  authenticatorSelection?: Maybe<AuthRegistrationOptionsAuthenticatorSelection>
  challenge: Scalars['String']
  excludeCredentials?: Maybe<
    Array<AuthRegistrationOptionsPublicKeyCredentialDescriptorJson>
  >
  extensions?: Maybe<AuthRegistrationOptionsExtensions>
  pubKeyCredParams: Array<AuthRegistrationOptionsPublicKeyCredentialOption>
  rp: AuthRegistrationOptionsRp
  timeout?: Maybe<Scalars['Float']>
  user: AuthRegistrationOptionsUser
}

export type AuthPasskeyRegistrationVerification = {
  __typename?: 'AuthPasskeyRegistrationVerification'
  verified: Scalars['Boolean']
}

export type AuthPersonalRepresentativeDelegation = AuthDelegation & {
  __typename?: 'AuthPersonalRepresentativeDelegation'
  createdBy?: Maybe<Identity>
  from: Identity
  id?: Maybe<Scalars['ID']>
  provider: AuthDelegationProvider
  referenceId?: Maybe<Scalars['String']>
  to?: Maybe<Identity>
  type: AuthDelegationType
  validTo?: Maybe<Scalars['DateTime']>
}

export type AuthProcuringHolderDelegation = AuthDelegation & {
  __typename?: 'AuthProcuringHolderDelegation'
  createdBy?: Maybe<Identity>
  from: Identity
  id?: Maybe<Scalars['ID']>
  provider: AuthDelegationProvider
  referenceId?: Maybe<Scalars['String']>
  to?: Maybe<Identity>
  type: AuthDelegationType
  validTo?: Maybe<Scalars['DateTime']>
}

export type AuthRegistrationOptionsAuthenticatorSelection = {
  __typename?: 'AuthRegistrationOptionsAuthenticatorSelection'
  authenticatorAttachment?: Maybe<Scalars['String']>
  requireResidentKey?: Maybe<Scalars['Boolean']>
  residentKey?: Maybe<Scalars['String']>
  userVerification?: Maybe<Scalars['String']>
}

export type AuthRegistrationOptionsExtensions = {
  __typename?: 'AuthRegistrationOptionsExtensions'
  appid?: Maybe<Scalars['String']>
  credProps?: Maybe<Scalars['Boolean']>
  hmacCreateSecret?: Maybe<Scalars['Boolean']>
}

export type AuthRegistrationOptionsPublicKeyCredentialDescriptorJson = {
  __typename?: 'AuthRegistrationOptionsPublicKeyCredentialDescriptorJSON'
  id: Scalars['String']
  transports: Array<Scalars['String']>
  type: Scalars['String']
}

export type AuthRegistrationOptionsPublicKeyCredentialOption = {
  __typename?: 'AuthRegistrationOptionsPublicKeyCredentialOption'
  alg: Scalars['Float']
  type: Scalars['String']
}

export type AuthRegistrationOptionsRp = {
  __typename?: 'AuthRegistrationOptionsRp'
  id?: Maybe<Scalars['String']>
  name: Scalars['String']
}

export type AuthRegistrationOptionsUser = {
  __typename?: 'AuthRegistrationOptionsUser'
  displayName: Scalars['String']
  id: Scalars['String']
  name: Scalars['String']
}

export type AuthScopeTreeNode = AuthApiScope | AuthApiScopeGroup

export type BasicVehicleInformation = {
  __typename?: 'BasicVehicleInformation'
  color?: Maybe<Scalars['String']>
  make?: Maybe<Scalars['String']>
  mileageReading?: Maybe<Scalars['String']>
  permno?: Maybe<Scalars['String']>
  requireMileage?: Maybe<Scalars['Boolean']>
  role?: Maybe<Scalars['String']>
}

export type BloodDonationRestrictionDetails = {
  __typename?: 'BloodDonationRestrictionDetails'
  cardText: Array<Slice>
  description: Scalars['String']
  detailedText: Array<Slice>
  hasCardText: Scalars['Boolean']
  hasDetailedText: Scalars['Boolean']
  id: Scalars['ID']
  keywordsText: Scalars['String']
  title: Scalars['String']
}

export type BloodDonationRestrictionGenericTag = {
  __typename?: 'BloodDonationRestrictionGenericTag'
  key: Scalars['ID']
  label: Scalars['String']
}

export type BloodDonationRestrictionGenericTagList = {
  __typename?: 'BloodDonationRestrictionGenericTagList'
  items: Array<BloodDonationRestrictionGenericTag>
  total: Scalars['Int']
}

export type BloodDonationRestrictionList = {
  __typename?: 'BloodDonationRestrictionList'
  input: GetBloodDonationRestrictionsInputModel
  items: Array<BloodDonationRestrictionListItem>
  total: Scalars['Int']
}

export type BloodDonationRestrictionListItem = {
  __typename?: 'BloodDonationRestrictionListItem'
  cardText: Array<Slice>
  description: Scalars['String']
  hasCardText: Scalars['Boolean']
  hasDetailedText: Scalars['Boolean']
  id: Scalars['ID']
  keywordsText: Scalars['String']
  title: Scalars['String']
}

export type Broker = {
  __typename?: 'Broker'
  name?: Maybe<Scalars['String']>
  nationalId?: Maybe<Scalars['String']>
}

export type BulkMailAction = {
  __typename?: 'BulkMailAction'
  messageId: Scalars['String']
  success: Scalars['Boolean']
}

export type BulkUploadUser = {
  nationalId: Scalars['String']
  pageNumber: Scalars['Float']
}

export type BulkVehicleMileageRequestOverviewInput = {
  guid: Scalars['ID']
  locale: Scalars['String']
}

export type BulkVehicleMileageRequestStatusInput = {
  requestId: Scalars['ID']
}

export type BulletEntry = IconBullet | NumberBulletGroup

export type BulletListSlice = {
  __typename?: 'BulletListSlice'
  bullets: Array<BulletEntry>
  dividerOnTop?: Maybe<Scalars['Boolean']>
  id: Scalars['ID']
}

export type BurningPermit = {
  __typename?: 'BurningPermit'
  dateFrom?: Maybe<Scalars['DateTime']>
  dateTo?: Maybe<Scalars['DateTime']>
  licensee?: Maybe<Scalars['String']>
  office?: Maybe<Scalars['String']>
  place?: Maybe<Scalars['String']>
  responsibleParty?: Maybe<Scalars['String']>
  size?: Maybe<Scalars['Float']>
  subtype?: Maybe<Scalars['String']>
  timeFrom?: Maybe<Scalars['String']>
  timeTo?: Maybe<Scalars['String']>
  type?: Maybe<Scalars['String']>
}

export type BurningPermitsResponse = {
  __typename?: 'BurningPermitsResponse'
  list: Array<BurningPermit>
}

export type CalculationType = 'E' | 'KG' | 'L' | 'U'

export type CaseSubscriptionType = 'AllChanges' | 'StatusChanges'

export type CategoryPage = Article | Manual

export type CertificateInfoResponse = {
  __typename?: 'CertificateInfoResponse'
  expirationDate?: Maybe<Scalars['String']>
  nationalId?: Maybe<Scalars['String']>
  releaseDate?: Maybe<Scalars['String']>
}

export type ChangeAppendix = {
  __typename?: 'ChangeAppendix'
  diff?: Maybe<Scalars['String']>
  text?: Maybe<Scalars['String']>
  title?: Maybe<Scalars['String']>
}

export type Chart = {
  __typename?: 'Chart'
  alternativeDescription: Scalars['String']
  chartDescription: Scalars['String']
  components: Array<ChartComponent>
  customStyleConfig?: Maybe<Scalars['String']>
  dateFrom?: Maybe<Scalars['String']>
  dateTo?: Maybe<Scalars['String']>
  displayAsCard: Scalars['Boolean']
  flipAxis?: Maybe<Scalars['Boolean']>
  id: Scalars['ID']
  numberOfDataPoints?: Maybe<Scalars['Float']>
  reduceAndRoundValue?: Maybe<Scalars['Boolean']>
  sourceData?: Maybe<Scalars['String']>
  startExpanded: Scalars['Boolean']
  title: Scalars['String']
  xAxisFormat?: Maybe<Scalars['String']>
  xAxisKey?: Maybe<Scalars['String']>
  xAxisValueType?: Maybe<Scalars['String']>
  yAxisLabel?: Maybe<Scalars['String']>
}

export type ChartComponent = {
  __typename?: 'ChartComponent'
  id: Scalars['ID']
  interval?: Maybe<Scalars['Float']>
  label: Scalars['String']
  sourceDataKey: Scalars['String']
  stackId?: Maybe<Scalars['String']>
  type: Scalars['String']
  values?: Maybe<Scalars['String']>
}

export type ChartNumberBox = {
  __typename?: 'ChartNumberBox'
  displayChangeMonthOverMonth: Scalars['Boolean']
  displayChangeYearOverYear: Scalars['Boolean']
  displayTimestamp?: Maybe<Scalars['Boolean']>
  id: Scalars['ID']
  numberBoxDate?: Maybe<Scalars['String']>
  numberBoxDescription: Scalars['String']
  reduceAndRoundValue?: Maybe<Scalars['Boolean']>
  sourceDataKey: Scalars['String']
  title: Scalars['String']
  valueType: Scalars['String']
}

export type CheckTachoNetExists = {
  __typename?: 'CheckTachoNetExists'
  exists: Scalars['Boolean']
}

export type CheckTachoNetInput = {
  birthDate: Scalars['DateTime']
  birthPlace: Scalars['String']
  drivingLicenceIssuingCountry: Scalars['String']
  drivingLicenceNumber: Scalars['String']
  firstName: Scalars['String']
  lastName: Scalars['String']
}

export type ClientCredentials = {
  __typename?: 'ClientCredentials'
  clientId: Scalars['String']
  clientSecret: Scalars['String']
  providerId: Scalars['String']
}

export type CoOwnerChangeAnswers = {
  coOwners?: InputMaybe<Array<CoOwnerChangeAnswersCoOwners>>
  owner: CoOwnerChangeAnswersUser
  ownerCoOwners?: InputMaybe<Array<CoOwnerChangeAnswersOwnerCoOwners>>
  pickVehicle: CoOwnerChangeAnswersPickVehicle
  vehicleMileage: CoOwnerChangeAnswersVehicleMileage
}

export type CoOwnerChangeAnswersCoOwners = {
  email: Scalars['String']
  nationalId: Scalars['String']
  wasRemoved?: InputMaybe<Scalars['String']>
}

export type CoOwnerChangeAnswersOwnerCoOwners = {
  email: Scalars['String']
  nationalId: Scalars['String']
  wasRemoved?: InputMaybe<Scalars['String']>
}

export type CoOwnerChangeAnswersPickVehicle = {
  plate: Scalars['String']
}

export type CoOwnerChangeAnswersUser = {
  email: Scalars['String']
  nationalId: Scalars['String']
}

export type CoOwnerChangeAnswersVehicleMileage = {
  value?: InputMaybe<Scalars['String']>
}

/** Collection has different statuses to represent the state of collection */
export type CollectionStatus =
  /** Collection contains active extended list. */
  | 'Active'
  | 'InInitialReview'
  /** Collection has no open lists. Lists are being reviewed by processing admin. */
  | 'InReview'
  /** Collection is not active, has been closed or has not yet started. */
  | 'Inactive'
  /** Collection contains active list. In intial open time. */
  | 'InitialActive'
  /** Collection has been marked as processed. */
  | 'Processed'
  /** All lists for collection have been reviewed, the collection has not been marked as processed. */
  | 'Processing'

export type CommunicationResponse = {
  __typename?: 'CommunicationResponse'
  sent: Scalars['Boolean']
}

export type ConnectedComponent = {
  __typename?: 'ConnectedComponent'
  configJson?: Maybe<Scalars['JSON']>
  id: Scalars['ID']
  json?: Maybe<Scalars['JSON']>
  title: Scalars['String']
  translationStrings?: Maybe<Scalars['JSONObject']>
  type?: Maybe<Scalars['String']>
}

export type ConsultationPortalAdviceResult = {
  __typename?: 'ConsultationPortalAdviceResult'
  adviceDocuments?: Maybe<Array<ConsultationPortalDocumentInfoResult>>
  content?: Maybe<Scalars['String']>
  created?: Maybe<Scalars['DateTime']>
  id?: Maybe<Scalars['String']>
  isHidden?: Maybe<Scalars['Boolean']>
  isPrivate?: Maybe<Scalars['Boolean']>
  number?: Maybe<Scalars['Float']>
  participantEmail?: Maybe<Scalars['String']>
  participantName?: Maybe<Scalars['String']>
}

export type ConsultationPortalAllTypesResult = {
  __typename?: 'ConsultationPortalAllTypesResult'
  caseStatuses?: Maybe<Scalars['JSONObject']>
  caseTypes?: Maybe<Scalars['JSONObject']>
  institutions?: Maybe<Scalars['JSONObject']>
  policyAreas?: Maybe<Scalars['JSONObject']>
}

export type ConsultationPortalCaseInput = {
  caseId?: InputMaybe<Scalars['Int']>
}

export type ConsultationPortalCaseItemResult = {
  __typename?: 'ConsultationPortalCaseItemResult'
  adviceCount?: Maybe<Scalars['Float']>
  caseNumber?: Maybe<Scalars['String']>
  created?: Maybe<Scalars['DateTime']>
  id?: Maybe<Scalars['Float']>
  institutionName?: Maybe<Scalars['String']>
  name?: Maybe<Scalars['String']>
  policyAreaName?: Maybe<Scalars['String']>
  processBegins?: Maybe<Scalars['DateTime']>
  processEnds?: Maybe<Scalars['DateTime']>
  publishOnWeb?: Maybe<Scalars['DateTime']>
  shortDescription?: Maybe<Scalars['String']>
  statusName?: Maybe<Scalars['String']>
  typeName?: Maybe<Scalars['String']>
}

export type ConsultationPortalCasePostAdviceCommandInput = {
  content?: InputMaybe<Scalars['String']>
  fileUrls?: InputMaybe<Array<Scalars['String']>>
  privateAdvice?: InputMaybe<Scalars['Boolean']>
}

export type ConsultationPortalCaseResult = {
  __typename?: 'ConsultationPortalCaseResult'
  additionalDocuments?: Maybe<Array<ConsultationPortalDocumentInfoResult>>
  adviceCount?: Maybe<Scalars['Float']>
  advicePublishTypeId?: Maybe<Scalars['Float']>
  advicePublishTypeName?: Maybe<Scalars['String']>
  allowUsersToSendPrivateAdvices?: Maybe<Scalars['Boolean']>
  announcementText?: Maybe<Scalars['String']>
  caseNumber?: Maybe<Scalars['String']>
  changed?: Maybe<Scalars['DateTime']>
  contactEmail?: Maybe<Scalars['String']>
  contactName?: Maybe<Scalars['String']>
  created?: Maybe<Scalars['DateTime']>
  detailedDescription?: Maybe<Scalars['String']>
  documents?: Maybe<Array<ConsultationPortalDocumentInfoResult>>
  extraStakeholderList?: Maybe<Scalars['String']>
  id?: Maybe<Scalars['Float']>
  institutionName?: Maybe<Scalars['String']>
  name?: Maybe<Scalars['String']>
  oldInstitutionName?: Maybe<Scalars['String']>
  policyAreaName?: Maybe<Scalars['String']>
  processBegins?: Maybe<Scalars['DateTime']>
  processEnds?: Maybe<Scalars['DateTime']>
  publishOnWeb?: Maybe<Scalars['DateTime']>
  relatedCases?: Maybe<Array<ConsultationPortalRelatedCaseResult>>
  shortDescription?: Maybe<Scalars['String']>
  stakeholders?: Maybe<Array<ConsultationPortalCaseStakeholderResult>>
  statusName?: Maybe<Scalars['String']>
  summaryDate?: Maybe<Scalars['DateTime']>
  summaryDocumentId?: Maybe<Scalars['String']>
  summaryLink?: Maybe<Scalars['String']>
  summaryText?: Maybe<Scalars['String']>
  typeName?: Maybe<Scalars['String']>
}

export type ConsultationPortalCaseStakeholderResult = {
  __typename?: 'ConsultationPortalCaseStakeholderResult'
  email?: Maybe<Scalars['String']>
  name?: Maybe<Scalars['String']>
}

export type ConsultationPortalCaseSubscriptionCommandInput = {
  id?: InputMaybe<Scalars['Float']>
  subscriptionType?: InputMaybe<CaseSubscriptionType>
}

export type ConsultationPortalCaseSubscriptionResult = {
  __typename?: 'ConsultationPortalCaseSubscriptionResult'
  type?: Maybe<CaseSubscriptionType>
}

export type ConsultationPortalCasesAggregateResult = {
  __typename?: 'ConsultationPortalCasesAggregateResult'
  cases?: Maybe<Array<ConsultationPortalCaseItemResult>>
  filterGroups?: Maybe<Scalars['JSONObject']>
  total: Scalars['Float']
}

export type ConsultationPortalCasesInput = {
  caseStatuses?: InputMaybe<Array<Scalars['Float']>>
  caseTypes?: InputMaybe<Array<Scalars['Float']>>
  dateFrom?: InputMaybe<Scalars['DateTime']>
  dateTo?: InputMaybe<Scalars['DateTime']>
  institutions?: InputMaybe<Array<Scalars['Float']>>
  orderBy?: InputMaybe<Scalars['String']>
  pageNumber?: InputMaybe<Scalars['Float']>
  pageSize?: InputMaybe<Scalars['Float']>
  policyAreas?: InputMaybe<Array<Scalars['Float']>>
  searchQuery?: InputMaybe<Scalars['String']>
}

export type ConsultationPortalDocumentInfoResult = {
  __typename?: 'ConsultationPortalDocumentInfoResult'
  description?: Maybe<Scalars['String']>
  fileName?: Maybe<Scalars['String']>
  fileType?: Maybe<Scalars['String']>
  id?: Maybe<Scalars['String']>
  link?: Maybe<Scalars['String']>
  size?: Maybe<Scalars['Float']>
}

export type ConsultationPortalPostAdviceInput = {
  caseId?: InputMaybe<Scalars['Int']>
  postCaseAdviceCommand?: InputMaybe<ConsultationPortalCasePostAdviceCommandInput>
}

export type ConsultationPortalPostCaseSubscriptionCommandInput = {
  subscriptionType?: InputMaybe<CaseSubscriptionType>
}

export type ConsultationPortalPostCaseSubscriptionTypeInput = {
  caseId?: InputMaybe<Scalars['Int']>
  postCaseSubscriptionCommand?: InputMaybe<ConsultationPortalPostCaseSubscriptionCommandInput>
}

export type ConsultationPortalPostEmailCommandInput = {
  email?: InputMaybe<Scalars['String']>
}

export type ConsultationPortalRelatedCaseResult = {
  __typename?: 'ConsultationPortalRelatedCaseResult'
  caseNumber?: Maybe<Scalars['String']>
  id?: Maybe<Scalars['Float']>
  name?: Maybe<Scalars['String']>
}

export type ConsultationPortalStatisticsResult = {
  __typename?: 'ConsultationPortalStatisticsResult'
  casesInReview?: Maybe<Scalars['Float']>
  totalAdvices?: Maybe<Scalars['Float']>
  totalCases?: Maybe<Scalars['Float']>
}

export type ConsultationPortalSubscriptionCommandInput = {
  id?: InputMaybe<Scalars['Float']>
  subscriptionType?: InputMaybe<SubscriptionType>
}

export type ConsultationPortalUserAdviceAggregate = {
  __typename?: 'ConsultationPortalUserAdviceAggregate'
  advices?: Maybe<Array<ConsultationPortalUserAdviceResult>>
  total?: Maybe<Scalars['Float']>
}

export type ConsultationPortalUserAdviceCaseResult = {
  __typename?: 'ConsultationPortalUserAdviceCaseResult'
  caseNumber?: Maybe<Scalars['String']>
  institutionName?: Maybe<Scalars['String']>
  name?: Maybe<Scalars['String']>
  policyAreaName?: Maybe<Scalars['String']>
  processBegins?: Maybe<Scalars['DateTime']>
  processEnds?: Maybe<Scalars['DateTime']>
  statusName?: Maybe<Scalars['String']>
  typeName?: Maybe<Scalars['String']>
}

export type ConsultationPortalUserAdviceResult = {
  __typename?: 'ConsultationPortalUserAdviceResult'
  _case?: Maybe<ConsultationPortalUserAdviceCaseResult>
  adviceDocuments?: Maybe<Array<ConsultationPortalDocumentInfoResult>>
  caseId?: Maybe<Scalars['Float']>
  content?: Maybe<Scalars['String']>
  created?: Maybe<Scalars['DateTime']>
  id?: Maybe<Scalars['String']>
  participantEmail?: Maybe<Scalars['String']>
  participantName?: Maybe<Scalars['String']>
}

export type ConsultationPortalUserAdvicesInput = {
  oldestFirst?: InputMaybe<Scalars['Boolean']>
  pageNumber?: InputMaybe<Scalars['Float']>
  pageSize?: InputMaybe<Scalars['Float']>
  searchQuery?: InputMaybe<Scalars['String']>
}

export type ConsultationPortalUserCaseSubscriptionResult = {
  __typename?: 'ConsultationPortalUserCaseSubscriptionResult'
  id?: Maybe<Scalars['Float']>
  subscriptionType?: Maybe<Scalars['String']>
}

export type ConsultationPortalUserEmailResult = {
  __typename?: 'ConsultationPortalUserEmailResult'
  email?: Maybe<Scalars['String']>
  emailVerified?: Maybe<Scalars['Boolean']>
}

export type ConsultationPortalUserSubscriptionResult = {
  __typename?: 'ConsultationPortalUserSubscriptionResult'
  id?: Maybe<Scalars['Float']>
  subscriptionType?: Maybe<Scalars['String']>
}

export type ConsultationPortalUserSubscriptionsAggregate = {
  __typename?: 'ConsultationPortalUserSubscriptionsAggregate'
  cases?: Maybe<Array<ConsultationPortalUserCaseSubscriptionResult>>
  institutions?: Maybe<Array<ConsultationPortalUserSubscriptionResult>>
  policyAreas?: Maybe<Array<ConsultationPortalUserSubscriptionResult>>
  subscribedToAll?: Maybe<Scalars['Boolean']>
  subscribedToAllType?: Maybe<SubscriptionType>
}

export type ConsultationPortalUserSubscriptionsCommandInput = {
  caseIds?: InputMaybe<Array<ConsultationPortalCaseSubscriptionCommandInput>>
  institutionIds?: InputMaybe<Array<ConsultationPortalSubscriptionCommandInput>>
  policyAreaIds?: InputMaybe<Array<ConsultationPortalSubscriptionCommandInput>>
  subscribeToAll?: InputMaybe<Scalars['Boolean']>
  subscribeToAllType?: InputMaybe<SubscriptionType>
}

export type Contact = {
  __typename?: 'Contact'
  created: Scalars['DateTime']
  email: Scalars['String']
  id: Scalars['String']
  modified: Scalars['DateTime']
  name: Scalars['String']
  phoneNumber: Scalars['String']
}

export type ContactUs = {
  __typename?: 'ContactUs'
  errorMessage: Scalars['String']
  id: Scalars['ID']
  invalidEmail: Scalars['String']
  invalidPhone: Scalars['String']
  labelEmail: Scalars['String']
  labelMessage: Scalars['String']
  labelName: Scalars['String']
  labelPhone: Scalars['String']
  labelSubject: Scalars['String']
  required: Scalars['String']
  submitButtonText: Scalars['String']
  successMessage: Scalars['String']
  title: Scalars['String']
}

export type ContactUsInput = {
  email: Scalars['String']
  message: Scalars['String']
  name: Scalars['String']
  phone?: InputMaybe<Scalars['String']>
  subject?: InputMaybe<Scalars['String']>
}

export type ContentLanguage = 'en' | 'is'

export type ContentSlug = {
  __typename?: 'ContentSlug'
  activeTranslations?: Maybe<Scalars['JSON']>
  id: Scalars['ID']
  slug?: Maybe<TextFieldLocales>
  title?: Maybe<TextFieldLocales>
  type: Scalars['String']
  url?: Maybe<TextFieldLocales>
}

export type CostOfLivingCalculatorModel = {
  __typename?: 'CostOfLivingCalculatorModel'
  clothes: Scalars['Int']
  communication: Scalars['Int']
  food: Scalars['Int']
  hobby: Scalars['Int']
  medicalCost: Scalars['Int']
  numberOf: Scalars['String']
  otherServices: Scalars['Int']
  text: Scalars['String']
  total: Scalars['Int']
  transport: Scalars['Int']
}

export type CostOfLivingCalculatorResponseModel = {
  __typename?: 'CostOfLivingCalculatorResponseModel'
  items: Array<CostOfLivingCalculatorModel>
}

export type CoursesModel = {
  __typename?: 'CoursesModel'
  courseId?: Maybe<Scalars['String']>
  courseName?: Maybe<Scalars['String']>
  date?: Maybe<Scalars['String']>
  finalgrade?: Maybe<Scalars['String']>
  stage?: Maybe<Scalars['Float']>
  status?: Maybe<Scalars['String']>
  units?: Maybe<Scalars['String']>
}

export type CreateApplicationDtoTypeIdEnum =
  | 'AccidentNotification'
  | 'AdditionalSupportForTheElderly'
  | 'AlcoholTaxRedemption'
  | 'AnnouncementOfDeath'
  | 'AnonymityInVehicleRegistry'
  | 'CarRecycling'
  | 'ChangeCoOwnerOfVehicle'
  | 'ChangeMachineSupervisor'
  | 'ChangeOperatorOfVehicle'
  | 'ChildrenResidenceChangeV2'
  | 'Citizenship'
  | 'ComplaintsToAlthingiOmbudsman'
  | 'CriminalRecord'
  | 'DataProtectionAuthorityComplaint'
  | 'DeathBenefits'
  | 'DeregisterMachine'
  | 'DigitalTachographDriversCard'
  | 'DocumentProviderOnboarding'
  | 'DrivingAssessmentApproval'
  | 'DrivingInstructorRegistrations'
  | 'DrivingLearnersPermit'
  | 'DrivingLicense'
  | 'DrivingLicenseBookUpdateInstructor'
  | 'DrivingLicenseDuplicate'
  | 'DrivingSchoolConfirmation'
  | 'EnergyFunds'
  | 'Estate'
  | 'EuropeanHealthInsuranceCard'
  | 'ExampleCommonActions'
  | 'ExampleForm'
  | 'ExampleInputs'
  | 'ExampleNoInputs'
  | 'ExamplePayment'
  | 'ExampleStateTransfers'
  | 'FinancialAid'
  | 'FinancialStatementCemetery'
  | 'FinancialStatementIndividualElection'
  | 'FinancialStatementPoliticalParty'
  | 'FinancialStatementsInao'
  | 'FundingGovernmentProjects'
  | 'GeneralFishingLicense'
  | 'GeneralPetitionService'
  | 'GrindavikHousingBuyout'
  | 'HealthInsurance'
  | 'HealthInsuranceDeclaration'
  | 'HealthcareLicenseCertificate'
  | 'HealthcareWorkPermit'
  | 'HomeSupport'
  | 'HouseholdSupplement'
  | 'IdCard'
  | 'IncomePlan'
  | 'InheritanceReport'
  | 'InstitutionCollaboration'
  | 'LicensePlateRenewal'
  | 'LoginService'
  | 'MachineRegistration'
  | 'MarriageConditions'
  | 'MortgageCertificate'
  | 'MunicipalListCreation'
  | 'MunicipalListSigning'
  | 'NewPrimarySchool'
  | 'NoDebtCertificate'
  | 'OfficialJournalOfIceland'
  | 'OldAgePension'
  | 'OperatingLicense'
  | 'OrderVehicleLicensePlate'
  | 'OrderVehicleRegistrationCertificate'
  | 'PSign'
  | 'ParentalLeave'
  | 'ParliamentaryListCreation'
  | 'ParliamentaryListSigning'
  | 'Passport'
  | 'PassportAnnulment'
  | 'PensionSupplement'
  | 'PresidentialListCreation'
  | 'PresidentialListSigning'
  | 'PublicDebtPaymentPlan'
  | 'RequestInspectionForMachine'
  | 'SecondarySchool'
  | 'SeminarRegistration'
  | 'StreetRegistration'
  | 'TrainingLicenseOnAWorkMachine'
  | 'TransferOfMachineOwnership'
  | 'TransferOfVehicleOwnership'
  | 'University'
  | 'WorkAccidentNotification'

export type CreateApplicationInput = {
  initialQuery?: InputMaybe<Scalars['String']>
  typeId: CreateApplicationDtoTypeIdEnum
}

export type CreateAuthAdminClientInput = {
  clientId: Scalars['ID']
  clientType: AuthAdminCreateClientType
  displayName: Scalars['String']
  environments: Array<AuthAdminEnvironment>
  sso?: InputMaybe<AuthAdminClientSso>
  supportedDelegationTypes?: InputMaybe<Array<Scalars['String']>>
  tenantId: Scalars['ID']
}

export type CreateAuthDelegationInput = {
  domainName?: InputMaybe<Scalars['String']>
  scopes?: InputMaybe<Array<AuthDelegationScopeInput>>
  toNationalId: Scalars['String']
}

export type CreateAuthLoginRestrictionInput = {
  until: Scalars['DateTime']
}

export type CreateBarcodeResult = {
  __typename?: 'CreateBarcodeResult'
  /** Barcode expire time in seconds */
  expiresIn: Scalars['Int']
  /** Barcode token */
  token: Scalars['String']
}

export type CreateChangeAppendixInput = {
  diff?: InputMaybe<Scalars['String']>
  text?: InputMaybe<Scalars['String']>
  title?: InputMaybe<Scalars['String']>
}

export type CreateContactInput = {
  email: Scalars['String']
  name: Scalars['String']
  phoneNumber: Scalars['String']
}

export type CreateDelegationInput = {
  fromNationalId: Scalars['String']
  referenceId: Scalars['String']
  toNationalId: Scalars['String']
  type: Scalars['String']
  validTo?: InputMaybe<Scalars['DateTime']>
}

export type CreateDraftRegulationCancelInput = {
  changingId: Scalars['String']
  date: Scalars['String']
  regulation: Scalars['String']
}

export type CreateDraftRegulationChangeInput = {
  appendixes?: InputMaybe<Array<CreateChangeAppendixInput>>
  changingId: Scalars['String']
  comments?: InputMaybe<Scalars['String']>
  date?: InputMaybe<Scalars['String']>
  diff?: InputMaybe<Scalars['String']>
  regulation: Scalars['String']
  text?: InputMaybe<Scalars['String']>
  title?: InputMaybe<Scalars['String']>
}

export type CreateDraftRegulationInput = {
  type?: InputMaybe<Scalars['String']>
}

export type CreateDrivingSchoolTestResultInput = {
  bookId: Scalars['String']
  comments: Scalars['String']
  createdOn: Scalars['String']
  schoolEmployeeNationalId: Scalars['String']
  schoolNationalId: Scalars['String']
  schoolTypeId: Scalars['Float']
}

export type CreateEmailVerificationInput = {
  email: Scalars['String']
}

export type CreateEndorsementInput = {
  endorsementDto: EndorsementInput
  listId: Scalars['String']
}

export type CreateEndorsementListDto = {
  adminLock: Scalars['Boolean']
  closedDate: Scalars['DateTime']
  description?: InputMaybe<Scalars['String']>
  endorsementMetadata: Array<MetadataInput>
  meta?: InputMaybe<Scalars['JSON']>
  openedDate: Scalars['DateTime']
  tags: Array<EndorsementListDtoTagsEnum>
  title: Scalars['String']
}

export type CreateFormSystemApplicantDtoInput = {
  applicantTypeId: Scalars['String']
  formId: Scalars['String']
}

export type CreateFormSystemApplicantInput = {
  createFormApplicantTypeDto?: InputMaybe<CreateFormSystemApplicantDtoInput>
}

export type CreateFormSystemApplicationInput = {
  slug?: InputMaybe<Scalars['String']>
}

export type CreateFormSystemCertificationDtoInput = {
  certificationTypeId?: InputMaybe<Scalars['String']>
  formId?: InputMaybe<Scalars['String']>
}

export type CreateFormSystemCertificationInput = {
  createFormCertificationTypeDto?: InputMaybe<CreateFormSystemCertificationDtoInput>
}

export type CreateFormSystemFieldDtoInput = {
  displayOrder?: InputMaybe<Scalars['Int']>
  fieldType?: InputMaybe<Scalars['String']>
  screenId?: InputMaybe<Scalars['String']>
}

export type CreateHelpdeskInput = {
  email: Scalars['String']
  phoneNumber: Scalars['String']
}

export type CreateIcelandicNameInput = {
  description?: InputMaybe<Scalars['String']>
  icelandicName: Scalars['String']
  status: Scalars['String']
  type: Scalars['String']
  url?: InputMaybe<Scalars['String']>
  verdict?: InputMaybe<Scalars['String']>
  visible: Scalars['Boolean']
}

export type CreatePracticalDrivingLessonInput = {
  bookId: Scalars['String']
  comments: Scalars['String']
  createdOn: Scalars['String']
  minutes: Scalars['Float']
}

export type CreateProviderInput = {
  clientName: Scalars['String']
  nationalId: Scalars['String']
}

export type CreateRegulationPresignedPostInput = {
  fileName: Scalars['String']
  hash: Scalars['String']
  regId: Scalars['String']
}

export type CreateScopeInput = {
  description: Scalars['String']
  displayName: Scalars['String']
  environments: Array<AuthAdminEnvironment>
  name: Scalars['String']
  tenantId: Scalars['String']
}

export type CreateSmsVerificationInput = {
  mobilePhoneNumber: Scalars['String']
}

export type CreateUserProfileInput = {
  canNudge?: InputMaybe<Scalars['Boolean']>
  documentNotifications?: InputMaybe<Scalars['Boolean']>
  email?: InputMaybe<Scalars['String']>
  emailCode?: InputMaybe<Scalars['String']>
  emailStatus?: InputMaybe<Scalars['String']>
  locale?: InputMaybe<Scalars['String']>
  mobilePhoneNumber?: InputMaybe<Scalars['String']>
  mobileStatus?: InputMaybe<Scalars['String']>
  smsCode?: InputMaybe<Scalars['String']>
}

export type CustomPage = {
  __typename?: 'CustomPage'
  alertBanner?: Maybe<AlertBanner>
  configJson?: Maybe<Scalars['JSONObject']>
  content?: Maybe<Array<Slice>>
  id: Scalars['ID']
  ogDescription?: Maybe<Scalars['String']>
  ogImage?: Maybe<Image>
  ogTitle?: Maybe<Scalars['String']>
  translationStrings: Scalars['JSONObject']
  uniqueIdentifier: Scalars['String']
}

export type CustomPageUniqueIdentifier =
  | 'BloodDonationRestrictions'
  | 'DirectorateOfLabourMyPages'
  | 'Grants'
  | 'OfficialJournalOfIceland'
  | 'OfficialJournalOfIcelandHelp'
  | 'PensionCalculator'
  | 'Vacancies'
  | 'Verdicts'

export type DataCategory =
  | 'FINANCIAL'
  | 'HEALTH'
  | 'OFFICIAL'
  | 'OPEN'
  | 'PERSONAL'
  | 'PUBLIC'

export type DataProvider = {
  actionId: Scalars['String']
  order: Scalars['Float']
}

export type DelegationAdminCustomModel = {
  __typename?: 'DelegationAdminCustomModel'
  incoming: Array<AuthCustomDelegation>
  name: Scalars['String']
  nationalId: Scalars['String']
  outgoing: Array<AuthCustomDelegation>
}

export type DeleteApplicationInput = {
  id: Scalars['String']
}

export type DeleteAttachmentInput = {
  id: Scalars['String']
  key: Scalars['String']
}

export type DeleteAuthDelegationInput = {
  delegationId: Scalars['String']
}

export type DeleteDraftRegulationCancelInput = {
  id: Scalars['String']
}

export type DeleteDraftRegulationChangeInput = {
  id: Scalars['String']
}

export type DeleteDraftRegulationInput = {
  draftId: Scalars['String']
}

export type DeleteDraftRegulationModel = {
  __typename?: 'DeleteDraftRegulationModel'
  id: Scalars['String']
}

export type DeleteFormSystemApplicantInput = {
  id?: InputMaybe<Scalars['String']>
}

export type DeleteFormSystemCertificationInput = {
  id: Scalars['String']
}

export type DeleteIcelandicNameByIdInput = {
  id: Scalars['Float']
}

export type DeleteIslykillValueInput = {
  email?: InputMaybe<Scalars['Boolean']>
  mobilePhoneNumber?: InputMaybe<Scalars['Boolean']>
}

export type DeleteNameResponse = {
  __typename?: 'DeleteNameResponse'
  id: Scalars['Float']
}

export type DeletePracticalDrivingLessonInput = {
  bookId: Scalars['String']
  id: Scalars['String']
  reason: Scalars['String']
}

export type DeleteTokenResponse = {
  __typename?: 'DeleteTokenResponse'
  success: Scalars['Boolean']
}

export type DetailedSchedule = {
  __typename?: 'DetailedSchedule'
  paidAmount: Scalars['Float']
  paidDate: Scalars['String']
  payExplanation: Scalars['String']
  paymentNumber: Scalars['String']
  unpaidAmount: Scalars['Float']
}

export type DiplomaItems = {
  __typename?: 'DiplomaItems'
  diplomaCode?: Maybe<Scalars['String']>
  diplomaCredits?: Maybe<Scalars['Float']>
  diplomaCreditsTotal?: Maybe<Scalars['Float']>
  diplomaDate?: Maybe<Scalars['String']>
  diplomaId?: Maybe<Scalars['Float']>
  diplomaLongName?: Maybe<Scalars['String']>
  diplomaName?: Maybe<Scalars['String']>
  organisation?: Maybe<Scalars['String']>
  organisationId?: Maybe<Scalars['Float']>
  organisationShort?: Maybe<Scalars['String']>
}

export type DiplomaModel = {
  __typename?: 'DiplomaModel'
  items?: Maybe<Array<DiplomaItems>>
}

export type DirectTaxPaymentModel = {
  __typename?: 'DirectTaxPaymentModel'
  month: Scalars['Float']
  payerNationalId: Scalars['String']
  personalAllowance: Scalars['Float']
  totalSalary: Scalars['Float']
  withheldAtSource: Scalars['Float']
  year: Scalars['Float']
}

export type Disqualification = {
  __typename?: 'Disqualification'
  to: Scalars['String']
}

export type DistrictCommissionerAgencies = {
  __typename?: 'DistrictCommissionerAgencies'
  address: Scalars['String']
  id: Scalars['String']
  name: Scalars['String']
  place: Scalars['String']
}

export type Districts = {
  __typename?: 'Districts'
  description?: Maybe<Scalars['String']>
  hasBorderAbove?: Maybe<Scalars['Boolean']>
  id: Scalars['ID']
  image?: Maybe<Image>
  links: Array<Link>
  title: Scalars['String']
}

export type Document = {
  __typename?: 'Document'
  bookmarked?: Maybe<Scalars['Boolean']>
  categoryId?: Maybe<Scalars['String']>
  date: Scalars['DateTime']
  fileType: Scalars['String']
  id: Scalars['ID']
  opened: Scalars['Boolean']
  senderName: Scalars['String']
  senderNatReg: Scalars['String']
  subject: Scalars['String']
  url: Scalars['String']
}

export type DocumentCategory = {
  __typename?: 'DocumentCategory'
  id: Scalars['ID']
  name: Scalars['String']
}

export type DocumentConfirmActions = {
  __typename?: 'DocumentConfirmActions'
  confirmed?: Maybe<Scalars['Boolean']>
  id: Scalars['String']
}

export type DocumentConfirmActionsInput = {
  confirmed?: InputMaybe<Scalars['Boolean']>
  id: Scalars['String']
}

export type DocumentDetails = {
  __typename?: 'DocumentDetails'
  archived?: Maybe<Scalars['Boolean']>
  bookmarked?: Maybe<Scalars['Boolean']>
  categoryId?: Maybe<Scalars['String']>
  content: Scalars['String']
  fileType: Scalars['String']
  html: Scalars['String']
  publicationDate?: Maybe<Scalars['DateTime']>
  senderKennitala?: Maybe<Scalars['String']>
  senderName?: Maybe<Scalars['String']>
  subject?: Maybe<Scalars['String']>
  url: Scalars['String']
}

export type DocumentInput = {
  /** Optional. For logging only. */
  category?: InputMaybe<Scalars['String']>
  id: Scalars['String']
  includeDocument?: InputMaybe<Scalars['Boolean']>
  pageSize?: InputMaybe<Scalars['Float']>
  /** Optional. For logging only. */
  provider?: InputMaybe<Scalars['String']>
}

export type DocumentListResponse = {
  __typename?: 'DocumentListResponse'
  data: Array<Document>
  totalCount?: Maybe<Scalars['Float']>
  unreadCount?: Maybe<Scalars['Float']>
}

export type DocumentMailAction = {
  __typename?: 'DocumentMailAction'
  messageIds: Array<Scalars['String']>
  success: Scalars['Boolean']
}

export type DocumentPageNumber = {
  __typename?: 'DocumentPageNumber'
  pageNumber: Scalars['Int']
}

export type DocumentPageResponse = {
  __typename?: 'DocumentPageResponse'
  messagePage: Scalars['Int']
}

export type DocumentPdfRenderer = {
  __typename?: 'DocumentPdfRenderer'
  id: Scalars['String']
  success: Scalars['Boolean']
}

export type DocumentPdfRendererInput = {
  actions?: InputMaybe<Array<Scalars['String']>>
  error?: InputMaybe<Scalars['String']>
  id: Scalars['String']
  isCourtCase?: InputMaybe<Scalars['Boolean']>
  success: Scalars['Boolean']
}

export type DocumentProviderCategoriesAndTypesPostInput = {
  active?: InputMaybe<Scalars['Boolean']>
  name?: InputMaybe<Scalars['String']>
}

export type DocumentProviderCategoriesAndTypesPutInput = {
  active?: InputMaybe<Scalars['Boolean']>
  id: Scalars['Int']
  name?: InputMaybe<Scalars['String']>
}

export type DocumentProviderCategory = {
  __typename?: 'DocumentProviderCategory'
  active?: Maybe<Scalars['Boolean']>
  id: Scalars['Int']
  name?: Maybe<Scalars['String']>
}

export type DocumentProviderPaperMail = {
  __typename?: 'DocumentProviderPaperMail'
  dateAdded?: Maybe<Scalars['DateTime']>
  dateUpdated?: Maybe<Scalars['DateTime']>
  nationalId: Scalars['String']
  origin: Scalars['String']
  wantsPaper: Scalars['Boolean']
}

export type DocumentProviderPaperMailInput = {
  page?: InputMaybe<Scalars['Int']>
  pageSize?: InputMaybe<Scalars['Int']>
}

export type DocumentProviderPaperMailResponse = {
  __typename?: 'DocumentProviderPaperMailResponse'
  paperMail: Array<DocumentProviderPaperMail>
  totalCount: Scalars['Int']
}

export type DocumentProviderType = {
  __typename?: 'DocumentProviderType'
  active?: Maybe<Scalars['Boolean']>
  id: Scalars['Int']
  name?: Maybe<Scalars['String']>
}

export type DocumentSender = {
  __typename?: 'DocumentSender'
  id: Scalars['ID']
  name: Scalars['String']
}

export type DocumentType = {
  __typename?: 'DocumentType'
  id: Scalars['ID']
  name: Scalars['String']
}

export type DocumentV2 = {
  __typename?: 'DocumentV2'
  actions?: Maybe<Array<DocumentV2Action>>
  alert?: Maybe<DocumentV2Action>
  archived?: Maybe<Scalars['Boolean']>
  bookmarked?: Maybe<Scalars['Boolean']>
  categoryId?: Maybe<Scalars['String']>
  confirmation?: Maybe<DocumentV2Action>
  content?: Maybe<DocumentV2Content>
  documentDate?: Maybe<Scalars['DateTime']>
  /** URL in download service. For downloading PDFs */
  downloadUrl?: Maybe<Scalars['String']>
  id: Scalars['ID']
  isUrgent?: Maybe<Scalars['Boolean']>
  name?: Maybe<Scalars['String']>
  opened?: Maybe<Scalars['Boolean']>
  publicationDate?: Maybe<Scalars['DateTime']>
  sender: DocumentsV2Sender
  subject: Scalars['String']
}

export type DocumentV2Action = {
  __typename?: 'DocumentV2Action'
  data?: Maybe<Scalars['String']>
  icon?: Maybe<Scalars['String']>
  title?: Maybe<Scalars['String']>
  type?: Maybe<Scalars['String']>
}

export type DocumentV2Content = {
  __typename?: 'DocumentV2Content'
  type: DocumentsV2FileType
  /** Either pdf base64 string, html markup string, or an url */
  value?: Maybe<Scalars['String']>
}

export type DocumentV2MarkAllMailAsRead = {
  __typename?: 'DocumentV2MarkAllMailAsRead'
  success: Scalars['Boolean']
}

export type DocumentV2PaperMailPreferences = {
  __typename?: 'DocumentV2PaperMailPreferences'
  nationalId: Scalars['String']
  wantsPaper: Scalars['Boolean']
}

export type DocumentsV2 = {
  __typename?: 'DocumentsV2'
  categories: Array<DocumentsV2Category>
  data: Array<DocumentV2>
  pageInfo: PageInfoDto
  senders: Array<DocumentsV2Sender>
  totalCount: Scalars['Float']
  types: Array<DocumentsV2Type>
  unreadCount?: Maybe<Scalars['Float']>
}

export type DocumentsV2Base = {
  id: Scalars['String']
  name?: Maybe<Scalars['String']>
}

export type DocumentsV2Category = DocumentsV2Base & {
  __typename?: 'DocumentsV2Category'
  id: Scalars['String']
  name?: Maybe<Scalars['String']>
}

export type DocumentsV2DocumentsInput = {
  archived?: InputMaybe<Scalars['Boolean']>
  bookmarked?: InputMaybe<Scalars['Boolean']>
  categoryIds?: InputMaybe<Array<Scalars['String']>>
  dateFrom?: InputMaybe<Scalars['DateTime']>
  dateTo?: InputMaybe<Scalars['DateTime']>
  opened?: InputMaybe<Scalars['Boolean']>
  order?: InputMaybe<DocumentsV2PageOrder>
  page?: InputMaybe<Scalars['Int']>
  pageSize?: InputMaybe<Scalars['Int']>
  senderNationalId?: InputMaybe<Array<Scalars['String']>>
  sortBy?: InputMaybe<DocumentsV2PageSort>
  subjectContains?: InputMaybe<Scalars['String']>
  typeId?: InputMaybe<Scalars['String']>
}

export type DocumentsV2FileType = 'HTML' | 'PDF' | 'UNKNOWN' | 'URL'

export type DocumentsV2MailActionInput = {
  action: Scalars['String']
  documentIds: Array<Scalars['String']>
}

export type DocumentsV2PageOrder = 'Ascending' | 'Descending'

export type DocumentsV2PageSort =
  | 'Category'
  | 'Date'
  | 'Publication'
  | 'Sender'
  | 'Subject'
  | 'Type'

export type DocumentsV2Sender = {
  __typename?: 'DocumentsV2Sender'
  id?: Maybe<Scalars['String']>
  name?: Maybe<Scalars['String']>
}

export type DocumentsV2Type = DocumentsV2Base & {
  __typename?: 'DocumentsV2Type'
  id: Scalars['String']
  name?: Maybe<Scalars['String']>
}

export type DraftProgressInput = {
  stepsFinished: Scalars['Float']
  totalSteps: Scalars['Float']
}

export type DraftRegulationCancelModel = {
  __typename?: 'DraftRegulationCancelModel'
  date?: Maybe<Scalars['String']>
  dropped?: Maybe<Scalars['Boolean']>
  id?: Maybe<Scalars['String']>
  name?: Maybe<Scalars['String']>
  regTitle?: Maybe<Scalars['String']>
  type?: Maybe<Scalars['String']>
}

export type DraftRegulationChangeModel = {
  __typename?: 'DraftRegulationChangeModel'
  appendixes?: Maybe<Array<ChangeAppendix>>
  comments?: Maybe<Scalars['String']>
  date?: Maybe<Scalars['String']>
  diff?: Maybe<Scalars['String']>
  dropped?: Maybe<Scalars['Boolean']>
  id?: Maybe<Scalars['String']>
  name?: Maybe<Scalars['String']>
  regTitle?: Maybe<Scalars['String']>
  text?: Maybe<Scalars['String']>
  title?: Maybe<Scalars['String']>
  type?: Maybe<Scalars['String']>
}

export type DraftRegulationPagingModel = {
  __typename?: 'DraftRegulationPagingModel'
  page: Scalars['Float']
  pages: Scalars['Float']
}

/** Info about how to download the draft regulation PDF */
export type DraftRegulationPdfDownloadModel = {
  __typename?: 'DraftRegulationPdfDownloadModel'
  /** Does the download go through the download service? If true needs special handling in client */
  downloadService: Scalars['Boolean']
  /** URL of the draft regulation PDF file */
  url?: Maybe<Scalars['String']>
}

export type DraftRegulationShippedModel = {
  __typename?: 'DraftRegulationShippedModel'
  authors: Array<RegulationShippedAuthor>
  draftingStatus: Scalars['String']
  fastTrack?: Maybe<Scalars['Boolean']>
  id: Scalars['String']
  idealPublishDate?: Maybe<Scalars['String']>
  name?: Maybe<Scalars['String']>
  title?: Maybe<Scalars['String']>
}

export type DraftRegulationSummary = {
  __typename?: 'DraftRegulationSummary'
  authors: Array<RegulationSummaryAuthor>
  draftingStatus: Scalars['String']
  fastTrack?: Maybe<Scalars['Boolean']>
  id: Scalars['String']
  idealPublishDate?: Maybe<Scalars['String']>
  name?: Maybe<Scalars['String']>
  title?: Maybe<Scalars['String']>
}

export type DrivingBookLesson = {
  __typename?: 'DrivingBookLesson'
  comments: Scalars['String']
  id: Scalars['ID']
  lessonTime: Scalars['Float']
  registerDate: Scalars['String']
  teacherName: Scalars['String']
  teacherNationalId: Scalars['String']
}

export type DrivingLicenceTestResult = {
  __typename?: 'DrivingLicenceTestResult'
  comments: Scalars['String']
  examDate: Scalars['String']
  hasPassed: Scalars['Boolean']
  id: Scalars['ID']
  score: Scalars['Float']
  scorePart1: Scalars['Float']
  scorePart2: Scalars['Float']
  testCenterName: Scalars['String']
  testCenterNationalId: Scalars['String']
  testExaminerName: Scalars['String']
  testExaminerNationalId: Scalars['String']
  testTypeCode: Scalars['String']
  testTypeId: Scalars['Float']
  testTypeName: Scalars['String']
}

export type DrivingLicenceTestResultId = {
  __typename?: 'DrivingLicenceTestResultId'
  id: Scalars['ID']
}

export type DrivingLicense = {
  __typename?: 'DrivingLicense'
  birthCountry?: Maybe<Scalars['String']>
  categories: Array<Eligibility>
  disqualification?: Maybe<Disqualification>
  expires: Scalars['DateTime']
  id: Scalars['ID']
  issued: Scalars['DateTime']
  name: Scalars['String']
  remarks: Array<Scalars['String']>
}

export type DrivingLicenseBook = {
  __typename?: 'DrivingLicenseBook'
  createdOn: Scalars['String']
  drivingSchoolExams: Array<DrivingSchoolExam>
  id: Scalars['String']
  isDigital: Scalars['Boolean']
  licenseCategory: Scalars['String']
  practiceDriving: Scalars['Boolean']
  schoolName: Scalars['String']
  schoolNationalId: Scalars['String']
  status: Scalars['Float']
  statusName: Scalars['String']
  teacherName: Scalars['String']
  teacherNationalId: Scalars['String']
  teachersAndLessons: Array<DrivingBookLesson>
  testResults: Array<DrivingLicenceTestResult>
  totalLessonCount: Scalars['Float']
  totalLessonTime: Scalars['Float']
}

export type DrivingLicenseBookSchool = {
  __typename?: 'DrivingLicenseBookSchool'
  address: Scalars['String']
  allowedDrivingSchoolTypes: Array<DrivingSchoolType>
  email: Scalars['String']
  name: Scalars['String']
  nationalId: Scalars['ID']
  phoneNumber: Scalars['String']
  website: Scalars['String']
  zipCode: Scalars['String']
}

export type DrivingLicenseBookStudent = {
  __typename?: 'DrivingLicenseBookStudent'
  active: Scalars['Boolean']
  address: Scalars['String']
  bookLicenseCategories: Array<Scalars['String']>
  email: Scalars['String']
  id: Scalars['ID']
  name: Scalars['String']
  nationalId: Scalars['String']
  primaryPhoneNumber: Scalars['String']
  secondaryPhoneNumber: Scalars['String']
  zipCode: Scalars['Float']
}

export type DrivingLicenseBookStudentForTeacher = {
  __typename?: 'DrivingLicenseBookStudentForTeacher'
  id: Scalars['ID']
  name: Scalars['String']
  nationalId: Scalars['String']
  totalLessonCount: Scalars['Float']
}

export type DrivingLicenseBookStudentInput = {
  licenseCategory?: InputMaybe<Scalars['String']>
  nationalId: Scalars['String']
}

export type DrivingLicenseBookStudentOverview = {
  __typename?: 'DrivingLicenseBookStudentOverview'
  active: Scalars['Boolean']
  address: Scalars['String']
  book: DrivingLicenseBook
  bookLicenseCategories: Array<Scalars['String']>
  email: Scalars['String']
  id: Scalars['ID']
  name: Scalars['String']
  nationalId: Scalars['String']
  primaryPhoneNumber: Scalars['String']
  secondaryPhoneNumber: Scalars['String']
  zipCode: Scalars['Float']
}

export type DrivingLicenseBookStudentsInput = {
  cursor: Scalars['String']
  key: Scalars['String']
  licenseCategory: Scalars['String']
  limit: Scalars['Float']
}

export type DrivingLicenseBookSuccess = {
  __typename?: 'DrivingLicenseBookSuccess'
  success: Scalars['Boolean']
}

export type DrivingLicenseQualityPhoto = {
  __typename?: 'DrivingLicenseQualityPhoto'
  dataUri?: Maybe<Scalars['String']>
  hasQualityPhoto: Scalars['Boolean']
}

export type DrivingLicenseQualitySignature = {
  __typename?: 'DrivingLicenseQualitySignature'
  dataUri?: Maybe<Scalars['String']>
  hasQualitySignature: Scalars['Boolean']
}

export type DrivingSchoolExam = {
  __typename?: 'DrivingSchoolExam'
  comments: Scalars['String']
  examDate: Scalars['String']
  id: Scalars['ID']
  schoolEmployeeName: Scalars['String']
  schoolEmployeeNationalId: Scalars['String']
  schoolName: Scalars['String']
  schoolNationalId: Scalars['String']
  schoolTypeCode: Scalars['String']
  schoolTypeId: Scalars['Float']
  schoolTypeName: Scalars['String']
  status: Scalars['Float']
  statusName: Scalars['String']
}

export type DrivingSchoolType = {
  __typename?: 'DrivingSchoolType'
  licenseCategory: Scalars['String']
  schoolTypeCode: Scalars['String']
  schoolTypeId: Scalars['Float']
  schoolTypeName: Scalars['String']
}

export type EditDraftBody = {
  appendixes?: InputMaybe<Array<AppendixInput>>
  comments?: InputMaybe<Scalars['String']>
  draftingNotes?: InputMaybe<Scalars['String']>
  draftingStatus?: InputMaybe<Scalars['String']>
  effectiveDate?: InputMaybe<Scalars['String']>
  fastTrack: Scalars['Boolean']
  idealPublishDate?: InputMaybe<Scalars['String']>
  lawChapters?: InputMaybe<Array<Scalars['String']>>
  ministry?: InputMaybe<Scalars['String']>
  name?: InputMaybe<Scalars['String']>
  signatureDate?: InputMaybe<Scalars['String']>
  signatureText?: InputMaybe<Scalars['String']>
  signedDocumentUrl?: InputMaybe<Scalars['String']>
  text?: InputMaybe<Scalars['String']>
  title?: InputMaybe<Scalars['String']>
  type?: InputMaybe<Scalars['String']>
}

export type EditDraftRegulationInput = {
  body: EditDraftBody
  id: Scalars['String']
}

export type EducationCompulsorySchoolCourse = {
  __typename?: 'EducationCompulsorySchoolCourse'
  competence: EducationCompulsorySchoolCourseCompetence
  gradeCategories?: Maybe<Array<EducationCompulsorySchoolGradeCategory>>
  label: Scalars['String']
  totalGrade?: Maybe<EducationCompulsorySchoolGrade>
}

export type EducationCompulsorySchoolCourseCompetence = {
  __typename?: 'EducationCompulsorySchoolCourseCompetence'
  competenceStatus?: Maybe<Scalars['String']>
  competencyGrade: Scalars['String']
}

export type EducationCompulsorySchoolGrade = {
  __typename?: 'EducationCompulsorySchoolGrade'
  compulsorySchoolGrade: EducationCompulsorySchoolGradeDetail
  /** National standardised test grade */
  serialGrade: EducationCompulsorySchoolGradeDetail
}

export type EducationCompulsorySchoolGradeCategory = {
  label: Scalars['String']
}

export type EducationCompulsorySchoolGradeCategoryText = EducationCompulsorySchoolGradeCategory & {
  __typename?: 'EducationCompulsorySchoolGradeCategoryText'
  label: Scalars['String']
  text: Scalars['String']
}

export type EducationCompulsorySchoolGradeCategoryWeighted = EducationCompulsorySchoolGradeCategory & {
  __typename?: 'EducationCompulsorySchoolGradeCategoryWeighted'
  grade: EducationCompulsorySchoolGrade
  label: Scalars['String']
}

export type EducationCompulsorySchoolGradeDetail = {
  __typename?: 'EducationCompulsorySchoolGradeDetail'
  grade: Scalars['String']
  label?: Maybe<Scalars['String']>
  weight?: Maybe<Scalars['Int']>
}

export type EducationCompulsorySchoolGradeLevelExamResults = {
  __typename?: 'EducationCompulsorySchoolGradeLevelExamResults'
  coursesExamResults?: Maybe<Array<EducationCompulsorySchoolCourse>>
  gradeLevel: Scalars['Int']
}

export type EducationCompulsorySchoolStudentCareer = {
  __typename?: 'EducationCompulsorySchoolStudentCareer'
  examDateSpan?: Maybe<Scalars['String']>
  examResults?: Maybe<Array<EducationCompulsorySchoolGradeLevelExamResults>>
  isChildOfUser?: Maybe<Scalars['Boolean']>
  name: Scalars['String']
  nationalId: Scalars['String']
}

export type EducationCourseGrade = {
  __typename?: 'EducationCourseGrade'
  competence: Scalars['String']
  competenceStatus: Scalars['String']
  gradeSum?: Maybe<GradeType>
  grades: Array<GradeType>
  label: Scalars['String']
  progressText?: Maybe<Grade>
  wordAndNumbers?: Maybe<Grade>
}

export type EducationExamFamilyOverview = {
  __typename?: 'EducationExamFamilyOverview'
  familyIndex: Scalars['Int']
  isChild: Scalars['Boolean']
  name: Scalars['String']
  nationalId: Scalars['ID']
  organizationName: Scalars['String']
  organizationType: Scalars['String']
  yearInterval: Scalars['String']
}

export type EducationExamResult = {
  __typename?: 'EducationExamResult'
  fullName: Scalars['String']
  grades: Array<EducationGradeResult>
  id: Scalars['ID']
}

export type EducationFriggAddressModel = {
  __typename?: 'EducationFriggAddressModel'
  address: Scalars['String']
  country?: Maybe<Scalars['String']>
  id: Scalars['String']
  municipality?: Maybe<Scalars['String']>
  postCode: Scalars['String']
}

export type EducationFriggKeyOptionModel = {
  __typename?: 'EducationFriggKeyOptionModel'
  options: Array<EducationFriggOptionModel>
  type: Scalars['String']
}

export type EducationFriggOptionModel = {
  __typename?: 'EducationFriggOptionModel'
  id: Scalars['String']
  key: Scalars['String']
  value: Array<EducationFriggValueModel>
}

export type EducationFriggOptionsListInput = {
  type: Scalars['String']
}

export type EducationFriggOrganizationModel = {
  __typename?: 'EducationFriggOrganizationModel'
  address?: Maybe<EducationFriggAddressModel>
  children?: Maybe<Array<EducationFriggOrganizationModel>>
  email?: Maybe<Scalars['String']>
  gradeLevels?: Maybe<Array<Scalars['String']>>
  id: Scalars['String']
  name: Scalars['String']
  nationalId: Scalars['String']
  phone?: Maybe<Scalars['String']>
  type: OrganizationModelTypeEnum
  unitId?: Maybe<Scalars['String']>
  website?: Maybe<Scalars['String']>
}

export type EducationFriggValueModel = {
  __typename?: 'EducationFriggValueModel'
  content: Scalars['String']
  language: Scalars['String']
}

export type EducationGradeResult = {
  __typename?: 'EducationGradeResult'
  courses: Array<EducationCourseGrade>
  studentYear: Scalars['String']
}

export type EducationLicense = {
  __typename?: 'EducationLicense'
  date: Scalars['String']
  id: Scalars['ID']
  programme: Scalars['String']
  school: Scalars['String']
}

export type EducationSignedLicense = {
  __typename?: 'EducationSignedLicense'
  url: Scalars['ID']
}

export type EducationUserFamilyCompulsorySchoolCareer = {
  __typename?: 'EducationUserFamilyCompulsorySchoolCareer'
  familyMemberCareers?: Maybe<Array<EducationCompulsorySchoolStudentCareer>>
  userCareer?: Maybe<EducationCompulsorySchoolStudentCareer>
}

export type Eligibility = {
  __typename?: 'Eligibility'
  comment: Scalars['String']
  expires: Scalars['DateTime']
  issued: Scalars['DateTime']
  name: Scalars['ID']
}

export type EmailSignup = {
  __typename?: 'EmailSignup'
  configuration?: Maybe<Scalars['JSON']>
  description?: Maybe<Scalars['String']>
  formFields?: Maybe<Array<FormField>>
  id: Scalars['ID']
  signupType?: Maybe<Scalars['String']>
  title: Scalars['String']
  translations?: Maybe<Scalars['JSON']>
}

export type EmailSignupInput = {
  inputFields: Array<EmailSignupInputField>
  signupID: Scalars['String']
}

export type EmailSignupInputField = {
  id: Scalars['String']
  name: Scalars['String']
  type: Scalars['String']
  value: Scalars['String']
}

export type EmailSignupResponse = {
  __typename?: 'EmailSignupResponse'
  subscribed: Scalars['Boolean']
}

export type Embed = {
  __typename?: 'Embed'
  altText?: Maybe<Scalars['String']>
  aspectRatio?: Maybe<Scalars['String']>
  embedUrl?: Maybe<Scalars['String']>
  id: Scalars['ID']
  title: Scalars['String']
}

export type EmbeddedVideo = {
  __typename?: 'EmbeddedVideo'
  id: Scalars['ID']
  thumbnailImageUrl?: Maybe<Scalars['String']>
  title: Scalars['String']
  url: Scalars['String']
}

export type Endorsement = {
  __typename?: 'Endorsement'
  created: Scalars['String']
  endorsementList?: Maybe<EndorsementListOpen>
  endorsementListId: Scalars['String']
  endorser: Scalars['String']
  id: Scalars['ID']
  meta: EndorsementMetadata
  modified: Scalars['String']
}

export type EndorsementInput = {
  showName: Scalars['Boolean']
}

export type EndorsementList = {
  __typename?: 'EndorsementList'
  adminLock: Scalars['Boolean']
  closedDate: Scalars['DateTime']
  created: Scalars['String']
  description?: Maybe<Scalars['String']>
  endorsementCounter?: Maybe<Scalars['Float']>
  id: Scalars['ID']
  meta: Scalars['JSON']
  modified: Scalars['String']
  openedDate: Scalars['DateTime']
  owner?: Maybe<Scalars['String']>
  ownerName?: Maybe<Scalars['String']>
  tags: Array<EndorsementListTagsEnum>
  title: Scalars['String']
}

export type EndorsementListControllerFindByTagsTagsEnum = 'generalPetition'

export type EndorsementListDtoTagsEnum = 'generalPetition'

export type EndorsementListOpen = {
  __typename?: 'EndorsementListOpen'
  adminLock: Scalars['Boolean']
  closedDate: Scalars['DateTime']
  description?: Maybe<Scalars['String']>
  id?: Maybe<Scalars['ID']>
  openedDate: Scalars['DateTime']
  tags?: Maybe<Array<EndorsementListOpenTagsEnum>>
  title: Scalars['String']
}

export type EndorsementListOpenTagsEnum = 'generalPetition'

export type EndorsementListTagsEnum = 'generalPetition'

export type EndorsementMetadata = {
  __typename?: 'EndorsementMetadata'
  fullName?: Maybe<Scalars['String']>
  locality?: Maybe<Scalars['String']>
}

export type EndorsementMetadataDtoFieldEnum = 'fullName' | 'showName'

export type EndorsementPaginationInput = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  limit?: InputMaybe<Scalars['Float']>
  tags: Array<EndorsementListControllerFindByTagsTagsEnum>
}

export type EnergyFundVehicleDetailsWithGrant = {
  __typename?: 'EnergyFundVehicleDetailsWithGrant'
  color?: Maybe<Scalars['String']>
  firstRegistrationDate?: Maybe<Scalars['DateTime']>
  hasReceivedSubsidy?: Maybe<Scalars['Boolean']>
  make?: Maybe<Scalars['String']>
  newRegistrationDate?: Maybe<Scalars['DateTime']>
  permno?: Maybe<Scalars['String']>
  requireMileage?: Maybe<Scalars['Boolean']>
  vehicleGrant?: Maybe<Scalars['Float']>
  vehicleGrantItemCode?: Maybe<Scalars['String']>
  vin?: Maybe<Scalars['String']>
}

export type EnergyFundVehicleGrant = {
  __typename?: 'EnergyFundVehicleGrant'
  hasReceivedSubsidy?: Maybe<Scalars['Boolean']>
  vehicleGrant?: Maybe<Scalars['Float']>
  vehicleGrantItemCode?: Maybe<Scalars['String']>
}

export type EnhancedAsset = {
  __typename?: 'EnhancedAsset'
  description: Scalars['String']
  file?: Maybe<Asset>
  genericTags: Array<GenericTag>
  id: Scalars['ID']
  organization: Organization
  releaseDate?: Maybe<Scalars['String']>
  title: Scalars['String']
}

export type EnhancedAssetSearchResult = {
  __typename?: 'EnhancedAssetSearchResult'
  items: Array<EnhancedAsset>
  total: Scalars['Float']
}

export type EntryTitle = {
  __typename?: 'EntryTitle'
  title: Scalars['String']
}

export type Environment = 'DEVELOPMENT' | 'PRODUCTION' | 'STAGING'

export type ErrorPage = {
  __typename?: 'ErrorPage'
  description?: Maybe<Html>
  errorCode: Scalars['String']
  id: Scalars['ID']
  title: Scalars['String']
}

export type EstateRelations = {
  __typename?: 'EstateRelations'
  relations: Array<Scalars['String']>
}

export type Event = {
  __typename?: 'Event'
  content?: Maybe<Array<Slice>>
  contentImage?: Maybe<Image>
  endDate: Scalars['String']
  featuredImage?: Maybe<Image>
  firstPublishedAt?: Maybe<Scalars['String']>
  fullWidthImageInContent?: Maybe<Scalars['Boolean']>
  id: Scalars['ID']
  location: EventLocation
  organization?: Maybe<Organization>
  slug: Scalars['String']
  startDate: Scalars['String']
  thumbnailImage?: Maybe<Image>
  time: EventTime
  title: Scalars['String']
  video?: Maybe<EmbeddedVideo>
}

export type EventList = {
  __typename?: 'EventList'
  items: Array<Event>
  total: Scalars['Int']
}

export type EventLocation = {
  __typename?: 'EventLocation'
  floor?: Maybe<Scalars['String']>
  freeText?: Maybe<Scalars['String']>
  postalCode?: Maybe<Scalars['String']>
  streetAddress?: Maybe<Scalars['String']>
  useFreeText?: Maybe<Scalars['Boolean']>
}

export type EventSlice = {
  __typename?: 'EventSlice'
  backgroundImage?: Maybe<Image>
  date: Scalars['String']
  id: Scalars['ID']
  link?: Maybe<Link>
  subtitle: Scalars['String']
  title: Scalars['String']
}

export type EventTime = {
  __typename?: 'EventTime'
  endTime?: Maybe<Scalars['String']>
  startTime?: Maybe<Scalars['String']>
}

export type ExistsEndorsementResponse = {
  __typename?: 'ExistsEndorsementResponse'
  hasEndorsed: Scalars['Boolean']
}

export type ExportEndorsementListInput = {
  fileType: Scalars['String']
  listId: Scalars['String']
}

export type ExportUrlResponse = {
  __typename?: 'ExportUrlResponse'
  url: Scalars['String']
}

export type ExternalLinks = {
  __typename?: 'ExternalLinks'
  bugReport?: Maybe<Scalars['String']>
  documentation?: Maybe<Scalars['String']>
  featureRequest?: Maybe<Scalars['String']>
  responsibleParty: Scalars['String']
}

export type FaqList = {
  __typename?: 'FaqList'
  id: Scalars['ID']
  questions: Array<QuestionAndAnswer>
  showTitle?: Maybe<Scalars['Boolean']>
  title: Scalars['String']
}

export type Featured = {
  __typename?: 'Featured'
  attention: Scalars['Boolean']
  thing?: Maybe<ReferenceLink>
  title: Scalars['String']
}

export type FeaturedArticles = {
  __typename?: 'FeaturedArticles'
  articles: Array<ArticleReference>
  automaticallyFetchArticles?: Maybe<Scalars['Boolean']>
  hasBorderAbove?: Maybe<Scalars['Boolean']>
  id: Scalars['ID']
  image?: Maybe<Image>
  introText?: Maybe<Array<Slice>>
  link?: Maybe<Link>
  resolvedArticles: Array<Article>
  sortBy: Scalars['String']
  title: Scalars['String']
}

export type FeaturedEvents = {
  __typename?: 'FeaturedEvents'
  id: Scalars['ID']
  namespace: Scalars['JSONObject']
  noEventsFoundText?: Maybe<Array<Slice>>
  organization?: Maybe<Scalars['String']>
  resolvedEventList: EventList
}

export type FeaturedLinks = {
  __typename?: 'FeaturedLinks'
  featuredLinks?: Maybe<Array<Featured>>
  id: Scalars['ID']
  title: Scalars['String']
}

export type FeaturedSupportQnAs = {
  __typename?: 'FeaturedSupportQNAs'
  automaticallyFetchSupportQNAs?: Maybe<Scalars['Boolean']>
  id: Scalars['ID']
  link?: Maybe<Link>
  renderedTitle?: Maybe<Scalars['String']>
  resolvedSupportQNAs: Array<SupportQna>
  supportQNAs?: Maybe<Array<SupportQna>>
}

export type FetchEducationSignedLicenseUrlInput = {
  licenseId: Scalars['String']
}

export type FinanceAssessmentYears = {
  __typename?: 'FinanceAssessmentYears'
  year?: Maybe<Array<Scalars['String']>>
}

export type FinanceChargeItemSubjectsByYear = {
  __typename?: 'FinanceChargeItemSubjectsByYear'
  chargeItemSubjects: Array<FinanceChargeItemSubjectsByYearData>
  more?: Maybe<Scalars['Boolean']>
  nextKey?: Maybe<Scalars['String']>
}

export type FinanceChargeItemSubjectsByYearData = {
  __typename?: 'FinanceChargeItemSubjectsByYearData'
  chargeItemSubject: Scalars['String']
  lastMoveDate: Scalars['String']
  periods: Array<FinanceChargeItemSubjectsByYearPeriodData>
  totalAmount: Scalars['Float']
}

export type FinanceChargeItemSubjectsByYearPeriodData = {
  __typename?: 'FinanceChargeItemSubjectsByYearPeriodData'
  amount: Scalars['String']
  description: Scalars['String']
  lastMoveDate: Scalars['String']
  period: Scalars['String']
}

export type FinanceChargeTypeDetails = {
  __typename?: 'FinanceChargeTypeDetails'
  chargeType: Array<FinanceChargeTypeDetailsData>
}

export type FinanceChargeTypeDetailsData = {
  __typename?: 'FinanceChargeTypeDetailsData'
  chargeItemSubjectDescription: Scalars['String']
  chargeItemSubjects: Scalars['String']
  iD: Scalars['String']
  lastMovementDate: Scalars['String']
  name: Scalars['String']
}

export type FinanceChargeTypePeriodSubject = {
  __typename?: 'FinanceChargeTypePeriodSubject'
  message?: Maybe<Scalars['String']>
  more?: Maybe<Scalars['Boolean']>
  nextKey?: Maybe<Scalars['String']>
  records: Array<FinanceChargeTypePeriodSubjectData>
}

export type FinanceChargeTypePeriodSubjectData = {
  __typename?: 'FinanceChargeTypePeriodSubjectData'
  accountReference: Scalars['String']
  actionCategory: Scalars['String']
  amount: Scalars['Float']
  category: Scalars['String']
  chargeItemSubject: Scalars['String']
  chargeType: Scalars['String']
  collectingOrganization: Scalars['String']
  createDate: Scalars['String']
  createTime: Scalars['String']
  itemCode: Scalars['String']
  performingOrganization: Scalars['String']
  period: Scalars['String']
  periodType: Scalars['String']
  reference: Scalars['String']
  referenceToLevy: Scalars['String']
  subCategory: Scalars['String']
  valueDate: Scalars['String']
}

export type FinanceChargeTypesByYear = {
  __typename?: 'FinanceChargeTypesByYear'
  chargeType?: Maybe<Array<FinanceChargeTypesByYearData>>
}

export type FinanceChargeTypesByYearData = {
  __typename?: 'FinanceChargeTypesByYearData'
  iD: Scalars['String']
  name: Scalars['String']
}

export type FinanceCustomerChargeType = {
  __typename?: 'FinanceCustomerChargeType'
  chargeType: Array<FinanceCustomerChargeTypeItem>
}

export type FinanceCustomerChargeTypeItem = {
  __typename?: 'FinanceCustomerChargeTypeItem'
  id: Scalars['String']
  name: Scalars['String']
}

export type FinanceCustomerRecords = {
  __typename?: 'FinanceCustomerRecords'
  records?: Maybe<Array<FinanceCustomerRecordsItem>>
}

export type FinanceCustomerRecordsItem = {
  __typename?: 'FinanceCustomerRecordsItem'
  accountReference: Scalars['String']
  actionCategory?: Maybe<Scalars['String']>
  amount: Scalars['Float']
  category: Scalars['String']
  chargeItemSubject: Scalars['String']
  chargeType: Scalars['String']
  collectingOrganization: Scalars['String']
  createDate: Scalars['String']
  createTime: Scalars['String']
  itemCode: Scalars['String']
  performingOrganization: Scalars['String']
  period: Scalars['String']
  periodType: Scalars['String']
  reference: Scalars['String']
  referenceToLevy: Scalars['String']
  subCategory: Scalars['String']
  valueDate: Scalars['String']
}

export type FinanceCustomerTapsControlModel = {
  __typename?: 'FinanceCustomerTapsControlModel'
  RecordsTap: Scalars['Boolean']
  employeeClaimsTap: Scalars['Boolean']
  localTaxTap: Scalars['Boolean']
  schedulesTap: Scalars['Boolean']
}

export type FinanceDebtStatus = {
  __typename?: 'FinanceDebtStatus'
  approvedSchedule: Scalars['Float']
  notPossibleToSchedule: Scalars['Float']
  possibleToSchedule: Scalars['Float']
  totalAmount: Scalars['Float']
}

export type FinanceDebtStatusModel = {
  __typename?: 'FinanceDebtStatusModel'
  myDebtStatus: Array<FinanceDebtStatus>
}

export type FinanceDocumentData = {
  __typename?: 'FinanceDocumentData'
  document: Scalars['String']
  type: Scalars['String']
}

export type FinanceDocumentModel = {
  __typename?: 'FinanceDocumentModel'
  docment: FinanceDocumentData
}

export type FinanceDocumentsListItem = {
  __typename?: 'FinanceDocumentsListItem'
  amount: Scalars['Float']
  date: Scalars['String']
  dateOpen: Scalars['String']
  id: Scalars['String']
  note?: Maybe<Scalars['String']>
  sender: Scalars['String']
  type: Scalars['String']
}

export type FinanceDocumentsListModel = {
  __typename?: 'FinanceDocumentsListModel'
  documentsList: Array<FinanceDocumentsListItem>
  downloadServiceURL?: Maybe<Scalars['String']>
}

export type FinancialStatementsInaoClientType = {
  __typename?: 'FinancialStatementsInaoClientType'
  label: Scalars['String']
  value: Scalars['String']
}

export type FinancialStatementsInaoConfig = {
  __typename?: 'FinancialStatementsInaoConfig'
  key: Scalars['String']
  value: Scalars['String']
}

export type FinancialStatementsInaoElection = {
  __typename?: 'FinancialStatementsInaoElection'
  electionDate: Scalars['DateTime']
  electionId: Scalars['String']
  genitiveName?: Maybe<Scalars['String']>
  name: Scalars['String']
}

export type FinancialStatementsInaoTaxInfo = {
  __typename?: 'FinancialStatementsInaoTaxInfo'
  key: Scalars['Float']
  value: Scalars['Float']
}

export type FindEndorsementListInput = {
  listId: Scalars['String']
}

/** Possible types of fishing license codes */
export type FishingLicenseCodeType =
  | 'catchMark'
  | 'commonWhelk'
  | 'costalFisheries'
  | 'crustaceans'
  | 'fishWithDanishSeine'
  | 'freetime'
  | 'freetimeHook'
  | 'freetimeHookMed'
  | 'greyslepp'
  | 'hookCatchLimit'
  | 'lumpfish'
  | 'northIceOceanCod'
  | 'oceanQuahogin'
  | 'unknown'

export type FishingLicenseDateRestriction = {
  __typename?: 'FishingLicenseDateRestriction'
  dateFrom?: Maybe<Scalars['DateTime']>
  dateTo?: Maybe<Scalars['DateTime']>
}

export type FishingLicenseDeprivation = {
  __typename?: 'FishingLicenseDeprivation'
  explanation: Scalars['String']
  invalidFrom?: Maybe<Scalars['DateTime']>
  validFrom?: Maybe<Scalars['DateTime']>
}

export type FishingLicenseInfo = {
  __typename?: 'FishingLicenseInfo'
  chargeType: Scalars['String']
  code: FishingLicenseCodeType
  name: Scalars['String']
}

export type FishingLicenseLicense = {
  __typename?: 'FishingLicenseLicense'
  answer: Scalars['Boolean']
  areas?: Maybe<Array<FishingLicenseListOptions>>
  attachmentInfo?: Maybe<Scalars['String']>
  dateRestriction?: Maybe<FishingLicenseDateRestriction>
  fishingLicenseInfo: FishingLicenseInfo
  reasons: Array<FishingLicenseReason>
}

export type FishingLicenseListOptions = {
  __typename?: 'FishingLicenseListOptions'
  dateRestriction?: Maybe<FishingLicenseDateRestriction>
  description?: Maybe<Scalars['String']>
  disabled: Scalars['Boolean']
  invalidOption: Scalars['Boolean']
  key?: Maybe<Scalars['String']>
}

export type FishingLicenseReason = {
  __typename?: 'FishingLicenseReason'
  description: Scalars['String']
  directions: Scalars['String']
}

export type FishingLicenseSeaworthiness = {
  __typename?: 'FishingLicenseSeaworthiness'
  validTo: Scalars['DateTime']
}

export type FishingLicenseShip = {
  __typename?: 'FishingLicenseShip'
  deprivations: Array<FishingLicenseDeprivation>
  features: Scalars['String']
  fishingLicenses: Array<FishingLicenseInfo>
  grossTons: Scalars['Float']
  homePort: Scalars['String']
  length: Scalars['Float']
  name: Scalars['String']
  registrationNumber: Scalars['Float']
  seaworthiness: FishingLicenseSeaworthiness
}

export type FiskistofaCatchQuotaCategory = {
  __typename?: 'FiskistofaCatchQuotaCategory'
  allocation?: Maybe<Scalars['Float']>
  betweenShips?: Maybe<Scalars['Float']>
  betweenYears?: Maybe<Scalars['Float']>
  catch?: Maybe<Scalars['Float']>
  catchQuota?: Maybe<Scalars['Float']>
  codEquivalent?: Maybe<Scalars['Float']>
  displacement?: Maybe<Scalars['Float']>
  excessCatch?: Maybe<Scalars['Float']>
  id?: Maybe<Scalars['Float']>
  name: Scalars['String']
  newStatus?: Maybe<Scalars['Float']>
  nextYear?: Maybe<Scalars['Float']>
  specialAlloction?: Maybe<Scalars['Float']>
  status?: Maybe<Scalars['Float']>
  unused?: Maybe<Scalars['Float']>
}

export type FiskistofaCategoryChange = {
  catchChange: Scalars['Float']
  catchQuotaChange: Scalars['Float']
  id: Scalars['Float']
}

export type FiskistofaExtendedCatchQuotaCategory = {
  __typename?: 'FiskistofaExtendedCatchQuotaCategory'
  allocatedCatchQuota?: Maybe<Scalars['Float']>
  allocation?: Maybe<Scalars['Float']>
  betweenShips?: Maybe<Scalars['Float']>
  betweenYears?: Maybe<Scalars['Float']>
  catch?: Maybe<Scalars['Float']>
  catchQuota?: Maybe<Scalars['Float']>
  codEquivalent?: Maybe<Scalars['Float']>
  displacement?: Maybe<Scalars['Float']>
  excessCatch?: Maybe<Scalars['Float']>
  id?: Maybe<Scalars['Float']>
  name: Scalars['String']
  newStatus?: Maybe<Scalars['Float']>
  nextYear?: Maybe<Scalars['Float']>
  nextYearFromQuota?: Maybe<Scalars['Float']>
  nextYearQuota?: Maybe<Scalars['Float']>
  percentNextYearFromQuota?: Maybe<Scalars['Float']>
  percentNextYearQuota?: Maybe<Scalars['Float']>
  quotaShare?: Maybe<Scalars['Float']>
  specialAlloction?: Maybe<Scalars['Float']>
  status?: Maybe<Scalars['Float']>
  totalCatchQuota?: Maybe<Scalars['Float']>
  unused?: Maybe<Scalars['Float']>
}

export type FiskistofaExtendedShipStatusInformation = {
  __typename?: 'FiskistofaExtendedShipStatusInformation'
  catchQuotaCategories?: Maybe<Array<FiskistofaExtendedCatchQuotaCategory>>
  shipInformation?: Maybe<FiskistofaShip>
}

export type FiskistofaExtendedShipStatusInformationResponse = {
  __typename?: 'FiskistofaExtendedShipStatusInformationResponse'
  fiskistofaShipStatus?: Maybe<FiskistofaExtendedShipStatusInformation>
}

export type FiskistofaExtendedShipStatusInformationUpdate = {
  __typename?: 'FiskistofaExtendedShipStatusInformationUpdate'
  catchQuotaCategories?: Maybe<Array<FiskistofaCatchQuotaCategory>>
  shipInformation?: Maybe<FiskistofaShip>
}

export type FiskistofaExtendedShipStatusInformationUpdateResponse = {
  __typename?: 'FiskistofaExtendedShipStatusInformationUpdateResponse'
  fiskistofaShipStatus?: Maybe<FiskistofaExtendedShipStatusInformationUpdate>
}

export type FiskistofaGetQuotaTypesForCalendarYearInput = {
  year: Scalars['String']
}

export type FiskistofaGetQuotaTypesForTimePeriodInput = {
  timePeriod: Scalars['String']
}

export type FiskistofaGetShipStatusForCalendarYearInput = {
  shipNumber: Scalars['Float']
  year: Scalars['String']
}

export type FiskistofaGetShipStatusForTimePeriodInput = {
  shipNumber: Scalars['Float']
  timePeriod: Scalars['String']
}

export type FiskistofaGetShipsInput = {
  shipName: Scalars['String']
}

export type FiskistofaGetSingleShipInput = {
  shipNumber: Scalars['Float']
}

export type FiskistofaQuotaCategoryChange = {
  allocatedCatchQuota?: InputMaybe<Scalars['Float']>
  id: Scalars['Float']
  nextYearFromQuota?: InputMaybe<Scalars['Float']>
  nextYearQuota?: InputMaybe<Scalars['Float']>
  quotaShare?: InputMaybe<Scalars['Float']>
}

export type FiskistofaQuotaStatus = {
  __typename?: 'FiskistofaQuotaStatus'
  allocatedCatchQuota?: Maybe<Scalars['Float']>
  excessCatch?: Maybe<Scalars['Float']>
  id?: Maybe<Scalars['Float']>
  newStatus?: Maybe<Scalars['Float']>
  nextYearCatchQuota?: Maybe<Scalars['Float']>
  nextYearFromQuota?: Maybe<Scalars['Float']>
  nextYearQuota?: Maybe<Scalars['Float']>
  percentCatchQuotaFrom?: Maybe<Scalars['Float']>
  percentCatchQuotaTo?: Maybe<Scalars['Float']>
  quotaShare?: Maybe<Scalars['Float']>
  totalCatchQuota?: Maybe<Scalars['Float']>
  unused?: Maybe<Scalars['Float']>
}

export type FiskistofaQuotaStatusResponse = {
  __typename?: 'FiskistofaQuotaStatusResponse'
  fiskistofaShipQuotaStatus?: Maybe<FiskistofaQuotaStatus>
}

export type FiskistofaQuotaType = {
  __typename?: 'FiskistofaQuotaType'
  codEquivalent?: Maybe<Scalars['Float']>
  id: Scalars['Float']
  name: Scalars['String']
  totalCatchQuota?: Maybe<Scalars['Float']>
}

export type FiskistofaQuotaTypeResponse = {
  __typename?: 'FiskistofaQuotaTypeResponse'
  fiskistofaQuotaTypes?: Maybe<Array<FiskistofaQuotaType>>
}

export type FiskistofaShip = {
  __typename?: 'FiskistofaShip'
  id: Scalars['String']
  name: Scalars['String']
  shipNumber?: Maybe<Scalars['Float']>
  timePeriod: Scalars['String']
}

export type FiskistofaShipBasicInfo = {
  __typename?: 'FiskistofaShipBasicInfo'
  homePort: Scalars['String']
  id: Scalars['Float']
  name: Scalars['String']
  operator: Scalars['String']
  typeOfVessel: Scalars['String']
}

export type FiskistofaShipBasicInfoResponse = {
  __typename?: 'FiskistofaShipBasicInfoResponse'
  fiskistofaShips?: Maybe<Array<FiskistofaShipBasicInfo>>
}

export type FiskistofaShipStatusInformation = {
  __typename?: 'FiskistofaShipStatusInformation'
  catchQuotaCategories?: Maybe<Array<FiskistofaCatchQuotaCategory>>
  shipInformation?: Maybe<FiskistofaShip>
}

export type FiskistofaShipStatusInformationResponse = {
  __typename?: 'FiskistofaShipStatusInformationResponse'
  fiskistofaShipStatus?: Maybe<FiskistofaShipStatusInformation>
}

export type FiskistofaSingleShip = {
  __typename?: 'FiskistofaSingleShip'
  grossTons?: Maybe<Scalars['Float']>
  name: Scalars['String']
  operatingCategory: Scalars['String']
  operatorName: Scalars['String']
  operatorSsn: Scalars['String']
  ownerName: Scalars['String']
  ownerSsn: Scalars['String']
  shipNumber?: Maybe<Scalars['Float']>
}

export type FiskistofaSingleShipResponse = {
  __typename?: 'FiskistofaSingleShipResponse'
  fiskistofaSingleShip?: Maybe<FiskistofaSingleShip>
}

export type FiskistofaUpdateShipQuotaStatusForTimePeriodInput = {
  change: FiskistofaQuotaCategoryChange
  shipNumber: Scalars['Float']
  timePeriod: Scalars['String']
}

export type FiskistofaUpdateShipStatusForCalendarYearInput = {
  changes: Array<FiskistofaCategoryChange>
  shipNumber: Scalars['Float']
  year: Scalars['String']
}

export type FiskistofaUpdateShipStatusForTimePeriodInput = {
  changes: Array<FiskistofaCategoryChange>
  shipNumber: Scalars['Float']
  timePeriod: Scalars['String']
}

export type FooterItem = {
  __typename?: 'FooterItem'
  content?: Maybe<Array<Slice>>
  id: Scalars['ID']
  link?: Maybe<Link>
  serviceWebContent?: Maybe<Array<Slice>>
  title: Scalars['String']
}

export type Form = {
  __typename?: 'Form'
  aboutYouHeadingText: Scalars['String']
  defaultFieldNamespace?: Maybe<Scalars['JSON']>
  fields: Array<FormField>
  id: Scalars['ID']
  intro: Scalars['String']
  questionsHeadingText: Scalars['String']
  recipientFormFieldDecider?: Maybe<FormField>
  recipientList?: Maybe<Array<Scalars['String']>>
  successText: Scalars['String']
  title: Scalars['String']
}

export type FormField = {
  __typename?: 'FormField'
  emailConfig?: Maybe<Scalars['JSON']>
  id: Scalars['ID']
  informationText?: Maybe<Scalars['String']>
  name?: Maybe<Scalars['String']>
  options: Array<Scalars['String']>
  placeholder: Scalars['String']
  required: Scalars['Boolean']
  title: Scalars['String']
  type: Scalars['String']
}

export type FormSystemApplicant = {
  __typename?: 'FormSystemApplicant'
  applicantTypeId?: Maybe<Scalars['String']>
  description?: Maybe<FormSystemLanguageType>
  id: Scalars['String']
  name?: Maybe<FormSystemLanguageType>
  nameSuggestions?: Maybe<Array<FormSystemLanguageType>>
}

export type FormSystemApplication = {
  __typename?: 'FormSystemApplication'
  completed?: Maybe<Array<Maybe<Scalars['String']>>>
  created?: Maybe<Scalars['DateTime']>
  dependencies?: Maybe<Array<Maybe<FormSystemDependency>>>
  events?: Maybe<Array<Maybe<FormSystemApplicationEventDto>>>
  formId?: Maybe<Scalars['String']>
  formName?: Maybe<FormSystemLanguageType>
  id: Scalars['String']
  isTest?: Maybe<Scalars['Boolean']>
  modified?: Maybe<Scalars['DateTime']>
  organizationName?: Maybe<FormSystemLanguageType>
  sections?: Maybe<Array<Maybe<FormSystemSection>>>
  slug?: Maybe<Scalars['String']>
  status?: Maybe<Scalars['String']>
  submittedAt?: Maybe<Scalars['DateTime']>
}

export type FormSystemApplicationEventDto = {
  __typename?: 'FormSystemApplicationEventDto'
  created?: Maybe<Scalars['DateTime']>
  eventType?: Maybe<Scalars['String']>
  isFileEvent?: Maybe<Scalars['Boolean']>
}

export type FormSystemApplicationInput = {
  id?: InputMaybe<Scalars['String']>
}

export type FormSystemCreateFieldInput = {
  createFieldDto?: InputMaybe<CreateFormSystemFieldDtoInput>
}

export type FormSystemCreateFormInput = {
  organizationNationalId?: InputMaybe<Scalars['String']>
}

export type FormSystemCreateListItemDtoInput = {
  displayOrder?: InputMaybe<Scalars['Int']>
  fieldId?: InputMaybe<Scalars['String']>
}

export type FormSystemCreateListItemInput = {
  createListItemDto?: InputMaybe<FormSystemCreateListItemDtoInput>
}

export type FormSystemCreateScreenDtoInput = {
  displayOrder?: InputMaybe<Scalars['Int']>
  sectionId?: InputMaybe<Scalars['String']>
}

export type FormSystemCreateScreenInput = {
  createScreenDto?: InputMaybe<FormSystemCreateScreenDtoInput>
}

export type FormSystemCreateSectionDtoInput = {
  displayOrder?: InputMaybe<Scalars['Int']>
  formId?: InputMaybe<Scalars['String']>
}

export type FormSystemCreateSectionInput = {
  createSectionDto?: InputMaybe<FormSystemCreateSectionDtoInput>
}

export type FormSystemDeleteFieldInput = {
  id?: InputMaybe<Scalars['String']>
}

export type FormSystemDeleteFormInput = {
  id?: InputMaybe<Scalars['String']>
}

export type FormSystemDeleteListItemInput = {
  id?: InputMaybe<Scalars['String']>
}

export type FormSystemDeleteScreenInput = {
  id: Scalars['String']
}

export type FormSystemDeleteSectionInput = {
  id?: InputMaybe<Scalars['String']>
}

export type FormSystemDependency = {
  __typename?: 'FormSystemDependency'
  childProps?: Maybe<Array<Maybe<Scalars['String']>>>
  isSelected?: Maybe<Scalars['Boolean']>
  parentProp?: Maybe<Scalars['String']>
}

export type FormSystemDependencyInput = {
  childProps?: InputMaybe<Array<InputMaybe<Scalars['String']>>>
  isSelected?: InputMaybe<Scalars['Boolean']>
  parentProp?: InputMaybe<Scalars['String']>
}

export type FormSystemField = {
  __typename?: 'FormSystemField'
  description?: Maybe<FormSystemLanguageType>
  displayOrder?: Maybe<Scalars['Int']>
  fieldSettings?: Maybe<FormSystemFieldSettings>
  fieldType?: Maybe<Scalars['String']>
  id: Scalars['String']
  isHidden?: Maybe<Scalars['Boolean']>
  isPartOfMultiset: Scalars['Boolean']
  isRequired: Scalars['Boolean']
  list?: Maybe<Array<Maybe<FormSystemListItem>>>
  name: FormSystemLanguageType
  screenId: Scalars['String']
  values?: Maybe<Array<Maybe<FormSystemValueDto>>>
}

export type FormSystemFieldDisplayOrderInput = {
  id?: InputMaybe<Scalars['String']>
  screenId?: InputMaybe<Scalars['String']>
}

export type FormSystemFieldSettings = {
  __typename?: 'FormSystemFieldSettings'
  buttonText?: Maybe<FormSystemLanguageType>
  fileMaxSize?: Maybe<Scalars['Int']>
  fileTypes?: Maybe<Scalars['String']>
  hasLink?: Maybe<Scalars['Boolean']>
  hasPropertyInput?: Maybe<Scalars['Boolean']>
  hasPropertyList?: Maybe<Scalars['Boolean']>
  isLarge?: Maybe<Scalars['Boolean']>
  list?: Maybe<Array<Maybe<FormSystemListItem>>>
  listType?: Maybe<Scalars['String']>
  maxAmount?: Maybe<Scalars['Int']>
  maxDate?: Maybe<Scalars['DateTime']>
  maxFiles?: Maybe<Scalars['Int']>
  maxLength?: Maybe<Scalars['Int']>
  maxValue?: Maybe<Scalars['Int']>
  minAmount?: Maybe<Scalars['Int']>
  minDate?: Maybe<Scalars['DateTime']>
  minLength?: Maybe<Scalars['Int']>
  minValue?: Maybe<Scalars['Int']>
  timeInterval?: Maybe<Scalars['String']>
  url?: Maybe<Scalars['String']>
  year?: Maybe<Scalars['Int']>
}

export type FormSystemFieldSettingsInput = {
  buttonText?: InputMaybe<FormSystemLanguageTypeInput>
  fileMaxSize?: InputMaybe<Scalars['Int']>
  fileTypes?: InputMaybe<Scalars['String']>
  hasLink?: InputMaybe<Scalars['Boolean']>
  hasPropertyInput?: InputMaybe<Scalars['Boolean']>
  hasPropertyList?: InputMaybe<Scalars['Boolean']>
  isLarge?: InputMaybe<Scalars['Boolean']>
  list?: InputMaybe<Array<InputMaybe<FormSystemListItemInput>>>
  listType?: InputMaybe<Scalars['String']>
  maxAmount?: InputMaybe<Scalars['Int']>
  maxDate?: InputMaybe<Scalars['DateTime']>
  maxFiles?: InputMaybe<Scalars['Int']>
  maxLength?: InputMaybe<Scalars['Int']>
  maxValue?: InputMaybe<Scalars['Int']>
  minAmount?: InputMaybe<Scalars['Int']>
  minDate?: InputMaybe<Scalars['DateTime']>
  minLength?: InputMaybe<Scalars['Int']>
  minValue?: InputMaybe<Scalars['Int']>
  timeInterval?: InputMaybe<Scalars['String']>
  url?: InputMaybe<Scalars['String']>
  year?: InputMaybe<Scalars['Int']>
}

export type FormSystemFieldType = {
  __typename?: 'FormSystemFieldType'
  description: FormSystemLanguageType
  fieldSettings?: Maybe<FormSystemFieldSettings>
  id: Scalars['String']
  isCommon: Scalars['Boolean']
  name: FormSystemLanguageType
  values?: Maybe<Array<Maybe<FormSystemValue>>>
}

export type FormSystemForm = {
  __typename?: 'FormSystemForm'
  applicantTypes?: Maybe<Array<Maybe<FormSystemFormApplicant>>>
  applicationDaysToRemove: Scalars['Int']
  beenPublished?: Maybe<Scalars['Boolean']>
  certificationTypes?: Maybe<Array<Maybe<FormSystemFormCertificationTypeDto>>>
  completedMessage?: Maybe<FormSystemLanguageType>
  created: Scalars['DateTime']
  dependencies?: Maybe<Array<Maybe<FormSystemDependency>>>
  derivedFrom?: Maybe<Scalars['Int']>
  fields?: Maybe<Array<Maybe<FormSystemField>>>
  hasPayment?: Maybe<Scalars['Boolean']>
  id: Scalars['String']
  invalidationDate?: Maybe<Scalars['DateTime']>
  isTranslated: Scalars['Boolean']
  modified: Scalars['DateTime']
  name: FormSystemLanguageType
  organizationDisplayName?: Maybe<FormSystemLanguageType>
  organizationId?: Maybe<Scalars['String']>
  organizationNationalId?: Maybe<Scalars['String']>
  organizationTitle?: Maybe<Scalars['String']>
  organizationTitleEn?: Maybe<Scalars['String']>
  screens?: Maybe<Array<Maybe<FormSystemScreen>>>
  sections?: Maybe<Array<Maybe<FormSystemSection>>>
  slug?: Maybe<Scalars['String']>
  status: Scalars['String']
  stopProgressOnValidatingScreen: Scalars['Boolean']
  urls?: Maybe<Array<Maybe<FormSystemFormUrl>>>
}

export type FormSystemFormApplicant = {
  __typename?: 'FormSystemFormApplicant'
  applicantTypeId?: Maybe<Scalars['String']>
  description?: Maybe<FormSystemLanguageType>
  id: Scalars['String']
  name?: Maybe<FormSystemLanguageType>
  nameSuggestions?: Maybe<Array<FormSystemLanguageType>>
}

export type FormSystemFormCertificationType = {
  __typename?: 'FormSystemFormCertificationType'
  certificationTypeId?: Maybe<Scalars['String']>
  description?: Maybe<FormSystemLanguageType>
  id?: Maybe<Scalars['String']>
  isCommon?: Maybe<Scalars['Boolean']>
  name?: Maybe<FormSystemLanguageType>
  organizationCertificationId?: Maybe<Scalars['String']>
}

export type FormSystemFormCertificationTypeDto = {
  __typename?: 'FormSystemFormCertificationTypeDto'
  certificationTypeId?: Maybe<Scalars['String']>
  id?: Maybe<Scalars['String']>
}

export type FormSystemFormResponse = {
  __typename?: 'FormSystemFormResponse'
  applicantTypes?: Maybe<Array<Maybe<FormSystemFormApplicant>>>
  certificationTypes?: Maybe<Array<Maybe<FormSystemFormCertificationType>>>
  fieldTypes?: Maybe<Array<Maybe<FormSystemFieldType>>>
  form?: Maybe<FormSystemForm>
  forms?: Maybe<Array<Maybe<FormSystemForm>>>
  listTypes?: Maybe<Array<Maybe<FormSystemListType>>>
  organizations?: Maybe<Array<Maybe<FormSystemOption>>>
  urls?: Maybe<Array<Maybe<FormSystemOrganizationUrl>>>
}

export type FormSystemFormUrl = {
  __typename?: 'FormSystemFormUrl'
  id?: Maybe<Scalars['String']>
  isTest?: Maybe<Scalars['Boolean']>
  isXroad?: Maybe<Scalars['Boolean']>
  method?: Maybe<Scalars['String']>
  organizationUrlId?: Maybe<Scalars['String']>
  type?: Maybe<Scalars['String']>
  url?: Maybe<Scalars['String']>
}

export type FormSystemFormUrlInput = {
  id?: InputMaybe<Scalars['String']>
  isTest?: InputMaybe<Scalars['Boolean']>
  isXroad?: InputMaybe<Scalars['Boolean']>
  method?: InputMaybe<Scalars['String']>
  organizationUrlId?: InputMaybe<Scalars['String']>
  type?: InputMaybe<Scalars['String']>
  url?: InputMaybe<Scalars['String']>
}

export type FormSystemGetFormInput = {
  id?: InputMaybe<Scalars['String']>
}

export type FormSystemGetFormsInput = {
  nationalId?: InputMaybe<Scalars['String']>
}

export type FormSystemGetOrganizationAdminInput = {
  nationalId: Scalars['String']
}

export type FormSystemGetOrganizationInput = {
  id?: InputMaybe<Scalars['String']>
}

export type FormSystemLanguageType = {
  __typename?: 'FormSystemLanguageType'
  en?: Maybe<Scalars['String']>
  is?: Maybe<Scalars['String']>
}

export type FormSystemLanguageTypeInput = {
  en?: InputMaybe<Scalars['String']>
  is?: InputMaybe<Scalars['String']>
}

export type FormSystemListItem = {
  __typename?: 'FormSystemListItem'
  description?: Maybe<FormSystemLanguageType>
  displayOrder?: Maybe<Scalars['Int']>
  id: Scalars['String']
  isSelected?: Maybe<Scalars['Boolean']>
  label?: Maybe<FormSystemLanguageType>
  value?: Maybe<Scalars['String']>
}

export type FormSystemListItemDisplayOrderInput = {
  id?: InputMaybe<Scalars['String']>
}

export type FormSystemListItemInput = {
  description?: InputMaybe<FormSystemLanguageTypeInput>
  displayOrder?: InputMaybe<Scalars['Int']>
  id?: InputMaybe<Scalars['String']>
  isSelected?: InputMaybe<Scalars['Boolean']>
  label?: InputMaybe<FormSystemLanguageTypeInput>
  value?: InputMaybe<Scalars['String']>
}

export type FormSystemListType = {
  __typename?: 'FormSystemListType'
  description?: Maybe<FormSystemLanguageType>
  id?: Maybe<Scalars['String']>
  isCommon?: Maybe<Scalars['Boolean']>
  name?: Maybe<FormSystemLanguageType>
  type?: Maybe<Scalars['String']>
}

export type FormSystemMonth = {
  __typename?: 'FormSystemMonth'
  amount?: Maybe<Scalars['Int']>
  days?: Maybe<Array<Scalars['Int']>>
  month?: Maybe<Scalars['Int']>
}

export type FormSystemOption = {
  __typename?: 'FormSystemOption'
  isSelected: Scalars['Boolean']
  label: Scalars['String']
  value: Scalars['String']
}

export type FormSystemOrganization = {
  __typename?: 'FormSystemOrganization'
  forms?: Maybe<Array<Maybe<FormSystemForm>>>
  id: Scalars['String']
  name?: Maybe<FormSystemLanguageType>
  nationalId?: Maybe<Scalars['String']>
}

export type FormSystemOrganizationAdmin = {
  __typename?: 'FormSystemOrganizationAdmin'
  certificationTypes?: Maybe<Array<Maybe<FormSystemPermissionType>>>
  fieldTypes?: Maybe<Array<Maybe<FormSystemPermissionType>>>
  listTypes?: Maybe<Array<Maybe<FormSystemPermissionType>>>
  organizationId?: Maybe<Scalars['String']>
  organizations?: Maybe<Array<Maybe<FormSystemOption>>>
  selectedCertificationTypes?: Maybe<Array<Maybe<Scalars['String']>>>
  selectedFieldTypes?: Maybe<Array<Maybe<Scalars['String']>>>
  selectedListTypes?: Maybe<Array<Maybe<Scalars['String']>>>
}

export type FormSystemOrganizationPermissionDto = {
  __typename?: 'FormSystemOrganizationPermissionDto'
  permission?: Maybe<Scalars['String']>
}

export type FormSystemOrganizationPermissionDtoInput = {
  organizationId?: InputMaybe<Scalars['String']>
  permission?: InputMaybe<Scalars['String']>
}

export type FormSystemOrganizationUrl = {
  __typename?: 'FormSystemOrganizationUrl'
  id?: Maybe<Scalars['String']>
  isTest?: Maybe<Scalars['Boolean']>
  isXroad?: Maybe<Scalars['Boolean']>
  method?: Maybe<Scalars['String']>
  type?: Maybe<Scalars['String']>
  url?: Maybe<Scalars['String']>
}

export type FormSystemPermissionType = {
  __typename?: 'FormSystemPermissionType'
  description?: Maybe<FormSystemLanguageType>
  id?: Maybe<Scalars['String']>
  isCommon?: Maybe<Scalars['Boolean']>
  name?: Maybe<FormSystemLanguageType>
}

export type FormSystemScreen = {
  __typename?: 'FormSystemScreen'
  callRuleset?: Maybe<Scalars['Boolean']>
  displayOrder?: Maybe<Scalars['Int']>
  fields?: Maybe<Array<Maybe<FormSystemField>>>
  id: Scalars['String']
  isHidden?: Maybe<Scalars['Boolean']>
  multiset?: Maybe<Scalars['Int']>
  name?: Maybe<FormSystemLanguageType>
  sectionId: Scalars['String']
}

export type FormSystemScreenDisplayOrderInput = {
  id?: InputMaybe<Scalars['String']>
  sectionId?: InputMaybe<Scalars['String']>
}

export type FormSystemSection = {
  __typename?: 'FormSystemSection'
  displayOrder?: Maybe<Scalars['Int']>
  id: Scalars['String']
  isCompleted?: Maybe<Scalars['Boolean']>
  isHidden?: Maybe<Scalars['Boolean']>
  name?: Maybe<FormSystemLanguageType>
  screens?: Maybe<Array<Maybe<FormSystemScreen>>>
  sectionType?: Maybe<Scalars['String']>
  waitingText?: Maybe<FormSystemLanguageType>
}

export type FormSystemSectionDisplayOrderInput = {
  id?: InputMaybe<Scalars['String']>
}

export type FormSystemTranslation = {
  __typename?: 'FormSystemTranslation'
  model: Scalars['String']
  sourceLanguageCode: Scalars['String']
  targetLanguageCode: Scalars['String']
  translations: Array<Scalars['JSON']>
}

export type FormSystemTranslationInput = {
  textToTranslate?: InputMaybe<Scalars['String']>
}

export type FormSystemUpdateFieldDtoInput = {
  description?: InputMaybe<FormSystemLanguageTypeInput>
  fieldSettings?: InputMaybe<FormSystemFieldSettingsInput>
  fieldType?: InputMaybe<Scalars['String']>
  isHidden?: InputMaybe<Scalars['Boolean']>
  isPartOfMultiset?: InputMaybe<Scalars['Boolean']>
  isRequired?: InputMaybe<Scalars['Boolean']>
  name?: InputMaybe<FormSystemLanguageTypeInput>
}

export type FormSystemUpdateFieldInput = {
  id?: InputMaybe<Scalars['String']>
  updateFieldDto?: InputMaybe<FormSystemUpdateFieldDtoInput>
}

export type FormSystemUpdateFieldsDisplayOrderInput = {
  updateFieldsDisplayOrderDto?: InputMaybe<
    Array<InputMaybe<FormSystemFieldDisplayOrderInput>>
  >
}

export type FormSystemUpdateFormDtoInput = {
  applicationDaysToRemove?: InputMaybe<Scalars['Int']>
  completedMessage?: InputMaybe<FormSystemLanguageTypeInput>
  dependencies?: InputMaybe<Array<InputMaybe<FormSystemDependencyInput>>>
  hasPayment?: InputMaybe<Scalars['Boolean']>
  invalidationDate?: InputMaybe<Scalars['DateTime']>
  isTranslated?: InputMaybe<Scalars['Boolean']>
  name?: InputMaybe<FormSystemLanguageTypeInput>
  organizationDisplayName?: InputMaybe<FormSystemLanguageTypeInput>
  organizationId?: InputMaybe<Scalars['String']>
  slug?: InputMaybe<Scalars['String']>
  status?: InputMaybe<Scalars['String']>
  stopProgressOnValidatingScreen?: InputMaybe<Scalars['Boolean']>
  urls?: InputMaybe<Array<FormSystemFormUrlInput>>
}

export type FormSystemUpdateFormInput = {
  id?: InputMaybe<Scalars['String']>
  updateFormDto?: InputMaybe<FormSystemUpdateFormDtoInput>
}

export type FormSystemUpdateListItemDtoInput = {
  description?: InputMaybe<FormSystemLanguageTypeInput>
  isSelected?: InputMaybe<Scalars['Boolean']>
  label?: InputMaybe<FormSystemLanguageTypeInput>
  value?: InputMaybe<Scalars['String']>
}

export type FormSystemUpdateListItemInput = {
  id?: InputMaybe<Scalars['String']>
  updateListItemDto?: InputMaybe<FormSystemUpdateListItemDtoInput>
}

export type FormSystemUpdateListItemsDisplayOrderDtoInput = {
  listItemsDisplayOrderDto?: InputMaybe<
    Array<InputMaybe<FormSystemListItemDisplayOrderInput>>
  >
}

export type FormSystemUpdateListItemsDisplayOrderInput = {
  updateListItemsDisplayOrderDto?: InputMaybe<FormSystemUpdateListItemsDisplayOrderDtoInput>
}

export type FormSystemUpdateOrganizationPermissionInput = {
  updateOrganizationPermissionDto?: InputMaybe<FormSystemOrganizationPermissionDtoInput>
}

export type FormSystemUpdateScreenDisplayOrderDtoInput = {
  screensDisplayOrderDto?: InputMaybe<
    Array<InputMaybe<FormSystemScreenDisplayOrderInput>>
  >
}

export type FormSystemUpdateScreenDtoInput = {
  callRuleset?: InputMaybe<Scalars['Boolean']>
  multiset?: InputMaybe<Scalars['Int']>
  name?: InputMaybe<FormSystemLanguageTypeInput>
}

export type FormSystemUpdateScreenInput = {
  id?: InputMaybe<Scalars['String']>
  updateScreenDto?: InputMaybe<FormSystemUpdateScreenDtoInput>
}

export type FormSystemUpdateScreensDisplayOrderInput = {
  updateScreensDisplayOrderDto?: InputMaybe<FormSystemUpdateScreenDisplayOrderDtoInput>
}

export type FormSystemUpdateSectionDtoInput = {
  name?: InputMaybe<FormSystemLanguageTypeInput>
  waitingText?: InputMaybe<FormSystemLanguageTypeInput>
}

export type FormSystemUpdateSectionInput = {
  id?: InputMaybe<Scalars['String']>
  updateSectionDto?: InputMaybe<FormSystemUpdateSectionDtoInput>
}

export type FormSystemUpdateSectionsDisplayOrderDtoInput = {
  sectionsDisplayOrderDto?: InputMaybe<
    Array<InputMaybe<FormSystemSectionDisplayOrderInput>>
  >
}

export type FormSystemUpdateSectionsDisplayOrderInput = {
  updateSectionsDisplayOrderDto?: InputMaybe<FormSystemUpdateSectionsDisplayOrderDtoInput>
}

export type FormSystemValue = {
  __typename?: 'FormSystemValue'
  address?: Maybe<Scalars['String']>
  altName?: Maybe<Scalars['String']>
  bankAccount?: Maybe<Scalars['String']>
  checkboxValue?: Maybe<Scalars['Boolean']>
  date?: Maybe<Scalars['DateTime']>
  email?: Maybe<Scalars['String']>
  homestayNumber?: Maybe<Scalars['String']>
  isNullReport?: Maybe<Scalars['Boolean']>
  iskNumber?: Maybe<Scalars['String']>
  jobTitle?: Maybe<Scalars['String']>
  listValue?: Maybe<Scalars['String']>
  months?: Maybe<Array<Maybe<FormSystemMonth>>>
  municipality?: Maybe<Scalars['String']>
  name?: Maybe<Scalars['String']>
  nationalId?: Maybe<Scalars['String']>
  number?: Maybe<Scalars['Int']>
  phoneNumber?: Maybe<Scalars['String']>
  postalCode?: Maybe<Scalars['String']>
  propertyNumber?: Maybe<Scalars['String']>
  s3Key?: Maybe<Scalars['String']>
  text?: Maybe<Scalars['String']>
  time?: Maybe<Scalars['String']>
  totalAmount?: Maybe<Scalars['Int']>
  totalDays?: Maybe<Scalars['Int']>
  year?: Maybe<Scalars['Int']>
}

export type FormSystemValueDto = {
  __typename?: 'FormSystemValueDto'
  events?: Maybe<Array<Maybe<FormSystemApplicationEventDto>>>
  id?: Maybe<Scalars['String']>
  json?: Maybe<FormSystemValue>
  order?: Maybe<Scalars['Int']>
}

export type Frontpage = {
  __typename?: 'Frontpage'
  featured: Array<Featured>
  heading?: Maybe<Scalars['String']>
  id: Scalars['ID']
  image?: Maybe<Image>
  imageAlternativeText?: Maybe<Scalars['String']>
  imageMobile?: Maybe<Image>
  lifeEvents: Array<LifeEventPage>
  linkList?: Maybe<LinkList>
  namespace?: Maybe<Namespace>
  slides: Array<FrontpageSlider>
  title?: Maybe<Scalars['String']>
  videos?: Maybe<Array<Image>>
  videosMobile?: Maybe<Array<Image>>
}

export type FrontpageSlider = {
  __typename?: 'FrontpageSlider'
  animationJsonAsset?: Maybe<Asset>
  content: Scalars['String']
  intro?: Maybe<Html>
  link?: Maybe<Scalars['String']>
  subtitle: Scalars['String']
  title: Scalars['String']
}

export type GeneratePkPassInput = {
  licenseType: Scalars['String']
}

export type GenericFormInput = {
  email: Scalars['String']
  files?: InputMaybe<Array<Scalars['String']>>
  id: Scalars['String']
  lang?: InputMaybe<Scalars['String']>
  message: Scalars['String']
  name: Scalars['String']
  recipientFormFieldDeciderValue?: InputMaybe<Scalars['String']>
}

export type GenericLicense = {
  __typename?: 'GenericLicense'
  /** Does the license support pkpass? */
  pkpass: Scalars['Boolean']
  /** Status of pkpass availablity of license */
  pkpassStatus: GenericUserLicensePkPassStatus
  /** Does the license support verification of pkpass? */
  pkpassVerify: Scalars['Boolean']
  /** Provider of the license */
  provider: GenericLicenseProvider
  /** Status of license */
  status: GenericUserLicenseStatus
  /**
   * How long the data about the license should be treated as fresh
   * @deprecated Unclear if this is used, will revert if necessary
   */
  timeout?: Maybe<Scalars['Int']>
  /** Type of license from an exhaustive list */
  type: GenericLicenseType
}

export type GenericLicenseCollection = {
  __typename?: 'GenericLicenseCollection'
  errors?: Maybe<Array<GenericLicenseError>>
  licenses?: Maybe<Array<GenericUserLicense>>
}

export type GenericLicenseDataField = {
  __typename?: 'GenericLicenseDataField'
  /**
   * Display value of data field category
   * @deprecated Only used for cosmetic purposes, can be done better
   */
  description?: Maybe<Scalars['String']>
  /** Name of data field */
  fields?: Maybe<Array<GenericLicenseDataField>>
  /** Hide from service portal */
  hideFromServicePortal?: Maybe<Scalars['Boolean']>
  /** Label of data field */
  label?: Maybe<Scalars['String']>
  /** External meta link */
  link?: Maybe<GenericUserLicenseMetaLinks>
  /** Name of data field */
  name?: Maybe<Scalars['String']>
  tag?: Maybe<GenericUserLicenseMetaTag>
  /** Type of data field */
  type: GenericLicenseDataFieldType
  /** Value of data field */
  value?: Maybe<Scalars['String']>
}

/** Possible types of data fields */
export type GenericLicenseDataFieldType =
  | 'Category'
  | 'Group'
  | 'Table'
  | 'Value'

export type GenericLicenseError = {
  __typename?: 'GenericLicenseError'
  code?: Maybe<Scalars['Int']>
  extraData?: Maybe<Scalars['String']>
  /** Info about license fetch */
  fetch: GenericLicenseFetch
  message?: Maybe<Scalars['String']>
  provider?: Maybe<GenericLicenseProvider>
  type: GenericLicenseType
}

export type GenericLicenseFetch = {
  __typename?: 'GenericLicenseFetch'
  /** Status of license fetch */
  status: GenericUserLicenseFetchStatus
  /** Datetime of last update of fetch status */
  updated: Scalars['String']
}

export type GenericLicenseProvider = {
  __typename?: 'GenericLicenseProvider'
  /** Contentful entry id */
  entryId?: Maybe<Scalars['String']>
  /** ID of license provider */
  id: GenericLicenseProviderId
  providerLogo?: Maybe<Scalars['String']>
  providerName?: Maybe<Scalars['String']>
  /** Contentful reference id */
  referenceId?: Maybe<Scalars['String']>
}

/** Exhaustive list of license provider IDs */
export type GenericLicenseProviderId =
  | 'AdministrationOfOccupationalSafetyAndHealth'
  | 'DistrictCommissioners'
  | 'EnvironmentAgency'
  | 'IcelandicHealthInsurance'
  | 'NationalPoliceCommissioner'
  | 'NatureConservationAgency'
  | 'RegistersIceland'
  | 'SocialInsuranceAdministration'

/** Exhaustive list of license types */
export type GenericLicenseType =
  | 'AdrLicense'
  | 'DisabilityLicense'
  | 'DriversLicense'
  | 'Ehic'
  | 'FirearmLicense'
  | 'HuntingLicense'
  | 'IdentityDocument'
  | 'MachineLicense'
  | 'PCard'
  | 'Passport'

export type GenericList = {
  __typename?: 'GenericList'
  defaultOrder?: Maybe<GetGenericListItemsInputOrderBy>
  filterTags?: Maybe<Array<GenericTag>>
  id: Scalars['ID']
  itemType?: Maybe<GenericListItemType>
  searchInputPlaceholder?: Maybe<Scalars['String']>
  showSearchInput?: Maybe<Scalars['Boolean']>
}

export type GenericListItem = {
  __typename?: 'GenericListItem'
  assetUrl?: Maybe<Scalars['String']>
  cardIntro: Array<Slice>
  content?: Maybe<Array<Slice>>
  date?: Maybe<Scalars['String']>
  externalUrl?: Maybe<Scalars['String']>
  filterTags?: Maybe<Array<GenericTag>>
  fullWidthImageInContent?: Maybe<Scalars['Boolean']>
  genericList?: Maybe<GenericList>
  id: Scalars['ID']
  image?: Maybe<Image>
  slug?: Maybe<Scalars['String']>
  title: Scalars['String']
}

export type GenericListItemResponse = {
  __typename?: 'GenericListItemResponse'
  input: GenericListItemResponseInput
  items: Array<GenericListItem>
  total: Scalars['Int']
}

export type GenericListItemResponseInput = {
  __typename?: 'GenericListItemResponseInput'
  genericListId: Scalars['String']
  lang: Scalars['String']
  orderBy?: Maybe<GetGenericListItemsInputOrderBy>
  page?: Maybe<Scalars['Int']>
  queryString?: Maybe<Scalars['String']>
  size?: Maybe<Scalars['Int']>
  tagGroups?: Maybe<Scalars['JSON']>
  tags?: Maybe<Array<Scalars['String']>>
}

export type GenericListItemType = 'Clickable' | 'NonClickable'

export type GenericOverviewPage = {
  __typename?: 'GenericOverviewPage'
  id: Scalars['ID']
  intro?: Maybe<Html>
  navigation: Menu
  overviewLinks: Array<IntroLinkImage>
  pageIdentifier: Scalars['String']
  title: Scalars['String']
}

export type GenericPage = {
  __typename?: 'GenericPage'
  intro?: Maybe<Scalars['String']>
  mainContent?: Maybe<Scalars['String']>
  misc?: Maybe<Scalars['String']>
  sidebar?: Maybe<Scalars['String']>
  slug: Scalars['String']
  title: Scalars['String']
}

export type GenericPkPass = {
  __typename?: 'GenericPkPass'
  pkpassUrl: Scalars['String']
}

export type GenericPkPassQrCode = {
  __typename?: 'GenericPkPassQrCode'
  pkpassQRCode: Scalars['String']
}

export type GenericPkPassVerification = {
  __typename?: 'GenericPkPassVerification'
  /** Optional data related to the pkpass verification */
  data?: Maybe<Scalars['String']>
  /** Optional error related to the pkpass verification */
  error?: Maybe<GenericPkPassVerificationError>
  /** Is the pkpass valid? */
  valid: Scalars['Boolean']
}

export type GenericPkPassVerificationError = {
  __typename?: 'GenericPkPassVerificationError'
  /** Optional data related to the error */
  data?: Maybe<Scalars['String']>
  /** pkpass verification error message, depandant on origination service */
  message?: Maybe<Scalars['String']>
  /** pkpass verification error code, depandant on origination service, "0" for unknown error */
  status?: Maybe<Scalars['String']>
}

export type GenericTag = {
  __typename?: 'GenericTag'
  genericTagGroup?: Maybe<GenericTagGroup>
  id: Scalars['ID']
  slug: Scalars['String']
  title: Scalars['String']
}

export type GenericTagGroup = {
  __typename?: 'GenericTagGroup'
  id: Scalars['ID']
  slug: Scalars['String']
  title: Scalars['String']
}

export type GenericUserLicense = {
  __typename?: 'GenericUserLicense'
  barcode?: Maybe<CreateBarcodeResult>
  /** Info about license fetch */
  fetch: GenericLicenseFetch
  /** Is license owner child of user */
  isOwnerChildOfUser?: Maybe<Scalars['Boolean']>
  /** License info */
  license: GenericLicense
  /** National ID of license owner */
  nationalId: Scalars['String']
  /** Potential payload of license, both parsed and raw */
  payload?: Maybe<Payload>
}

export type GenericUserLicenseAlert = {
  __typename?: 'GenericUserLicenseAlert'
  message?: Maybe<Scalars['String']>
  title: Scalars['String']
  type: GenericUserLicenseAlertType
}

export type GenericUserLicenseAlertType = 'ERROR' | 'INFO' | 'WARNING'

/** Exhaustive list of possible tag icon color */
export type GenericUserLicenseDataFieldTagColor = 'green' | 'red' | 'yellow'

/** Exhaustive list of possible tag icons */
export type GenericUserLicenseDataFieldTagType =
  | 'checkmarkCircle'
  | 'closeCircle'

export type GenericUserLicenseExpiryStatus =
  | 'ACTIVE'
  | 'EXPIRED'
  | 'EXPIRING'
  | 'UNKNOWN'

/** Possible license fetch statuses */
export type GenericUserLicenseFetchStatus =
  | 'Error'
  | 'Fetched'
  | 'Fetching'
  | 'NotFetched'
  | 'Stale'

export type GenericUserLicenseMetaLinks = {
  __typename?: 'GenericUserLicenseMetaLinks'
  label?: Maybe<Scalars['String']>
  name?: Maybe<Scalars['String']>
  type?: Maybe<GenericUserLicenseMetaLinksType>
  value?: Maybe<Scalars['String']>
}

/** Exhaustive list meta link type */
export type GenericUserLicenseMetaLinksType = 'Copy' | 'Download' | 'External'

export type GenericUserLicenseMetaTag = {
  __typename?: 'GenericUserLicenseMetaTag'
  color?: Maybe<Scalars['String']>
  icon?: Maybe<GenericUserLicenseDataFieldTagType>
  iconColor?: Maybe<GenericUserLicenseDataFieldTagColor>
  /** Defaults to the text property if icon defined but iconText left undefined */
  iconText?: Maybe<Scalars['String']>
  text: Scalars['String']
}

export type GenericUserLicenseMetadata = {
  __typename?: 'GenericUserLicenseMetadata'
  /** Display an alert on the detail view */
  alert?: Maybe<GenericUserLicenseAlert>
  /** CTA link, only use if necessary */
  ctaLink?: Maybe<GenericUserLicenseMetaLinks>
  /** Display description for detail view */
  description?: Maybe<Array<GenericUserLicenseMetadataDescription>>
  displayTag?: Maybe<GenericUserLicenseMetaTag>
  expireDate?: Maybe<Scalars['String']>
  expired?: Maybe<Scalars['Boolean']>
  expiryStatus?: Maybe<GenericUserLicenseExpiryStatus>
  /** Unique license identifier */
  licenseId?: Maybe<Scalars['String']>
  licenseNumber?: Maybe<Scalars['String']>
  links?: Maybe<Array<GenericUserLicenseMetaLinks>>
  /** Display name of license for the overview */
  name?: Maybe<Scalars['String']>
  /** Photo of the license holder as a base64 encoded data URI containing a PNG or a JPEG photo (eg `data:image/png;base64,{data}`). */
  photo?: Maybe<Scalars['String']>
  /** Display subtitle for detail view */
  subtitle?: Maybe<Scalars['String']>
  title?: Maybe<Scalars['String']>
}

export type GenericUserLicenseMetadataDescription = {
  __typename?: 'GenericUserLicenseMetadataDescription'
  linkIconType?: Maybe<GenericUserLicenseMetaLinksType>
  /** If defined, changes text to link */
  linkInText?: Maybe<Scalars['String']>
  text: Scalars['String']
}

/** Possible license pkpass statuses */
export type GenericUserLicensePkPassStatus =
  | 'Available'
  | 'NotAvailable'
  | 'Unknown'

/** Possible license statuses for user */
export type GenericUserLicenseStatus = 'HasLicense' | 'NotAvailable' | 'Unknown'

export type GetAlertBannerInput = {
  id: Scalars['String']
  lang?: InputMaybe<Scalars['String']>
}

export type GetAnchorPageInput = {
  lang?: InputMaybe<Scalars['String']>
  slug: Scalars['String']
}

export type GetAnchorPagesInput = {
  lang?: InputMaybe<Scalars['String']>
}

export type GetAnnualStatusDocumentInput = {
  year: Scalars['String']
}

export type GetApiCatalogueInput = {
  access?: InputMaybe<Array<Scalars['String']>>
  cursor?: InputMaybe<Scalars['String']>
  data?: InputMaybe<Array<Scalars['String']>>
  limit?: InputMaybe<Scalars['Int']>
  pricing?: InputMaybe<Array<Scalars['String']>>
  query?: InputMaybe<Scalars['String']>
  type?: InputMaybe<Array<Scalars['String']>>
}

export type GetApiServiceInput = {
  id: Scalars['ID']
}

export type GetArticleCategoriesInput = {
  lang?: InputMaybe<Scalars['String']>
  size?: InputMaybe<Scalars['Int']>
}

export type GetArticlesInput = {
  category?: InputMaybe<Scalars['String']>
  group?: InputMaybe<Scalars['String']>
  lang?: InputMaybe<Scalars['String']>
  organization?: InputMaybe<Scalars['String']>
  size?: InputMaybe<Scalars['Int']>
  sort?: InputMaybe<SortField>
  subgroup?: InputMaybe<Scalars['String']>
}

export type GetAuctionInput = {
  id: Scalars['String']
  lang?: InputMaybe<Scalars['String']>
}

export type GetAuctionsInput = {
  lang?: InputMaybe<Scalars['String']>
  month?: InputMaybe<Scalars['Float']>
  organization?: InputMaybe<Scalars['String']>
  year?: InputMaybe<Scalars['Float']>
}

export type GetBloodDonationRestrictionDetailsInput = {
  id: Scalars['String']
  lang?: InputMaybe<Scalars['String']>
}

export type GetBloodDonationRestrictionGenericTagsInput = {
  lang?: InputMaybe<Scalars['String']>
}

export type GetBloodDonationRestrictionsInput = {
  lang?: InputMaybe<Scalars['String']>
  page?: InputMaybe<Scalars['Int']>
  queryString?: InputMaybe<Scalars['String']>
  tagKeys?: InputMaybe<Array<Scalars['String']>>
}

export type GetBloodDonationRestrictionsInputModel = {
  __typename?: 'GetBloodDonationRestrictionsInputModel'
  lang: Scalars['String']
  page?: Maybe<Scalars['Int']>
  queryString?: Maybe<Scalars['String']>
  tagKeys?: Maybe<Array<Scalars['String']>>
}

export type GetCategoryPagesInput = {
  category?: InputMaybe<Scalars['String']>
  group?: InputMaybe<Scalars['String']>
  lang?: InputMaybe<Scalars['String']>
  organization?: InputMaybe<Scalars['String']>
  size?: InputMaybe<Scalars['Int']>
  sort?: InputMaybe<SortField>
  subgroup?: InputMaybe<Scalars['String']>
}

export type GetChargeItemSubjectsByYearInput = {
  nextKey: Scalars['String']
  typeId: Scalars['String']
  year: Scalars['String']
}

export type GetChargeTypePeriodSubjectInput = {
  period: Scalars['String']
  subject: Scalars['String']
  typeId: Scalars['String']
  year: Scalars['String']
}

export type GetChargeTypesByYearInput = {
  year: Scalars['String']
}

export type GetChargeTypesDetailsByYearInput = {
  typeId: Scalars['String']
  year: Scalars['String']
}

export type GetContentSlugInput = {
  id: Scalars['String']
}

export type GetCustomPageInput = {
  lang?: InputMaybe<Scalars['String']>
  uniqueIdentifier: CustomPageUniqueIdentifier
}

export type GetCustomSubpageInput = {
  lang?: InputMaybe<Scalars['String']>
  parentPageId: Scalars['String']
  slug: Scalars['String']
}

export type GetCustomerRecordsInput = {
  chargeTypeID?: InputMaybe<Array<Scalars['String']>>
  dayFrom: Scalars['String']
  dayTo: Scalars['String']
}

export type GetDocumentInput = {
  id: Scalars['String']
}

export type GetDocumentListInput = {
  archived?: InputMaybe<Scalars['Boolean']>
  bookmarked?: InputMaybe<Scalars['Boolean']>
  categoryId?: InputMaybe<Scalars['String']>
  dateFrom?: InputMaybe<Scalars['String']>
  dateTo?: InputMaybe<Scalars['String']>
  isLegalGuardian?: InputMaybe<Scalars['Boolean']>
  opened?: InputMaybe<Scalars['Boolean']>
  order?: InputMaybe<Scalars['String']>
  page?: InputMaybe<Scalars['Float']>
  pageSize?: InputMaybe<Scalars['Float']>
  senderKennitala?: InputMaybe<Scalars['String']>
  sortBy?: InputMaybe<Scalars['String']>
  subjectContains?: InputMaybe<Scalars['String']>
  typeId?: InputMaybe<Scalars['String']>
}

export type GetDocumentPageInput = {
  messageId: Scalars['String']
  pageSize: Scalars['Float']
}

export type GetDraftRegulationInput = {
  draftId: Scalars['String']
}

/** Get a download URL for a draft regulation */
export type GetDraftRegulationPdfDownloadInput = {
  /** Id of the draft regulation */
  draftId: Scalars['String']
}

export type GetDraftRegulationsInput = {
  page: Scalars['Float']
}

export type GetElectronicIdInput = {
  nationalId: Scalars['String']
  phoneNumber: Scalars['String']
}

export type GetErrorPageInput = {
  errorCode: Scalars['String']
  lang?: InputMaybe<Scalars['String']>
}

export type GetEventsInput = {
  lang?: InputMaybe<Scalars['String']>
  onlyIncludePastEvents?: InputMaybe<Scalars['Boolean']>
  order?: InputMaybe<Scalars['String']>
  organization?: InputMaybe<Scalars['String']>
  page?: InputMaybe<Scalars['Int']>
  size?: InputMaybe<Scalars['Int']>
}

export type GetFeaturedSupportQnAsInput = {
  category?: InputMaybe<Scalars['String']>
  lang?: InputMaybe<Scalars['String']>
  organization?: InputMaybe<Scalars['String']>
  size?: InputMaybe<Scalars['Int']>
  subCategory?: InputMaybe<Scalars['String']>
}

export type GetFinanceDocumentInput = {
  documentID: Scalars['String']
}

export type GetFinanceDocumentsListInput = {
  dayFrom: Scalars['String']
  dayTo: Scalars['String']
  listPath: Scalars['String']
}

export type GetFinancePaymentScheduleInput = {
  scheduleNumber: Scalars['String']
}

export type GetFinancialOverviewInput = {
  chargeTypeID: Scalars['String']
  orgID: Scalars['String']
}

export type GetFrontpageInput = {
  lang?: InputMaybe<Scalars['String']>
  pageIdentifier: Scalars['String']
}

export type GetGenericLicenseInput = {
  licenseId?: InputMaybe<Scalars['String']>
  licenseType: Scalars['String']
}

export type GetGenericLicensesInput = {
  excludedTypes?: InputMaybe<Array<Scalars['String']>>
  force?: InputMaybe<Scalars['Boolean']>
  includedTypes?: InputMaybe<Array<Scalars['String']>>
  onlyList?: InputMaybe<Scalars['Boolean']>
}

export type GetGenericListItemBySlugInput = {
  lang?: InputMaybe<Scalars['String']>
  slug: Scalars['String']
}

export type GetGenericListItemsInput = {
  genericListId: Scalars['String']
  lang?: InputMaybe<Scalars['String']>
  orderBy?: InputMaybe<GetGenericListItemsInputOrderBy>
  page?: InputMaybe<Scalars['Int']>
  queryString?: InputMaybe<Scalars['String']>
  size?: InputMaybe<Scalars['Int']>
  tagGroups?: InputMaybe<Scalars['JSON']>
  tags?: InputMaybe<Array<Scalars['String']>>
}

export type GetGenericListItemsInputOrderBy = 'DATE' | 'PUBLISH_DATE' | 'TITLE'

export type GetGenericOverviewPageInput = {
  lang?: InputMaybe<Scalars['String']>
  pageIdentifier: Scalars['String']
}

export type GetGenericPageInput = {
  lang?: InputMaybe<Scalars['String']>
  slug: Scalars['String']
}

export type GetGenericTagBySlugInput = {
  lang?: InputMaybe<Scalars['String']>
  slug: Scalars['String']
}

export type GetGenericTagsInTagGroupsInput = {
  lang?: InputMaybe<Scalars['String']>
  tagGroupSlugs?: InputMaybe<Array<Scalars['String']>>
}

export type GetGrantsInput = {
  categories?: InputMaybe<Array<Scalars['String']>>
  funds?: InputMaybe<Array<Scalars['String']>>
  lang?: InputMaybe<Scalars['String']>
  organizations?: InputMaybe<Array<Scalars['String']>>
  page?: InputMaybe<Scalars['Int']>
  search?: InputMaybe<Scalars['String']>
  size?: InputMaybe<Scalars['Int']>
  sort?: InputMaybe<GetGrantsInputSortByEnum>
  status?: InputMaybe<GetGrantsInputAvailabilityStatusEnum>
  types?: InputMaybe<Array<Scalars['String']>>
}

export type GetGrantsInputAvailabilityStatusEnum = 'CLOSED' | 'OPEN'

export type GetGrantsInputSortByEnum = 'ALPHABETICAL' | 'RECENTLY_UPDATED'

export type GetHmsLoansPaymentHistoryInput = {
  loanId: Scalars['Float']
}

export type GetHomestaysInput = {
  year?: InputMaybe<Scalars['Float']>
}

export type GetIcelandicNameByIdInput = {
  id: Scalars['Float']
}

export type GetIcelandicNameByInitialLetterInput = {
  initialLetter: Scalars['String']
}

export type GetIcelandicNameBySearchInput = {
  q: Scalars['String']
}

export type GetInitialScheduleInput = {
  disposableIncome: Scalars['Float']
  totalAmount: Scalars['Float']
  type: PaymentScheduleType
}

export type GetIsEmployerValidInput = {
  companyId: Scalars['String']
}

export type GetLifeEventPageInput = {
  lang?: InputMaybe<Scalars['String']>
  slug: Scalars['String']
}

export type GetLifeEventsInCategoryInput = {
  lang?: InputMaybe<Scalars['String']>
  slug: Scalars['String']
}

export type GetLifeEventsInput = {
  lang?: InputMaybe<Scalars['String']>
}

export type GetMenuInput = {
  lang?: InputMaybe<Scalars['String']>
  name: Scalars['String']
}

export type GetMultiPropertyInput = {
  cursor?: InputMaybe<Scalars['String']>
  limit?: InputMaybe<Scalars['Float']>
}

export type GetNamespaceInput = {
  lang?: InputMaybe<Scalars['String']>
  namespace?: InputMaybe<Scalars['String']>
}

export type GetNewsDatesInput = {
  lang?: InputMaybe<Scalars['String']>
  order?: InputMaybe<Scalars['String']>
  organization?: InputMaybe<Scalars['String']>
  tags?: InputMaybe<Array<Scalars['String']>>
}

export type GetNewsInput = {
  lang?: InputMaybe<Scalars['String']>
  month?: InputMaybe<Scalars['Int']>
  order?: InputMaybe<Scalars['String']>
  organization?: InputMaybe<Scalars['String']>
  page?: InputMaybe<Scalars['Int']>
  size?: InputMaybe<Scalars['Int']>
  tags?: InputMaybe<Array<Scalars['String']>>
  year?: InputMaybe<Scalars['Int']>
}

export type GetOpenApiInput = {
  instance: Scalars['String']
  memberClass: Scalars['String']
  memberCode: Scalars['String']
  serviceCode: Scalars['String']
  subsystemCode: Scalars['String']
}

export type GetOpenDataPageInput = {
  lang?: InputMaybe<Scalars['String']>
}

export type GetOpenDataSubpageInput = {
  lang?: InputMaybe<Scalars['String']>
}

export type GetOperatingLicensesInput = {
  pageNumber?: InputMaybe<Scalars['Float']>
  pageSize?: InputMaybe<Scalars['Float']>
  searchBy?: InputMaybe<Scalars['String']>
}

export type GetOrganizationByNationalIdInput = {
  lang?: InputMaybe<Scalars['String']>
  nationalId: Scalars['String']
}

export type GetOrganizationByTitleInput = {
  lang?: InputMaybe<Scalars['String']>
  title: Scalars['String']
}

export type GetOrganizationInput = {
  lang?: InputMaybe<Scalars['String']>
  slug?: InputMaybe<Scalars['String']>
}

export type GetOrganizationPageInput = {
  lang?: InputMaybe<Scalars['String']>
  slug: Scalars['String']
}

export type GetOrganizationPageStandaloneSitemapLevel1Input = {
  categorySlug: Scalars['String']
  lang?: InputMaybe<Scalars['String']>
  organizationPageSlug: Scalars['String']
}

export type GetOrganizationPageStandaloneSitemapLevel2Input = {
  categorySlug: Scalars['String']
  lang?: InputMaybe<Scalars['String']>
  organizationPageSlug: Scalars['String']
  subcategorySlug: Scalars['String']
}

export type GetOrganizationParentSubpageInput = {
  lang?: InputMaybe<Scalars['String']>
  organizationPageSlug: Scalars['String']
  slug: Scalars['String']
}

export type GetOrganizationSubpageByIdInput = {
  id: Scalars['String']
  lang?: InputMaybe<Scalars['String']>
}

export type GetOrganizationSubpageInput = {
  lang?: InputMaybe<Scalars['String']>
  organizationSlug: Scalars['String']
  slug: Scalars['String']
}

export type GetOrganizationTagsInput = {
  lang?: InputMaybe<Scalars['String']>
}

export type GetOrganizationsInput = {
  lang?: InputMaybe<Scalars['String']>
  organizationTitles?: InputMaybe<Array<Scalars['String']>>
  perPage?: InputMaybe<Scalars['Int']>
  referenceIdentifiers?: InputMaybe<Array<Scalars['String']>>
}

export type GetPagingTypes = {
  assetId: Scalars['String']
  cursor?: InputMaybe<Scalars['String']>
  limit?: InputMaybe<Scalars['Float']>
}

export type GetParentalLeavesApplicationPaymentPlanInput = {
  applicationId: Scalars['String']
  dateOfBirth: Scalars['String']
}

export type GetParentalLeavesEntitlementsInput = {
  dateOfBirth: Scalars['String']
}

export type GetParentalLeavesEstimatedPaymentPlanInput = {
  dateOfBirth: Scalars['String']
  period: Array<Period>
}

export type GetParentalLeavesPeriodEndDateInput = {
  length: Scalars['String']
  percentage: Scalars['String']
  startDate: Scalars['String']
}

export type GetParentalLeavesPeriodLengthInput = {
  endDate: Scalars['String']
  percentage: Scalars['String']
  startDate: Scalars['String']
}

export type GetPaymentFlowInput = {
  id: Scalars['String']
}

export type GetPowerBiEmbedPropsFromServerResponse = {
  __typename?: 'GetPowerBiEmbedPropsFromServerResponse'
  accessToken?: Maybe<Scalars['String']>
  embedUrl?: Maybe<Scalars['String']>
}

export type GetProjectPageInput = {
  lang?: InputMaybe<Scalars['String']>
  slug: Scalars['String']
}

export type GetPublicVehicleSearchInput = {
  search: Scalars['String']
}

export type GetPublishedMaterialInput = {
  lang?: InputMaybe<Scalars['String']>
  organizationSlug?: InputMaybe<Scalars['String']>
  page?: InputMaybe<Scalars['Int']>
  searchString?: InputMaybe<Scalars['String']>
  size?: InputMaybe<Scalars['Int']>
  sort: Scalars['JSON']
  tagGroups: Scalars['JSON']
  tags: Array<Scalars['String']>
}

export type GetRealEstateInput = {
  assetId: Scalars['String']
}

export type GetRegistryPersonInput = {
  nationalId?: InputMaybe<Scalars['String']>
}

export type GetRegulationFromApiInput = {
  date?: InputMaybe<Scalars['String']>
  regulation: Scalars['String']
}

export type GetRegulationImpactsInput = {
  regulation: Scalars['String']
}

export type GetRegulationInput = {
  date?: InputMaybe<Scalars['String']>
  earlierDate?: InputMaybe<Scalars['String']>
  isCustomDiff?: InputMaybe<Scalars['Boolean']>
  name: Scalars['String']
  viewType: RegulationViewTypes
}

export type GetRegulationOptionListInput = {
  names?: InputMaybe<Array<Scalars['String']>>
}

export type GetRegulationsInput = {
  page?: InputMaybe<Scalars['Float']>
  type: Scalars['String']
}

export type GetRegulationsLawChaptersInput = {
  slugs?: InputMaybe<Array<Scalars['String']>>
  tree?: InputMaybe<Scalars['Boolean']>
}

export type GetRegulationsMinistriesInput = {
  slugs?: InputMaybe<Array<Scalars['String']>>
}

export type GetRegulationsSearchInput = {
  ch?: InputMaybe<Scalars['String']>
  iA?: InputMaybe<Scalars['Boolean']>
  iR?: InputMaybe<Scalars['Boolean']>
  page?: InputMaybe<Scalars['Int']>
  q?: InputMaybe<Scalars['String']>
  rn?: InputMaybe<Scalars['String']>
  year?: InputMaybe<Scalars['Int']>
  yearTo?: InputMaybe<Scalars['Int']>
}

export type GetScheduleDistributionInput = {
  monthAmount?: InputMaybe<Scalars['Float']>
  monthCount?: InputMaybe<Scalars['Float']>
  scheduleType: PaymentScheduleType
  totalAmount: Scalars['Float']
}

export type GetServicePortalAlertBannersInput = {
  lang?: InputMaybe<Scalars['String']>
}

export type GetServiceWebPageInput = {
  lang?: InputMaybe<Scalars['String']>
  slug: Scalars['String']
}

export type GetSingleArticleInput = {
  lang?: InputMaybe<Scalars['String']>
  slug: Scalars['String']
}

export type GetSingleEntryTitleByIdInput = {
  id: Scalars['String']
  lang?: InputMaybe<Scalars['String']>
}

export type GetSingleEventInput = {
  lang?: InputMaybe<Scalars['String']>
  slug: Scalars['String']
}

export type GetSingleGrantInput = {
  id: Scalars['String']
  lang?: InputMaybe<Scalars['String']>
}

export type GetSingleManualInput = {
  lang?: InputMaybe<Scalars['String']>
  slug: Scalars['String']
}

export type GetSingleMenuInput = {
  id: Scalars['String']
  lang?: InputMaybe<Scalars['String']>
}

export type GetSingleNewsInput = {
  lang?: InputMaybe<Scalars['String']>
  slug: Scalars['String']
}

export type GetSingleSupportQnaInput = {
  lang?: InputMaybe<Scalars['String']>
  slug: Scalars['String']
}

export type GetSubpageHeaderInput = {
  id: Scalars['String']
  lang?: InputMaybe<Scalars['String']>
}

export type GetSupportCategoriesInOrganizationInput = {
  lang?: InputMaybe<Scalars['String']>
  slug: Scalars['String']
}

export type GetSupportCategoriesInput = {
  lang?: InputMaybe<Scalars['String']>
}

export type GetSupportCategoryInput = {
  lang?: InputMaybe<Scalars['String']>
  slug: Scalars['String']
}

export type GetSupportQnAsInCategoryInput = {
  lang?: InputMaybe<Scalars['String']>
  slug: Scalars['String']
}

export type GetSupportQnAsInput = {
  lang?: InputMaybe<Scalars['String']>
}

export type GetTabSectionInput = {
  id: Scalars['String']
  lang?: InputMaybe<Scalars['String']>
}

export type GetTeamMembersInput = {
  lang?: InputMaybe<Scalars['String']>
  orderBy?: InputMaybe<GetTeamMembersInputOrderBy>
  page?: InputMaybe<Scalars['Int']>
  queryString?: InputMaybe<Scalars['String']>
  size?: InputMaybe<Scalars['Int']>
  tagGroups?: InputMaybe<Scalars['JSON']>
  tags?: InputMaybe<Array<Scalars['String']>>
  teamListId: Scalars['String']
}

export type GetTeamMembersInputOrderBy = 'Manual' | 'Name'

export type GetTranslationsInput = {
  lang: Scalars['String']
  namespaces: Array<Scalars['String']>
}

export type GetUrlInput = {
  lang?: InputMaybe<Scalars['String']>
  slug: Scalars['String']
}

export type GetUserInvolvedPartiesInput = {
  applicationId: Scalars['ID']
}

export type GetVehicleDetailInput = {
  permno: Scalars['String']
  regno?: InputMaybe<Scalars['String']>
  vin?: InputMaybe<Scalars['String']>
}

export type GetVehicleInput = {
  vehicleId: Scalars['String']
}

export type GetVehicleMileageInput = {
  permno: Scalars['String']
}

export type GetVehicleSearchInput = {
  search: Scalars['String']
}

export type GetVehiclesForUserInput = {
  dateFrom?: InputMaybe<Scalars['DateTime']>
  dateTo?: InputMaybe<Scalars['DateTime']>
  page: Scalars['Float']
  pageSize: Scalars['Float']
  permno?: InputMaybe<Scalars['String']>
  showDeregeristered: Scalars['Boolean']
  showHistory: Scalars['Boolean']
  type?: InputMaybe<VehicleUserTypeEnum>
}

export type GetVehiclesListV2Input = {
  /** Filter to only show vehicles requiring mileage registration */
  onlyMileage?: InputMaybe<Scalars['Boolean']>
  page: Scalars['Float']
  pageSize: Scalars['Float']
  permno?: InputMaybe<Scalars['String']>
  showCoowned?: InputMaybe<Scalars['Boolean']>
  showOperated?: InputMaybe<Scalars['Boolean']>
  showOwned?: InputMaybe<Scalars['Boolean']>
}

export type Grade = {
  __typename?: 'Grade'
  grade?: Maybe<Scalars['String']>
  label: Scalars['String']
  weight?: Maybe<Scalars['Float']>
}

export type GradeType = {
  __typename?: 'GradeType'
  elementaryGrade?: Maybe<Grade>
  label: Scalars['String']
  serialGrade?: Maybe<Grade>
}

export type Grant = {
  __typename?: 'Grant'
  answeringQuestions: Array<Slice>
  applicationButtonLabel?: Maybe<Scalars['String']>
  applicationHints: Array<Slice>
  applicationId?: Maybe<Scalars['String']>
  applicationUrl?: Maybe<ReferenceLink>
  categoryTags?: Maybe<Array<GenericTag>>
  dateFrom?: Maybe<Scalars['String']>
  dateTo?: Maybe<Scalars['String']>
  description?: Maybe<Scalars['String']>
  files?: Maybe<Array<Asset>>
  fund?: Maybe<OrganizationFund>
  howToApply: Array<Slice>
  id: Scalars['ID']
  lastUpdateTimestamp: Scalars['String']
  name: Scalars['String']
  specialEmphasis: Array<Slice>
  status?: Maybe<GrantStatus>
  statusText?: Maybe<Scalars['String']>
  supportLinks?: Maybe<Array<Link>>
  typeTag?: Maybe<GenericTag>
  whoCanApply: Array<Slice>
}

export type GrantCardsList = {
  __typename?: 'GrantCardsList'
  displayTitle?: Maybe<Scalars['Boolean']>
  id: Scalars['ID']
  maxNumberOfCards?: Maybe<Scalars['Int']>
  namespace: Scalars['JSONObject']
  resolvedGrantsList?: Maybe<GrantList>
  sorting?: Maybe<GrantCardsListSorting>
  title: Scalars['String']
}

export type GrantCardsListSorting =
  | 'ALPHABETICAL'
  | 'MOST_RECENTLY_UPDATED_FIRST'

export type GrantList = {
  __typename?: 'GrantList'
  items: Array<Grant>
  total: Scalars['Int']
}

export type GrantStatus =
  | 'ALWAYS_OPEN'
  | 'CLOSED'
  | 'CLOSED_OPENING_SOON'
  | 'CLOSED_OPENING_SOON_WITH_ESTIMATION'
  | 'CLOSED_WITH_NOTE'
  | 'INVALID'
  | 'OPEN'
  | 'OPEN_WITH_NOTE'
  | 'UNKNOWN'

export type GraphCard = {
  __typename?: 'GraphCard'
  data: Scalars['String']
  datakeys: Scalars['String']
  displayAsCard: Scalars['Boolean']
  graphDescription: Scalars['String']
  graphTitle: Scalars['String']
  id: Scalars['ID']
  organization?: Maybe<Scalars['String']>
  organizationLogo?: Maybe<Image>
  type: Scalars['String']
}

export type GroupedMenu = {
  __typename?: 'GroupedMenu'
  id: Scalars['ID']
  menus: Array<Menu>
  title: Scalars['String']
}

export type HasTeachingRights = {
  __typename?: 'HasTeachingRights'
  hasTeachingRights: Scalars['Boolean']
  nationalId: Scalars['ID']
}

export type HeadingSlice = {
  __typename?: 'HeadingSlice'
  body: Scalars['String']
  id: Scalars['ID']
  title: Scalars['String']
}

export type HealthDirectorateDispensation = {
  __typename?: 'HealthDirectorateDispensation'
  agentName?: Maybe<Scalars['String']>
  count: Scalars['Float']
  date: Scalars['DateTime']
  id: Scalars['Int']
  items: Array<HealthDirectorateDispensedItem>
  lastDispensationDate?: Maybe<Scalars['DateTime']>
}

export type HealthDirectorateDispensedItem = {
  __typename?: 'HealthDirectorateDispensedItem'
  amount?: Maybe<Scalars['String']>
  dosageInstructions?: Maybe<Scalars['String']>
  id: Scalars['ID']
  isExpired?: Maybe<Scalars['Boolean']>
  name?: Maybe<Scalars['String']>
  numberOfPackages?: Maybe<Scalars['String']>
  quantity?: Maybe<Scalars['String']>
  strength?: Maybe<Scalars['String']>
  type?: Maybe<Scalars['String']>
}

export type HealthDirectorateOrganDonation = {
  __typename?: 'HealthDirectorateOrganDonation'
  donor?: Maybe<HealthDirectorateOrganDonor>
  locale?: Maybe<Scalars['String']>
  organList?: Maybe<Array<HealthDirectorateOrganDonationOrgan>>
}

export type HealthDirectorateOrganDonationLimitations = {
  __typename?: 'HealthDirectorateOrganDonationLimitations'
  /** Text to display if user does not want to donate all organs */
  comment?: Maybe<Scalars['String']>
  hasLimitations: Scalars['Boolean']
  /** List of organs NOT to donate */
  limitedOrgansList?: Maybe<Array<HealthDirectorateOrganDonationOrgan>>
}

export type HealthDirectorateOrganDonationOrgan = {
  __typename?: 'HealthDirectorateOrganDonationOrgan'
  id: Scalars['String']
  name: Scalars['String']
}

export type HealthDirectorateOrganDonor = {
  __typename?: 'HealthDirectorateOrganDonor'
  isDonor: Scalars['Boolean']
  isMinor: Scalars['Boolean']
  isTemporaryResident: Scalars['Boolean']
  limitations?: Maybe<HealthDirectorateOrganDonationLimitations>
}

export type HealthDirectorateOrganDonorInput = {
  comment?: InputMaybe<Scalars['String']>
  isDonor: Scalars['Boolean']
  organLimitations?: InputMaybe<Array<Scalars['String']>>
}

export type HealthDirectoratePrescribedItemCategory =
  | 'Owner'
  | 'Pn'
  | 'Regimen'
  | 'Regular'

export type HealthDirectoratePrescription = {
  __typename?: 'HealthDirectoratePrescription'
  amountRemaining?: Maybe<Scalars['String']>
  category?: Maybe<HealthDirectoratePrescribedItemCategory>
  dispensations: Array<HealthDirectorateDispensation>
  dosageInstructions?: Maybe<Scalars['String']>
  expiryDate: Scalars['DateTime']
  form?: Maybe<Scalars['String']>
  id: Scalars['String']
  indication?: Maybe<Scalars['String']>
  isRenewable: Scalars['Boolean']
  issueDate: Scalars['DateTime']
  name?: Maybe<Scalars['String']>
  prescriberName?: Maybe<Scalars['String']>
  quantity?: Maybe<Scalars['String']>
  renewalBlockedReason?: Maybe<HealthDirectoratePrescriptionRenewalBlockedReason>
  renewalStatus?: Maybe<HealthDirectoratePrescriptionRenewalStatus>
  totalPrescribedAmount?: Maybe<Scalars['String']>
  type?: Maybe<Scalars['String']>
  url?: Maybe<Scalars['String']>
}

export type HealthDirectoratePrescriptionRenewalBlockedReason =
  | 'IsRegiment'
  | 'NotFullyDispensed'
  | 'PendingRequest'
  | 'RejectedRequest'

export type HealthDirectoratePrescriptionRenewalStatus =
  | 'NUMBER_0'
  | 'NUMBER_1'
  | 'NUMBER_2'

export type HealthDirectoratePrescriptions = {
  __typename?: 'HealthDirectoratePrescriptions'
  prescriptions: Array<HealthDirectoratePrescription>
}

export type HealthDirectorateReferral = {
  __typename?: 'HealthDirectorateReferral'
  createdDate?: Maybe<Scalars['DateTime']>
  fromContactInfo: HealthDirectorateReferralContact
  id: Scalars['ID']
  reason?: Maybe<Scalars['String']>
  serviceName?: Maybe<Scalars['String']>
  stateDisplay?: Maybe<Scalars['String']>
  toContactInfo: HealthDirectorateReferralContact
  validUntilDate?: Maybe<Scalars['DateTime']>
}

export type HealthDirectorateReferralContact = {
  __typename?: 'HealthDirectorateReferralContact'
  department?: Maybe<Scalars['String']>
  name?: Maybe<Scalars['String']>
  profession?: Maybe<Scalars['String']>
}

export type HealthDirectorateReferrals = {
  __typename?: 'HealthDirectorateReferrals'
  referrals: Array<HealthDirectorateReferral>
}

export type HealthDirectorateVaccination = {
  __typename?: 'HealthDirectorateVaccination'
  comments?: Maybe<Array<Scalars['String']>>
  description?: Maybe<Scalars['String']>
  id: Scalars['String']
  isFeatured?: Maybe<Scalars['Boolean']>
  lastVaccinationDate?: Maybe<Scalars['DateTime']>
  name?: Maybe<Scalars['String']>
  status?: Maybe<HealthDirectorateVaccinationStatusEnum>
  statusColor?: Maybe<Scalars['String']>
  statusName?: Maybe<Scalars['String']>
  vaccinationsInfo?: Maybe<Array<HealthDirectorateVaccinationsInfo>>
}

export type HealthDirectorateVaccinationStatusEnum =
  | 'complete'
  | 'expired'
  | 'incomplete'
  | 'rejected'
  | 'undetermined'
  | 'undocumented'
  | 'unvaccinated'
  | 'valid'

export type HealthDirectorateVaccinations = {
  __typename?: 'HealthDirectorateVaccinations'
  vaccinations: Array<HealthDirectorateVaccination>
}

export type HealthDirectorateVaccinationsAge = {
  __typename?: 'HealthDirectorateVaccinationsAge'
  months?: Maybe<Scalars['Int']>
  years?: Maybe<Scalars['Int']>
}

export type HealthDirectorateVaccinationsInfo = {
  __typename?: 'HealthDirectorateVaccinationsInfo'
  age?: Maybe<HealthDirectorateVaccinationsAge>
  comment?: Maybe<Scalars['String']>
  date?: Maybe<Scalars['DateTime']>
  id: Scalars['Int']
  location?: Maybe<Scalars['String']>
  name?: Maybe<Scalars['String']>
  rejected?: Maybe<Scalars['Boolean']>
  url?: Maybe<Scalars['String']>
}

export type HealthDirectorateWaitlist = {
  __typename?: 'HealthDirectorateWaitlist'
  id: Scalars['ID']
  lastUpdated?: Maybe<Scalars['DateTime']>
  name: Scalars['String']
  organization: Scalars['String']
  status: Scalars['String']
  waitBegan?: Maybe<Scalars['DateTime']>
}

export type HealthDirectorateWaitlists = {
  __typename?: 'HealthDirectorateWaitlists'
  waitlists: Array<HealthDirectorateWaitlist>
}

export type HealthInsuranceAccidentNotificationStatusTypes =
  | 'ACCEPTED'
  | 'INPROGRESS'
  | 'INPROGRESSWAITINGFORDOCUMENT'
  | 'REFUSED'

export type HealthInsuranceAccidentStatusInput = {
  ihiDocumentID: Scalars['Float']
}

export type Helpdesk = {
  __typename?: 'Helpdesk'
  created: Scalars['DateTime']
  email: Scalars['String']
  id: Scalars['String']
  modified: Scalars['DateTime']
  phoneNumber: Scalars['String']
}

export type HmsLoansCoPayer = {
  __typename?: 'HmsLoansCoPayer'
  coPayerName?: Maybe<Scalars['String']>
  coPayerNationalId?: Maybe<Scalars['String']>
}

export type HmsLoansHistory = {
  __typename?: 'HmsLoansHistory'
  accruedInterestPriceImprovements?: Maybe<Scalars['Float']>
  affiliateLoan?: Maybe<Scalars['String']>
  balancePayment?: Maybe<Scalars['String']>
  balanceWithoutInterestPriceImprovements?: Maybe<Scalars['Float']>
  baseIndex?: Maybe<Scalars['Float']>
  coPayerName?: Maybe<Scalars['String']>
  coPayerNationalId?: Maybe<Scalars['String']>
  coPayers?: Maybe<Array<HmsLoansCoPayer>>
  creditor?: Maybe<Scalars['String']>
  epilog?: Maybe<Scalars['String']>
  firstInterestDate?: Maybe<Scalars['DateTime']>
  firstPaymentDate?: Maybe<Scalars['DateTime']>
  homeAddress?: Maybe<Scalars['String']>
  installments?: Maybe<Scalars['Float']>
  interest?: Maybe<Scalars['Float']>
  lastPaymentAmount?: Maybe<Scalars['Float']>
  lastPaymentDate?: Maybe<Scalars['DateTime']>
  lastUnpaidInvoiceDate?: Maybe<Scalars['DateTime']>
  loanAmountWithRepayment?: Maybe<Scalars['Float']>
  loanId?: Maybe<Scalars['Float']>
  loanStatus?: Maybe<Scalars['String']>
  loanType?: Maybe<Scalars['String']>
  municipality?: Maybe<Scalars['String']>
  municipalityNumber?: Maybe<Scalars['String']>
  name?: Maybe<Scalars['String']>
  nationalId?: Maybe<Scalars['String']>
  nextPaymentDate?: Maybe<Scalars['DateTime']>
  numberOfPaymentDatesRemaining?: Maybe<Scalars['Float']>
  numberOfPaymentPerYear?: Maybe<Scalars['Float']>
  originalLoanAmount?: Maybe<Scalars['Float']>
  paymentDelayment?: Maybe<Scalars['String']>
  paymentFee?: Maybe<Scalars['String']>
  postNumber?: Maybe<Scalars['Float']>
  priceIndexType?: Maybe<Scalars['String']>
  properties?: Maybe<Array<HmsLoansProperty>>
  propertyAddress?: Maybe<Scalars['String']>
  propertyId?: Maybe<Scalars['String']>
  propertyMunicipality?: Maybe<Scalars['String']>
  remainingBalanceWithoutDebt?: Maybe<Scalars['Float']>
  repaymentFee?: Maybe<Scalars['Float']>
  statusSettlementPayment?: Maybe<Scalars['Float']>
  temporaryPaymentDelayment?: Maybe<Scalars['String']>
  totalDueAmount?: Maybe<Scalars['Float']>
  totalNumberOfPayments?: Maybe<Scalars['Float']>
  variableInterest?: Maybe<Scalars['String']>
}

export type HmsLoansHistoryPdf = {
  __typename?: 'HmsLoansHistoryPdf'
  data?: Maybe<Scalars['String']>
  mime?: Maybe<Scalars['String']>
  name?: Maybe<Scalars['String']>
}

export type HmsLoansPaymentHistory = {
  __typename?: 'HmsLoansPaymentHistory'
  costPayment?: Maybe<Scalars['Float']>
  defaultInterest?: Maybe<Scalars['Float']>
  interest?: Maybe<Scalars['Float']>
  loanId?: Maybe<Scalars['Float']>
  paymentAmount?: Maybe<Scalars['Float']>
  paymentDate?: Maybe<Scalars['DateTime']>
  priceImprovementInterest?: Maybe<Scalars['Float']>
  priceImprovementPayment?: Maybe<Scalars['Float']>
  totalPayment?: Maybe<Scalars['Float']>
  transactionDate?: Maybe<Scalars['DateTime']>
}

export type HmsLoansProperty = {
  __typename?: 'HmsLoansProperty'
  epilog?: Maybe<Scalars['String']>
  municipalityNumber?: Maybe<Scalars['String']>
  propertyAddress?: Maybe<Scalars['String']>
  propertyId?: Maybe<Scalars['String']>
  propertyMunicipality?: Maybe<Scalars['String']>
}

export type Homestay = {
  __typename?: 'Homestay'
  address?: Maybe<Scalars['String']>
  apartmentId?: Maybe<Scalars['String']>
  city?: Maybe<Scalars['String']>
  guests?: Maybe<Scalars['Float']>
  manager?: Maybe<Scalars['String']>
  name?: Maybe<Scalars['String']>
  propertyId?: Maybe<Scalars['String']>
  registrationNumber?: Maybe<Scalars['String']>
  rooms?: Maybe<Scalars['Float']>
  year?: Maybe<Scalars['Float']>
}

export type HousingBenefitCalculationModel = {
  __typename?: 'HousingBenefitCalculationModel'
  estimatedHousingBenefits?: Maybe<Scalars['Float']>
  maximumHousingBenefits?: Maybe<Scalars['Float']>
  reductionsDueToAssets?: Maybe<Scalars['Float']>
  reductionsDueToHousingCosts?: Maybe<Scalars['Float']>
  reductionsDueToIncome?: Maybe<Scalars['Float']>
}

export type HousingBenefitCalculatorCalculationInput = {
  housingCostsPerMonth: Scalars['Float']
  numberOfHouseholdMembers: Scalars['Float']
  totalAssets: Scalars['Float']
  totalMonthlyIncome: Scalars['Float']
}

export type HousingBenefitCalculatorSpecificSupportCalculationInput = {
  housingCostsPerMonth: Scalars['Float']
  numberOfHouseholdMembers: Scalars['Float']
}

export type HousingBenefitsPageInfo = {
  __typename?: 'HousingBenefitsPageInfo'
  hasNextPage?: Maybe<Scalars['Boolean']>
  hasPreviousPage?: Maybe<Scalars['Boolean']>
}

export type HousingBenefitsPayment = {
  __typename?: 'HousingBenefitsPayment'
  address?: Maybe<Scalars['String']>
  bankAccountMerged?: Maybe<Scalars['String']>
  benefit?: Maybe<Scalars['Int']>
  calculationType?: Maybe<CalculationType>
  dateCalculation?: Maybe<Scalars['DateTime']>
  dateTransfer?: Maybe<Scalars['DateTime']>
  month?: Maybe<Scalars['String']>
  name?: Maybe<Scalars['String']>
  nationalId?: Maybe<Scalars['String']>
  noDays?: Maybe<Scalars['Int']>
  nr?: Maybe<Scalars['Int']>
  paidOfDebt?: Maybe<Scalars['Int']>
  paymentActual?: Maybe<Scalars['Int']>
  paymentBeforeDebt?: Maybe<Scalars['Int']>
  paymentOrigin?: Maybe<Scalars['Int']>
  reductionAssets?: Maybe<Scalars['Int']>
  reductionHousingCost?: Maybe<Scalars['Int']>
  reductionIncome?: Maybe<Scalars['Int']>
  remainDebt?: Maybe<Scalars['Int']>
  totalIncome?: Maybe<Scalars['Int']>
  transactionType?: Maybe<TransactionType>
}

export type HousingBenefitsPayments = {
  __typename?: 'HousingBenefitsPayments'
  data: Array<HousingBenefitsPayment>
  pageInfo: HousingBenefitsPageInfo
  totalCount: Scalars['Float']
}

export type HousingBenefitsPaymentsInput = {
  dateFrom?: InputMaybe<Scalars['DateTime']>
  dateTo?: InputMaybe<Scalars['DateTime']>
  month?: InputMaybe<Scalars['String']>
  pageNumber?: InputMaybe<Scalars['Int']>
  pageSize?: InputMaybe<Scalars['Int']>
  paymentOrigin?: InputMaybe<Scalars['Int']>
  /** False display's all. True display payments only */
  payments?: InputMaybe<Scalars['Boolean']>
}

export type Html = {
  __typename?: 'Html'
  document: Scalars['JSON']
  id: Scalars['ID']
  typename: Scalars['String']
}

export type IcelandicGovernmentInstitutionVacanciesInput = {
  institution?: InputMaybe<Scalars['String']>
  language?: InputMaybe<VacanciesGetLanguageEnum>
}

export type IcelandicGovernmentInstitutionVacanciesResponse = {
  __typename?: 'IcelandicGovernmentInstitutionVacanciesResponse'
  fetchErrorOccurred?: Maybe<Scalars['Boolean']>
  vacancies: Array<IcelandicGovernmentInstitutionVacancyListItem>
}

export type IcelandicGovernmentInstitutionVacancy = {
  __typename?: 'IcelandicGovernmentInstitutionVacancy'
  applicationDeadlineFrom?: Maybe<Scalars['String']>
  applicationDeadlineTo?: Maybe<Scalars['String']>
  applicationHref?: Maybe<Scalars['String']>
  contacts?: Maybe<Array<IcelandicGovernmentInstitutionVacancyContact>>
  description?: Maybe<Scalars['JSON']>
  fieldOfWork?: Maybe<Scalars['String']>
  id?: Maybe<Scalars['String']>
  institutionName?: Maybe<Scalars['String']>
  institutionReferenceIdentifier?: Maybe<Scalars['String']>
  intro?: Maybe<Scalars['JSON']>
  jobPercentage?: Maybe<Scalars['String']>
  locations?: Maybe<Array<IcelandicGovernmentInstitutionVacancyLocation>>
  logoUrl?: Maybe<Scalars['String']>
  plainTextIntro?: Maybe<Scalars['String']>
  qualificationRequirements?: Maybe<Scalars['JSON']>
  salaryTerms?: Maybe<Scalars['JSON']>
  tasksAndResponsibilities?: Maybe<Scalars['JSON']>
  title?: Maybe<Scalars['String']>
}

export type IcelandicGovernmentInstitutionVacancyByIdInput = {
  id: Scalars['String']
  language?: InputMaybe<VacanciesVacancyIdGetLanguageEnum>
}

export type IcelandicGovernmentInstitutionVacancyByIdResponse = {
  __typename?: 'IcelandicGovernmentInstitutionVacancyByIdResponse'
  vacancy?: Maybe<IcelandicGovernmentInstitutionVacancy>
}

export type IcelandicGovernmentInstitutionVacancyContact = {
  __typename?: 'IcelandicGovernmentInstitutionVacancyContact'
  email?: Maybe<Scalars['String']>
  name?: Maybe<Scalars['String']>
  phone?: Maybe<Scalars['String']>
}

export type IcelandicGovernmentInstitutionVacancyListItem = {
  __typename?: 'IcelandicGovernmentInstitutionVacancyListItem'
  applicationDeadlineFrom?: Maybe<Scalars['String']>
  applicationDeadlineTo?: Maybe<Scalars['String']>
  fieldOfWork?: Maybe<Scalars['String']>
  id?: Maybe<Scalars['String']>
  institutionName?: Maybe<Scalars['String']>
  institutionReferenceIdentifier?: Maybe<Scalars['String']>
  intro?: Maybe<Scalars['String']>
  locations?: Maybe<Array<IcelandicGovernmentInstitutionVacancyLocation>>
  logoUrl?: Maybe<Scalars['String']>
  title?: Maybe<Scalars['String']>
}

export type IcelandicGovernmentInstitutionVacancyLocation = {
  __typename?: 'IcelandicGovernmentInstitutionVacancyLocation'
  postalCode?: Maybe<Scalars['Float']>
  title?: Maybe<Scalars['String']>
}

export type IcelandicName = {
  __typename?: 'IcelandicName'
  created: Scalars['DateTime']
  description?: Maybe<Scalars['String']>
  icelandicName: Scalars['String']
  id: Scalars['Float']
  modified: Scalars['DateTime']
  status?: Maybe<Scalars['String']>
  type?: Maybe<Scalars['String']>
  url?: Maybe<Scalars['String']>
  verdict?: Maybe<Scalars['String']>
  visible?: Maybe<Scalars['Boolean']>
}

export type IconBullet = {
  __typename?: 'IconBullet'
  body: Scalars['String']
  icon: Image
  id: Scalars['ID']
  linkText?: Maybe<Scalars['String']>
  title: Scalars['String']
  url?: Maybe<Scalars['String']>
}

export type Identity = {
  address?: Maybe<IdentityAddress>
  familyName?: Maybe<Scalars['String']>
  givenName?: Maybe<Scalars['String']>
  name: Scalars['String']
  nationalId: Scalars['ID']
  type: IdentityType
}

export type IdentityAddress = {
  __typename?: 'IdentityAddress'
  city?: Maybe<Scalars['String']>
  postalCode?: Maybe<Scalars['String']>
  streetAddress?: Maybe<Scalars['String']>
}

export type IdentityCompany = Identity & {
  __typename?: 'IdentityCompany'
  address?: Maybe<IdentityAddress>
  familyName?: Maybe<Scalars['String']>
  givenName?: Maybe<Scalars['String']>
  name: Scalars['String']
  nationalId: Scalars['ID']
  type: IdentityType
}

export type IdentityData = {
  address: Address
  name: Scalars['String']
  nationalId: Scalars['String']
}

export type IdentityDocumentModel = {
  __typename?: 'IdentityDocumentModel'
  displayFirstName?: Maybe<Scalars['String']>
  displayLastName?: Maybe<Scalars['String']>
  expirationDate?: Maybe<Scalars['DateTime']>
  expiresWithinNoticeTime?: Maybe<Scalars['Boolean']>
  expiryStatus?: Maybe<Scalars['String']>
  issuingDate?: Maybe<Scalars['DateTime']>
  mrzFirstName?: Maybe<Scalars['String']>
  mrzLastName?: Maybe<Scalars['String']>
  number?: Maybe<Scalars['String']>
  numberWithType?: Maybe<Scalars['String']>
  sex?: Maybe<Scalars['String']>
  status?: Maybe<Scalars['String']>
  subType?: Maybe<Scalars['String']>
  type?: Maybe<Scalars['String']>
  verboseType?: Maybe<Scalars['String']>
}

export type IdentityDocumentModelChild = {
  __typename?: 'IdentityDocumentModelChild'
  childName?: Maybe<Scalars['String']>
  childNationalId?: Maybe<Scalars['String']>
  passports?: Maybe<Array<IdentityDocumentModel>>
  secondParent?: Maybe<Scalars['String']>
  secondParentName?: Maybe<Scalars['String']>
}

export type IdentityInput = {
  nationalId: Scalars['String']
}

export type IdentityPerson = Identity & {
  __typename?: 'IdentityPerson'
  address?: Maybe<IdentityAddress>
  age: Scalars['Float']
  banMarking?: Maybe<NationalRegistryBanMarking>
  birthPlace?: Maybe<Scalars['String']>
  birthday: Scalars['DateTime']
  citizenship?: Maybe<NationalRegistryCitizenship>
  familyName?: Maybe<Scalars['String']>
  familyNr?: Maybe<Scalars['String']>
  firstName?: Maybe<Scalars['String']>
  fullName: Scalars['String']
  gender?: Maybe<NationalRegistryGender>
  givenName?: Maybe<Scalars['String']>
  lastName?: Maybe<Scalars['String']>
  legalResidence?: Maybe<Scalars['String']>
  maritalStatus?: Maybe<NationalRegistryMaritalStatus>
  middleName?: Maybe<Scalars['String']>
  name: Scalars['String']
  nationalId: Scalars['ID']
  religion?: Maybe<Scalars['String']>
  spouse?: Maybe<NationalRegistrySpouse>
  type: IdentityType
}

export type IdentityType = 'Company' | 'Person'

export type Image = {
  __typename?: 'Image'
  contentType: Scalars['String']
  description?: Maybe<Scalars['String']>
  height: Scalars['Int']
  id: Scalars['ID']
  title: Scalars['String']
  url: Scalars['String']
  width: Scalars['Int']
}

export type InaoClientFinancialLimitInput = {
  clientType: Scalars['String']
  year: Scalars['String']
}

export type IntellectualPropertiesAnnualFee = {
  __typename?: 'IntellectualPropertiesAnnualFee'
  amount?: Maybe<Scalars['String']>
  id: Scalars['ID']
  paymentDate?: Maybe<Scalars['DateTime']>
  paymentDueDate?: Maybe<Scalars['DateTime']>
  payor?: Maybe<Scalars['String']>
  surcharge: Scalars['Boolean']
}

export type IntellectualPropertiesAnnualFeesInfo = {
  __typename?: 'IntellectualPropertiesAnnualFeesInfo'
  history?: Maybe<Array<IntellectualPropertiesAnnualFee>>
  nextPaymentDate?: Maybe<Scalars['DateTime']>
}

export type IntellectualPropertiesApplicationLifecycle = {
  __typename?: 'IntellectualPropertiesApplicationLifecycle'
  announcementDate?: Maybe<Scalars['DateTime']>
  applicationDate?: Maybe<Scalars['DateTime']>
  applicationDateAvailable?: Maybe<Scalars['DateTime']>
  applicationDatePublishedAsAvailable?: Maybe<Scalars['DateTime']>
  applicationDeadlineDate?: Maybe<Scalars['DateTime']>
  createDate?: Maybe<Scalars['DateTime']>
  expiryDate?: Maybe<Scalars['DateTime']>
  internationalRegistrationDate?: Maybe<Scalars['DateTime']>
  lastModified?: Maybe<Scalars['DateTime']>
  maxValidDate?: Maybe<Scalars['DateTime']>
  maxValidObjectionDate?: Maybe<Scalars['DateTime']>
  publishDate?: Maybe<Scalars['DateTime']>
  registrationDate?: Maybe<Scalars['DateTime']>
  renewalDate?: Maybe<Scalars['DateTime']>
  unregistrationDate?: Maybe<Scalars['DateTime']>
}

export type IntellectualPropertiesCategory = {
  __typename?: 'IntellectualPropertiesCategory'
  categoryDescription?: Maybe<Scalars['String']>
  categoryNumber?: Maybe<Scalars['String']>
}

export type IntellectualPropertiesClassification = {
  __typename?: 'IntellectualPropertiesClassification'
  category: Scalars['String']
  creationDate?: Maybe<Scalars['DateTime']>
  publicationDate?: Maybe<Scalars['DateTime']>
  sequence?: Maybe<Scalars['Float']>
  type?: Maybe<Scalars['String']>
}

export type IntellectualPropertiesCountry = {
  __typename?: 'IntellectualPropertiesCountry'
  code?: Maybe<Scalars['String']>
  name?: Maybe<Scalars['String']>
}

export type IntellectualPropertiesDesign = IntellectualProperty & {
  __typename?: 'IntellectualPropertiesDesign'
  agent?: Maybe<IntellectualPropertiesPerson>
  applicationNumber?: Maybe<Scalars['String']>
  canRenew?: Maybe<Scalars['Boolean']>
  classification?: Maybe<Array<IntellectualPropertiesClassification>>
  classifications?: Maybe<Array<IntellectualPropertiesClassification>>
  designers?: Maybe<Array<IntellectualPropertiesPerson>>
  id: Scalars['String']
  lifecycle: IntellectualPropertiesApplicationLifecycle
  owners?: Maybe<Array<IntellectualPropertiesPerson>>
  specification?: Maybe<IntellectualPropertiesSpecification>
  status?: Maybe<Scalars['String']>
}

export type IntellectualPropertiesDesignImagesInput = {
  designId: Scalars['String']
  designNumber: Scalars['String']
  imageNumber: Scalars['String']
  size?: InputMaybe<Scalars['String']>
}

export type IntellectualPropertiesEpApplicationLifecycle = {
  __typename?: 'IntellectualPropertiesEPApplicationLifecycle'
  applicationDate?: Maybe<Scalars['DateTime']>
  provisionDatePublishedInGazette?: Maybe<Scalars['DateTime']>
  publishDate?: Maybe<Scalars['DateTime']>
  translationSubmissionDate?: Maybe<Scalars['DateTime']>
}

export type IntellectualPropertiesImage = {
  __typename?: 'IntellectualPropertiesImage'
  designNumber?: Maybe<Scalars['Int']>
  image?: Maybe<Scalars['String']>
  imageNumber?: Maybe<Scalars['Int']>
}

export type IntellectualPropertiesImageList = {
  __typename?: 'IntellectualPropertiesImageList'
  count: Scalars['Int']
  images: Array<IntellectualPropertiesImage>
}

export type IntellectualPropertiesInput = {
  key: Scalars['String']
}

export type IntellectualPropertiesMarketingAuthorization = {
  __typename?: 'IntellectualPropertiesMarketingAuthorization'
  foreignAuthorizationDate?: Maybe<Scalars['DateTime']>
  foreignAuthorizationNumber?: Maybe<Scalars['String']>
  icelandicAuthorizationDate?: Maybe<Scalars['DateTime']>
  icelandicAuthorizationNumber?: Maybe<Scalars['String']>
}

export type IntellectualPropertiesMedia = {
  __typename?: 'IntellectualPropertiesMedia'
  mediaPath?: Maybe<Scalars['String']>
  mediaType?: Maybe<Scalars['String']>
}

export type IntellectualPropertiesPct = {
  __typename?: 'IntellectualPropertiesPCT'
  date?: Maybe<Scalars['DateTime']>
  number?: Maybe<Scalars['String']>
}

export type IntellectualPropertiesPatent = {
  agent?: Maybe<IntellectualPropertiesPerson>
  annualFeesInfo?: Maybe<IntellectualPropertiesAnnualFeesInfo>
  applicationNumber?: Maybe<Scalars['String']>
  canRenew?: Maybe<Scalars['Boolean']>
  classifications?: Maybe<Array<IntellectualPropertiesClassification>>
  designers?: Maybe<Array<IntellectualPropertiesPerson>>
  id: Scalars['String']
  inventors?: Maybe<Array<IntellectualPropertiesPerson>>
  lifecycle?: Maybe<IntellectualPropertiesApplicationLifecycle>
  name: Scalars['String']
  nameInOrgLanguage?: Maybe<Scalars['String']>
  owners?: Maybe<Array<IntellectualPropertiesPerson>>
  priorities?: Maybe<Array<IntellectualPropertiesPriority>>
  specification?: Maybe<IntellectualPropertiesSpecification>
  status?: Maybe<Scalars['String']>
  statusDate?: Maybe<Scalars['DateTime']>
  statusText?: Maybe<Scalars['String']>
}

export type IntellectualPropertiesPatentEp = IntellectualPropertiesPatent &
  IntellectualProperty & {
    __typename?: 'IntellectualPropertiesPatentEP'
    agent?: Maybe<IntellectualPropertiesPerson>
    alive?: Maybe<Scalars['Boolean']>
    annualFeesInfo?: Maybe<IntellectualPropertiesAnnualFeesInfo>
    applicationNumber?: Maybe<Scalars['String']>
    canRenew?: Maybe<Scalars['Boolean']>
    classificationType?: Maybe<Scalars['String']>
    classifications?: Maybe<Array<IntellectualPropertiesClassification>>
    designers?: Maybe<Array<IntellectualPropertiesPerson>>
    epApplicationNumber?: Maybe<Scalars['String']>
    epLifecycle?: Maybe<IntellectualPropertiesEpApplicationLifecycle>
    epoStatus?: Maybe<Scalars['String']>
    /** Possible IP application error state */
    error?: Maybe<Scalars['String']>
    id: Scalars['String']
    inventors?: Maybe<Array<IntellectualPropertiesPerson>>
    language?: Maybe<Scalars['String']>
    lifecycle?: Maybe<IntellectualPropertiesApplicationLifecycle>
    name: Scalars['String']
    nameInIcelandic?: Maybe<Scalars['String']>
    nameInOrgLanguage?: Maybe<Scalars['String']>
    owners?: Maybe<Array<IntellectualPropertiesPerson>>
    pct?: Maybe<IntellectualPropertiesPct>
    priorities?: Maybe<Array<IntellectualPropertiesPriority>>
    registrationNumber?: Maybe<Scalars['String']>
    spcNumbers?: Maybe<Array<Scalars['String']>>
    specification?: Maybe<IntellectualPropertiesSpecification>
    status?: Maybe<Scalars['String']>
    statusDate?: Maybe<Scalars['DateTime']>
    statusText?: Maybe<Scalars['String']>
  }

export type IntellectualPropertiesPatentIs = IntellectualPropertiesPatent &
  IntellectualProperty & {
    __typename?: 'IntellectualPropertiesPatentIS'
    agent?: Maybe<IntellectualPropertiesPerson>
    alive?: Maybe<Scalars['Boolean']>
    annualFeesInfo?: Maybe<IntellectualPropertiesAnnualFeesInfo>
    applicationNumber?: Maybe<Scalars['String']>
    canRenew?: Maybe<Scalars['Boolean']>
    classifications?: Maybe<Array<IntellectualPropertiesClassification>>
    designers?: Maybe<Array<IntellectualPropertiesPerson>>
    /** Possible IP application error state */
    error?: Maybe<Scalars['String']>
    id: Scalars['String']
    inventors?: Maybe<Array<IntellectualPropertiesPerson>>
    lifecycle?: Maybe<IntellectualPropertiesApplicationLifecycle>
    name: Scalars['String']
    nameInOrgLanguage?: Maybe<Scalars['String']>
    owners?: Maybe<Array<IntellectualPropertiesPerson>>
    pct?: Maybe<IntellectualPropertiesPct>
    priorities?: Maybe<Array<IntellectualPropertiesPriority>>
    registrationNumber?: Maybe<Scalars['String']>
    spcNumbers?: Maybe<Array<Scalars['String']>>
    specification?: Maybe<IntellectualPropertiesSpecification>
    status?: Maybe<Scalars['String']>
    statusDate?: Maybe<Scalars['DateTime']>
    statusText?: Maybe<Scalars['String']>
  }

export type IntellectualPropertiesPerson = {
  __typename?: 'IntellectualPropertiesPerson'
  address?: Maybe<Scalars['String']>
  addressFull?: Maybe<Scalars['String']>
  city?: Maybe<Scalars['String']>
  country?: Maybe<IntellectualPropertiesCountry>
  county?: Maybe<Scalars['String']>
  email?: Maybe<Scalars['String']>
  id?: Maybe<Scalars['String']>
  isForeign?: Maybe<Scalars['Boolean']>
  mobilePhone?: Maybe<Scalars['String']>
  name?: Maybe<Scalars['String']>
  nationalId?: Maybe<Scalars['String']>
  postalCode?: Maybe<Scalars['String']>
  telephone?: Maybe<Scalars['String']>
}

export type IntellectualPropertiesPriority = {
  __typename?: 'IntellectualPropertiesPriority'
  applicationDate?: Maybe<Scalars['DateTime']>
  countryCode?: Maybe<Scalars['String']>
  countryName?: Maybe<Scalars['String']>
  creationDate?: Maybe<Scalars['DateTime']>
  number?: Maybe<Scalars['String']>
}

export type IntellectualPropertiesResponse = {
  __typename?: 'IntellectualPropertiesResponse'
  items?: Maybe<Array<IntellectualProperty>>
  totalCount: Scalars['Int']
}

export type IntellectualPropertiesSpc = IntellectualPropertiesPatent &
  IntellectualProperty & {
    __typename?: 'IntellectualPropertiesSPC'
    agent?: Maybe<IntellectualPropertiesPerson>
    annualFeesInfo?: Maybe<IntellectualPropertiesAnnualFeesInfo>
    /** Parent patent number */
    applicationNumber?: Maybe<Scalars['String']>
    canRenew?: Maybe<Scalars['Boolean']>
    classifications?: Maybe<Array<IntellectualPropertiesClassification>>
    designers?: Maybe<Array<IntellectualPropertiesPerson>>
    grantPublishedInGazetteDate?: Maybe<Scalars['DateTime']>
    id: Scalars['String']
    inventors?: Maybe<Array<IntellectualPropertiesPerson>>
    lifecycle?: Maybe<IntellectualPropertiesApplicationLifecycle>
    marketingAuthorization?: Maybe<IntellectualPropertiesMarketingAuthorization>
    medicine?: Maybe<Scalars['String']>
    medicineForChildren?: Maybe<Scalars['Boolean']>
    message?: Maybe<Scalars['String']>
    name: Scalars['String']
    nameInOrgLanguage?: Maybe<Scalars['String']>
    number: Scalars['String']
    owners?: Maybe<Array<IntellectualPropertiesPerson>>
    priorities?: Maybe<Array<IntellectualPropertiesPriority>>
    publishedInGazetteDate?: Maybe<Scalars['DateTime']>
    specification?: Maybe<IntellectualPropertiesSpecification>
    status?: Maybe<Scalars['String']>
    statusDate?: Maybe<Scalars['DateTime']>
    statusText?: Maybe<Scalars['String']>
  }

export type IntellectualPropertiesSpecification = {
  __typename?: 'IntellectualPropertiesSpecification'
  description?: Maybe<Scalars['String']>
  designIsDecoration?: Maybe<Scalars['String']>
  designShouldBeProtectedInColors?: Maybe<Scalars['String']>
  number?: Maybe<Scalars['String']>
  specificationCount?: Maybe<Scalars['String']>
  specificationText?: Maybe<Scalars['String']>
}

export type IntellectualPropertiesTrademark = IntellectualProperty & {
  __typename?: 'IntellectualPropertiesTrademark'
  agent?: Maybe<IntellectualPropertiesPerson>
  applicationNumber?: Maybe<Scalars['String']>
  canRenew?: Maybe<Scalars['Boolean']>
  classifications?: Maybe<Array<IntellectualPropertiesClassification>>
  deleted?: Maybe<Scalars['Boolean']>
  designers?: Maybe<Array<IntellectualPropertiesPerson>>
  id: Scalars['String']
  imageCategories?: Maybe<Scalars['String']>
  isColorMark?: Maybe<Scalars['Boolean']>
  lifecycle: IntellectualPropertiesApplicationLifecycle
  markAgent?: Maybe<IntellectualPropertiesPerson>
  markCategories?: Maybe<Array<IntellectualPropertiesCategory>>
  markOwners?: Maybe<Array<IntellectualPropertiesPerson>>
  media?: Maybe<IntellectualPropertiesMedia>
  owners?: Maybe<Array<IntellectualPropertiesPerson>>
  registrationNumber?: Maybe<Scalars['String']>
  specification?: Maybe<IntellectualPropertiesSpecification>
  status?: Maybe<Scalars['String']>
  subType?: Maybe<TrademarkSubType>
  text?: Maybe<Scalars['String']>
  type?: Maybe<TrademarkType>
  typeReadable?: Maybe<Scalars['String']>
}

export type IntellectualProperty = {
  agent?: Maybe<IntellectualPropertiesPerson>
  applicationNumber?: Maybe<Scalars['String']>
  canRenew?: Maybe<Scalars['Boolean']>
  classifications?: Maybe<Array<IntellectualPropertiesClassification>>
  designers?: Maybe<Array<IntellectualPropertiesPerson>>
  id: Scalars['String']
  lifecycle?: Maybe<IntellectualPropertiesApplicationLifecycle>
  owners?: Maybe<Array<IntellectualPropertiesPerson>>
  specification?: Maybe<IntellectualPropertiesSpecification>
  status?: Maybe<Scalars['String']>
}

export type IntroLinkImage = {
  __typename?: 'IntroLinkImage'
  id: Scalars['ID']
  image?: Maybe<Image>
  intro?: Maybe<Html>
  introHtml?: Maybe<Html>
  leftImage: Scalars['Boolean']
  link?: Maybe<ReferenceLink>
  linkTitle: Scalars['String']
  openLinkInNewTab: Scalars['Boolean']
  title: Scalars['String']
}

export type IsHealthInsuredInput = {
  date?: InputMaybe<Scalars['DateTime']>
}

export type Items =
  | AnchorPage
  | Article
  | LifeEventPage
  | Link
  | Manual
  | ManualChapterItem
  | News
  | OrganizationPage
  | OrganizationSubpage
  | ProjectPage
  | SubArticle
  | SupportQna

export type JourneymanLicence = {
  __typename?: 'JourneymanLicence'
  dateOfPublication?: Maybe<Scalars['DateTime']>
  name?: Maybe<Scalars['String']>
  nationalId?: Maybe<Scalars['String']>
  profession?: Maybe<Scalars['String']>
}

export type JourneymanLicencesResponse = {
  __typename?: 'JourneymanLicencesResponse'
  licences: Array<JourneymanLicence>
}

export type LandModel = {
  __typename?: 'LandModel'
  area?: Maybe<Scalars['String']>
  areaUnit?: Maybe<Scalars['String']>
  landAppraisal?: Maybe<Scalars['Float']>
  landNumber?: Maybe<Scalars['String']>
  registeredOwners?: Maybe<PropertyOwnersModel>
  useDisplay?: Maybe<Scalars['String']>
}

export type LatestEventsSlice = {
  __typename?: 'LatestEventsSlice'
  events: Array<Event>
  id: Scalars['ID']
  title: Scalars['String']
}

export type LatestGenericListItems = {
  __typename?: 'LatestGenericListItems'
  genericList?: Maybe<GenericList>
  id: Scalars['ID']
  itemResponse?: Maybe<GenericListItemResponse>
  seeMoreLinkText: Scalars['String']
  seeMorePage?: Maybe<Page>
  title: Scalars['String']
}

export type LatestNewsSlice = {
  __typename?: 'LatestNewsSlice'
  id: Scalars['ID']
  news: Array<News>
  readMoreLink?: Maybe<Link>
  readMoreText: Scalars['String']
  tag: Scalars['String']
  title: Scalars['String']
}

export type LawAndOrderAction = {
  __typename?: 'LawAndOrderAction'
  data?: Maybe<Scalars['String']>
  title?: Maybe<Scalars['String']>
  type?: Maybe<LawAndOrderActionTypeEnum>
}

export type LawAndOrderActionTypeEnum = 'file' | 'inbox' | 'url'

export type LawAndOrderCourtCase = {
  __typename?: 'LawAndOrderCourtCase'
  actions?: Maybe<Array<LawAndOrderAction>>
  data?: Maybe<LawAndOrderCourtCaseData>
  texts?: Maybe<LawAndOrderCourtCaseText>
}

export type LawAndOrderCourtCaseData = {
  __typename?: 'LawAndOrderCourtCaseData'
  caseNumberTitle?: Maybe<Scalars['String']>
  groups?: Maybe<Array<LawAndOrderGroup>>
  hasBeenServed?: Maybe<Scalars['Boolean']>
  id: Scalars['ID']
}

export type LawAndOrderCourtCaseInput = {
  id: Scalars['String']
}

export type LawAndOrderCourtCaseStateTagColorEnum =
  | 'blue'
  | 'blueberry'
  | 'dark'
  | 'darkerBlue'
  | 'disabled'
  | 'mint'
  | 'purple'
  | 'red'
  | 'rose'
  | 'warn'
  | 'white'
  | 'yellow'

export type LawAndOrderCourtCaseText = {
  __typename?: 'LawAndOrderCourtCaseText'
  footnote?: Maybe<Scalars['String']>
  intro?: Maybe<Scalars['String']>
}

export type LawAndOrderCourtCases = {
  __typename?: 'LawAndOrderCourtCases'
  cases?: Maybe<Array<LawAndOrderCourtCasesCase>>
}

export type LawAndOrderCourtCasesCase = {
  __typename?: 'LawAndOrderCourtCasesCase'
  caseNumberTitle?: Maybe<Scalars['String']>
  id: Scalars['ID']
  state?: Maybe<LawAndOrderCourtCasesState>
  type?: Maybe<Scalars['String']>
}

export type LawAndOrderCourtCasesState = {
  __typename?: 'LawAndOrderCourtCasesState'
  color?: Maybe<LawAndOrderCourtCaseStateTagColorEnum>
  label?: Maybe<Scalars['String']>
}

export type LawAndOrderDefenseChoice = {
  __typename?: 'LawAndOrderDefenseChoice'
  caseId: Scalars['String']
  choice?: Maybe<LawAndOrderDefenseChoice>
  lawyersNationalId?: Maybe<Scalars['String']>
}

export type LawAndOrderDefenseChoiceEnum =
  | 'CHOOSE'
  | 'DELAY'
  | 'DELEGATE'
  | 'WAIVE'

export type LawAndOrderDefenseChoiceInput = {
  caseId: Scalars['ID']
  choice: LawAndOrderDefenseChoiceEnum
  lawyersNationalId?: InputMaybe<Scalars['String']>
}

export type LawAndOrderGroup = {
  __typename?: 'LawAndOrderGroup'
  items?: Maybe<Array<LawAndOrderSubpoenaItem>>
  label?: Maybe<Scalars['String']>
}

export type LawAndOrderLawyer = {
  __typename?: 'LawAndOrderLawyer'
  nationalId?: Maybe<Scalars['String']>
  title?: Maybe<Scalars['String']>
}

export type LawAndOrderLawyerChoices = {
  __typename?: 'LawAndOrderLawyerChoices'
  id?: Maybe<Scalars['String']>
  label?: Maybe<Scalars['String']>
}

export type LawAndOrderLawyers = {
  __typename?: 'LawAndOrderLawyers'
  choices?: Maybe<Array<LawAndOrderLawyerChoices>>
  lawyers?: Maybe<Array<LawAndOrderLawyer>>
}

export type LawAndOrderSubpoena = {
  __typename?: 'LawAndOrderSubpoena'
  actions?: Maybe<Array<LawAndOrderAction>>
  data?: Maybe<LawAndOrderSubpoenaData>
  texts?: Maybe<LawAndOrderSubpoenaTexts>
}

export type LawAndOrderSubpoenaData = {
  __typename?: 'LawAndOrderSubpoenaData'
  canEditDefenderChoice?: Maybe<Scalars['Boolean']>
  chosenDefender?: Maybe<Scalars['String']>
  courtContactInfo?: Maybe<Scalars['String']>
  defaultChoice: LawAndOrderDefenseChoiceEnum
  defenderChoice?: Maybe<LawAndOrderDefenseChoiceEnum>
  groups?: Maybe<Array<LawAndOrderGroup>>
  hasBeenServed?: Maybe<Scalars['Boolean']>
  hasChosen?: Maybe<Scalars['Boolean']>
  id: Scalars['ID']
}

export type LawAndOrderSubpoenaInput = {
  id: Scalars['String']
}

export type LawAndOrderSubpoenaItem = {
  __typename?: 'LawAndOrderSubpoenaItem'
  action?: Maybe<LawAndOrderAction>
  label?: Maybe<Scalars['String']>
  link?: Maybe<Scalars['String']>
  value?: Maybe<Scalars['String']>
}

export type LawAndOrderSubpoenaTexts = {
  __typename?: 'LawAndOrderSubpoenaTexts'
  confirmation?: Maybe<Scalars['String']>
  deadline?: Maybe<Scalars['String']>
  description?: Maybe<Scalars['String']>
  information?: Maybe<Scalars['String']>
}

export type Lawyer = {
  __typename?: 'Lawyer'
  licenceType?: Maybe<Scalars['String']>
  name?: Maybe<Scalars['String']>
}

export type LicenseDriverLicenseData = {
  __typename?: 'LicenseDriverLicenseData'
  name: Scalars['String']
  nationalId: Scalars['String']
  picture?: Maybe<Scalars['String']>
}

export type LifeEventPage = {
  __typename?: 'LifeEventPage'
  category?: Maybe<ArticleCategory>
  content: Array<Slice>
  featured: Array<Featured>
  featuredImage?: Maybe<Image>
  id: Scalars['ID']
  image?: Maybe<Image>
  intro?: Maybe<Scalars['String']>
  organizations: Array<Organization>
  relatedLifeEvents: Array<LifeEventPage>
  seeMoreText?: Maybe<Scalars['String']>
  shortIntro?: Maybe<Scalars['String']>
  shortTitle?: Maybe<Scalars['String']>
  slug: Scalars['String']
  thumbnail?: Maybe<Image>
  tinyThumbnail?: Maybe<Image>
  title: Scalars['String']
}

export type Link = {
  __typename?: 'Link'
  date: Scalars['String']
  id: Scalars['ID']
  intro?: Maybe<Scalars['String']>
  labels?: Maybe<Array<Scalars['String']>>
  text: Scalars['String']
  url: Scalars['String']
}

export type LinkCard = {
  __typename?: 'LinkCard'
  body: Scalars['String']
  id: Scalars['ID']
  linkText?: Maybe<Scalars['String']>
  linkUrl: Scalars['String']
  title: Scalars['String']
}

export type LinkCardSection = {
  __typename?: 'LinkCardSection'
  cards: Array<LinkCard>
  id: Scalars['ID']
  title: Scalars['String']
}

export type LinkGroup = {
  __typename?: 'LinkGroup'
  childrenLinks: Array<Link>
  id: Scalars['ID']
  name: Scalars['String']
  primaryLink?: Maybe<Link>
}

export type LinkList = {
  __typename?: 'LinkList'
  links: Array<Link>
  title: Scalars['String']
}

/** Lists have different statuses to indicate actions that can be preformed on them. */
export type ListStatus =
  /** List is active and open for digital signatures */
  | 'Active'
  /** Collection has been marked as processed and endtime on lists can be extended. */
  | 'Extendable'
  /** List is being reviewed by processing admin. Signatures can be uploaded on list. Comparison between lists and removal of signatures possible. */
  | 'InReview'
  /** List is not active. */
  | 'Inactive'
  /** List has been reviewed by admin. This is a state that can be toggled to InReview. Comparison between lists and removal of signatures possible. */
  | 'Reviewed'

export type LogoListSlice = {
  __typename?: 'LogoListSlice'
  body: Scalars['String']
  id: Scalars['ID']
  images: Array<Image>
  title: Scalars['String']
}

export type MachineDetails = {
  __typename?: 'MachineDetails'
  category?: Maybe<Scalars['String']>
  disabled?: Maybe<Scalars['Boolean']>
  id: Scalars['String']
  ownerNumber?: Maybe<Scalars['String']>
  paymentRequiredForOwnerChange?: Maybe<Scalars['Boolean']>
  plate?: Maybe<Scalars['String']>
  regNumber?: Maybe<Scalars['String']>
  status?: Maybe<Scalars['String']>
  subType?: Maybe<Scalars['String']>
  supervisorName?: Maybe<Scalars['String']>
  type?: Maybe<Scalars['String']>
}

/** The status of a malware scan */
export type MalwareScanStatus = 'SAFE' | 'UNKNOWN' | 'UNSAFE'

export type Manual = {
  __typename?: 'Manual'
  category?: Maybe<ArticleCategory>
  chapters: Array<ManualChapter>
  description?: Maybe<Array<Slice>>
  group?: Maybe<ArticleGroup>
  id: Scalars['ID']
  importance?: Maybe<Scalars['Float']>
  info?: Maybe<Array<Slice>>
  organization?: Maybe<Organization>
  otherCategories?: Maybe<Array<ArticleCategory>>
  otherGroups?: Maybe<Array<ArticleGroup>>
  otherSubgroups?: Maybe<Array<ArticleSubgroup>>
  slug: Scalars['String']
  subgroup?: Maybe<ArticleSubgroup>
  title: Scalars['String']
}

export type ManualChapter = {
  __typename?: 'ManualChapter'
  changelog?: Maybe<ManualChapterChangelog>
  chapterItems: Array<ManualChapterItem>
  description?: Maybe<Array<Slice>>
  id: Scalars['ID']
  intro?: Maybe<Scalars['String']>
  slug: Scalars['String']
  title: Scalars['String']
}

export type ManualChapterChangelog = {
  __typename?: 'ManualChapterChangelog'
  items: Array<ManualChapterChangelogItem>
}

export type ManualChapterChangelogItem = {
  __typename?: 'ManualChapterChangelogItem'
  dateOfChange: Scalars['String']
  textualDescription: Scalars['String']
}

export type ManualChapterItem = {
  __typename?: 'ManualChapterItem'
  content?: Maybe<Array<Slice>>
  id: Scalars['ID']
  manual: ManualPageData
  manualChapter: ManualPageData
  title: Scalars['String']
}

export type ManualPageData = {
  __typename?: 'ManualPageData'
  id: Scalars['ID']
  slug: Scalars['String']
  title: Scalars['String']
}

export type ManyPropertyDetail = {
  __typename?: 'ManyPropertyDetail'
  propertyNumber?: Maybe<Scalars['String']>
  propertyType?: Maybe<Scalars['String']>
  realEstate?: Maybe<Array<RealEstateDetail>>
  ship?: Maybe<ShipDetail>
  vehicle?: Maybe<VehicleDetail>
}

export type MarkNotificationReadResponse = {
  __typename?: 'MarkNotificationReadResponse'
  data: Notification
}

export type MasterLicence = {
  __typename?: 'MasterLicence'
  dateOfPublication?: Maybe<Scalars['DateTime']>
  name?: Maybe<Scalars['String']>
  nationalId?: Maybe<Scalars['String']>
  office?: Maybe<Scalars['String']>
  profession?: Maybe<Scalars['String']>
}

export type MasterLicencesResponse = {
  __typename?: 'MasterLicencesResponse'
  licences: Array<MasterLicence>
}

export type Menu = {
  __typename?: 'Menu'
  id: Scalars['ID']
  links: Array<Link>
  menuLinks: Array<MenuLinkWithChildren>
  title: Scalars['String']
}

export type MenuLink = {
  __typename?: 'MenuLink'
  link: ReferenceLink
  title: Scalars['String']
}

export type MenuLinkWithChildren = {
  __typename?: 'MenuLinkWithChildren'
  childLinks: Array<MenuLink>
  link?: Maybe<ReferenceLink>
  title: Scalars['String']
}

export type MetadataInput = {
  field: EndorsementMetadataDtoFieldEnum
}

export type MortgageCertificateValidationModel = {
  __typename?: 'MortgageCertificateValidationModel'
  exists: Scalars['Boolean']
  hasKMarking: Scalars['Boolean']
  propertyNumber: Scalars['String']
}

export type MultipleStatistics = {
  __typename?: 'MultipleStatistics'
  hasBorderAbove?: Maybe<Scalars['Boolean']>
  id: Scalars['ID']
  link?: Maybe<Link>
  statistics: Array<Statistics>
  title: Scalars['String']
}

export type MunicipalitiesFinancialAidAmountModel = {
  __typename?: 'MunicipalitiesFinancialAidAmountModel'
  aidAmount: Scalars['Float']
  applicationId: Scalars['String']
  childrenAidAmount?: Maybe<Scalars['Float']>
  deductionFactors?: Maybe<
    Array<MunicipalitiesFinancialAidDeductionFactorsModel>
  >
  finalAmount: Scalars['Float']
  income?: Maybe<Scalars['Float']>
  personalTaxCredit: Scalars['Float']
  spousePersonalTaxCredit?: Maybe<Scalars['Float']>
  tax: Scalars['Float']
}

export type MunicipalitiesFinancialAidApplicationChildren = {
  __typename?: 'MunicipalitiesFinancialAidApplicationChildren'
  applicationId: Scalars['String']
  id: Scalars['ID']
  name: Scalars['String']
  nationalId: Scalars['String']
  school?: Maybe<Scalars['String']>
}

export type MunicipalitiesFinancialAidApplicationEventModel = {
  __typename?: 'MunicipalitiesFinancialAidApplicationEventModel'
  applicationId: Scalars['String']
  comment?: Maybe<Scalars['String']>
  created: Scalars['DateTime']
  eventType: Scalars['String']
  id: Scalars['ID']
  staffName?: Maybe<Scalars['String']>
  staffNationalId?: Maybe<Scalars['String']>
}

export type MunicipalitiesFinancialAidApplicationFileModel = {
  __typename?: 'MunicipalitiesFinancialAidApplicationFileModel'
  applicationId: Scalars['String']
  created: Scalars['DateTime']
  id: Scalars['ID']
  key: Scalars['String']
  name: Scalars['String']
  size: Scalars['Float']
  type: Scalars['String']
}

export type MunicipalitiesFinancialAidApplicationFilesInput = {
  files: Array<ApplicationFileInput>
}

export type MunicipalitiesFinancialAidApplicationInput = {
  id: Scalars['String']
}

export type MunicipalitiesFinancialAidApplicationModel = {
  __typename?: 'MunicipalitiesFinancialAidApplicationModel'
  accountNumber?: Maybe<Scalars['String']>
  amount?: Maybe<MunicipalitiesFinancialAidAmountModel>
  applicationEvents?: Maybe<
    Array<MunicipalitiesFinancialAidApplicationEventModel>
  >
  applicationSystemId?: Maybe<Scalars['String']>
  bankNumber?: Maybe<Scalars['String']>
  children?: Maybe<Array<MunicipalitiesFinancialAidApplicationChildren>>
  city?: Maybe<Scalars['String']>
  created: Scalars['DateTime']
  directTaxPayments: Array<DirectTaxPaymentModel>
  email: Scalars['String']
  employment: Scalars['String']
  employmentCustom?: Maybe<Scalars['String']>
  familyStatus: Scalars['String']
  files?: Maybe<Array<MunicipalitiesFinancialAidApplicationFileModel>>
  formComment?: Maybe<Scalars['String']>
  hasIncome: Scalars['Boolean']
  homeCircumstances: Scalars['String']
  homeCircumstancesCustom?: Maybe<Scalars['String']>
  id: Scalars['ID']
  interview?: Maybe<Scalars['Boolean']>
  ledger?: Maybe<Scalars['String']>
  modified: Scalars['DateTime']
  municipalityCode?: Maybe<Scalars['String']>
  name: Scalars['String']
  nationalId: Scalars['String']
  phoneNumber?: Maybe<Scalars['String']>
  postalCode?: Maybe<Scalars['String']>
  rejection?: Maybe<Scalars['String']>
  spouseEmail?: Maybe<Scalars['String']>
  spouseFormComment?: Maybe<Scalars['String']>
  spouseName?: Maybe<Scalars['String']>
  spouseNationalId?: Maybe<Scalars['String']>
  spousePhoneNumber?: Maybe<Scalars['String']>
  state: Scalars['String']
  streetName?: Maybe<Scalars['String']>
  student: Scalars['Boolean']
  studentCustom?: Maybe<Scalars['String']>
  usePersonalTaxCredit: Scalars['Boolean']
}

export type MunicipalitiesFinancialAidCreateFilesModel = {
  __typename?: 'MunicipalitiesFinancialAidCreateFilesModel'
  files: Array<MunicipalitiesFinancialAidApplicationFileModel>
  success: Scalars['Boolean']
}

export type MunicipalitiesFinancialAidCreateSignedUrlInput = {
  fileName: Scalars['String']
  folder: Scalars['String']
}

export type MunicipalitiesFinancialAidDeductionFactorsModel = {
  __typename?: 'MunicipalitiesFinancialAidDeductionFactorsModel'
  amount: Scalars['Float']
  amountId: Scalars['String']
  description: Scalars['String']
}

export type MunicipalitiesFinancialAidGetSignedUrlInput = {
  id: Scalars['String']
}

export type MunicipalitiesFinancialAidSignedUrlModel = {
  __typename?: 'MunicipalitiesFinancialAidSignedUrlModel'
  key: Scalars['String']
  url: Scalars['String']
}

export type MunicipalitiesFinancialAidUpdateApplicationInput = {
  comment?: InputMaybe<Scalars['String']>
  event: Scalars['String']
  id: Scalars['String']
  state: Scalars['String']
}

export type Mutation = {
  __typename?: 'Mutation'
  OJOIAPostApplication: Scalars['Boolean']
  OJOIAPostComment: OfficialJournalOfIcelandApplicationPostCommentResponse
  UserProfileAdminUpdateProfile: UserProfileAdminProfile
  addAttachment?: Maybe<Application>
  addUserProfileDeviceToken: UserDeviceToken
  assignApplication?: Maybe<Application>
  authCreateDelegation: AuthCustomDelegation
  authDeleteAdminDelegation: Scalars['Boolean']
  authDeletePasskey: Scalars['Boolean']
  authPasskeyVerifyRegistration: AuthPasskeyRegistrationVerification
  confirmAirDiscountSchemeInvoice: Array<AirDiscountSchemeFlightLeg>
  consultationPortalDeleteSubscriptionType?: Maybe<Scalars['Boolean']>
  consultationPortalPostAdvice?: Maybe<Scalars['Boolean']>
  consultationPortalPostSubscriptionType?: Maybe<Scalars['Boolean']>
  consultationPortalPostSubscriptions?: Maybe<Scalars['Boolean']>
  consultationPortalPostUserEmail?: Maybe<Scalars['Boolean']>
  contactUs: CommunicationResponse
  contactUsZendeskTicket: CommunicationResponse
  createAdministrativeContact?: Maybe<Contact>
  createAirDiscountSchemeExplicitDiscountCode?: Maybe<
    Array<AirDiscountSchemeDiscount>
  >
  createAirDiscountSchemeSuperExplicitDiscountCode?: Maybe<
    Array<AirDiscountSchemeDiscount>
  >
  createApplication?: Maybe<Application>
  createAuthAdminClient: Array<AuthAdminCreateClientResponse>
  createAuthAdminScope: Array<AuthAdminCreateScopeResponse>
  createAuthDelegation: AuthDelegation
  createAuthLoginRestriction: AuthLoginRestriction
  createDraftRegulation: Scalars['JSON']
  createDraftRegulationCancel: DraftRegulationCancelModel
  createDraftRegulationChange: DraftRegulationChangeModel
  createEmailVerification?: Maybe<Response>
  createFormSystemApplicant: FormSystemApplicant
  createFormSystemApplication: Scalars['Boolean']
  createFormSystemCertification: FormSystemFormCertificationTypeDto
  createFormSystemField: FormSystemField
  createFormSystemForm: FormSystemFormResponse
  createFormSystemListItem: FormSystemListItem
  createFormSystemOrganization: FormSystemOrganization
  createFormSystemOrganizationPermission: FormSystemOrganizationPermissionDto
  createFormSystemScreen: FormSystemScreen
  createFormSystemSection: FormSystemSection
  createHelpdesk?: Maybe<Helpdesk>
  createIcelandicName: IcelandicName
  createMunicipalitiesFinancialAidApplicationFiles: MunicipalitiesFinancialAidCreateFilesModel
  createMunicipalitiesFinancialAidSignedUrl: MunicipalitiesFinancialAidSignedUrlModel
  createProfile?: Maybe<UserProfile>
  createProvider: ClientCredentials
  createSmsVerification?: Maybe<Response>
  createTechnicalContact?: Maybe<Contact>
  createTestProvider: ClientCredentials
  createUploadUrl: PresignedPost
  deleteApplication?: Maybe<Application>
  deleteAttachment?: Maybe<Application>
  deleteAuthAdminClient: Scalars['Boolean']
  deleteAuthDelegation: Scalars['Boolean']
  deleteDraftRegulation: DeleteDraftRegulationModel
  deleteDraftRegulationCancel: DeleteDraftRegulationModel
  deleteDraftRegulationChange: DeleteDraftRegulationModel
  deleteFormSystemApplicant?: Maybe<Scalars['Boolean']>
  deleteFormSystemCertification?: Maybe<Scalars['Boolean']>
  deleteFormSystemField?: Maybe<Scalars['Boolean']>
  deleteFormSystemForm?: Maybe<Scalars['Boolean']>
  deleteFormSystemListItem?: Maybe<Scalars['Boolean']>
  deleteFormSystemOrganizationPermission?: Maybe<Scalars['Boolean']>
  deleteFormSystemScreen?: Maybe<Scalars['Boolean']>
  deleteFormSystemSection?: Maybe<Scalars['Boolean']>
  deleteIcelandicNameById: DeleteNameResponse
  deleteIslykillValue?: Maybe<UserProfile>
  deleteUserProfileDeviceToken: DeleteTokenResponse
  documentProviderPostProvidedCategory: DocumentProviderCategory
  documentProviderPostProvidedType: DocumentProviderType
  documentProviderPutProvidedCategory: DocumentProviderCategory
  documentProviderPutProvidedType: DocumentProviderType
  documentsV2MarkAllAsRead?: Maybe<DocumentV2MarkAllMailAsRead>
  drivingLicenseBookAllowPracticeDriving: DrivingLicenseBookSuccess
  drivingLicenseBookCreateDrivingSchoolTestResult: DrivingLicenceTestResultId
  drivingLicenseBookCreatePracticalDrivingLesson: PracticalDrivingLesson
  drivingLicenseBookDeletePracticalDrivingLesson: DrivingLicenseBookSuccess
  drivingLicenseBookUpdatePracticalDrivingLesson: DrivingLicenseBookSuccess
  emailSignupSubscription: EmailSignupResponse
  endorsementSystemCloseEndorsementList: EndorsementList
  endorsementSystemCreateEndorsementList: EndorsementList
  endorsementSystemEndorseList: Endorsement
  endorsementSystemExportList: ExportUrlResponse
  endorsementSystemLockEndorsementList: EndorsementList
  endorsementSystemOpenEndorsementList: EndorsementList
  endorsementSystemUnendorseList: Scalars['Boolean']
  endorsementSystemUnlockEndorsementList: EndorsementList
  endorsementSystemUpdateEndorsementList: EndorsementList
  endorsementSystemsendPdfEmail: SendPdfEmailResponse
  fetchEducationSignedLicenseUrl?: Maybe<EducationSignedLicense>
  formSystemTranslation: FormSystemTranslation
  generatePkPass: GenericPkPass
  generatePkPassQrCode: GenericPkPassQrCode
  genericForm: CommunicationResponse
  healthDirectorateOrganDonationUpdateDonorStatus?: Maybe<Scalars['Boolean']>
  lawAndOrderDefenseChoicePost?: Maybe<LawAndOrderDefenseChoice>
  markAllNotificationsRead?: Maybe<NotificationsMarkAllAsReadResponse>
  markAllNotificationsSeen?: Maybe<NotificationsMarkAllAsSeenResponse>
  markNotificationAsRead?: Maybe<MarkNotificationReadResponse>
  officialJournalOfIcelandApplicationAddAttachment: OfficialJournalOfIcelandApplicationAddApplicationAttachmentResponse
  officialJournalOfIcelandApplicationDeleteAttachment: OfficialJournalOfIcelandApplicationAddApplicationAttachmentResponse
  officialJournalOfIcelandApplicationGetPresignedUrl: OfficialJournalOfIcelandApplicationGetPresignedUrlResponse
  patchAuthAdminClient: Array<AuthAdminClientEnvironment>
  patchAuthAdminScope: Array<AuthAdminScopeEnvironment>
  patchAuthConsent: Scalars['Boolean']
  patchAuthDelegation: AuthDelegation
  paymentsChargeCard: PaymentsChargeCardResponse
  paymentsCreateInvoice: PaymentsCreateInvoiceResponse
  paymentsVerificationCallback: PaymentsCardVerificationResponse
  paymentsVerifyCard: PaymentsVerifyCardResponse
  /** @deprecated Up for removal */
  postBulkMailAction?: Maybe<BulkMailAction>
  /** @deprecated Up for removal */
  postMailAction?: Maybe<ActionMailBody>
  postMailActionV2?: Maybe<DocumentMailAction>
  /** @deprecated Up for removal */
  postPaperMailInfo?: Maybe<PaperMailBody>
  publishAuthAdminClient: AuthAdminClientEnvironment
  publishAuthAdminScope: AuthAdminScopeEnvironment
  regulationCreatePresignedPost: Scalars['JSON']
  removeAuthLoginRestriction: Scalars['Boolean']
  revokeAuthAdminClientSecrets: Scalars['Boolean']
  rightsPortalDrugsCalculator: RightsPortalDrugCalculatorResponse
  rightsPortalRegisterDentist: RightsPortalDentistRegisterResponse
  rightsPortalRegisterHealthCenter: RightsPortalHealthCenterRegisterResponse
  rotateAuthAdminClientSecret: AuthAdminClientSecret
  runEndpointTests: Array<TestResult>
  serviceWebForms: CommunicationResponse
  signatureCollectionAddAreas: SignatureCollectionSuccess
  signatureCollectionAdminBulkCompareSignaturesAllLists: Array<SignatureCollectionSignature>
  signatureCollectionAdminBulkUploadSignatures: SignatureCollectionBulk
  signatureCollectionAdminCompareList: Array<SignatureCollectionSignature>
  signatureCollectionAdminCreate: SignatureCollectionSlug
  signatureCollectionAdminExtendDeadline: SignatureCollectionSuccess
  signatureCollectionAdminProcess: SignatureCollectionSuccess
  signatureCollectionAdminRemoveCandidate: SignatureCollectionSuccess
  signatureCollectionAdminRemoveList: SignatureCollectionSuccess
  signatureCollectionAdminToggleListReview: SignatureCollectionSuccess
  signatureCollectionAdminUnsign: SignatureCollectionSuccess
  signatureCollectionAdminUpdatePaperSignaturePageNumber: SignatureCollectionSuccess
  signatureCollectionAdminUploadPaperSignature: SignatureCollectionSuccess
  signatureCollectionCancel: SignatureCollectionSuccess
  signatureCollectionLockList: SignatureCollectionSuccess
  signatureCollectionUnsign: SignatureCollectionSuccess
  signatureCollectionUpdatePaperSignaturePageNumber: SignatureCollectionSuccess
  signatureCollectionUploadPaperSignature: SignatureCollectionSuccess
  submitApplication?: Maybe<Application>
  submitFormSystemApplication: Scalars['Boolean']
  submitFormSystemScreen: Scalars['Boolean']
  tellUsAStory: CommunicationResponse
  updateAdministrativeContact: Contact
  updateApplication?: Maybe<Application>
  updateApplicationExternalData?: Maybe<Application>
  /** @deprecated Use patchAuthDelegation instead for increased consistency. */
  updateAuthDelegation: AuthDelegation
  updateCurrentEmployer: UpdateCurrentEmployerResponse
  updateDraftRegulationById: Scalars['JSON']
  updateDraftRegulationCancel: DraftRegulationCancelModel
  updateDraftRegulationChange: DraftRegulationChangeModel
  updateEndpoint: AudienceAndScope
  updateFormSystemApplicant?: Maybe<Scalars['Boolean']>
  updateFormSystemApplicationDependencies: Scalars['Boolean']
  updateFormSystemField?: Maybe<Scalars['Boolean']>
  updateFormSystemFieldsDisplayOrder?: Maybe<Scalars['Boolean']>
  updateFormSystemForm?: Maybe<Scalars['Boolean']>
  updateFormSystemListItem?: Maybe<Scalars['Boolean']>
  updateFormSystemListItemsDisplayOrder?: Maybe<Scalars['Boolean']>
  updateFormSystemScreen?: Maybe<FormSystemScreen>
  updateFormSystemScreensDisplayOrder?: Maybe<Scalars['Boolean']>
  updateFormSystemSection?: Maybe<FormSystemSection>
  updateFormSystemSectionsDisplayOrder?: Maybe<Scalars['Boolean']>
  updateHelpdesk: Helpdesk
  updateIcelandicNameById: IcelandicName
  updateMunicipalitiesFinancialAidApplication?: Maybe<MunicipalitiesFinancialAidApplicationModel>
  updateOrganisation: Organisation
  updateProfile?: Maybe<UserProfile>
  updateTechnicalContact: Contact
  updateTestEndpoint: AudienceAndScope
  userProfileConfirmNudge: Scalars['Boolean']
  userProfileUpdateActorProfile: UserProfileActorProfile
  vehicleBulkMileagePost?: Maybe<VehiclesBulkMileageReadingResponse>
  vehicleMileagePost?: Maybe<VehicleMileageDetail>
  vehicleMileagePostV2?: Maybe<VehicleMileagePostResponse>
  vehicleMileagePut?: Maybe<VehicleMileagePutModel>
  vehicleMileagePutV2?: Maybe<VehicleMileagePutResponse>
  verifyLicenseBarcode: VerifyLicenseBarcodeResult
  /** @deprecated Should use verifyLicenseBarcode instead of verifyPkPass */
  verifyPkPass: GenericPkPassVerification
  watsonAssistantChatSubmitFeedback: WatsonAssistantChatSubmitFeedbackResponse
}

export type MutationOjoiaPostApplicationArgs = {
  input: OjoiaIdInput
}

export type MutationOjoiaPostCommentArgs = {
  input: OjoiaPostCommentInput
}

export type MutationUserProfileAdminUpdateProfileArgs = {
  input: UpdateUserProfileInput
  nationalId: Scalars['String']
}

export type MutationAddAttachmentArgs = {
  input: AddAttachmentInput
}

export type MutationAddUserProfileDeviceTokenArgs = {
  input: UserDeviceTokenInput
}

export type MutationAssignApplicationArgs = {
  input: AssignApplicationInput
}

export type MutationAuthCreateDelegationArgs = {
  input: CreateDelegationInput
}

export type MutationAuthDeleteAdminDelegationArgs = {
  id: Scalars['String']
}

export type MutationAuthPasskeyVerifyRegistrationArgs = {
  input: AuthPasskeyRegistrationObject
}

export type MutationConfirmAirDiscountSchemeInvoiceArgs = {
  input: AirDiscountSchemeConfirmInvoiceInput
}

export type MutationConsultationPortalDeleteSubscriptionTypeArgs = {
  input: ConsultationPortalCaseInput
}

export type MutationConsultationPortalPostAdviceArgs = {
  input: ConsultationPortalPostAdviceInput
}

export type MutationConsultationPortalPostSubscriptionTypeArgs = {
  input: ConsultationPortalPostCaseSubscriptionTypeInput
}

export type MutationConsultationPortalPostSubscriptionsArgs = {
  input: ConsultationPortalUserSubscriptionsCommandInput
}

export type MutationConsultationPortalPostUserEmailArgs = {
  input: ConsultationPortalPostEmailCommandInput
}

export type MutationContactUsArgs = {
  input: ContactUsInput
}

export type MutationContactUsZendeskTicketArgs = {
  input: ContactUsInput
}

export type MutationCreateAdministrativeContactArgs = {
  input: CreateContactInput
  organisationId: Scalars['String']
}

export type MutationCreateAirDiscountSchemeExplicitDiscountCodeArgs = {
  input: AirDiscountSchemeCreateExplicitDiscountCodeInput
}

export type MutationCreateAirDiscountSchemeSuperExplicitDiscountCodeArgs = {
  input: AirDiscountSchemeCreateExplicitDiscountCodeInput
}

export type MutationCreateApplicationArgs = {
  input: CreateApplicationInput
  locale?: InputMaybe<Scalars['String']>
}

export type MutationCreateAuthAdminClientArgs = {
  input: CreateAuthAdminClientInput
}

export type MutationCreateAuthAdminScopeArgs = {
  input: CreateScopeInput
}

export type MutationCreateAuthDelegationArgs = {
  input: CreateAuthDelegationInput
}

export type MutationCreateAuthLoginRestrictionArgs = {
  input: CreateAuthLoginRestrictionInput
}

export type MutationCreateDraftRegulationArgs = {
  input: CreateDraftRegulationInput
}

export type MutationCreateDraftRegulationCancelArgs = {
  input: CreateDraftRegulationCancelInput
}

export type MutationCreateDraftRegulationChangeArgs = {
  input: CreateDraftRegulationChangeInput
}

export type MutationCreateEmailVerificationArgs = {
  input: CreateEmailVerificationInput
}

export type MutationCreateFormSystemApplicantArgs = {
  input: CreateFormSystemApplicantInput
}

export type MutationCreateFormSystemApplicationArgs = {
  input: CreateFormSystemApplicationInput
}

export type MutationCreateFormSystemCertificationArgs = {
  input: CreateFormSystemCertificationInput
}

export type MutationCreateFormSystemFieldArgs = {
  input: FormSystemCreateFieldInput
}

export type MutationCreateFormSystemFormArgs = {
  input: FormSystemCreateFormInput
}

export type MutationCreateFormSystemListItemArgs = {
  input: FormSystemCreateListItemInput
}

export type MutationCreateFormSystemOrganizationArgs = {
  input: FormSystemGetOrganizationInput
}

export type MutationCreateFormSystemOrganizationPermissionArgs = {
  input: FormSystemUpdateOrganizationPermissionInput
}

export type MutationCreateFormSystemScreenArgs = {
  input: FormSystemCreateScreenInput
}

export type MutationCreateFormSystemSectionArgs = {
  input: FormSystemCreateSectionInput
}

export type MutationCreateHelpdeskArgs = {
  input: CreateHelpdeskInput
  organisationId: Scalars['String']
}

export type MutationCreateIcelandicNameArgs = {
  input: CreateIcelandicNameInput
}

export type MutationCreateMunicipalitiesFinancialAidApplicationFilesArgs = {
  input: MunicipalitiesFinancialAidApplicationFilesInput
}

export type MutationCreateMunicipalitiesFinancialAidSignedUrlArgs = {
  input: MunicipalitiesFinancialAidCreateSignedUrlInput
}

export type MutationCreateProfileArgs = {
  input: CreateUserProfileInput
}

export type MutationCreateProviderArgs = {
  input: CreateProviderInput
}

export type MutationCreateSmsVerificationArgs = {
  input: CreateSmsVerificationInput
}

export type MutationCreateTechnicalContactArgs = {
  input: CreateContactInput
  organisationId: Scalars['String']
}

export type MutationCreateTestProviderArgs = {
  input: CreateProviderInput
}

export type MutationCreateUploadUrlArgs = {
  filename: Scalars['String']
}

export type MutationDeleteApplicationArgs = {
  input: DeleteApplicationInput
}

export type MutationDeleteAttachmentArgs = {
  input: DeleteAttachmentInput
}

export type MutationDeleteAuthAdminClientArgs = {
  input: AuthAdminDeleteClientInput
}

export type MutationDeleteAuthDelegationArgs = {
  input: DeleteAuthDelegationInput
}

export type MutationDeleteDraftRegulationArgs = {
  input: DeleteDraftRegulationInput
}

export type MutationDeleteDraftRegulationCancelArgs = {
  input: DeleteDraftRegulationCancelInput
}

export type MutationDeleteDraftRegulationChangeArgs = {
  input: DeleteDraftRegulationChangeInput
}

export type MutationDeleteFormSystemApplicantArgs = {
  input: DeleteFormSystemApplicantInput
}

export type MutationDeleteFormSystemCertificationArgs = {
  input: DeleteFormSystemCertificationInput
}

export type MutationDeleteFormSystemFieldArgs = {
  input: FormSystemDeleteFieldInput
}

export type MutationDeleteFormSystemFormArgs = {
  input: FormSystemDeleteFormInput
}

export type MutationDeleteFormSystemListItemArgs = {
  input: FormSystemDeleteListItemInput
}

export type MutationDeleteFormSystemOrganizationPermissionArgs = {
  input: FormSystemUpdateOrganizationPermissionInput
}

export type MutationDeleteFormSystemScreenArgs = {
  input: FormSystemDeleteScreenInput
}

export type MutationDeleteFormSystemSectionArgs = {
  input: FormSystemDeleteSectionInput
}

export type MutationDeleteIcelandicNameByIdArgs = {
  input: DeleteIcelandicNameByIdInput
}

export type MutationDeleteIslykillValueArgs = {
  input: DeleteIslykillValueInput
}

export type MutationDeleteUserProfileDeviceTokenArgs = {
  input: UserDeviceTokenInput
}

export type MutationDocumentProviderPostProvidedCategoryArgs = {
  input: DocumentProviderCategoriesAndTypesPostInput
}

export type MutationDocumentProviderPostProvidedTypeArgs = {
  input: DocumentProviderCategoriesAndTypesPostInput
}

export type MutationDocumentProviderPutProvidedCategoryArgs = {
  input: DocumentProviderCategoriesAndTypesPutInput
}

export type MutationDocumentProviderPutProvidedTypeArgs = {
  input: DocumentProviderCategoriesAndTypesPutInput
}

export type MutationDrivingLicenseBookAllowPracticeDrivingArgs = {
  input: DrivingLicenseBookStudentInput
}

export type MutationDrivingLicenseBookCreateDrivingSchoolTestResultArgs = {
  input: CreateDrivingSchoolTestResultInput
}

export type MutationDrivingLicenseBookCreatePracticalDrivingLessonArgs = {
  input: CreatePracticalDrivingLessonInput
}

export type MutationDrivingLicenseBookDeletePracticalDrivingLessonArgs = {
  input: DeletePracticalDrivingLessonInput
}

export type MutationDrivingLicenseBookUpdatePracticalDrivingLessonArgs = {
  input: UpdatePracticalDrivingLessonInput
}

export type MutationEmailSignupSubscriptionArgs = {
  input: EmailSignupInput
}

export type MutationEndorsementSystemCloseEndorsementListArgs = {
  input: FindEndorsementListInput
}

export type MutationEndorsementSystemCreateEndorsementListArgs = {
  input: CreateEndorsementListDto
}

export type MutationEndorsementSystemEndorseListArgs = {
  input: CreateEndorsementInput
}

export type MutationEndorsementSystemExportListArgs = {
  input: ExportEndorsementListInput
}

export type MutationEndorsementSystemLockEndorsementListArgs = {
  input: FindEndorsementListInput
}

export type MutationEndorsementSystemOpenEndorsementListArgs = {
  input: OpenListInput
}

export type MutationEndorsementSystemUnendorseListArgs = {
  input: FindEndorsementListInput
}

export type MutationEndorsementSystemUnlockEndorsementListArgs = {
  input: FindEndorsementListInput
}

export type MutationEndorsementSystemUpdateEndorsementListArgs = {
  input: UpdateEndorsementListInput
}

export type MutationEndorsementSystemsendPdfEmailArgs = {
  input: SendPdfEmailInput
}

export type MutationFetchEducationSignedLicenseUrlArgs = {
  input: FetchEducationSignedLicenseUrlInput
}

export type MutationFormSystemTranslationArgs = {
  input: FormSystemTranslationInput
}

export type MutationGeneratePkPassArgs = {
  input: GeneratePkPassInput
}

export type MutationGeneratePkPassQrCodeArgs = {
  input: GeneratePkPassInput
}

export type MutationGenericFormArgs = {
  input: GenericFormInput
}

export type MutationHealthDirectorateOrganDonationUpdateDonorStatusArgs = {
  input: HealthDirectorateOrganDonorInput
  locale?: InputMaybe<Scalars['String']>
}

export type MutationLawAndOrderDefenseChoicePostArgs = {
  input: LawAndOrderDefenseChoiceInput
  locale?: InputMaybe<Scalars['String']>
}

export type MutationMarkNotificationAsReadArgs = {
  id: Scalars['Float']
  locale?: InputMaybe<Scalars['String']>
}

export type MutationOfficialJournalOfIcelandApplicationAddAttachmentArgs = {
  input: OfficialJournalOfIcelandApplicationAddApplicationAttachmentInput
}

export type MutationOfficialJournalOfIcelandApplicationDeleteAttachmentArgs = {
  input: OfficialJournalOfIcelandApplicationDeleteApplicationAttachmentInput
}

export type MutationOfficialJournalOfIcelandApplicationGetPresignedUrlArgs = {
  input: OfficialJournalOfIcelandApplicationGetPresignedUrlInput
}

export type MutationPatchAuthAdminClientArgs = {
  input: AuthAdminPatchClientInput
}

export type MutationPatchAuthAdminScopeArgs = {
  input: AuthAdminPatchScopeInput
}

export type MutationPatchAuthConsentArgs = {
  input: PatchAuthConsentInput
}

export type MutationPatchAuthDelegationArgs = {
  input: PatchAuthDelegationInput
}

export type MutationPaymentsChargeCardArgs = {
  input: PaymentsChargeCardInput
}

export type MutationPaymentsCreateInvoiceArgs = {
  input: PaymentsCreateInvoiceInput
}

export type MutationPaymentsVerificationCallbackArgs = {
  input: PaymentsCardVerificationCallbackInput
}

export type MutationPaymentsVerifyCardArgs = {
  input: PaymentsVerifyCardInput
}

export type MutationPostBulkMailActionArgs = {
  input: PostBulkMailActionResolverInput
}

export type MutationPostMailActionArgs = {
  input: PostMailActionResolverInput
}

export type MutationPostMailActionV2Args = {
  input: DocumentsV2MailActionInput
}

export type MutationPostPaperMailInfoArgs = {
  input: PostRequestPaperInput
}

export type MutationPublishAuthAdminClientArgs = {
  input: AuthAdminPublishClientInput
}

export type MutationPublishAuthAdminScopeArgs = {
  input: AuthAdminPublishScopeInput
}

export type MutationRegulationCreatePresignedPostArgs = {
  input: CreateRegulationPresignedPostInput
}

export type MutationRevokeAuthAdminClientSecretsArgs = {
  input: AuthAdminRevokeSecretsInput
}

export type MutationRightsPortalDrugsCalculatorArgs = {
  input: RightsPortalDrugCalculatorInput
}

export type MutationRightsPortalRegisterDentistArgs = {
  input: RightsPortalDentistRegisterInput
}

export type MutationRightsPortalRegisterHealthCenterArgs = {
  input: RightsPortalHealthCenterRegisterInput
}

export type MutationRotateAuthAdminClientSecretArgs = {
  input: AuthAdminRotateSecretInput
}

export type MutationRunEndpointTestsArgs = {
  input: RunEndpointTestsInput
}

export type MutationServiceWebFormsArgs = {
  input: ServiceWebFormsInput
}

export type MutationSignatureCollectionAddAreasArgs = {
  input: SignatureCollectionAddListsInput
}

export type MutationSignatureCollectionAdminBulkCompareSignaturesAllListsArgs = {
  input: SignatureCollectionNationalIdsInput
}

export type MutationSignatureCollectionAdminBulkUploadSignaturesArgs = {
  input: SignatureCollectionListBulkUploadInput
}

export type MutationSignatureCollectionAdminCompareListArgs = {
  input: SignatureCollectionListNationalIdsInput
}

export type MutationSignatureCollectionAdminCreateArgs = {
  input: SignatureCollectionListInput
}

export type MutationSignatureCollectionAdminExtendDeadlineArgs = {
  input: SignatureCollectionExtendDeadlineInput
}

export type MutationSignatureCollectionAdminProcessArgs = {
  input: SignatureCollectionIdInput
}

export type MutationSignatureCollectionAdminRemoveCandidateArgs = {
  input: SignatureCollectionCandidateIdInput
}

export type MutationSignatureCollectionAdminRemoveListArgs = {
  input: SignatureCollectionListIdInput
}

export type MutationSignatureCollectionAdminToggleListReviewArgs = {
  input: SignatureCollectionListIdInput
}

export type MutationSignatureCollectionAdminUnsignArgs = {
  input: SignatureCollectionSignatureIdInput
}

export type MutationSignatureCollectionAdminUpdatePaperSignaturePageNumberArgs = {
  input: SignatureCollectionSignatureUpdateInput
}

export type MutationSignatureCollectionAdminUploadPaperSignatureArgs = {
  input: SignatureCollectionUploadPaperSignatureInput
}

export type MutationSignatureCollectionCancelArgs = {
  input: SignatureCollectionCancelListsInput
}

export type MutationSignatureCollectionLockListArgs = {
  input: SignatureCollectionListIdInput
}

export type MutationSignatureCollectionUnsignArgs = {
  input: SignatureCollectionListIdInput
}

export type MutationSignatureCollectionUpdatePaperSignaturePageNumberArgs = {
  input: SignatureCollectionSignatureUpdateInput
}

export type MutationSignatureCollectionUploadPaperSignatureArgs = {
  input: SignatureCollectionUploadPaperSignatureInput
}

export type MutationSubmitApplicationArgs = {
  input: SubmitApplicationInput
}

export type MutationSubmitFormSystemApplicationArgs = {
  input: FormSystemApplicationInput
}

export type MutationSubmitFormSystemScreenArgs = {
  input: SubmitFormSystemScreenInput
}

export type MutationTellUsAStoryArgs = {
  input: TellUsAStoryInput
}

export type MutationUpdateAdministrativeContactArgs = {
  administrativeContactId: Scalars['String']
  contact: UpdateContactInput
  organisationId: Scalars['String']
}

export type MutationUpdateApplicationArgs = {
  input: UpdateApplicationInput
  locale?: InputMaybe<Scalars['String']>
}

export type MutationUpdateApplicationExternalDataArgs = {
  input: UpdateApplicationExternalDataInput
  locale?: InputMaybe<Scalars['String']>
}

export type MutationUpdateAuthDelegationArgs = {
  input: UpdateAuthDelegationInput
}

export type MutationUpdateCurrentEmployerArgs = {
  input: UpdateCurrentEmployerInput
}

export type MutationUpdateDraftRegulationByIdArgs = {
  input: EditDraftRegulationInput
}

export type MutationUpdateDraftRegulationCancelArgs = {
  input: UpdateDraftRegulationCancelInput
}

export type MutationUpdateDraftRegulationChangeArgs = {
  input: UpdateDraftRegulationChangeInput
}

export type MutationUpdateEndpointArgs = {
  input: UpdateEndpointInput
}

export type MutationUpdateFormSystemApplicantArgs = {
  input: UpdateFormSystemApplicantInput
}

export type MutationUpdateFormSystemApplicationDependenciesArgs = {
  input: UpdateFormSystemApplicationDependenciesInput
}

export type MutationUpdateFormSystemFieldArgs = {
  input: FormSystemUpdateFieldInput
}

export type MutationUpdateFormSystemFieldsDisplayOrderArgs = {
  input: FormSystemUpdateFieldsDisplayOrderInput
}

export type MutationUpdateFormSystemFormArgs = {
  input: FormSystemUpdateFormInput
}

export type MutationUpdateFormSystemListItemArgs = {
  input: FormSystemUpdateListItemInput
}

export type MutationUpdateFormSystemListItemsDisplayOrderArgs = {
  input: FormSystemUpdateListItemsDisplayOrderInput
}

export type MutationUpdateFormSystemScreenArgs = {
  input: FormSystemUpdateScreenInput
}

export type MutationUpdateFormSystemScreensDisplayOrderArgs = {
  input: FormSystemUpdateScreensDisplayOrderInput
}

export type MutationUpdateFormSystemSectionArgs = {
  input: FormSystemUpdateSectionInput
}

export type MutationUpdateFormSystemSectionsDisplayOrderArgs = {
  input: FormSystemUpdateSectionsDisplayOrderInput
}

export type MutationUpdateHelpdeskArgs = {
  helpdesk: UpdateHelpdeskInput
  helpdeskId: Scalars['String']
  organisationId: Scalars['String']
}

export type MutationUpdateIcelandicNameByIdArgs = {
  input: UpdateIcelandicNameInput
}

export type MutationUpdateMunicipalitiesFinancialAidApplicationArgs = {
  input: MunicipalitiesFinancialAidUpdateApplicationInput
}

export type MutationUpdateOrganisationArgs = {
  id: Scalars['String']
  input: UpdateOrganisationInput
}

export type MutationUpdateProfileArgs = {
  input: UpdateUserProfileInput
}

export type MutationUpdateTechnicalContactArgs = {
  contact: UpdateContactInput
  organisationId: Scalars['String']
  technicalContactId: Scalars['String']
}

export type MutationUpdateTestEndpointArgs = {
  input: UpdateEndpointInput
}

export type MutationUserProfileUpdateActorProfileArgs = {
  input: UserProfileUpdateActorProfileInput
}

export type MutationVehicleBulkMileagePostArgs = {
  input: PostVehicleBulkMileageInput
}

export type MutationVehicleMileagePostArgs = {
  input: PostVehicleMileageInput
}

export type MutationVehicleMileagePostV2Args = {
  input: PostVehicleMileageInput
}

export type MutationVehicleMileagePutArgs = {
  input: PutVehicleMileageInput
}

export type MutationVehicleMileagePutV2Args = {
  input: PutVehicleMileageInput
}

export type MutationVerifyLicenseBarcodeArgs = {
  input: VerifyLicenseBarcodeInput
}

export type MutationVerifyPkPassArgs = {
  input: VerifyPkPassInput
}

export type MutationWatsonAssistantChatSubmitFeedbackArgs = {
  input: WatsonAssistantChatSubmitFeedbackInput
}

export type MyPlateOwnershipChecksByRegno = {
  __typename?: 'MyPlateOwnershipChecksByRegno'
  validationErrorMessages?: Maybe<Array<VehicleValidationErrorMessage>>
}

export type Namespace = {
  __typename?: 'Namespace'
  fields: Scalars['String']
  namespace: Scalars['String']
}

export type NationalRegistryAddress = {
  __typename?: 'NationalRegistryAddress'
  apartment?: Maybe<Scalars['String']>
  city?: Maybe<Scalars['String']>
  code?: Maybe<Scalars['ID']>
  lastUpdated?: Maybe<Scalars['String']>
  municipalityText?: Maybe<Scalars['String']>
  postalCode?: Maybe<Scalars['String']>
  streetAddress?: Maybe<Scalars['String']>
}

export type NationalRegistryBanMarking = {
  __typename?: 'NationalRegistryBanMarking'
  banMarked: Scalars['Boolean']
  startDate?: Maybe<Scalars['String']>
}

export type NationalRegistryBirthplace = {
  __typename?: 'NationalRegistryBirthplace'
  dateOfBirth?: Maybe<Scalars['DateTime']>
  location?: Maybe<Scalars['String']>
  municipalityCode?: Maybe<Scalars['String']>
  municipalityText?: Maybe<Scalars['String']>
}

export type NationalRegistryChild = {
  __typename?: 'NationalRegistryChild'
  birthday?: Maybe<Scalars['String']>
  birthplace?: Maybe<Scalars['String']>
  custody1?: Maybe<Scalars['String']>
  custody2?: Maybe<Scalars['String']>
  custodyText1?: Maybe<Scalars['String']>
  custodyText2?: Maybe<Scalars['String']>
  displayName?: Maybe<Scalars['String']>
  /** Deprecated */
  fate?: Maybe<Scalars['String']>
  firstName?: Maybe<Scalars['String']>
  fullName: Scalars['String']
  gender?: Maybe<Scalars['String']>
  genderDisplay?: Maybe<Scalars['String']>
  homeAddress?: Maybe<Scalars['String']>
  lastName?: Maybe<Scalars['String']>
  legalResidence?: Maybe<Scalars['String']>
  middleName?: Maybe<Scalars['String']>
  municipality?: Maybe<Scalars['String']>
  nameCustody1?: Maybe<Scalars['String']>
  nameCustody2?: Maybe<Scalars['String']>
  nameParent1?: Maybe<Scalars['String']>
  nameParent2?: Maybe<Scalars['String']>
  nationalId: Scalars['ID']
  nationality?: Maybe<Scalars['String']>
  parent1?: Maybe<Scalars['String']>
  parent2?: Maybe<Scalars['String']>
  postal?: Maybe<Scalars['String']>
  religion?: Maybe<Scalars['String']>
  surname?: Maybe<Scalars['String']>
}

export type NationalRegistryChildCustody = {
  __typename?: 'NationalRegistryChildCustody'
  details?: Maybe<NationalRegistryPerson>
  fullName?: Maybe<Scalars['String']>
  nationalId: Scalars['ID']
}

export type NationalRegistryCitizenship = {
  __typename?: 'NationalRegistryCitizenship'
  code: Scalars['ID']
  name: Scalars['String']
}

export type NationalRegistryCustodian = {
  __typename?: 'NationalRegistryCustodian'
  code?: Maybe<Scalars['String']>
  /** Deprecated */
  fate?: Maybe<Scalars['String']>
  /** @deprecated This might return the display name instead of true full name. Use name object instead. */
  fullName?: Maybe<Scalars['String']>
  livesWithChild?: Maybe<Scalars['Boolean']>
  nationalId: Scalars['ID']
  text?: Maybe<Scalars['String']>
}

export type NationalRegistryGender =
  | 'FEMALE'
  | 'FEMALE_MINOR'
  | 'MALE'
  | 'MALE_MINOR'
  | 'TRANSGENDER'
  | 'TRANSGENDER_MINOR'
  | 'UNKNOWN'

export type NationalRegistryHousing = {
  __typename?: 'NationalRegistryHousing'
  address?: Maybe<NationalRegistryAddress>
  domicileId: Scalars['ID']
  domicileIdLast1stOfDecember?: Maybe<Scalars['String']>
  domicileIdPreviousIcelandResidence?: Maybe<Scalars['String']>
  domicileInhabitants?: Maybe<Array<NationalRegistryPersonBase>>
  residence?: Maybe<NationalRegistryAddress>
}

export type NationalRegistryMaritalStatus =
  | 'DIVORCED'
  | 'FOREIGN_RESIDENCE_MARRIED_TO_UNREGISTERED_PERSON'
  | 'ICELANDIC_RESIDENCE_MARRIED_TO_UNREGISTERED_PERSON'
  | 'MARRIED'
  | 'MARRIED_LIVING_SEPARATELY'
  | 'MARRIED_TO_FOREIGN_LAW_PERSON'
  | 'SEPARATED'
  | 'UNKNOWN'
  | 'UNMARRIED'
  | 'WIDOWED'

export type NationalRegistryName = {
  __typename?: 'NationalRegistryName'
  displayName?: Maybe<Scalars['String']>
  firstName?: Maybe<Scalars['String']>
  fullName?: Maybe<Scalars['String']>
  lastName?: Maybe<Scalars['String']>
  middleName?: Maybe<Scalars['String']>
}

export type NationalRegistryNationalIdType =
  | 'DECEASED'
  | 'NATIONAL_REGISTRY_NATIONAL_ID'
  | 'SYSTEM_NATIONAL_ID'
  | 'UNKNOWN'

export type NationalRegistryPerson = {
  __typename?: 'NationalRegistryPerson'
  /** @deprecated Moving into the Housing object property */
  address?: Maybe<NationalRegistryAddress>
  /** @deprecated Up for removal. Easily calculated with the nationalId property */
  age?: Maybe<Scalars['Float']>
  /** @deprecated Renaming to expectionFromDirectMarketing */
  banMarking?: Maybe<NationalRegistryBanMarking>
  /** Unique string. Can be used for URLs. */
  baseId?: Maybe<Scalars['String']>
  biologicalChildren?: Maybe<Array<NationalRegistryChildCustody>>
  birthParents?: Maybe<Array<NationalRegistryPersonBase>>
  /** @deprecated Moving to the Birthplace object property containing more information */
  birthPlace?: Maybe<Scalars['String']>
  /** @deprecated Up for removal. Easily calculated with the nationalId property */
  birthday?: Maybe<Scalars['DateTime']>
  birthplace?: Maybe<NationalRegistryBirthplace>
  childCustody?: Maybe<Array<NationalRegistryChildCustody>>
  citizenship?: Maybe<NationalRegistryCitizenship>
  custodians?: Maybe<Array<NationalRegistryCustodian>>
  exceptionFromDirectMarketing?: Maybe<Scalars['Boolean']>
  /** @deprecated Moving to housing -> domicileId since the familyNr naming is outdated */
  familyNr?: Maybe<Scalars['String']>
  /** Deprecated */
  fate?: Maybe<Scalars['String']>
  /** @deprecated Moving to name object property */
  firstName?: Maybe<Scalars['String']>
  /** @deprecated This might return the display name instead of true full name. Use name object instead. */
  fullName?: Maybe<Scalars['String']>
  gender?: Maybe<NationalRegistryGender>
  housing?: Maybe<NationalRegistryHousing>
  /** @deprecated Moving to name object property */
  lastName?: Maybe<Scalars['String']>
  /** @deprecated Moving to the housing object property as a couple of object properties */
  legalResidence?: Maybe<Scalars['String']>
  maritalStatus?: Maybe<NationalRegistryMaritalStatus>
  /** @deprecated Moving to name object property */
  middleName?: Maybe<Scalars['String']>
  name?: Maybe<NationalRegistryName>
  nationalId: Scalars['ID']
  nationalIdType?: Maybe<NationalRegistryNationalIdType>
  religion?: Maybe<Scalars['String']>
  spouse?: Maybe<NationalRegistrySpouse>
}

export type NationalRegistryPersonBiologicalChildrenArgs = {
  childNationalId?: InputMaybe<Scalars['String']>
}

export type NationalRegistryPersonChildCustodyArgs = {
  childNationalId?: InputMaybe<Scalars['String']>
}

export type NationalRegistryPersonBase = {
  __typename?: 'NationalRegistryPersonBase'
  /** Deprecated */
  fate?: Maybe<Scalars['String']>
  /** @deprecated This might return the display name instead of true full name. Use name object instead. */
  fullName?: Maybe<Scalars['String']>
  nationalId: Scalars['ID']
}

export type NationalRegistryReligion = {
  __typename?: 'NationalRegistryReligion'
  code?: Maybe<Scalars['String']>
  name?: Maybe<Scalars['String']>
}

export type NationalRegistryResidence = {
  __typename?: 'NationalRegistryResidence'
  address: NationalRegistryXRoadAddress
  country?: Maybe<Scalars['String']>
  dateOfChange?: Maybe<Scalars['DateTime']>
  houseIdentificationCode?: Maybe<Scalars['String']>
  realEstateNumber?: Maybe<Scalars['String']>
}

export type NationalRegistrySpouse = {
  __typename?: 'NationalRegistrySpouse'
  cohabitant?: Maybe<Scalars['String']>
  cohabitationWithSpouse?: Maybe<Scalars['Boolean']>
  /** Deprecated */
  fate?: Maybe<Scalars['String']>
  /** @deprecated This might return the display name instead of true full name. Use name object instead. */
  fullName?: Maybe<Scalars['String']>
  maritalStatus?: Maybe<Scalars['String']>
  /** @deprecated Renaming to fullName */
  name?: Maybe<Scalars['String']>
  nationalId: Scalars['ID']
}

export type NationalRegistryUser = {
  __typename?: 'NationalRegistryUser'
  address?: Maybe<NationalRegistryAddress>
  age: Scalars['Float']
  banMarking?: Maybe<NationalRegistryBanMarking>
  birthPlace?: Maybe<Scalars['String']>
  birthday: Scalars['DateTime']
  citizenship?: Maybe<NationalRegistryCitizenship>
  familyNr?: Maybe<Scalars['String']>
  firstName?: Maybe<Scalars['String']>
  fullName: Scalars['String']
  gender?: Maybe<NationalRegistryGender>
  lastName?: Maybe<Scalars['String']>
  legalResidence?: Maybe<Scalars['String']>
  maritalStatus?: Maybe<NationalRegistryMaritalStatus>
  middleName?: Maybe<Scalars['String']>
  nationalId: Scalars['ID']
  religion?: Maybe<Scalars['String']>
  spouse?: Maybe<NationalRegistrySpouse>
}

export type NationalRegistryXRoadAddress = {
  __typename?: 'NationalRegistryXRoadAddress'
  city?: Maybe<Scalars['String']>
  municipalityCode?: Maybe<Scalars['String']>
  postalCode?: Maybe<Scalars['String']>
  streetName: Scalars['String']
}

export type NationalRegistryXRoadBirthplace = {
  __typename?: 'NationalRegistryXRoadBirthplace'
  dateOfBirth: Scalars['DateTime']
  location?: Maybe<Scalars['String']>
  municipalityCode?: Maybe<Scalars['String']>
}

export type NationalRegistryXRoadChildGuardianship = {
  __typename?: 'NationalRegistryXRoadChildGuardianship'
  childNationalId: Scalars['ID']
  legalDomicileParent?: Maybe<Array<Scalars['String']>>
  residenceParent?: Maybe<Array<Scalars['String']>>
}

export type NationalRegistryXRoadChildGuardianshipInput = {
  childNationalId: Scalars['String']
}

export type NationalRegistryXRoadCitizenship = {
  __typename?: 'NationalRegistryXRoadCitizenship'
  code: Scalars['String']
  name?: Maybe<Scalars['String']>
}

export type NationalRegistryXRoadPerson = {
  __typename?: 'NationalRegistryXRoadPerson'
  address?: Maybe<NationalRegistryXRoadAddress>
  birthplace?: Maybe<NationalRegistryXRoadBirthplace>
  children?: Maybe<Array<NationalRegistryXRoadPerson>>
  citizenship?: Maybe<NationalRegistryXRoadCitizenship>
  fullName: Scalars['String']
  genderCode: Scalars['String']
  livesWithApplicant?: Maybe<Scalars['Boolean']>
  livesWithBothParents?: Maybe<Scalars['Boolean']>
  nationalId: Scalars['ID']
  otherParent?: Maybe<NationalRegistryXRoadPerson>
  residenceHistory?: Maybe<Array<NationalRegistryResidence>>
  spouse?: Maybe<NationalRegistryXRoadSpouse>
}

export type NationalRegistryXRoadSpouse = {
  __typename?: 'NationalRegistryXRoadSpouse'
  maritalStatus?: Maybe<Scalars['String']>
  name?: Maybe<Scalars['String']>
  nationalId?: Maybe<Scalars['ID']>
}

export type News = {
  __typename?: 'News'
  content?: Maybe<Array<Slice>>
  date: Scalars['String']
  featuredImage?: Maybe<Image>
  fullWidthImageInContent?: Maybe<Scalars['Boolean']>
  genericTags: Array<GenericTag>
  id: Scalars['ID']
  image?: Maybe<Image>
  initialPublishDate?: Maybe<Scalars['String']>
  intro?: Maybe<Scalars['String']>
  organization?: Maybe<Organization>
  signLanguageVideo?: Maybe<EmbeddedVideo>
  slug: Scalars['String']
  subtitle: Scalars['String']
  title: Scalars['String']
}

export type NewsList = {
  __typename?: 'NewsList'
  items: Array<News>
  total: Scalars['Int']
}

export type NextInspection = {
  __typename?: 'NextInspection'
  nextInspectionDate?: Maybe<Scalars['DateTime']>
  nextInspectionDateIfPassedInspectionToday?: Maybe<Scalars['DateTime']>
}

export type Notification = {
  __typename?: 'Notification'
  id: Scalars['Int']
  message: NotificationMessage
  metadata: NotificationMetadata
  notificationId: Scalars['ID']
  recipient: NotificationRecipient
  sender: NotificationSender
}

export type NotificationLink = {
  __typename?: 'NotificationLink'
  url?: Maybe<Scalars['String']>
}

export type NotificationMessage = {
  __typename?: 'NotificationMessage'
  body: Scalars['String']
  dataCopy?: Maybe<Scalars['String']>
  /** Displays the {dataCopy} by default, will display {body} as fallback */
  displayBody: Scalars['String']
  link: NotificationLink
  title: Scalars['String']
}

export type NotificationMetadata = {
  __typename?: 'NotificationMetadata'
  created?: Maybe<Scalars['DateTime']>
  read?: Maybe<Scalars['Boolean']>
  seen?: Maybe<Scalars['Boolean']>
  sent: Scalars['DateTime']
  updated?: Maybe<Scalars['DateTime']>
}

export type NotificationRecipient = {
  __typename?: 'NotificationRecipient'
  nationalId?: Maybe<Scalars['String']>
}

export type NotificationResponse = {
  __typename?: 'NotificationResponse'
  data: Notification
}

export type NotificationSender = {
  __typename?: 'NotificationSender'
  id?: Maybe<Scalars['String']>
  logoUrl?: Maybe<Scalars['String']>
}

export type Notifications = {
  __typename?: 'Notifications'
  data: Array<Notification>
  pageInfo: PageInfoDto
  totalCount: Scalars['Float']
  unreadCount?: Maybe<Scalars['Int']>
  unseenCount?: Maybe<Scalars['Int']>
}

export type NotificationsInput = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  limit?: InputMaybe<Scalars['Int']>
}

export type NotificationsMarkAllAsReadResponse = {
  __typename?: 'NotificationsMarkAllAsReadResponse'
  success: Scalars['Boolean']
}

export type NotificationsMarkAllAsSeenResponse = {
  __typename?: 'NotificationsMarkAllAsSeenResponse'
  success: Scalars['Boolean']
}

export type NumberBullet = {
  __typename?: 'NumberBullet'
  body: Scalars['String']
  id: Scalars['ID']
  title: Scalars['String']
}

export type NumberBulletGroup = {
  __typename?: 'NumberBulletGroup'
  bullets: Array<NumberBullet>
  defaultVisible: Scalars['Int']
  id: Scalars['ID']
}

export type OjoiaApplicationCaseResponse = {
  __typename?: 'OJOIAApplicationCaseResponse'
  categories: Array<Scalars['String']>
  communicationStatus: Scalars['String']
  department: Scalars['String']
  html: Scalars['String']
  status: Scalars['String']
  type: Scalars['String']
}

export type OjoiaComment = {
  __typename?: 'OJOIAComment'
  action: OjoiCommentActionEnum
  age: Scalars['String']
  comment?: Maybe<Scalars['String']>
  creator: Scalars['String']
  direction: OjoiCommentDirection
  id: Scalars['ID']
  receiver?: Maybe<Scalars['String']>
}

export type OjoiaGetCommentsInput = {
  id: Scalars['ID']
}

export type OjoiaGetCommentsResponse = {
  __typename?: 'OJOIAGetCommentsResponse'
  comments: Array<OjoiaComment>
}

export type OjoiaGetPdfResponse = {
  __typename?: 'OJOIAGetPdfResponse'
  pdf: Scalars['String']
}

/** Input dto that represents the id of the application */
export type OjoiaIdInput = {
  id: Scalars['ID']
  showDate?: InputMaybe<Scalars['Boolean']>
}

export type OjoiaPostCommentInput = {
  comment: Scalars['String']
  id: Scalars['ID']
}

export type OjoiCommentActionEnum = 'APPLICATION' | 'EXTERNAL'

export type OjoiCommentDirection = 'RECEIVED' | 'SENT'

export type OccupationalLicense = {
  __typename?: 'OccupationalLicense'
  dateOfBirth?: Maybe<Scalars['DateTime']>
  genericFields?: Maybe<Array<OccupationalLicensesGenericField>>
  issuer?: Maybe<Scalars['String']>
  issuerTitle?: Maybe<Scalars['String']>
  legalEntityId?: Maybe<Scalars['String']>
  licenseHolderName?: Maybe<Scalars['String']>
  licenseHolderNationalId?: Maybe<Scalars['String']>
  licenseId: Scalars['String']
  licenseNumber?: Maybe<Scalars['String']>
  permit?: Maybe<Scalars['String']>
  profession?: Maybe<Scalars['String']>
  status: OccupationalLicenseStatus
  title?: Maybe<Scalars['String']>
  type: OccupationalLicenseLicenseType
  validFrom: Scalars['DateTime']
}

export type OccupationalLicenseStatus =
  | 'INVALID'
  | 'IN_PROGRESS'
  | 'LIMITED'
  | 'REVOKED'
  | 'UNKNOWN'
  | 'VALID'
  | 'WAIVED'

export type OccupationalLicensesError = {
  __typename?: 'OccupationalLicensesError'
  /** The error, raw */
  error?: Maybe<Scalars['String']>
  type: OccupationalLicenseLicenseType
}

export type OccupationalLicensesGenericField = {
  __typename?: 'OccupationalLicensesGenericField'
  title: Scalars['String']
  value: Scalars['String']
}

export type OccupationalLicensesLicenseInput = {
  id: Scalars['String']
  locale: Scalars['String']
}

export type OccupationalLicensesLicenseResponse = {
  __typename?: 'OccupationalLicensesLicenseResponse'
  actions?: Maybe<Array<OccupationalLicensesLink>>
  footerText?: Maybe<Scalars['String']>
  headerText?: Maybe<Scalars['String']>
  license: OccupationalLicense
}

export type OccupationalLicensesLicenseResult =
  | OccupationalLicense
  | OccupationalLicensesError

export type OccupationalLicensesLicenses = {
  __typename?: 'OccupationalLicensesLicenses'
  licenses: Array<OccupationalLicensesLicenseResult>
}

export type OccupationalLicensesLink = {
  __typename?: 'OccupationalLicensesLink'
  text: Scalars['String']
  type: OccupationalLicensesLinkType
  url: Scalars['String']
}

export type OccupationalLicensesLinkType = 'DOCUMENT' | 'FILE' | 'LINK'

export type OfficialJournalOfIcelandAdvert = {
  __typename?: 'OfficialJournalOfIcelandAdvert'
  categories: Array<OfficialJournalOfIcelandAdvertEntity>
  corrections?: Maybe<Array<OfficialJournalOfIcelandAdvertCorrections>>
  createdDate: Scalars['String']
  department: OfficialJournalOfIcelandAdvertEntity
  document: OfficialJournalOfIcelandAdvertDocument
  id: Scalars['ID']
  involvedParty: OfficialJournalOfIcelandAdvertEntity
  publicationDate: Scalars['String']
  publicationNumber: OfficialJournalOfIcelandAdvertPublicationNumber
  signatureDate: Scalars['String']
  status: OfficialJournalOfIcelandAdvertStatus
  subject: Scalars['String']
  title: Scalars['String']
  type: OfficialJournalOfIcelandAdvertType
  updatedDate: Scalars['String']
}

export type OfficialJournalOfIcelandAdvertCategory = {
  __typename?: 'OfficialJournalOfIcelandAdvertCategory'
  department?: Maybe<OfficialJournalOfIcelandAdvertEntity>
  id: Scalars['ID']
  mainCategory?: Maybe<OfficialJournalOfIcelandAdvertMainCategory>
  slug: Scalars['String']
  title: Scalars['String']
}

export type OfficialJournalOfIcelandAdvertCorrections = {
  __typename?: 'OfficialJournalOfIcelandAdvertCorrections'
  advertId: Scalars['String']
  createdDate: Scalars['String']
  description: Scalars['String']
  documentPdfUrl?: Maybe<Scalars['String']>
  id: Scalars['ID']
  isLegacy?: Maybe<Scalars['Boolean']>
  legacyDate?: Maybe<Scalars['String']>
  title: Scalars['String']
  updatedDate: Scalars['String']
}

export type OfficialJournalOfIcelandAdvertDocument = {
  __typename?: 'OfficialJournalOfIcelandAdvertDocument'
  html: Scalars['String']
  isLegacy: Scalars['Boolean']
  pdfUrl?: Maybe<Scalars['String']>
}

export type OfficialJournalOfIcelandAdvertEntity = {
  __typename?: 'OfficialJournalOfIcelandAdvertEntity'
  id: Scalars['ID']
  slug: Scalars['String']
  title: Scalars['String']
}

export type OfficialJournalOfIcelandAdvertMainCategory = {
  __typename?: 'OfficialJournalOfIcelandAdvertMainCategory'
  categories: Array<OfficialJournalOfIcelandAdvertCategory>
  departmentId: Scalars['String']
  description: Scalars['String']
  id: Scalars['ID']
  slug: Scalars['String']
  title: Scalars['String']
}

export type OfficialJournalOfIcelandAdvertPublicationNumber = {
  __typename?: 'OfficialJournalOfIcelandAdvertPublicationNumber'
  full: Scalars['String']
  number: Scalars['Int']
  year: Scalars['Int']
}

export type OfficialJournalOfIcelandAdvertResponse = {
  __typename?: 'OfficialJournalOfIcelandAdvertResponse'
  advert: OfficialJournalOfIcelandAdvert
}

export type OfficialJournalOfIcelandAdvertSimilar = {
  __typename?: 'OfficialJournalOfIcelandAdvertSimilar'
  categories: Array<OfficialJournalOfIcelandAdvertEntity>
  department: OfficialJournalOfIcelandAdvertEntity
  id: Scalars['ID']
  involvedParty: OfficialJournalOfIcelandAdvertEntity
  publicationDate: Scalars['String']
  publicationNumber: OfficialJournalOfIcelandAdvertPublicationNumber
  subject: Scalars['String']
  title: Scalars['String']
}

export type OfficialJournalOfIcelandAdvertSimilarParams = {
  id: Scalars['String']
}

export type OfficialJournalOfIcelandAdvertSimilarResponse = {
  __typename?: 'OfficialJournalOfIcelandAdvertSimilarResponse'
  adverts: Array<OfficialJournalOfIcelandAdvertSimilar>
}

export type OfficialJournalOfIcelandAdvertSingleParams = {
  id: Scalars['String']
}

export type OfficialJournalOfIcelandAdvertStatus =
  | 'Afturkllu'
  | 'Bi'
  | 'Drg'
  | 'EldriAuglsing'
  | 'Hafna'
  | 'Innsend'
  | 'Tgefin'
  | 'TilbinTilTgfu'
  | 'Vinnslu'
  | 'Virk'

export type OfficialJournalOfIcelandAdvertTemplateInput = {
  type: OfficialJournalOfIcelandApplicationAdvertTemplateTypeEnum
}

export type OfficialJournalOfIcelandAdvertType = {
  __typename?: 'OfficialJournalOfIcelandAdvertType'
  department?: Maybe<OfficialJournalOfIcelandAdvertEntity>
  id: Scalars['ID']
  slug: Scalars['String']
  title: Scalars['String']
}

export type OfficialJournalOfIcelandAdvertsCategoryResponse = {
  __typename?: 'OfficialJournalOfIcelandAdvertsCategoryResponse'
  categories: Array<OfficialJournalOfIcelandAdvertCategory>
  paging: OfficialJournalOfIcelandPaging
}

export type OfficialJournalOfIcelandAdvertsDepartmentResponse = {
  __typename?: 'OfficialJournalOfIcelandAdvertsDepartmentResponse'
  department: OfficialJournalOfIcelandAdvertEntity
}

export type OfficialJournalOfIcelandAdvertsDepartmentsResponse = {
  __typename?: 'OfficialJournalOfIcelandAdvertsDepartmentsResponse'
  departments: Array<OfficialJournalOfIcelandAdvertEntity>
  paging: OfficialJournalOfIcelandPaging
}

export type OfficialJournalOfIcelandAdvertsInput = {
  category?: InputMaybe<Array<Scalars['String']>>
  dateFrom?: InputMaybe<Scalars['String']>
  dateTo?: InputMaybe<Scalars['String']>
  department?: InputMaybe<Array<Scalars['String']>>
  involvedParty?: InputMaybe<Array<Scalars['String']>>
  page?: InputMaybe<Scalars['Int']>
  pageSize?: InputMaybe<Scalars['Int']>
  search?: InputMaybe<Scalars['String']>
  type?: InputMaybe<Array<Scalars['String']>>
}

export type OfficialJournalOfIcelandAdvertsInstitutionsResponse = {
  __typename?: 'OfficialJournalOfIcelandAdvertsInstitutionsResponse'
  institutions: Array<OfficialJournalOfIcelandAdvertEntity>
  paging: OfficialJournalOfIcelandPaging
}

export type OfficialJournalOfIcelandAdvertsMainCategoriesResponse = {
  __typename?: 'OfficialJournalOfIcelandAdvertsMainCategoriesResponse'
  mainCategories: Array<OfficialJournalOfIcelandAdvertMainCategory>
  paging: OfficialJournalOfIcelandPaging
}

export type OfficialJournalOfIcelandAdvertsMainType = {
  __typename?: 'OfficialJournalOfIcelandAdvertsMainType'
  department: OfficialJournalOfIcelandAdvertEntity
  id: Scalars['String']
  slug: Scalars['String']
  title: Scalars['String']
  types: Array<OfficialJournalOfIcelandAdvertType>
}

export type OfficialJournalOfIcelandAdvertsResponse = {
  __typename?: 'OfficialJournalOfIcelandAdvertsResponse'
  adverts: Array<OfficialJournalOfIcelandAdvert>
  paging: OfficialJournalOfIcelandPaging
}

export type OfficialJournalOfIcelandAdvertsTypeResponse = {
  __typename?: 'OfficialJournalOfIcelandAdvertsTypeResponse'
  type: OfficialJournalOfIcelandAdvertType
}

export type OfficialJournalOfIcelandAdvertsTypesResponse = {
  __typename?: 'OfficialJournalOfIcelandAdvertsTypesResponse'
  paging: OfficialJournalOfIcelandPaging
  types: Array<OfficialJournalOfIcelandAdvertType>
}

export type OfficialJournalOfIcelandApplicationAddApplicationAttachmentInput = {
  applicationId: Scalars['String']
  attachmentType: Scalars['String']
  fileExtension: Scalars['String']
  fileFormat: Scalars['String']
  fileLocation: Scalars['String']
  fileName: Scalars['String']
  fileSize: Scalars['Int']
  originalFileName: Scalars['String']
}

export type OfficialJournalOfIcelandApplicationAddApplicationAttachmentResponse = {
  __typename?: 'OfficialJournalOfIcelandApplicationAddApplicationAttachmentResponse'
  success: Scalars['Boolean']
}

export type OfficialJournalOfIcelandApplicationDeleteApplicationAttachmentInput = {
  applicationId: Scalars['String']
  key: Scalars['String']
}

export type OfficialJournalOfIcelandApplicationGetApplicationAttachmentInput = {
  applicationId: Scalars['String']
  attachmentType: Scalars['String']
}

export type OfficialJournalOfIcelandApplicationGetApplicationAttachmentResponse = {
  __typename?: 'OfficialJournalOfIcelandApplicationGetApplicationAttachmentResponse'
  fileExtension: Scalars['String']
  fileFormat: Scalars['String']
  fileLocation: Scalars['String']
  fileName: Scalars['String']
  fileSize: Scalars['Int']
  id: Scalars['String']
  originalFileName: Scalars['String']
}

export type OfficialJournalOfIcelandApplicationGetApplicationAttachments = {
  __typename?: 'OfficialJournalOfIcelandApplicationGetApplicationAttachments'
  attachments: Array<OfficialJournalOfIcelandApplicationGetApplicationAttachmentResponse>
}

export type OfficialJournalOfIcelandApplicationGetMyUserInfoResponse = {
  __typename?: 'OfficialJournalOfIcelandApplicationGetMyUserInfoResponse'
  /** The email of the user */
  email: Scalars['String']
  /** The first name of the user */
  firstName: Scalars['String']
  /** The last name of the user */
  lastName: Scalars['String']
}

export type OfficialJournalOfIcelandApplicationGetPdfUrlResponse = {
  __typename?: 'OfficialJournalOfIcelandApplicationGetPdfUrlResponse'
  url: Scalars['String']
}

export type OfficialJournalOfIcelandApplicationGetPresignedUrlInput = {
  applicationId: Scalars['String']
  attachmentType: Scalars['String']
  fileName: Scalars['String']
  fileType: Scalars['String']
}

export type OfficialJournalOfIcelandApplicationGetPresignedUrlResponse = {
  __typename?: 'OfficialJournalOfIcelandApplicationGetPresignedUrlResponse'
  cdn?: Maybe<Scalars['String']>
  key?: Maybe<Scalars['String']>
  url: Scalars['String']
}

export type OfficialJournalOfIcelandApplicationGetPriceResponse = {
  __typename?: 'OfficialJournalOfIcelandApplicationGetPriceResponse'
  price: Scalars['Int']
}

export type OfficialJournalOfIcelandApplicationGetUserInvolvedPartiesResponse = {
  __typename?: 'OfficialJournalOfIcelandApplicationGetUserInvolvedPartiesResponse'
  involvedParties: Array<OfficialJournalOfIcelandApplicationGetUserInvolvedParty>
}

export type OfficialJournalOfIcelandApplicationGetUserInvolvedParty = {
  __typename?: 'OfficialJournalOfIcelandApplicationGetUserInvolvedParty'
  /** The id of the involved party */
  id: Scalars['String']
  /** The slug of the involved party */
  slug: Scalars['String']
  /** The title of the involved party */
  title: Scalars['String']
}

export type OfficialJournalOfIcelandApplicationInvolvedPartySignature = {
  __typename?: 'OfficialJournalOfIcelandApplicationInvolvedPartySignature'
  additionalSignature?: Maybe<Scalars['String']>
  chairman?: Maybe<OfficialJournalOfIcelandApplicationSignatureMember>
  institution: Scalars['String']
  members: Array<OfficialJournalOfIcelandApplicationSignatureMember>
  signatureDate: Scalars['String']
}

export type OfficialJournalOfIcelandApplicationInvolvedPartySignatureResponse = {
  __typename?: 'OfficialJournalOfIcelandApplicationInvolvedPartySignatureResponse'
  records: Array<OfficialJournalOfIcelandApplicationInvolvedPartySignature>
  type: OfficialJournalOfIcelandApplicationSignatureType
}

export type OfficialJournalOfIcelandApplicationInvolvedPartySignaturesInput = {
  involvedPartyId: Scalars['String']
}

export type OfficialJournalOfIcelandApplicationPostCommentResponse = {
  __typename?: 'OfficialJournalOfIcelandApplicationPostCommentResponse'
  success: Scalars['Boolean']
}

export type OfficialJournalOfIcelandApplicationSignatureMember = {
  __typename?: 'OfficialJournalOfIcelandApplicationSignatureMember'
  above?: Maybe<Scalars['String']>
  after?: Maybe<Scalars['String']>
  before?: Maybe<Scalars['String']>
  below?: Maybe<Scalars['String']>
  name: Scalars['String']
}

export type OfficialJournalOfIcelandApplicationSignatureType =
  | 'Committee'
  | 'Regular'

export type OfficialJournalOfIcelandCaseInProgress = {
  __typename?: 'OfficialJournalOfIcelandCaseInProgress'
  createdAt: Scalars['String']
  fastTrack: Scalars['Boolean']
  id: Scalars['ID']
  involvedParty: Scalars['String']
  requestedPublicationDate: Scalars['String']
  status: Scalars['String']
  title: Scalars['String']
}

export type OfficialJournalOfIcelandCasesInProgressResponse = {
  __typename?: 'OfficialJournalOfIcelandCasesInProgressResponse'
  cases: Array<OfficialJournalOfIcelandCaseInProgress>
  paging: OfficialJournalOfIcelandPaging
}

export type OfficialJournalOfIcelandMainTypesInput = {
  department?: InputMaybe<Scalars['String']>
  page?: InputMaybe<Scalars['Int']>
  pageSize?: InputMaybe<Scalars['Int']>
}

export type OfficialJournalOfIcelandMainTypesResponse = {
  __typename?: 'OfficialJournalOfIcelandMainTypesResponse'
  mainTypes: Array<OfficialJournalOfIcelandAdvertsMainType>
  paging: OfficialJournalOfIcelandPaging
}

export type OfficialJournalOfIcelandPaging = {
  __typename?: 'OfficialJournalOfIcelandPaging'
  hasNextPage?: Maybe<Scalars['Boolean']>
  hasPreviousPage?: Maybe<Scalars['Boolean']>
  nextPage?: Maybe<Scalars['Float']>
  page: Scalars['Float']
  pageSize: Scalars['Float']
  previousPage?: Maybe<Scalars['Float']>
  totalItems: Scalars['Float']
  totalPages: Scalars['Float']
}

export type OfficialJournalOfIcelandQueryInput = {
  page?: InputMaybe<Scalars['Int']>
  pageSize?: InputMaybe<Scalars['Int']>
  search?: InputMaybe<Scalars['String']>
}

export type OfficialJournalOfIcelandTypesInput = {
  department?: InputMaybe<Scalars['String']>
  page?: InputMaybe<Scalars['Int']>
  pageSize?: InputMaybe<Scalars['Int']>
  search?: InputMaybe<Scalars['String']>
}

export type OneColumnText = {
  __typename?: 'OneColumnText'
  content?: Maybe<Array<Slice>>
  dividerOnTop?: Maybe<Scalars['Boolean']>
  id: Scalars['ID']
  link?: Maybe<Link>
  showTitle?: Maybe<Scalars['Boolean']>
  title: Scalars['String']
}

export type OpenApi = {
  __typename?: 'OpenApi'
  spec: Scalars['String']
}

export type OpenDataPage = {
  __typename?: 'OpenDataPage'
  chartSectionTitle: Scalars['String']
  externalLinkCardSelection: LinkCardSection
  externalLinkSectionDescription: Scalars['String']
  externalLinkSectionImage?: Maybe<Image>
  externalLinkSectionTitle: Scalars['String']
  graphCards: Array<GraphCard>
  id: Scalars['ID']
  link: Scalars['String']
  linkTitle: Scalars['String']
  pageDescription: Scalars['String']
  pageHeaderGraph: GraphCard
  pageTitle: Scalars['String']
  statisticsCardsSection: Array<StatisticsCard>
}

export type OpenDataSubpage = {
  __typename?: 'OpenDataSubpage'
  fundDescription: Scalars['String']
  fundTitle: Scalars['String']
  graphCards: Array<GraphCard>
  id: Scalars['ID']
  organizationLogo?: Maybe<Image>
  pageTitle: Scalars['String']
  statisticsCards: Array<StatisticsCard>
}

export type OpenListInput = {
  changeEndorsmentListClosedDateDto: ChangeEndorsmentListClosedDateDto
  listId: Scalars['String']
}

export type OperatingLicense = {
  __typename?: 'OperatingLicense'
  alcoholWeekdayLicense?: Maybe<Scalars['String']>
  alcoholWeekdayOutdoorLicense?: Maybe<Scalars['String']>
  alcoholWeekendLicense?: Maybe<Scalars['String']>
  alcoholWeekendOutdoorLicense?: Maybe<Scalars['String']>
  category?: Maybe<Scalars['String']>
  id?: Maybe<Scalars['Float']>
  issuedBy?: Maybe<Scalars['String']>
  licenseHolder?: Maybe<Scalars['String']>
  licenseNumber?: Maybe<Scalars['String']>
  licenseResponsible?: Maybe<Scalars['String']>
  location?: Maybe<Scalars['String']>
  maximumNumberOfGuests?: Maybe<Scalars['Float']>
  name?: Maybe<Scalars['String']>
  numberOfDiningGuests?: Maybe<Scalars['Float']>
  outdoorLicense?: Maybe<Scalars['String']>
  postalCode?: Maybe<Scalars['String']>
  restaurantType?: Maybe<Scalars['String']>
  street?: Maybe<Scalars['String']>
  type?: Maybe<Scalars['String']>
  type2?: Maybe<Scalars['String']>
  validFrom?: Maybe<Scalars['DateTime']>
  validTo?: Maybe<Scalars['DateTime']>
}

export type OperatingLicensesCsv = {
  __typename?: 'OperatingLicensesCSV'
  value?: Maybe<Scalars['String']>
}

export type OperatorAnonymityStatus = 'ALL' | 'SOME' | 'UNKNOWN'

export type OperatorChangeAnswers = {
  mainOperator?: InputMaybe<OperatorChangeAnswersMainOperator>
  oldOperators?: InputMaybe<Array<OperatorChangeAnswersOperators>>
  operators?: InputMaybe<Array<OperatorChangeAnswersOperators>>
  owner: OperatorChangeAnswersUser
  pickVehicle: OperatorChangeAnswersPickVehicle
  vehicleMileage: OperatorChangeAnswersVehicleMileage
}

export type OperatorChangeAnswersMainOperator = {
  nationalId: Scalars['String']
}

export type OperatorChangeAnswersOperators = {
  nationalId: Scalars['String']
  wasRemoved?: InputMaybe<Scalars['String']>
}

export type OperatorChangeAnswersPickVehicle = {
  plate: Scalars['String']
}

export type OperatorChangeAnswersPlateDelivery = {
  deliveryMethodIsDeliveryStation?: InputMaybe<Scalars['String']>
  deliveryStationTypeCode?: InputMaybe<Scalars['String']>
  includeRushFee?: InputMaybe<Array<Scalars['String']>>
}

export type OperatorChangeAnswersUser = {
  nationalId: Scalars['String']
}

export type OperatorChangeAnswersVehicleMileage = {
  value?: InputMaybe<Scalars['String']>
}

export type OperatorChangeValidation = {
  __typename?: 'OperatorChangeValidation'
  errorMessages?: Maybe<Array<OperatorChangeValidationMessage>>
  hasError: Scalars['Boolean']
}

export type OperatorChangeValidationMessage = {
  __typename?: 'OperatorChangeValidationMessage'
  defaultMessage?: Maybe<Scalars['String']>
  errorNo?: Maybe<Scalars['String']>
}

export type Order = 'ASC' | 'DESC'

export type Organisation = {
  __typename?: 'Organisation'
  address?: Maybe<Scalars['String']>
  administrativeContact?: Maybe<Contact>
  created: Scalars['DateTime']
  email?: Maybe<Scalars['String']>
  helpdesk?: Maybe<Helpdesk>
  id: Scalars['String']
  modified: Scalars['DateTime']
  name: Scalars['String']
  nationalId: Scalars['String']
  phoneNumber?: Maybe<Scalars['String']>
  providers?: Maybe<Array<Provider>>
  technicalContact?: Maybe<Contact>
}

export type Organization = {
  __typename?: 'Organization'
  description?: Maybe<Scalars['String']>
  email: Scalars['String']
  footerConfig?: Maybe<Scalars['JSON']>
  footerItems: Array<FooterItem>
  hasALandingPage?: Maybe<Scalars['Boolean']>
  id: Scalars['ID']
  link?: Maybe<Scalars['String']>
  logo?: Maybe<Image>
  namespace?: Maybe<Namespace>
  newsBottomSlices?: Maybe<Array<EmailSignup>>
  phone: Scalars['String']
  publishedMaterialSearchFilterGenericTags: Array<GenericTag>
  referenceIdentifier?: Maybe<Scalars['String']>
  serviceWebEnabled?: Maybe<Scalars['Boolean']>
  serviceWebFeaturedImage?: Maybe<Image>
  serviceWebPopularQuestionCount?: Maybe<Scalars['Float']>
  serviceWebTitle?: Maybe<Scalars['String']>
  shortTitle: Scalars['String']
  showsUpOnTheOrganizationsPage?: Maybe<Scalars['Boolean']>
  slug: Scalars['String']
  tag: Array<OrganizationTag>
  title: Scalars['String']
  trackingDomain?: Maybe<Scalars['String']>
}

export type OrganizationFund = {
  __typename?: 'OrganizationFund'
  featuredImage?: Maybe<Image>
  id: Scalars['ID']
  link?: Maybe<ReferenceLink>
  parentOrganization: Organization
  title: Scalars['String']
}

export type OrganizationModelTypeEnum =
  | 'ChildCare'
  | 'Municipality'
  | 'National'
  | 'PrivateOwner'
  | 'School'

export type OrganizationPage = {
  __typename?: 'OrganizationPage'
  alertBanner?: Maybe<AlertBanner>
  bottomSlices: Array<Slice>
  canBeFoundInSearchResults?: Maybe<Scalars['Boolean']>
  defaultHeaderImage?: Maybe<Image>
  description: Scalars['String']
  externalLinks?: Maybe<Array<Link>>
  featuredImage?: Maybe<Image>
  id: Scalars['ID']
  menuLinks: Array<LinkGroup>
  organization?: Maybe<Organization>
  secondaryMenu?: Maybe<LinkGroup>
  secondaryNewsTags?: Maybe<Array<GenericTag>>
  showPastEventsOption?: Maybe<Scalars['Boolean']>
  sidebarCards?: Maybe<Array<Slice>>
  slices: Array<Slice>
  slug: Scalars['String']
  theme: Scalars['String']
  themeProperties: OrganizationTheme
  title: Scalars['String']
  topLevelNavigation?: Maybe<OrganizationPageTopLevelNavigation>
}

export type OrganizationPageStandaloneSitemap = {
  __typename?: 'OrganizationPageStandaloneSitemap'
  childLinks: Array<OrganizationPageStandaloneSitemapLink>
}

export type OrganizationPageStandaloneSitemapLevel2 = {
  __typename?: 'OrganizationPageStandaloneSitemapLevel2'
  childCategories: Array<OrganizationPageStandaloneSitemapLevel2Category>
  label: Scalars['String']
}

export type OrganizationPageStandaloneSitemapLevel2Category = {
  __typename?: 'OrganizationPageStandaloneSitemapLevel2Category'
  childLinks: Array<OrganizationPageStandaloneSitemapLevel2Link>
  href?: Maybe<Scalars['String']>
  label: Scalars['String']
}

export type OrganizationPageStandaloneSitemapLevel2Link = {
  __typename?: 'OrganizationPageStandaloneSitemapLevel2Link'
  href: Scalars['String']
  label: Scalars['String']
}

export type OrganizationPageStandaloneSitemapLink = {
  __typename?: 'OrganizationPageStandaloneSitemapLink'
  description?: Maybe<Scalars['String']>
  href: Scalars['String']
  label: Scalars['String']
}

export type OrganizationPageTopLevelNavigation = {
  __typename?: 'OrganizationPageTopLevelNavigation'
  links: Array<OrganizationPageTopLevelNavigationLink>
}

export type OrganizationPageTopLevelNavigationLink = {
  __typename?: 'OrganizationPageTopLevelNavigationLink'
  href: Scalars['String']
  label: Scalars['String']
}

export type OrganizationParentSubpage = {
  __typename?: 'OrganizationParentSubpage'
  childLinks: Array<OrganizationSubpageLink>
  id: Scalars['ID']
  title: Scalars['String']
}

export type OrganizationParentSubpageList = {
  __typename?: 'OrganizationParentSubpageList'
  id: Scalars['ID']
  pageLinkVariant: OrganizationParentSubpageListVariant
  pageLinks: Array<OrganizationParentSubpageListPageLink>
  seeMoreLink?: Maybe<Link>
  title: Scalars['String']
}

export type OrganizationParentSubpageListPageLink = {
  __typename?: 'OrganizationParentSubpageListPageLink'
  href: Scalars['String']
  id: Scalars['ID']
  label: Scalars['String']
  pageLinkIntro: Scalars['String']
  thumbnailImageHref?: Maybe<Scalars['String']>
  tinyThumbnailImageHref?: Maybe<Scalars['String']>
}

export type OrganizationParentSubpageListVariant =
  | 'ProfileCardWithTitleAbove'
  | 'ServiceCard'

export type OrganizationSubpage = {
  __typename?: 'OrganizationSubpage'
  bottomSlices?: Maybe<Array<Slice>>
  description?: Maybe<Array<Slice>>
  featuredImage?: Maybe<Image>
  id: Scalars['ID']
  intro?: Maybe<Scalars['String']>
  links?: Maybe<Array<Link>>
  organizationPage: OrganizationPage
  shortTitle?: Maybe<Scalars['String']>
  showTableOfContents: Scalars['Boolean']
  signLanguageVideo?: Maybe<EmbeddedVideo>
  sliceCustomRenderer?: Maybe<Scalars['String']>
  sliceExtraText?: Maybe<Scalars['String']>
  slices?: Maybe<Array<Slice>>
  slug: Scalars['String']
  title: Scalars['String']
  url: Array<Scalars['String']>
}

export type OrganizationSubpageLink = {
  __typename?: 'OrganizationSubpageLink'
  href: Scalars['String']
  id?: Maybe<Scalars['String']>
  label: Scalars['String']
}

export type OrganizationTag = {
  __typename?: 'OrganizationTag'
  id: Scalars['ID']
  title: Scalars['String']
}

export type OrganizationTags = {
  __typename?: 'OrganizationTags'
  items: Array<OrganizationTag>
}

export type OrganizationTheme = {
  __typename?: 'OrganizationTheme'
  backgroundColor?: Maybe<Scalars['String']>
  fullWidth?: Maybe<Scalars['Boolean']>
  gradientEndColor: Scalars['String']
  gradientStartColor: Scalars['String']
  imageIsFullHeight?: Maybe<Scalars['Boolean']>
  imageObjectFit?: Maybe<Scalars['String']>
  imageObjectPosition?: Maybe<Scalars['String']>
  imagePadding?: Maybe<Scalars['String']>
  mobileBackgroundColor?: Maybe<Scalars['String']>
  textColor?: Maybe<Scalars['String']>
  titleSectionPaddingLeft?: Maybe<Scalars['Int']>
  useGradientColor?: Maybe<Scalars['Boolean']>
}

export type Organizations = {
  __typename?: 'Organizations'
  items: Array<Organization>
}

export type OverviewLinks = {
  __typename?: 'OverviewLinks'
  hasBorderAbove?: Maybe<Scalars['Boolean']>
  id: Scalars['ID']
  link?: Maybe<Link>
  linkData?: Maybe<OverviewLinksLinkData>
  overviewLinks: Array<IntroLinkImage>
  titleAbove?: Maybe<Scalars['String']>
}

export type OverviewLinksLinkData = {
  __typename?: 'OverviewLinksLinkData'
  categoryCardItems: Array<OverviewLinksLinkDataCategoryCardItem>
  variant: OverviewLinksLinkDataVariant
}

export type OverviewLinksLinkDataCategoryCardItem = {
  __typename?: 'OverviewLinksLinkDataCategoryCardItem'
  description: Scalars['String']
  href: Scalars['String']
  title: Scalars['String']
}

export type OverviewLinksLinkDataVariant = 'CategoryCard' | 'IntroLinkImage'

export type OwnerChangeAnswers = {
  buyer: OwnerChangeAnswersUser
  buyerCoOwnerAndOperator?: InputMaybe<Array<OwnerChangeAnswersBuyerOrCoOwner>>
  buyerMainOperator?: InputMaybe<OwnerChangeAnswersMainOperator>
  insurance?: InputMaybe<OwnerChangeAnswersInsurance>
  pickVehicle: OwnerChangeAnswersPickVehicle
  seller: OwnerChangeAnswersUser
  vehicle: OwnerChangeAnswersVehicle
  vehicleMileage: OwnerChangeAnswersVehicleMileage
}

export type OwnerChangeAnswersBuyerOrCoOwner = {
  email: Scalars['String']
  nationalId: Scalars['String']
  type: Scalars['String']
  wasRemoved?: InputMaybe<Scalars['String']>
}

export type OwnerChangeAnswersInsurance = {
  value: Scalars['String']
}

export type OwnerChangeAnswersMainOperator = {
  nationalId: Scalars['String']
}

export type OwnerChangeAnswersPickVehicle = {
  plate: Scalars['String']
}

export type OwnerChangeAnswersUser = {
  email: Scalars['String']
  nationalId: Scalars['String']
}

export type OwnerChangeAnswersVehicle = {
  date: Scalars['String']
  salePrice?: InputMaybe<Scalars['String']>
}

export type OwnerChangeAnswersVehicleMileage = {
  value?: InputMaybe<Scalars['String']>
}

export type OwnerChangeValidation = {
  __typename?: 'OwnerChangeValidation'
  errorMessages?: Maybe<Array<OwnerChangeValidationMessage>>
  hasError: Scalars['Boolean']
}

export type OwnerChangeValidationMessage = {
  __typename?: 'OwnerChangeValidationMessage'
  defaultMessage?: Maybe<Scalars['String']>
  errorNo?: Maybe<Scalars['String']>
}

export type Page =
  | AnchorPage
  | Article
  | ArticleCategory
  | LifeEventPage
  | News
  | OrganizationPage
  | OrganizationSubpage
  | ProjectPage
  | SubArticle

export type PageInfo = {
  __typename?: 'PageInfo'
  nextCursor?: Maybe<Scalars['String']>
}

export type PageInfoDto = {
  __typename?: 'PageInfoDto'
  endCursor?: Maybe<Scalars['String']>
  hasNextPage: Scalars['Boolean']
  hasPreviousPage?: Maybe<Scalars['Boolean']>
  startCursor?: Maybe<Scalars['String']>
}

export type PageInfoResponse = {
  __typename?: 'PageInfoResponse'
  endCursor?: Maybe<Scalars['String']>
  hasNextPage: Scalars['Boolean']
  hasPreviousPage: Scalars['Boolean']
  startCursor?: Maybe<Scalars['String']>
}

export type PaginatedEndorsementInput = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  limit?: InputMaybe<Scalars['Float']>
  listId: Scalars['String']
}

export type PaginatedEndorsementListInput = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  limit?: InputMaybe<Scalars['Float']>
  tags: Array<EndorsementListControllerFindByTagsTagsEnum>
}

export type PaginatedEndorsementListResponse = {
  __typename?: 'PaginatedEndorsementListResponse'
  data: Array<EndorsementList>
  pageInfo: PageInfoResponse
  totalCount: Scalars['Float']
}

export type PaginatedEndorsementResponse = {
  __typename?: 'PaginatedEndorsementResponse'
  data: Array<Endorsement>
  pageInfo: PageInfoResponse
  totalCount: Scalars['Float']
}

export type PaginatedOperatingLicenses = {
  __typename?: 'PaginatedOperatingLicenses'
  paginationInfo: PaginationInfo
  results: Array<OperatingLicense>
  searchQuery?: Maybe<Scalars['String']>
}

export type PaginationInfo = {
  __typename?: 'PaginationInfo'
  currentPage?: Maybe<Scalars['Float']>
  hasNext?: Maybe<Scalars['Boolean']>
  hasPrevious?: Maybe<Scalars['Boolean']>
  pageNumber?: Maybe<Scalars['Float']>
  pageSize?: Maybe<Scalars['Float']>
  totalCount?: Maybe<Scalars['Float']>
  totalPages?: Maybe<Scalars['Float']>
}

export type PagingData = {
  __typename?: 'PagingData'
  hasNextPage?: Maybe<Scalars['Boolean']>
  hasPreviousPage?: Maybe<Scalars['Boolean']>
  offset?: Maybe<Scalars['Float']>
  page?: Maybe<Scalars['Float']>
  pageSize?: Maybe<Scalars['Float']>
  total?: Maybe<Scalars['Float']>
  totalPages?: Maybe<Scalars['Float']>
}

export type PaperMailBody = {
  __typename?: 'PaperMailBody'
  nationalId: Scalars['String']
  wantsPaper: Scalars['Boolean']
}

export type ParentalLeave = {
  __typename?: 'ParentalLeave'
  adoptionDate?: Maybe<Scalars['String']>
  applicant: Scalars['String']
  applicationFundId?: Maybe<Scalars['String']>
  applicationId: Scalars['ID']
  attachments?: Maybe<Array<ParentalLeaveAttachment>>
  dateOfBirth?: Maybe<Scalars['String']>
  email: Scalars['String']
  employers: Array<ParentalLeaveEmployer>
  expectedDateOfBirth?: Maybe<Scalars['String']>
  language: Scalars['String']
  noOfChildren?: Maybe<Scalars['String']>
  otherParentId?: Maybe<Scalars['String']>
  paymentInfo: ParentalLeavePaymentInfo
  periods: Array<ParentalLeavePeriod>
  phoneNumber: Scalars['String']
  rightsCode?: Maybe<Scalars['String']>
  status: Scalars['String']
  testData?: Maybe<Scalars['String']>
  type?: Maybe<Scalars['String']>
}

export type ParentalLeaveAttachment = {
  __typename?: 'ParentalLeaveAttachment'
  attachmentBytes: Scalars['String']
  attachmentType: Scalars['String']
}

export type ParentalLeaveEmployer = {
  __typename?: 'ParentalLeaveEmployer'
  email?: Maybe<Scalars['String']>
  nationalRegistryId: Scalars['String']
}

export type ParentalLeaveEntitlement = {
  __typename?: 'ParentalLeaveEntitlement'
  independentMonths: Scalars['Float']
  transferableMonths: Scalars['Float']
}

export type ParentalLeavePaymentInfo = {
  __typename?: 'ParentalLeavePaymentInfo'
  bankAccount: Scalars['String']
  pensionFund: ParentalLeavePensionFund
  personalAllowance: Scalars['Float']
  personalAllowanceFromSpouse: Scalars['Float']
  privatePensionFund: ParentalLeavePensionFund
  privatePensionFundRatio: Scalars['Float']
  union: ParentalLeaveUnion
}

export type ParentalLeavePaymentPlan = {
  __typename?: 'ParentalLeavePaymentPlan'
  estimatePayment: Scalars['Float']
  estimatedAmount: Scalars['Float']
  pensionAmount: Scalars['Float']
  period: ParentalLeavePeriod
  privatePensionAmount: Scalars['Float']
  taxAmount: Scalars['Float']
  unionAmount: Scalars['Float']
}

export type ParentalLeavePensionFund = {
  __typename?: 'ParentalLeavePensionFund'
  id: Scalars['String']
  name: Scalars['String']
}

export type ParentalLeavePeriod = {
  __typename?: 'ParentalLeavePeriod'
  approved: Scalars['Boolean']
  from: Scalars['String']
  paid: Scalars['Boolean']
  ratio: Scalars['String']
  rightsCodePeriod?: Maybe<Scalars['String']>
  to: Scalars['String']
}

export type ParentalLeavePeriodEndDate = {
  __typename?: 'ParentalLeavePeriodEndDate'
  periodEndDate: Scalars['Float']
}

export type ParentalLeavePeriodLength = {
  __typename?: 'ParentalLeavePeriodLength'
  periodLength: Scalars['Int']
}

export type ParentalLeaveUnion = {
  __typename?: 'ParentalLeaveUnion'
  id: Scalars['String']
  name: Scalars['String']
}

export type Passport = {
  __typename?: 'Passport'
  childPassports?: Maybe<Array<IdentityDocumentModelChild>>
  userPassport?: Maybe<IdentityDocumentModel>
}

export type PatchAuthConsentInput = {
  clientId: Scalars['String']
  consentedScope?: InputMaybe<Scalars['String']>
  rejectedScope?: InputMaybe<Scalars['String']>
}

export type PatchAuthDelegationInput = {
  delegationId: Scalars['String']
  deleteScopes?: InputMaybe<Array<Scalars['String']>>
  updateScopes?: InputMaybe<Array<AuthDelegationScopeInput>>
}

export type Payload = {
  __typename?: 'Payload'
  /** Data parsed into a standard format */
  data: Array<GenericLicenseDataField>
  metadata: GenericUserLicenseMetadata
  /** Raw JSON data */
  rawData?: Maybe<Scalars['JSON']>
}

export type PaymentCatalogInput = {
  performingOrganizationID?: InputMaybe<Scalars['String']>
}

export type PaymentCatalogItem = {
  __typename?: 'PaymentCatalogItem'
  chargeItemCode: Scalars['String']
  chargeItemName: Scalars['String']
  chargeType: Scalars['String']
  performingOrgID: Scalars['String']
  priceAmount: Scalars['Float']
}

export type PaymentCatalogResponse = {
  __typename?: 'PaymentCatalogResponse'
  items: Array<PaymentCatalogItem>
}

export type PaymentSchedule = {
  __typename?: 'PaymentSchedule'
  approvalDate: Scalars['String']
  documentID?: Maybe<Scalars['String']>
  downloadServiceURL: Scalars['String']
  paymentCount: Scalars['String']
  scheduleName: Scalars['String']
  scheduleNumber: Scalars['String']
  scheduleStatus: Scalars['String']
  scheduleType: Scalars['String']
  totalAmount: Scalars['Float']
  unpaidAmount: Scalars['Float']
  unpaidCount: Scalars['String']
  unpaidWithInterest: Scalars['Float']
}

export type PaymentScheduleCharge = {
  __typename?: 'PaymentScheduleCharge'
  expenses: Scalars['Float']
  id: Scalars['String']
  intrest: Scalars['Float']
  name: Scalars['String']
  principal: Scalars['Float']
  total: Scalars['Float']
}

export type PaymentScheduleCompanyConditions = {
  __typename?: 'PaymentScheduleCompanyConditions'
  accommodationTaxReturns: Scalars['Boolean']
  citReturns: Scalars['Boolean']
  collectionActions: Scalars['Boolean']
  doNotOwe: Scalars['Boolean']
  financialStatement: Scalars['Boolean']
  maxDebt: Scalars['Boolean']
  maxDebtAmount: Scalars['Float']
  maxPayment: Scalars['Float']
  minPayment: Scalars['Float']
  nationalId: Scalars['ID']
  taxReturns: Scalars['Boolean']
  totalDebtAmount: Scalars['Float']
  vatReturns: Scalars['Boolean']
  withholdingTaxReturns: Scalars['Boolean']
}

export type PaymentScheduleConditions = {
  __typename?: 'PaymentScheduleConditions'
  accommodationTaxReturns: Scalars['Boolean']
  alimony: Scalars['Float']
  citReturns: Scalars['Boolean']
  collectionActions: Scalars['Boolean']
  disposableIncome: Scalars['Float']
  doNotOwe: Scalars['Boolean']
  maxDebt: Scalars['Boolean']
  maxDebtAmount: Scalars['Float']
  maxPayment: Scalars['Float']
  minPayment: Scalars['Float']
  minWagePayment: Scalars['Float']
  nationalId: Scalars['ID']
  oweTaxes: Scalars['Boolean']
  percent: Scalars['String']
  taxReturns: Scalars['Boolean']
  totalDebtAmount: Scalars['Float']
  vatReturns: Scalars['Boolean']
  wageReturns: Scalars['Boolean']
  withholdingTaxReturns: Scalars['Boolean']
}

export type PaymentScheduleData = {
  __typename?: 'PaymentScheduleData'
  nationalId: Scalars['String']
  paymentSchedules: Array<PaymentSchedule>
}

export type PaymentScheduleDebts = {
  __typename?: 'PaymentScheduleDebts'
  chargetypes: Array<PaymentScheduleCharge>
  explanation: Scalars['String']
  nationalId: Scalars['ID']
  organization: Scalars['String']
  paymentSchedule: Scalars['String']
  totalAmount: Scalars['Float']
  type: PaymentScheduleType
}

export type PaymentScheduleDetailData = {
  __typename?: 'PaymentScheduleDetailData'
  myDetailedSchedule: Array<DetailedSchedule>
}

export type PaymentScheduleDetailModel = {
  __typename?: 'PaymentScheduleDetailModel'
  myDetailedSchedules: PaymentScheduleDetailData
}

export type PaymentScheduleDistribution = {
  __typename?: 'PaymentScheduleDistribution'
  nationalId: Scalars['ID']
  payments: Array<PaymentSchedulePayment>
  scheduleType: PaymentScheduleType
}

export type PaymentScheduleEmployer = {
  __typename?: 'PaymentScheduleEmployer'
  name: Scalars['String']
  nationalId: Scalars['ID']
}

export type PaymentScheduleInitialSchedule = {
  __typename?: 'PaymentScheduleInitialSchedule'
  maxCountMonth: Scalars['Float']
  maxPayment: Scalars['Float']
  minCountMonth: Scalars['Float']
  minPayment: Scalars['Float']
  nationalId: Scalars['ID']
  scheduleType: PaymentScheduleType
}

export type PaymentScheduleModel = {
  __typename?: 'PaymentScheduleModel'
  myPaymentSchedule?: Maybe<PaymentScheduleData>
}

export type PaymentSchedulePayment = {
  __typename?: 'PaymentSchedulePayment'
  accumulated: Scalars['Float']
  dueDate: Scalars['DateTime']
  payment: Scalars['Float']
}

/** Possible types of schedules */
export type PaymentScheduleType =
  | 'FinesAndLegalCost'
  | 'OtherFees'
  | 'OverpaidBenefits'
  | 'Wagedection'

export type PaymentsCardInformation = {
  __typename?: 'PaymentsCardInformation'
  /** Card category */
  cardCategory: Scalars['String']
  /** Card product category */
  cardProductCategory: Scalars['String']
  /** Card scheme (for example Visa or MasterCard) */
  cardScheme: Scalars['String']
  /** Card usage description */
  cardUsage: Scalars['String']
  /** Issuing country of the card */
  issuingCountry: Scalars['String']
  /** Out-of-SCA scope status */
  outOfScaScope: Scalars['String']
}

export type PaymentsCardVerificationCallbackInput = {
  /** Signed JWT token containing the verification result */
  verificationToken: Scalars['String']
}

export type PaymentsCardVerificationField = {
  __typename?: 'PaymentsCardVerificationField'
  /** Field name */
  name: Scalars['String']
  /** Field value */
  value: Scalars['String']
}

export type PaymentsCardVerificationResponse = {
  __typename?: 'PaymentsCardVerificationResponse'
  /** Id of the payment flow that was verified */
  paymentFlowId: Scalars['String']
}

export type PaymentsChargeCardInput = {
  amount: Scalars['Float']
  cardNumber: Scalars['String']
  cvc: Scalars['String']
  expiryMonth: Scalars['Float']
  expiryYear: Scalars['Float']
  paymentFlowId: Scalars['String']
}

export type PaymentsChargeCardResponse = {
  __typename?: 'PaymentsChargeCardResponse'
  /** Was the payment successful? */
  isSuccess: Scalars['Boolean']
  /** The response code from the payment provider */
  responseCode: Scalars['String']
}

export type PaymentsCreateInvoiceInput = {
  paymentFlowId: Scalars['String']
}

export type PaymentsCreateInvoiceResponse = {
  __typename?: 'PaymentsCreateInvoiceResponse'
  /** Unique id for the event */
  correlationId: Scalars['String']
  /** Indicates if invoice creation was successful */
  isSuccess: Scalars['Boolean']
  /** Code of what went wrong */
  responseCode?: Maybe<Scalars['String']>
}

export type PaymentsGetFlowPaymentStatus = 'invoice_pending' | 'paid' | 'unpaid'

export type PaymentsGetPaymentFlowResponse = {
  __typename?: 'PaymentsGetPaymentFlowResponse'
  availablePaymentMethods: Array<Scalars['String']>
  existingInvoiceId?: Maybe<Scalars['String']>
  id: Scalars['ID']
  /** Arbitrary JSON data provided by the consuming service that will be returned on in callbacks (e.g. onSuccess, onUpdate). Example use case: the service that created the payment flow needs to pass some data that will be returned in the callback */
  metadata?: Maybe<Scalars['JSON']>
  organisationId: Scalars['String']
  payerName: Scalars['String']
  payerNationalId: Scalars['String']
  paymentStatus: PaymentsGetFlowPaymentStatus
  productPrice: Scalars['Float']
  productTitle: Scalars['String']
  redirectToReturnUrlOnSuccess?: Maybe<Scalars['Boolean']>
  returnUrl?: Maybe<Scalars['String']>
  updatedAt: Scalars['DateTime']
}

export type PaymentsGetVerificationStatus = {
  __typename?: 'PaymentsGetVerificationStatus'
  isVerified: Scalars['Boolean']
}

export type PaymentsVerifyCardInput = {
  amount: Scalars['Float']
  cardNumber: Scalars['String']
  expiryMonth: Scalars['Float']
  expiryYear: Scalars['Float']
  paymentFlowId: Scalars['String']
}

export type PaymentsVerifyCardResponse = {
  __typename?: 'PaymentsVerifyCardResponse'
  /** Additional fields */
  additionalFields: Array<PaymentsCardVerificationField>
  /** Card information */
  cardInformation: PaymentsCardInformation
  /** Raw response from card verification */
  cardVerificationRawResponse: Scalars['String']
  /** Indicates if the verification was successful */
  isSuccess: Scalars['Boolean']
  /** Post URL for verification */
  postUrl: Scalars['String']
  /** Response code from the verification */
  responseCode: Scalars['String']
  /** Description of the response */
  responseDescription: Scalars['String']
  /** Response time of the verification */
  responseTime: Scalars['String']
  /** Script path for further actions */
  scriptPath: Scalars['String']
  /** Verification fields */
  verificationFields: Array<PaymentsCardVerificationField>
}

export type PendingAction = {
  __typename?: 'PendingAction'
  button?: Maybe<Scalars['String']>
  content?: Maybe<Scalars['String']>
  displayStatus?: Maybe<Scalars['String']>
  title?: Maybe<Scalars['String']>
}

export type PensionFund = {
  __typename?: 'PensionFund'
  id: Scalars['String']
  name: Scalars['String']
}

export type Period = {
  approved: Scalars['Boolean']
  from: Scalars['String']
  paid: Scalars['Boolean']
  ratio: Scalars['String']
  to: Scalars['String']
}

export type PeriodItems = {
  __typename?: 'PeriodItems'
  courses?: Maybe<Array<CoursesModel>>
  diplomaId?: Maybe<Scalars['Float']>
  division?: Maybe<Scalars['String']>
  divisionShort?: Maybe<Scalars['String']>
  organisation?: Maybe<Scalars['String']>
  organisationShort?: Maybe<Scalars['String']>
  periodFrom?: Maybe<Scalars['String']>
  periodId?: Maybe<Scalars['Float']>
  periodName?: Maybe<Scalars['String']>
  periodShort?: Maybe<Scalars['String']>
  periodTo?: Maybe<Scalars['String']>
  studentId?: Maybe<Scalars['Float']>
}

export type PeriodsModel = {
  __typename?: 'PeriodsModel'
  items?: Maybe<Array<PeriodItems>>
}

export type PlateAvailability = {
  __typename?: 'PlateAvailability'
  available: Scalars['Boolean']
  regno: Scalars['String']
}

export type PlateAvailabilityInput = {
  regno: Scalars['String']
}

export type PlateOrderAnswers = {
  pickVehicle: PlateOrderAnswersPickVehicle
  plateDelivery: OperatorChangeAnswersPlateDelivery
  plateSize: PlateOrderAnswersPlateSize
}

export type PlateOrderAnswersPickVehicle = {
  plate: Scalars['String']
}

export type PlateOrderAnswersPlateSize = {
  frontPlateSize?: InputMaybe<Array<Scalars['String']>>
  rearPlateSize?: InputMaybe<Array<Scalars['String']>>
}

export type PlateOrderValidation = {
  __typename?: 'PlateOrderValidation'
  errorMessages?: Maybe<Array<PlateOrderValidationMessage>>
  hasError: Scalars['Boolean']
}

export type PlateOrderValidationMessage = {
  __typename?: 'PlateOrderValidationMessage'
  defaultMessage?: Maybe<Scalars['String']>
  errorNo?: Maybe<Scalars['String']>
}

export type PostBulkMailActionResolverInput = {
  action: Scalars['String']
  messageIds: Array<Scalars['String']>
  /** This status represents the nature of the request. True = adding item status. False = removing item status. */
  status: Scalars['Boolean']
}

export type PostMailActionResolverInput = {
  action: Scalars['String']
  messageId: Scalars['String']
}

export type PostRequestPaperInput = {
  wantsPaper: Scalars['Boolean']
}

export type PostVehicleBulkMileageInput = {
  mileageData: Array<PostVehicleBulkMileageSingleInput>
  /** Example: "ISLAND.IS" */
  originCode: Scalars['String']
}

export type PostVehicleBulkMileageSingleInput = {
  mileageNumber: Scalars['Float']
  vehicleId: Scalars['String']
}

export type PostVehicleMileageInput = {
  /** Deprecated. Use {mileageNumber} instead. Keeping in for backwards compatibility */
  mileage?: InputMaybe<Scalars['String']>
  mileageNumber?: InputMaybe<Scalars['Float']>
  /** Example: "ISLAND.IS" */
  originCode: Scalars['String']
  permno: Scalars['String']
}

export type PowerBiSlice = {
  __typename?: 'PowerBiSlice'
  id: Scalars['ID']
  owner?: Maybe<Scalars['String']>
  powerBiEmbedProps?: Maybe<Scalars['JSON']>
  powerBiEmbedPropsFromServer?: Maybe<GetPowerBiEmbedPropsFromServerResponse>
  reportId?: Maybe<Scalars['String']>
  title: Scalars['String']
  workspaceId?: Maybe<Scalars['String']>
}

export type PracticalDrivingLesson = {
  __typename?: 'PracticalDrivingLesson'
  bookId: Scalars['ID']
  comments: Scalars['String']
  createdOn: Scalars['String']
  id: Scalars['ID']
  licenseCategory: Scalars['String']
  minutes: Scalars['Float']
  studentName: Scalars['String']
  studentNationalId: Scalars['String']
  teacherName: Scalars['String']
  teacherNationalId: Scalars['String']
}

export type PracticalDrivingLessonsInput = {
  bookId: Scalars['String']
  id: Scalars['String']
}

export type PregnancyStatus = {
  __typename?: 'PregnancyStatus'
  expectedDateOfBirth: Scalars['String']
  hasActivePregnancy: Scalars['Boolean']
}

export type PresignedPost = {
  __typename?: 'PresignedPost'
  fields: Scalars['JSON']
  url: Scalars['String']
}

export type PresignedUrlResponse = {
  __typename?: 'PresignedUrlResponse'
  url: Scalars['String']
}

export type PricingCategory = 'FREE' | 'PAID'

export type ProcessEntry = {
  __typename?: 'ProcessEntry'
  buttonText: Scalars['String']
  id: Scalars['ID']
  openLinkInModal?: Maybe<Scalars['Boolean']>
  processLink: Scalars['String']
  processTitle: Scalars['String']
}

export type ProfessionRight = {
  __typename?: 'ProfessionRight'
  name?: Maybe<Scalars['String']>
  nationalId?: Maybe<Scalars['String']>
  profession?: Maybe<Scalars['String']>
}

export type ProfessionRightsResponse = {
  __typename?: 'ProfessionRightsResponse'
  list: Array<ProfessionRight>
}

export type ProjectPage = {
  __typename?: 'ProjectPage'
  alertBanner?: Maybe<AlertBanner>
  backLink?: Maybe<Link>
  bottomSlices: Array<Slice>
  content?: Maybe<Array<Slice>>
  contentIsFullWidth?: Maybe<Scalars['Boolean']>
  defaultHeaderBackgroundColor: Scalars['String']
  defaultHeaderImage?: Maybe<Image>
  featuredDescription: Scalars['String']
  featuredImage?: Maybe<Image>
  footerConfig?: Maybe<Scalars['JSON']>
  footerItems?: Maybe<Array<FooterItem>>
  id: Scalars['ID']
  intro: Scalars['String']
  namespace?: Maybe<Namespace>
  newsTag?: Maybe<GenericTag>
  projectSubpages: Array<ProjectSubpage>
  secondarySidebar?: Maybe<LinkGroup>
  sidebar: Scalars['Boolean']
  sidebarLinks: Array<LinkGroup>
  slices: Array<Slice>
  slug: Scalars['String']
  stepper?: Maybe<Stepper>
  subtitle: Scalars['String']
  theme: Scalars['String']
  themeProperties?: Maybe<ProjectPageThemeProperties>
  title: Scalars['String']
}

export type ProjectPageThemeProperties = {
  __typename?: 'ProjectPageThemeProperties'
  backgroundColor?: Maybe<Scalars['String']>
  fullWidth?: Maybe<Scalars['Boolean']>
  gradientEndColor: Scalars['String']
  gradientStartColor: Scalars['String']
  imageIsFullHeight?: Maybe<Scalars['Boolean']>
  imageObjectFit?: Maybe<Scalars['String']>
  imageObjectPosition?: Maybe<Scalars['String']>
  imagePadding?: Maybe<Scalars['String']>
  mobileBackgroundColor?: Maybe<Scalars['String']>
  textColor?: Maybe<Scalars['String']>
  titleSectionPaddingLeft?: Maybe<Scalars['Int']>
  useGradientColor?: Maybe<Scalars['Boolean']>
}

export type ProjectSubpage = {
  __typename?: 'ProjectSubpage'
  bottomSlices?: Maybe<Array<Slice>>
  content?: Maybe<Array<Slice>>
  id: Scalars['ID']
  renderSlicesAsTabs: Scalars['Boolean']
  shortTitle?: Maybe<Scalars['String']>
  showTableOfContents: Scalars['Boolean']
  slices: Array<Slice>
  slug: Scalars['String']
  title: Scalars['String']
}

export type Properties = {
  propertyNumber: Scalars['String']
  propertyType: Scalars['String']
}

export type PropertyDetail = {
  __typename?: 'PropertyDetail'
  appraisal?: Maybe<Appraisal>
  defaultAddress?: Maybe<PropertyLocation>
  land?: Maybe<LandModel>
  propertyNumber?: Maybe<Scalars['String']>
  registeredOwners?: Maybe<PropertyOwnersModel>
  unitsOfUse?: Maybe<UnitsOfUseModel>
}

export type PropertyLocation = {
  __typename?: 'PropertyLocation'
  display?: Maybe<Scalars['String']>
  displayShort?: Maybe<Scalars['String']>
  locationNumber?: Maybe<Scalars['Float']>
  municipality?: Maybe<Scalars['String']>
  postNumber?: Maybe<Scalars['Float']>
  propertyNumber?: Maybe<Scalars['Float']>
}

export type PropertyOverview = {
  __typename?: 'PropertyOverview'
  paging?: Maybe<PagingData>
  properties?: Maybe<Array<SimpleProperties>>
}

export type PropertyOwner = {
  __typename?: 'PropertyOwner'
  grantDisplay?: Maybe<Scalars['String']>
  name?: Maybe<Scalars['String']>
  ownership?: Maybe<Scalars['Float']>
  purchaseDate?: Maybe<Scalars['DateTime']>
  ssn?: Maybe<Scalars['String']>
}

export type PropertyOwnersModel = {
  __typename?: 'PropertyOwnersModel'
  paging?: Maybe<PagingData>
  registeredOwners?: Maybe<Array<PropertyOwner>>
}

export type Provider = {
  __typename?: 'Provider'
  apiScope?: Maybe<Scalars['String']>
  created: Scalars['DateTime']
  endpoint?: Maybe<Scalars['String']>
  endpointType?: Maybe<Scalars['String']>
  id: Scalars['String']
  modified: Scalars['DateTime']
  organisationId?: Maybe<Scalars['String']>
  xroad?: Maybe<Scalars['Boolean']>
}

export type ProviderStatistics = {
  __typename?: 'ProviderStatistics'
  notifications: Scalars['Float']
  opened: Scalars['Float']
  published: Scalars['Float']
}

export type PutVehicleMileageInput = {
  internalId: Scalars['Float']
  /** Deprecated. Use {mileageNumber} instead. Keeping in for backwards compatibility */
  mileage?: InputMaybe<Scalars['String']>
  mileageNumber?: InputMaybe<Scalars['Float']>
  permno: Scalars['String']
}

export type Query = {
  __typename?: 'Query'
  HealthInsuranceAccidentStatus?: Maybe<AccidentNotificationStatus>
  OJOIAGetApplicationCase: OjoiaApplicationCaseResponse
  OJOIAGetComments: OjoiaGetCommentsResponse
  OJOIAGetPdf: OjoiaGetPdfResponse
  UserProfileAdminProfile?: Maybe<UserProfileAdminProfile>
  UserProfileAdminProfiles: UserProfileAdminProfilesResponse
  adminNotifications?: Maybe<AdminNotifications>
  administrationOfOccupationalSafetyAndHealthCourses: AdministrationofOccupationalSafetyandHealthCoursesResponseModel
  airDiscountSchemeDiscounts: Array<AirDiscountSchemeDiscount>
  airDiscountSchemeFlightLegs: Array<AirDiscountSchemeFlightLeg>
  airDiscountSchemeUserAndRelationsFlights: Array<AirDiscountSchemeFlightLeg>
  aircraftRegistryAllAircrafts: AircraftRegistryAllAircraftsResponse
  applicationApplication?: Maybe<Application>
  applicationApplications?: Maybe<Array<Application>>
  applicationApplicationsAdmin?: Maybe<Array<ApplicationAdmin>>
  applicationApplicationsAdminStatistics?: Maybe<Array<ApplicationStatistics>>
  applicationApplicationsInstitutionAdmin?: Maybe<ApplicationAdminPaginatedResponse>
  applicationPaymentStatus?: Maybe<ApplicationPayment>
  areIndividualsValid: Array<SeminarsIndividualValidationItem>
  assetsDetail?: Maybe<PropertyDetail>
  assetsOverview?: Maybe<PropertyOverview>
  assetsPropertyOwners?: Maybe<PropertyOwnersModel>
  assetsUnitsOfUse?: Maybe<UnitsOfUseModel>
  attachmentPresignedURL?: Maybe<PresignedUrlResponse>
  authActorDelegations: Array<AuthMergedDelegation>
  authAdminClient?: Maybe<AuthAdminClient>
  authAdminClients: AuthAdminClientsPayload
  authAdminDelegationAdmin: DelegationAdminCustomModel
  authAdminScope: AuthAdminScope
  authAdminScopes: AuthAdminScopesPayload
  authAdminTenant: AuthAdminTenant
  authAdminTenants: AuthAdminTenantsPayload
  /** @deprecated Should use authScopeTree instead. */
  authApiScopes: Array<AuthApiScope>
  authDelegation?: Maybe<AuthDelegation>
  authDelegationProviders: AuthDelegationProviderPayload
  authDelegations: Array<AuthDelegation>
  authDomains: Array<AuthDomain>
  authLoginRestriction: AuthLoginRestriction
  authPasskeyAuthenticationOptions: AuthPasskeyAuthenticationOptions
  authPasskeyRegistrationOptions: AuthPasskeyRegistrationOptions
  authScopeTree: Array<AuthScopeTreeNode>
  companyRegistryCompanies: RskCompanySearchItems
  companyRegistryCompany?: Maybe<RskCompany>
  consentsList: AuthConsentsPaginated
  consultationPortalAdviceByCaseId: Array<ConsultationPortalAdviceResult>
  consultationPortalAllTypes: ConsultationPortalAllTypesResult
  consultationPortalAllUserAdvices: ConsultationPortalUserAdviceAggregate
  consultationPortalCaseById: ConsultationPortalCaseResult
  consultationPortalDocument: Array<ConsultationPortalDocumentInfoResult>
  consultationPortalGetCases: ConsultationPortalCasesAggregateResult
  consultationPortalStatistics: ConsultationPortalStatisticsResult
  consultationPortalSubscriptionType: ConsultationPortalCaseSubscriptionResult
  consultationPortalUserEmail: ConsultationPortalUserEmailResult
  consultationPortalUserSubscriptions: ConsultationPortalUserSubscriptionsAggregate
  costOfLivingCalculator?: Maybe<CostOfLivingCalculatorResponseModel>
  digitalTachographTachoNetExists: CheckTachoNetExists
  documentPageNumber?: Maybe<DocumentPageNumber>
  documentProviderPaperMailList: DocumentProviderPaperMailResponse
  documentProviderProvidedCategories: Array<DocumentProviderCategory>
  documentProviderProvidedTypes: Array<DocumentProviderType>
  documentV2?: Maybe<DocumentV2>
  documentV2ConfirmActions?: Maybe<DocumentConfirmActions>
  documentV2PdfRenderer?: Maybe<DocumentPdfRenderer>
  documentsV2?: Maybe<DocumentsV2>
  drivingLicense?: Maybe<DrivingLicense>
  drivingLicenseApplicationEligibility: ApplicationEligibility
  drivingLicenseBookFindStudent: Array<DrivingLicenseBookStudent>
  drivingLicenseBookFindStudentForTeacher: Array<DrivingLicenseBookStudent>
  drivingLicenseBookPracticalDrivingLessons: Array<PracticalDrivingLesson>
  drivingLicenseBookSchoolForEmployee: DrivingLicenseBookSchool
  drivingLicenseBookSchoolTypes: Array<DrivingSchoolType>
  drivingLicenseBookStudent: DrivingLicenseBookStudentOverview
  drivingLicenseBookStudentForTeacher: DrivingLicenseBookStudentOverview
  drivingLicenseBookStudentsForTeacher: Array<DrivingLicenseBookStudentForTeacher>
  drivingLicenseBookUserBook?: Maybe<DrivingLicenseBookStudentOverview>
  drivingLicenseQualityPhoto: DrivingLicenseQualityPhoto
  drivingLicenseQualitySignature: DrivingLicenseQualitySignature
  drivingLicenseStudentAssessment?: Maybe<StudentAssessment>
  drivingLicenseStudentCanGetPracticePermit?: Maybe<StudentCanGetPracticePermit>
  drivingLicenseStudentInformation: StudentInformationResult
  drivingLicenseTeachersV4: Array<TeacherV4>
  drivingLicenseTeachingRights: HasTeachingRights
  educationExamFamilyOverviews: Array<EducationExamFamilyOverview>
  educationExamResult: EducationExamResult
  educationLicense: Array<EducationLicense>
  endorsementSystemFindEndorsementLists: PaginatedEndorsementListResponse
  endorsementSystemGetEndorsements?: Maybe<PaginatedEndorsementResponse>
  endorsementSystemGetGeneralPetitionEndorsements?: Maybe<PaginatedEndorsementResponse>
  endorsementSystemGetGeneralPetitionList: EndorsementList
  endorsementSystemGetGeneralPetitionLists: PaginatedEndorsementListResponse
  endorsementSystemGetSingleEndorsement: ExistsEndorsementResponse
  endorsementSystemGetSingleEndorsementList?: Maybe<EndorsementList>
  endorsementSystemUserEndorsementLists: PaginatedEndorsementListResponse
  endorsementSystemUserEndorsements: PaginatedEndorsementResponse
  energyFundVehicleDetailsWithGrant?: Maybe<EnergyFundVehicleDetailsWithGrant>
  energyFundVehicleGrant?: Maybe<EnergyFundVehicleGrant>
  financialStatementsInaoClientFinancialLimit?: Maybe<Scalars['Float']>
  financialStatementsInaoClientTypes?: Maybe<
    Array<FinancialStatementsInaoClientType>
  >
  financialStatementsInaoConfig: Array<FinancialStatementsInaoConfig>
  financialStatementsInaoCurrentUserClientType?: Maybe<FinancialStatementsInaoClientType>
  financialStatementsInaoElections?: Maybe<
    Array<FinancialStatementsInaoElection>
  >
  financialStatementsInaoTaxInfo: Array<FinancialStatementsInaoTaxInfo>
  fishingLicenseShips?: Maybe<Array<FishingLicenseShip>>
  fishingLicenses: Array<FishingLicenseLicense>
  fiskistofaGetQuotaTypesForCalendarYear: FiskistofaQuotaTypeResponse
  fiskistofaGetQuotaTypesForTimePeriod: FiskistofaQuotaTypeResponse
  fiskistofaGetShipStatusForCalendarYear: FiskistofaShipStatusInformationResponse
  fiskistofaGetShipStatusForTimePeriod: FiskistofaExtendedShipStatusInformationResponse
  fiskistofaGetShips: FiskistofaShipBasicInfoResponse
  fiskistofaGetSingleShip: FiskistofaSingleShipResponse
  fiskistofaUpdateShipQuotaStatusForTimePeriod: FiskistofaQuotaStatusResponse
  fiskistofaUpdateShipStatusForCalendarYear: FiskistofaShipStatusInformationResponse
  fiskistofaUpdateShipStatusForTimePeriod: FiskistofaExtendedShipStatusInformationUpdateResponse
  formSystemApplication: FormSystemApplication
  formSystemForm: FormSystemFormResponse
  formSystemForms: FormSystemFormResponse
  formSystemOrganization: FormSystemOrganization
  formSystemOrganizationAdmin: FormSystemOrganizationAdmin
  friggOptions?: Maybe<Array<EducationFriggKeyOptionModel>>
  friggSchoolsByMunicipality?: Maybe<Array<EducationFriggOrganizationModel>>
  genericLicense?: Maybe<GenericUserLicense>
  genericLicenseCollection: GenericLicenseCollection
  /** @deprecated Use genericLicenseCollection instead */
  genericLicenses: Array<GenericUserLicense>
  getAlcoholLicences: Array<AlcoholLicence>
  getAlertBanner?: Maybe<AlertBanner>
  getAllIcelandicNames: Array<IcelandicName>
  getAnchorPage?: Maybe<AnchorPage>
  getAnchorPages: Array<AnchorPage>
  getAnnualStatusDocument?: Maybe<FinanceDocumentModel>
  getApiCatalogue: ApiCatalogue
  getApiServiceById?: Maybe<Service>
  getApplicationInformation: ApplicationInformation
  getArticleCategories: Array<ArticleCategory>
  getArticles: Array<Article>
  getAssessmentYears: FinanceAssessmentYears
  getAuction: Auction
  getAuctions: Array<Auction>
  getBloodDonationRestrictionDetails?: Maybe<BloodDonationRestrictionDetails>
  getBloodDonationRestrictionGenericTags: BloodDonationRestrictionGenericTagList
  getBloodDonationRestrictions: BloodDonationRestrictionList
  getBrokers: Array<Broker>
  getBurningPermits: BurningPermitsResponse
  getCategoryPages?: Maybe<Array<CategoryPage>>
  getChargeItemSubjectsByYear: FinanceChargeItemSubjectsByYear
  getChargeTypePeriodSubject: FinanceChargeTypePeriodSubject
  getChargeTypesByYear?: Maybe<FinanceChargeTypesByYear>
  getChargeTypesDetailsByYear: FinanceChargeTypeDetails
  getContentSlug?: Maybe<ContentSlug>
  getCustomPage?: Maybe<CustomPage>
  getCustomSubpage?: Maybe<CustomPage>
  getCustomerChargeType?: Maybe<FinanceCustomerChargeType>
  getCustomerRecords?: Maybe<FinanceCustomerRecords>
  getCustomerTapControl?: Maybe<FinanceCustomerTapsControlModel>
  getDebtStatus: FinanceDebtStatusModel
  /** @deprecated Up for removal */
  getDocument?: Maybe<DocumentDetails>
  /** @deprecated Up for removal */
  getDocumentCategories?: Maybe<Array<DocumentCategory>>
  /** @deprecated Up for removal */
  getDocumentPageNumber: DocumentPageResponse
  /** @deprecated Up for removal */
  getDocumentSenders?: Maybe<Array<DocumentSender>>
  /** @deprecated Up for removal */
  getDocumentTypes?: Maybe<Array<DocumentType>>
  getDocumentsList: FinanceDocumentsListModel
  getDraftRegulation: Scalars['JSON']
  getDraftRegulationPdfDownload: DraftRegulationPdfDownloadModel
  getDraftRegulations: Scalars['JSON']
  getDraftRegulationsLawChapters: Scalars['JSON']
  getDraftRegulationsMinistries: Scalars['JSON']
  getErrorPage?: Maybe<ErrorPage>
  getEvents: EventList
  getExcelVehicles?: Maybe<VehiclesExcel>
  getFeaturedSupportQNAs: Array<SupportQna>
  getFinanceDocument?: Maybe<FinanceDocumentModel>
  getFinanceStatus: Scalars['JSON']
  getFinanceStatusDetails?: Maybe<Scalars['JSON']>
  getFrontpage?: Maybe<Frontpage>
  getGenericListItemBySlug?: Maybe<GenericListItem>
  getGenericListItems?: Maybe<GenericListItemResponse>
  getGenericOverviewPage?: Maybe<GenericOverviewPage>
  getGenericPage?: Maybe<GenericPage>
  getGenericTagBySlug?: Maybe<GenericTag>
  getGenericTagsInTagGroups?: Maybe<Array<GenericTag>>
  getGrants: GrantList
  getGroupedMenu?: Maybe<GroupedMenu>
  getHomestays: Array<Homestay>
  getIcelandicNameById: IcelandicName
  getIcelandicNameByInitialLetter: Array<IcelandicName>
  getIcelandicNameBySearch: Array<IcelandicName>
  getIdentityDocument?: Maybe<Array<IdentityDocumentModel>>
  getIdentityDocumentChildren?: Maybe<Array<IdentityDocumentModelChild>>
  getJourneymanLicences: JourneymanLicencesResponse
  getLawyers: Array<Lawyer>
  getLifeEventPage?: Maybe<LifeEventPage>
  getLifeEventsForOverview: Array<LifeEventPage>
  getLifeEventsInCategory: Array<LifeEventPage>
  getMachineModels: Array<WorkMachinesModel>
  getMachineParentCategoryByTypeAndModel: Array<WorkMachinesCategory>
  getMachineSubCategories: Array<WorkMachinesSubCategory>
  getMasterLicences: MasterLicencesResponse
  getMenu?: Maybe<Menu>
  getNamespace?: Maybe<Namespace>
  getNews: NewsList
  getNewsDates: Array<Scalars['String']>
  getOpenApi: OpenApi
  getOpenDataPage: OpenDataPage
  getOpenDataSubpage: OpenDataSubpage
  getOperatingLicenses: PaginatedOperatingLicenses
  getOperatingLicensesCSV: OperatingLicensesCsv
  getOrganization?: Maybe<Organization>
  getOrganizationByNationalId?: Maybe<Organization>
  getOrganizationByTitle?: Maybe<Organization>
  getOrganizationPage?: Maybe<OrganizationPage>
  getOrganizationPageStandaloneSitemapLevel1?: Maybe<OrganizationPageStandaloneSitemap>
  getOrganizationPageStandaloneSitemapLevel2?: Maybe<OrganizationPageStandaloneSitemapLevel2>
  getOrganizationParentSubpage?: Maybe<OrganizationParentSubpage>
  getOrganizationSubpage?: Maybe<OrganizationSubpage>
  getOrganizationSubpageById?: Maybe<OrganizationSubpage>
  getOrganizationTags?: Maybe<OrganizationTags>
  getOrganizations: Organizations
  /** @deprecated Up for removal */
  getPaperMailInfo?: Maybe<PaperMailBody>
  getParentalLeaves?: Maybe<Array<ParentalLeave>>
  getParentalLeavesApplicationPaymentPlan?: Maybe<
    Array<ParentalLeavePaymentPlan>
  >
  getParentalLeavesEntitlements?: Maybe<ParentalLeaveEntitlement>
  getParentalLeavesEstimatedPaymentPlan?: Maybe<Array<ParentalLeavePaymentPlan>>
  getParentalLeavesPeriodEndDate: ParentalLeavePeriodEndDate
  getParentalLeavesPeriodLength: ParentalLeavePeriodLength
  getPassport: Passport
  getPaymentSchedule?: Maybe<PaymentScheduleModel>
  getPaymentScheduleById: PaymentScheduleDetailModel
  getPensionCalculation: SocialInsurancePensionCalculationResponse
  getPensionFunds?: Maybe<Array<PensionFund>>
  getPregnancyStatus?: Maybe<PregnancyStatus>
  getPrivatePensionFunds?: Maybe<Array<PensionFund>>
  getProfessionRights: ProfessionRightsResponse
  getProjectPage?: Maybe<ProjectPage>
  getProviderOrganisation: Organisation
  getProviderOrganisations: Array<Organisation>
  getPublicVehicleSearch?: Maybe<VehiclesPublicVehicleSearch>
  getPublishedMaterial: EnhancedAssetSearchResult
  getRealEstateAddress: Array<AssetName>
  getRealEstateAgents: Array<RealEstateAgent>
  getRegulation: Scalars['JSON']
  getRegulationFromApi: Scalars['JSON']
  getRegulationImpactsByName: Scalars['JSON']
  getRegulationOptionList: Scalars['JSON']
  getRegulations: Scalars['JSON']
  getRegulationsLawChapters: Scalars['JSON']
  getRegulationsMinistries: Scalars['JSON']
  getRegulationsOptionSearch: Scalars['JSON']
  getRegulationsSearch: Scalars['JSON']
  getRegulationsYears: Scalars['JSON']
  getReligiousOrganizations: ReligiousOrganizationsResponse
  getServicePortalAlertBanners?: Maybe<Array<AlertBanner>>
  getServiceWebPage?: Maybe<ServiceWebPage>
  getShippedRegulations: Array<DraftRegulationShippedModel>
  getSingleArticle?: Maybe<Article>
  getSingleEntryTitleById?: Maybe<EntryTitle>
  getSingleEvent?: Maybe<Event>
  getSingleGrant?: Maybe<Grant>
  getSingleManual?: Maybe<Manual>
  getSingleNews?: Maybe<News>
  getSingleSupportQNA?: Maybe<SupportQna>
  getStatisticsByKeys: StatisticsQueryResponse
  getStatisticsTotal: ProviderStatistics
  getSubpageHeader?: Maybe<SubpageHeader>
  getSupportCategories: Array<SupportCategory>
  getSupportCategoriesInOrganization: Array<SupportCategory>
  getSupportCategory?: Maybe<SupportCategory>
  getSupportQNAs: Array<SupportQna>
  getSupportQNAsInCategory: Array<SupportQna>
  getSyslumennAuctions: Array<SyslumennAuction>
  getSyslumennCertificateInfo: CertificateInfoResponse
  getSyslumennDistrictCommissionersAgencies: Array<DistrictCommissionerAgencies>
  getSyslumennElectronicIDStatus: Scalars['Boolean']
  getSyslumennEstateRelations: EstateRelations
  getTabSection?: Maybe<TabSection>
  getTeamMembers?: Maybe<TeamMemberResponse>
  getTechnicalInfoInputs: Array<WorkMachinesTechInfoItem>
  getTemporaryCalculations: SocialInsuranceTemporaryCalculation
  getTemporaryEventLicences: Array<TemporaryEventLicence>
  getTranslations?: Maybe<Scalars['JSON']>
  getTypeByRegistrationNumber: WorkMachinesMachineType
  getUnions?: Maybe<Array<Union>>
  getUrl?: Maybe<Url>
  getUserProfile?: Maybe<UserProfile>
  getUserProfileLocale?: Maybe<UserProfileLocale>
  getVehicleType: Array<AssetName>
  getWorkerMachineByRegno: MachineDetails
  getWorkerMachineDetails: MachineDetails
  getWorkerMachinePaymentRequired: Scalars['Boolean']
  hasDisabilityLicense: Scalars['Boolean']
  healthDirectorateOrganDonation: HealthDirectorateOrganDonation
  healthDirectoratePrescriptions: HealthDirectoratePrescriptions
  healthDirectorateReferrals: HealthDirectorateReferrals
  healthDirectorateVaccinations: HealthDirectorateVaccinations
  healthDirectorateWaitlists: HealthDirectorateWaitlists
  healthInsuranceIsHealthInsured: Scalars['Boolean']
  hmsLoansHistory?: Maybe<Array<HmsLoansHistory>>
  hmsLoansHistoryPdf?: Maybe<HmsLoansHistoryPdf>
  hmsLoansPaymentHistory?: Maybe<Array<HmsLoansPaymentHistory>>
  housingBenefitCalculatorCalculation: HousingBenefitCalculationModel
  housingBenefitCalculatorSpecificSupportCalculation: HousingBenefitCalculationModel
  housingBenefitsPayments?: Maybe<HousingBenefitsPayments>
  icelandicGovernmentInstitutionVacancies: IcelandicGovernmentInstitutionVacanciesResponse
  icelandicGovernmentInstitutionVacancyById: IcelandicGovernmentInstitutionVacancyByIdResponse
  identity?: Maybe<Identity>
  innaDiplomas: DiplomaModel
  innaPeriods: PeriodsModel
  intellectualProperties?: Maybe<IntellectualPropertiesResponse>
  intellectualPropertiesDesign?: Maybe<IntellectualPropertiesDesign>
  intellectualPropertiesDesignImage?: Maybe<IntellectualPropertiesImage>
  intellectualPropertiesDesignImageList?: Maybe<IntellectualPropertiesImageList>
  intellectualPropertiesPatent?: Maybe<IntellectualPropertiesPatent>
  intellectualPropertiesTrademark?: Maybe<IntellectualPropertiesTrademark>
  intellectualPropertiesTrademarks?: Maybe<
    Array<IntellectualPropertiesTrademark>
  >
  isEmployerValid: Scalars['Boolean']
  lawAndOrderCourtCaseDetail?: Maybe<LawAndOrderCourtCase>
  lawAndOrderCourtCasesList?: Maybe<LawAndOrderCourtCases>
  lawAndOrderLawyers?: Maybe<LawAndOrderLawyers>
  lawAndOrderSubpoena?: Maybe<LawAndOrderSubpoena>
  learnerMentorEligibility: ApplicationEligibility
  legacyDrivingLicense?: Maybe<DrivingLicense>
  /** @deprecated Up for removal */
  listDocuments?: Maybe<Array<Document>>
  /** @deprecated Up for removal */
  listDocumentsV2?: Maybe<DocumentListResponse>
  malwareScanStatus: MalwareScanStatus
  municipalitiesFinancialAidApplication?: Maybe<MunicipalitiesFinancialAidApplicationModel>
  municipalitiesFinancialAidApplicationSignedUrl: MunicipalitiesFinancialAidSignedUrlModel
  myPlateOwnershipChecksByRegno?: Maybe<MyPlateOwnershipChecksByRegno>
  /** @deprecated Up for removal. Query children/childCustody for authenticated user instead */
  nationalRegistryChildren?: Maybe<Array<NationalRegistryChild>>
  nationalRegistryPerson?: Maybe<NationalRegistryPerson>
  nationalRegistryReligions?: Maybe<Array<NationalRegistryReligion>>
  /** @deprecated Moving to NationalRegistryPerson */
  nationalRegistryUser?: Maybe<NationalRegistryUser>
  nationalRegistryUserV2?: Maybe<NationalRegistryXRoadPerson>
  nationalRegistryUserV2ChildGuardianship?: Maybe<NationalRegistryXRoadChildGuardianship>
  occupationalLicense?: Maybe<OccupationalLicensesLicenseResponse>
  occupationalLicenses?: Maybe<OccupationalLicensesLicenses>
  officialJournalOfIcelandAdvert: OfficialJournalOfIcelandAdvertResponse
  officialJournalOfIcelandAdverts: OfficialJournalOfIcelandAdvertsResponse
  officialJournalOfIcelandAdvertsSimilar: OfficialJournalOfIcelandAdvertSimilarResponse
  officialJournalOfIcelandApplicationAdvertTemplate: OfficialJournalOfIcelandApplicationAdvertTemplateResponse
  officialJournalOfIcelandApplicationAdvertTemplateTypes: OfficialJournalOfIcelandApplicationAdvertTemplateTypesResponse
  officialJournalOfIcelandApplicationGetAttachments: OfficialJournalOfIcelandApplicationGetApplicationAttachments
  officialJournalOfIcelandApplicationGetMyUserInfo: OfficialJournalOfIcelandApplicationGetMyUserInfoResponse
  officialJournalOfIcelandApplicationGetPdfUrl: OfficialJournalOfIcelandApplicationGetPdfUrlResponse
  officialJournalOfIcelandApplicationGetPrice: OfficialJournalOfIcelandApplicationGetPriceResponse
  officialJournalOfIcelandApplicationGetUserInvolvedParties: OfficialJournalOfIcelandApplicationGetUserInvolvedPartiesResponse
  officialJournalOfIcelandApplicationInvolvedPartySignature: OfficialJournalOfIcelandApplicationInvolvedPartySignatureResponse
  officialJournalOfIcelandCasesInProgress: OfficialJournalOfIcelandCasesInProgressResponse
  officialJournalOfIcelandCategories: OfficialJournalOfIcelandAdvertsCategoryResponse
  officialJournalOfIcelandDepartment: OfficialJournalOfIcelandAdvertsDepartmentResponse
  officialJournalOfIcelandDepartments: OfficialJournalOfIcelandAdvertsDepartmentsResponse
  officialJournalOfIcelandInstitutions: OfficialJournalOfIcelandAdvertsInstitutionsResponse
  officialJournalOfIcelandMainCategories: OfficialJournalOfIcelandAdvertsMainCategoriesResponse
  officialJournalOfIcelandMainTypes: OfficialJournalOfIcelandMainTypesResponse
  officialJournalOfIcelandType: OfficialJournalOfIcelandAdvertsTypeResponse
  officialJournalOfIcelandTypes: OfficialJournalOfIcelandAdvertsTypesResponse
  paymentCatalog: PaymentCatalogResponse
  paymentScheduleCompanyConditions?: Maybe<PaymentScheduleCompanyConditions>
  paymentScheduleConditions?: Maybe<PaymentScheduleConditions>
  paymentScheduleDebts?: Maybe<Array<PaymentScheduleDebts>>
  paymentScheduleDistribution?: Maybe<PaymentScheduleDistribution>
  paymentScheduleEmployer?: Maybe<PaymentScheduleEmployer>
  paymentScheduleInitialSchedule?: Maybe<PaymentScheduleInitialSchedule>
  paymentsGetFlow: PaymentsGetPaymentFlowResponse
  paymentsGetVerificationStatus: PaymentsGetVerificationStatus
  plateAvailable: PlateAvailability
  requestCorrectionOnMortgageCertificate: RequestCorrectionOnMortgageCertificateModel
  rightsPortalCopaymentBills: RightsPortalCopaymentBillResponse
  rightsPortalCopaymentPeriods: RightsPortalCopaymentPeriodResponse
  rightsPortalCopaymentStatus?: Maybe<RightsPortalCopaymentStatus>
  rightsPortalCurrentDentist?: Maybe<RightsPortalDentistStatus>
  rightsPortalDentistStatus?: Maybe<RightsPortalDentistStatus>
  rightsPortalDrugBillLines: Array<RightsPortalDrugBillLine>
  rightsPortalDrugBills: Array<RightsPortalDrugBill>
  rightsPortalDrugCertificates: Array<RightsPortalDrugCertificate>
  rightsPortalDrugPeriods: Array<RightsPortalDrugPeriod>
  rightsPortalDrugs: RightsPortalPaginatedDrug
  rightsPortalGetCertificateById: RightsPortalDrugCertificate
  rightsPortalHealthCenterDoctors?: Maybe<
    Array<RightsPortalHealthCenterDoctors>
  >
  rightsPortalHealthCenterRegistrationHistory?: Maybe<RightsPortalHealthCenterRegistrationHistory>
  rightsPortalInsuranceConfirmation?: Maybe<RightsPortalInsuranceConfirmation>
  rightsPortalInsuranceOverview?: Maybe<RightsPortalInsuranceOverview>
  rightsPortalPaginatedAidOrNutrition?: Maybe<RightsPortalPaginatedAidsOrNutrition>
  rightsPortalPaginatedDentists?: Maybe<RightsPortalPaginatedDentists>
  rightsPortalPaginatedHealthCenters?: Maybe<RightsPortalPaginatedHealthCenters>
  rightsPortalPaginatedTherapies?: Maybe<RightsPortalPaginatedTherapies>
  rightsPortalPaymentOverview: RightsPortalPaymentOverviewResponse
  rightsPortalPaymentOverviewDocument: RightsPortalPaymentOverviewDocumentResponse
  rightsPortalPaymentOverviewServiceTypes: RightsPortalPaymentOverviewServiceTypeResponse
  rightsPortalUserDentistRegistration?: Maybe<RightsPortalUserDentistRegistration>
  searchForAllProperties?: Maybe<ManyPropertyDetail>
  searchForProperty?: Maybe<PropertyDetail>
  searchResults: SearchResult
  secondarySchoolProgramsBySchoolId: Array<SecondarySchoolProgram>
  seminarsVerIsCompanyValid: SeminarsCompanyValidationItem
  sessionsList: SessionsPaginatedSessionResponse
  shipRegistryShipSearch: ShipRegistryShipSearch
  signatureCollectionAdminCanSignInfo: SignatureCollectionSuccess
  signatureCollectionAdminCandidateLookup: SignatureCollectionCandidateLookUp
  signatureCollectionAdminCurrent: SignatureCollection
  signatureCollectionAdminList: SignatureCollectionList
  signatureCollectionAdminListStatus: SignatureCollectionListStatus
  signatureCollectionAdminLists: Array<SignatureCollectionList>
  signatureCollectionAdminSignatures?: Maybe<
    Array<SignatureCollectionSignature>
  >
  signatureCollectionAllOpenLists: Array<SignatureCollectionListBase>
  signatureCollectionAreaSummaryReport: SignatureCollectionAreaSummaryReport
  signatureCollectionCanSignFromPaper: Scalars['Boolean']
  signatureCollectionCollectors: Array<SignatureCollectionCollector>
  signatureCollectionCurrent: SignatureCollection
  signatureCollectionIsOwner: SignatureCollectionSuccess
  signatureCollectionList: SignatureCollectionList
  signatureCollectionListOverview: SignatureCollectionListSummary
  signatureCollectionListsForOwner: Array<SignatureCollectionList>
  signatureCollectionListsForUser: Array<SignatureCollectionListBase>
  signatureCollectionSignatureLookup: Array<SignatureCollectionSignature>
  signatureCollectionSignatures?: Maybe<Array<SignatureCollectionSignature>>
  signatureCollectionSignedList?: Maybe<Array<SignatureCollectionSignedList>>
  signatureCollectionSignee: SignatureCollectionSignee
  socialInsuranceIncomePlan?: Maybe<SocialInsuranceIncomePlan>
  socialInsurancePaymentPlan?: Maybe<SocialInsurancePaymentPlan>
  socialInsurancePayments?: Maybe<SocialInsurancePayments>
  syslumennGetRegistryPerson: RegistryPerson
  syslumennGetVehicle: VehicleRegistration
  universityCareersStudentTrack?: Maybe<UniversityCareersStudentTrack>
  universityCareersStudentTrackHistory: UniversityCareersStudentTrackHistory
  universityGatewayApplicationById: Array<UniversityGatewayApplication>
  universityGatewayProgram: UniversityGatewayProgramDetails
  universityGatewayProgramFilters: Array<UniversityGatewayProgramFilter>
  universityGatewayPrograms: UniversityGatewayProgramsPaginated
  universityGatewayUniversities: Array<UniversityGatewayUniversity>
  userFamilyExamResults: EducationUserFamilyCompulsorySchoolCareer
  userNotification?: Maybe<NotificationResponse>
  userNotifications?: Maybe<Notifications>
  userProfileActorProfiles: UserProfileActorProfileResponse
  validateMortgageCertificate: Array<MortgageCertificateValidationModel>
  vehicleBasicInfoByPermno?: Maybe<BasicVehicleInformation>
  vehicleBulkMileageRegistrationJobHistory?: Maybe<VehiclesBulkMileageRegistrationJobHistory>
  vehicleBulkMileageRegistrationRequestOverview?: Maybe<VehiclesBulkMileageRegistrationRequestOverview>
  vehicleBulkMileageRegistrationRequestStatus?: Maybe<VehiclesBulkMileageRegistrationRequestStatus>
  vehicleCoOwnerChangeValidation?: Maybe<OwnerChangeValidation>
  vehicleMileageDetails?: Maybe<VehicleMileageOverview>
  vehicleOperatorChangeChecksByPermno?: Maybe<VehicleOperatorChangeChecksByPermno>
  vehicleOperatorChangeValidation?: Maybe<OperatorChangeValidation>
  vehicleOwnerChangeValidation?: Maybe<OwnerChangeValidation>
  vehicleOwnerchangeChecksByPermno?: Maybe<VehicleOwnerchangeChecksByPermno>
  vehiclePlateOrderChecksByPermno?: Maybe<VehiclePlateOrderChecksByPermno>
  vehiclePlateOrderValidation?: Maybe<PlateOrderValidation>
  vehiclesDetail?: Maybe<VehiclesDetail>
  vehiclesList?: Maybe<VehiclesList>
  vehiclesListV2?: Maybe<VehiclesListV2>
  vehiclesListV3?: Maybe<VehiclesCurrentListResponse>
  vehiclesMileageRegistrationHistory?: Maybe<VehiclesMileageRegistrationHistory>
  vehiclesSearch?: Maybe<VehiclesVehicleSearch>
  vehiclesSearchLimit?: Maybe<Scalars['Float']>
  watsonAssistantChatIdentityToken: WatsonAssistantChatIdentityTokenResponse
  webSearchAutocomplete: WebSearchAutocomplete
  webVerdictById?: Maybe<WebVerdictByIdResponse>
  webVerdictCaseCategories: WebVerdictCaseCategoriesResponse
  webVerdictCaseTypes: WebVerdictCaseTypesResponse
  webVerdictKeywords: WebVerdictKeywordsResponse
  webVerdicts: WebVerdictsResponse
  workMachine?: Maybe<WorkMachine>
  workMachinesCollectionDocument?: Maybe<WorkMachinesCollectionDocument>
  workMachinesPaginatedCollection?: Maybe<WorkMachinesPaginatedCollection>
}

export type QueryHealthInsuranceAccidentStatusArgs = {
  input: HealthInsuranceAccidentStatusInput
}

export type QueryOjoiaGetApplicationCaseArgs = {
  input: OjoiaIdInput
}

export type QueryOjoiaGetCommentsArgs = {
  input: OjoiaGetCommentsInput
}

export type QueryOjoiaGetPdfArgs = {
  input: OjoiaIdInput
}

export type QueryUserProfileAdminProfileArgs = {
  nationalId: Scalars['String']
}

export type QueryUserProfileAdminProfilesArgs = {
  query: Scalars['String']
}

export type QueryAdminNotificationsArgs = {
  input?: InputMaybe<NotificationsInput>
  locale?: InputMaybe<Scalars['String']>
  nationalId: Scalars['String']
}

export type QueryAirDiscountSchemeFlightLegsArgs = {
  input: AirDiscountSchemeFlightLegsInput
}

export type QueryAircraftRegistryAllAircraftsArgs = {
  input: AircraftRegistryAllAircraftsInput
}

export type QueryApplicationApplicationArgs = {
  input: ApplicationApplicationInput
  locale?: InputMaybe<Scalars['String']>
}

export type QueryApplicationApplicationsArgs = {
  input?: InputMaybe<ApplicationApplicationsInput>
  locale?: InputMaybe<Scalars['String']>
}

export type QueryApplicationApplicationsAdminArgs = {
  input: ApplicationApplicationsAdminInput
  locale?: InputMaybe<Scalars['String']>
}

export type QueryApplicationApplicationsAdminStatisticsArgs = {
  input: ApplicationApplicationsAdminStatisticsInput
  locale?: InputMaybe<Scalars['String']>
}

export type QueryApplicationApplicationsInstitutionAdminArgs = {
  input: ApplicationApplicationsInstitutionAdminInput
  locale?: InputMaybe<Scalars['String']>
}

export type QueryApplicationPaymentStatusArgs = {
  applicationId: Scalars['String']
  locale?: InputMaybe<Scalars['String']>
}

export type QueryAreIndividualsValidArgs = {
  courseID: Scalars['String']
  input: ValidateSeminarIndividualsInput
  nationalIdOfRegisterer?: InputMaybe<Scalars['String']>
}

export type QueryAssetsDetailArgs = {
  input: GetRealEstateInput
}

export type QueryAssetsOverviewArgs = {
  input: GetMultiPropertyInput
}

export type QueryAssetsPropertyOwnersArgs = {
  input: GetPagingTypes
}

export type QueryAssetsUnitsOfUseArgs = {
  input: GetPagingTypes
}

export type QueryAttachmentPresignedUrlArgs = {
  input: AttachmentPresignedUrlInput
}

export type QueryAuthActorDelegationsArgs = {
  input?: InputMaybe<AuthActorDelegationInput>
}

export type QueryAuthAdminClientArgs = {
  input: AuthAdminClientInput
}

export type QueryAuthAdminClientsArgs = {
  input: AuthAdminClientsInput
}

export type QueryAuthAdminDelegationAdminArgs = {
  nationalId: Scalars['String']
}

export type QueryAuthAdminScopeArgs = {
  input: ScopeInput
}

export type QueryAuthAdminScopesArgs = {
  input: ScopesInput
}

export type QueryAuthAdminTenantArgs = {
  id: Scalars['String']
}

export type QueryAuthApiScopesArgs = {
  input: AuthApiScopesInput
}

export type QueryAuthDelegationArgs = {
  input: AuthDelegationInput
}

export type QueryAuthDelegationsArgs = {
  input?: InputMaybe<AuthDelegationsInput>
}

export type QueryAuthDomainsArgs = {
  input: AuthDomainsInput
}

export type QueryAuthScopeTreeArgs = {
  input: AuthApiScopesInput
}

export type QueryCompanyRegistryCompaniesArgs = {
  input: RskCompanyInfoSearchInput
}

export type QueryCompanyRegistryCompanyArgs = {
  input?: InputMaybe<RskCompanyInfoInput>
}

export type QueryConsultationPortalAdviceByCaseIdArgs = {
  input: ConsultationPortalCaseInput
}

export type QueryConsultationPortalAllUserAdvicesArgs = {
  input: ConsultationPortalUserAdvicesInput
}

export type QueryConsultationPortalCaseByIdArgs = {
  input: ConsultationPortalCaseInput
}

export type QueryConsultationPortalDocumentArgs = {
  documentId: Scalars['String']
}

export type QueryConsultationPortalGetCasesArgs = {
  input: ConsultationPortalCasesInput
}

export type QueryConsultationPortalSubscriptionTypeArgs = {
  input: ConsultationPortalCaseInput
}

export type QueryDigitalTachographTachoNetExistsArgs = {
  input: CheckTachoNetInput
}

export type QueryDocumentPageNumberArgs = {
  input: DocumentInput
}

export type QueryDocumentProviderPaperMailListArgs = {
  input?: InputMaybe<DocumentProviderPaperMailInput>
}

export type QueryDocumentV2Args = {
  input: DocumentInput
  locale?: InputMaybe<Scalars['String']>
}

export type QueryDocumentV2ConfirmActionsArgs = {
  input: DocumentConfirmActionsInput
}

export type QueryDocumentV2PdfRendererArgs = {
  input: DocumentPdfRendererInput
}

export type QueryDocumentsV2Args = {
  input: DocumentsV2DocumentsInput
}

export type QueryDrivingLicenseApplicationEligibilityArgs = {
  input: ApplicationEligibilityInput
}

export type QueryDrivingLicenseBookFindStudentArgs = {
  input: DrivingLicenseBookStudentsInput
}

export type QueryDrivingLicenseBookFindStudentForTeacherArgs = {
  input: DrivingLicenseBookStudentsInput
}

export type QueryDrivingLicenseBookPracticalDrivingLessonsArgs = {
  input: PracticalDrivingLessonsInput
}

export type QueryDrivingLicenseBookStudentArgs = {
  input: DrivingLicenseBookStudentInput
}

export type QueryDrivingLicenseBookStudentForTeacherArgs = {
  input: DrivingLicenseBookStudentInput
}

export type QueryDrivingLicenseBookStudentsForTeacherArgs = {
  licenseCategory: Scalars['String']
}

export type QueryDrivingLicenseStudentCanGetPracticePermitArgs = {
  input: StudentCanGetPracticePermitInput
}

export type QueryDrivingLicenseStudentInformationArgs = {
  nationalId: Scalars['String']
}

export type QueryEducationExamResultArgs = {
  familyIndex: Scalars['Int']
}

export type QueryEndorsementSystemFindEndorsementListsArgs = {
  input: PaginatedEndorsementListInput
}

export type QueryEndorsementSystemGetEndorsementsArgs = {
  input: PaginatedEndorsementInput
}

export type QueryEndorsementSystemGetGeneralPetitionEndorsementsArgs = {
  input: PaginatedEndorsementInput
}

export type QueryEndorsementSystemGetGeneralPetitionListArgs = {
  input: FindEndorsementListInput
}

export type QueryEndorsementSystemGetGeneralPetitionListsArgs = {
  input: EndorsementPaginationInput
}

export type QueryEndorsementSystemGetSingleEndorsementArgs = {
  input: FindEndorsementListInput
}

export type QueryEndorsementSystemGetSingleEndorsementListArgs = {
  input: FindEndorsementListInput
}

export type QueryEndorsementSystemUserEndorsementListsArgs = {
  input: PaginatedEndorsementListInput
}

export type QueryEndorsementSystemUserEndorsementsArgs = {
  input: EndorsementPaginationInput
}

export type QueryEnergyFundVehicleDetailsWithGrantArgs = {
  permno: Scalars['String']
}

export type QueryEnergyFundVehicleGrantArgs = {
  vin: Scalars['String']
}

export type QueryFinancialStatementsInaoClientFinancialLimitArgs = {
  input: InaoClientFinancialLimitInput
}

export type QueryFinancialStatementsInaoTaxInfoArgs = {
  year: Scalars['String']
}

export type QueryFishingLicensesArgs = {
  registrationNumber: Scalars['Float']
}

export type QueryFiskistofaGetQuotaTypesForCalendarYearArgs = {
  input: FiskistofaGetQuotaTypesForCalendarYearInput
}

export type QueryFiskistofaGetQuotaTypesForTimePeriodArgs = {
  input: FiskistofaGetQuotaTypesForTimePeriodInput
}

export type QueryFiskistofaGetShipStatusForCalendarYearArgs = {
  input: FiskistofaGetShipStatusForCalendarYearInput
}

export type QueryFiskistofaGetShipStatusForTimePeriodArgs = {
  input: FiskistofaGetShipStatusForTimePeriodInput
}

export type QueryFiskistofaGetShipsArgs = {
  input: FiskistofaGetShipsInput
}

export type QueryFiskistofaGetSingleShipArgs = {
  input: FiskistofaGetSingleShipInput
}

export type QueryFiskistofaUpdateShipQuotaStatusForTimePeriodArgs = {
  input: FiskistofaUpdateShipQuotaStatusForTimePeriodInput
}

export type QueryFiskistofaUpdateShipStatusForCalendarYearArgs = {
  input: FiskistofaUpdateShipStatusForCalendarYearInput
}

export type QueryFiskistofaUpdateShipStatusForTimePeriodArgs = {
  input: FiskistofaUpdateShipStatusForTimePeriodInput
}

export type QueryFormSystemApplicationArgs = {
  input: FormSystemApplicationInput
}

export type QueryFormSystemFormArgs = {
  input: FormSystemGetFormInput
}

export type QueryFormSystemFormsArgs = {
  input: FormSystemGetFormsInput
}

export type QueryFormSystemOrganizationArgs = {
  input: FormSystemGetOrganizationInput
}

export type QueryFormSystemOrganizationAdminArgs = {
  input: FormSystemGetOrganizationAdminInput
}

export type QueryFriggOptionsArgs = {
  input: EducationFriggOptionsListInput
}

export type QueryGenericLicenseArgs = {
  input: GetGenericLicenseInput
  locale?: InputMaybe<Scalars['String']>
}

export type QueryGenericLicenseCollectionArgs = {
  input: GetGenericLicensesInput
  locale?: InputMaybe<Scalars['String']>
}

export type QueryGenericLicensesArgs = {
  input?: InputMaybe<GetGenericLicensesInput>
  locale?: InputMaybe<Scalars['String']>
}

export type QueryGetAlertBannerArgs = {
  input: GetAlertBannerInput
}

export type QueryGetAnchorPageArgs = {
  input: GetAnchorPageInput
}

export type QueryGetAnchorPagesArgs = {
  input: GetAnchorPagesInput
}

export type QueryGetAnnualStatusDocumentArgs = {
  input: GetAnnualStatusDocumentInput
}

export type QueryGetApiCatalogueArgs = {
  input: GetApiCatalogueInput
}

export type QueryGetApiServiceByIdArgs = {
  input: GetApiServiceInput
}

export type QueryGetApplicationInformationArgs = {
  applicationId: Scalars['String']
  nationalId: Scalars['String']
}

export type QueryGetArticleCategoriesArgs = {
  input: GetArticleCategoriesInput
}

export type QueryGetArticlesArgs = {
  input: GetArticlesInput
}

export type QueryGetAuctionArgs = {
  input: GetAuctionInput
}

export type QueryGetAuctionsArgs = {
  input: GetAuctionsInput
}

export type QueryGetBloodDonationRestrictionDetailsArgs = {
  input: GetBloodDonationRestrictionDetailsInput
}

export type QueryGetBloodDonationRestrictionGenericTagsArgs = {
  input: GetBloodDonationRestrictionGenericTagsInput
}

export type QueryGetBloodDonationRestrictionsArgs = {
  input: GetBloodDonationRestrictionsInput
}

export type QueryGetCategoryPagesArgs = {
  input: GetCategoryPagesInput
}

export type QueryGetChargeItemSubjectsByYearArgs = {
  input: GetChargeItemSubjectsByYearInput
}

export type QueryGetChargeTypePeriodSubjectArgs = {
  input: GetChargeTypePeriodSubjectInput
}

export type QueryGetChargeTypesByYearArgs = {
  input: GetChargeTypesByYearInput
}

export type QueryGetChargeTypesDetailsByYearArgs = {
  input: GetChargeTypesDetailsByYearInput
}

export type QueryGetContentSlugArgs = {
  input: GetContentSlugInput
}

export type QueryGetCustomPageArgs = {
  input: GetCustomPageInput
}

export type QueryGetCustomSubpageArgs = {
  input: GetCustomSubpageInput
}

export type QueryGetCustomerRecordsArgs = {
  input: GetCustomerRecordsInput
}

export type QueryGetDocumentArgs = {
  input: GetDocumentInput
}

export type QueryGetDocumentPageNumberArgs = {
  input: GetDocumentPageInput
}

export type QueryGetDocumentsListArgs = {
  input: GetFinanceDocumentsListInput
}

export type QueryGetDraftRegulationArgs = {
  input: GetDraftRegulationInput
}

export type QueryGetDraftRegulationPdfDownloadArgs = {
  input: GetDraftRegulationPdfDownloadInput
}

export type QueryGetDraftRegulationsArgs = {
  input: GetDraftRegulationsInput
}

export type QueryGetErrorPageArgs = {
  input: GetErrorPageInput
}

export type QueryGetEventsArgs = {
  input: GetEventsInput
}

export type QueryGetFeaturedSupportQnAsArgs = {
  input: GetFeaturedSupportQnAsInput
}

export type QueryGetFinanceDocumentArgs = {
  input: GetFinanceDocumentInput
}

export type QueryGetFinanceStatusDetailsArgs = {
  input: GetFinancialOverviewInput
}

export type QueryGetFrontpageArgs = {
  input: GetFrontpageInput
}

export type QueryGetGenericListItemBySlugArgs = {
  input: GetGenericListItemBySlugInput
}

export type QueryGetGenericListItemsArgs = {
  input: GetGenericListItemsInput
}

export type QueryGetGenericOverviewPageArgs = {
  input: GetGenericOverviewPageInput
}

export type QueryGetGenericPageArgs = {
  input: GetGenericPageInput
}

export type QueryGetGenericTagBySlugArgs = {
  input: GetGenericTagBySlugInput
}

export type QueryGetGenericTagsInTagGroupsArgs = {
  input: GetGenericTagsInTagGroupsInput
}

export type QueryGetGrantsArgs = {
  input: GetGrantsInput
}

export type QueryGetGroupedMenuArgs = {
  input: GetSingleMenuInput
}

export type QueryGetHomestaysArgs = {
  input: GetHomestaysInput
}

export type QueryGetIcelandicNameByIdArgs = {
  input: GetIcelandicNameByIdInput
}

export type QueryGetIcelandicNameByInitialLetterArgs = {
  input: GetIcelandicNameByInitialLetterInput
}

export type QueryGetIcelandicNameBySearchArgs = {
  input: GetIcelandicNameBySearchInput
}

export type QueryGetLifeEventPageArgs = {
  input: GetLifeEventPageInput
}

export type QueryGetLifeEventsForOverviewArgs = {
  input: GetLifeEventsInput
}

export type QueryGetLifeEventsInCategoryArgs = {
  input: GetLifeEventsInCategoryInput
}

export type QueryGetMachineModelsArgs = {
  type: Scalars['String']
}

export type QueryGetMachineParentCategoryByTypeAndModelArgs = {
  input: WorkMachinesParentCategoryByTypeAndModelInput
}

export type QueryGetMachineSubCategoriesArgs = {
  parentCategory: Scalars['String']
}

export type QueryGetMenuArgs = {
  input: GetMenuInput
}

export type QueryGetNamespaceArgs = {
  input: GetNamespaceInput
}

export type QueryGetNewsArgs = {
  input: GetNewsInput
}

export type QueryGetNewsDatesArgs = {
  input: GetNewsDatesInput
}

export type QueryGetOpenApiArgs = {
  input: GetOpenApiInput
}

export type QueryGetOpenDataPageArgs = {
  input: GetOpenDataPageInput
}

export type QueryGetOpenDataSubpageArgs = {
  input: GetOpenDataSubpageInput
}

export type QueryGetOperatingLicensesArgs = {
  input: GetOperatingLicensesInput
}

export type QueryGetOrganizationArgs = {
  input: GetOrganizationInput
}

export type QueryGetOrganizationByNationalIdArgs = {
  input: GetOrganizationByNationalIdInput
}

export type QueryGetOrganizationByTitleArgs = {
  input: GetOrganizationByTitleInput
}

export type QueryGetOrganizationPageArgs = {
  input: GetOrganizationPageInput
}

export type QueryGetOrganizationPageStandaloneSitemapLevel1Args = {
  input: GetOrganizationPageStandaloneSitemapLevel1Input
}

export type QueryGetOrganizationPageStandaloneSitemapLevel2Args = {
  input: GetOrganizationPageStandaloneSitemapLevel2Input
}

export type QueryGetOrganizationParentSubpageArgs = {
  input: GetOrganizationParentSubpageInput
}

export type QueryGetOrganizationSubpageArgs = {
  input: GetOrganizationSubpageInput
}

export type QueryGetOrganizationSubpageByIdArgs = {
  input: GetOrganizationSubpageByIdInput
}

export type QueryGetOrganizationTagsArgs = {
  input: GetOrganizationTagsInput
}

export type QueryGetOrganizationsArgs = {
  input?: InputMaybe<GetOrganizationsInput>
}

export type QueryGetParentalLeavesApplicationPaymentPlanArgs = {
  input: GetParentalLeavesApplicationPaymentPlanInput
}

export type QueryGetParentalLeavesEntitlementsArgs = {
  input: GetParentalLeavesEntitlementsInput
}

export type QueryGetParentalLeavesEstimatedPaymentPlanArgs = {
  input: GetParentalLeavesEstimatedPaymentPlanInput
}

export type QueryGetParentalLeavesPeriodEndDateArgs = {
  input: GetParentalLeavesPeriodEndDateInput
}

export type QueryGetParentalLeavesPeriodLengthArgs = {
  input: GetParentalLeavesPeriodLengthInput
}

export type QueryGetPaymentScheduleByIdArgs = {
  input: GetFinancePaymentScheduleInput
}

export type QueryGetPensionCalculationArgs = {
  input: SocialInsurancePensionCalculationInput
}

export type QueryGetProjectPageArgs = {
  input: GetProjectPageInput
}

export type QueryGetProviderOrganisationArgs = {
  nationalId: Scalars['String']
}

export type QueryGetPublicVehicleSearchArgs = {
  input: GetPublicVehicleSearchInput
}

export type QueryGetPublishedMaterialArgs = {
  input: GetPublishedMaterialInput
}

export type QueryGetRealEstateAddressArgs = {
  input: Scalars['String']
}

export type QueryGetRegulationArgs = {
  input: GetRegulationInput
}

export type QueryGetRegulationFromApiArgs = {
  input: GetRegulationFromApiInput
}

export type QueryGetRegulationImpactsByNameArgs = {
  input: GetRegulationImpactsInput
}

export type QueryGetRegulationOptionListArgs = {
  input: GetRegulationOptionListInput
}

export type QueryGetRegulationsArgs = {
  input: GetRegulationsInput
}

export type QueryGetRegulationsLawChaptersArgs = {
  input: GetRegulationsLawChaptersInput
}

export type QueryGetRegulationsMinistriesArgs = {
  input: GetRegulationsMinistriesInput
}

export type QueryGetRegulationsOptionSearchArgs = {
  input: GetRegulationsSearchInput
}

export type QueryGetRegulationsSearchArgs = {
  input: GetRegulationsSearchInput
}

export type QueryGetServicePortalAlertBannersArgs = {
  input: GetServicePortalAlertBannersInput
}

export type QueryGetServiceWebPageArgs = {
  input: GetServiceWebPageInput
}

export type QueryGetSingleArticleArgs = {
  input: GetSingleArticleInput
}

export type QueryGetSingleEntryTitleByIdArgs = {
  input: GetSingleEntryTitleByIdInput
}

export type QueryGetSingleEventArgs = {
  input: GetSingleEventInput
}

export type QueryGetSingleGrantArgs = {
  input: GetSingleGrantInput
}

export type QueryGetSingleManualArgs = {
  input: GetSingleManualInput
}

export type QueryGetSingleNewsArgs = {
  input: GetSingleNewsInput
}

export type QueryGetSingleSupportQnaArgs = {
  input: GetSingleSupportQnaInput
}

export type QueryGetStatisticsByKeysArgs = {
  input: StatisticsQueryInput
}

export type QueryGetStatisticsTotalArgs = {
  input?: InputMaybe<StatisticsInput>
}

export type QueryGetSubpageHeaderArgs = {
  input: GetSubpageHeaderInput
}

export type QueryGetSupportCategoriesArgs = {
  input: GetSupportCategoriesInput
}

export type QueryGetSupportCategoriesInOrganizationArgs = {
  input: GetSupportCategoriesInOrganizationInput
}

export type QueryGetSupportCategoryArgs = {
  input: GetSupportCategoryInput
}

export type QueryGetSupportQnAsArgs = {
  input: GetSupportQnAsInput
}

export type QueryGetSupportQnAsInCategoryArgs = {
  input: GetSupportQnAsInCategoryInput
}

export type QueryGetSyslumennElectronicIdStatusArgs = {
  input: GetElectronicIdInput
}

export type QueryGetTabSectionArgs = {
  input: GetTabSectionInput
}

export type QueryGetTeamMembersArgs = {
  input: GetTeamMembersInput
}

export type QueryGetTechnicalInfoInputsArgs = {
  parentCategory: Scalars['String']
  subCategory: Scalars['String']
}

export type QueryGetTemporaryCalculationsArgs = {
  input: SocialInsuranceTemporaryCalculationInput
}

export type QueryGetTranslationsArgs = {
  input: GetTranslationsInput
}

export type QueryGetTypeByRegistrationNumberArgs = {
  applicationId: Scalars['String']
  registrationNumber: Scalars['String']
}

export type QueryGetUrlArgs = {
  input: GetUrlInput
}

export type QueryGetVehicleTypeArgs = {
  input: Scalars['String']
}

export type QueryGetWorkerMachineByRegnoArgs = {
  regno: Scalars['String']
  rel: Scalars['String']
}

export type QueryGetWorkerMachineDetailsArgs = {
  id: Scalars['String']
  rel: Scalars['String']
}

export type QueryGetWorkerMachinePaymentRequiredArgs = {
  regNumber: Scalars['String']
}

export type QueryHealthDirectorateOrganDonationArgs = {
  locale?: InputMaybe<Scalars['String']>
}

export type QueryHealthDirectoratePrescriptionsArgs = {
  locale?: InputMaybe<Scalars['String']>
}

export type QueryHealthDirectorateReferralsArgs = {
  locale?: InputMaybe<Scalars['String']>
}

export type QueryHealthDirectorateVaccinationsArgs = {
  locale?: InputMaybe<Scalars['String']>
}

export type QueryHealthDirectorateWaitlistsArgs = {
  locale?: InputMaybe<Scalars['String']>
}

export type QueryHealthInsuranceIsHealthInsuredArgs = {
  input?: InputMaybe<IsHealthInsuredInput>
}

export type QueryHmsLoansPaymentHistoryArgs = {
  input: GetHmsLoansPaymentHistoryInput
}

export type QueryHousingBenefitCalculatorCalculationArgs = {
  input: HousingBenefitCalculatorCalculationInput
}

export type QueryHousingBenefitCalculatorSpecificSupportCalculationArgs = {
  input: HousingBenefitCalculatorSpecificSupportCalculationInput
}

export type QueryHousingBenefitsPaymentsArgs = {
  input: HousingBenefitsPaymentsInput
}

export type QueryIcelandicGovernmentInstitutionVacanciesArgs = {
  input: IcelandicGovernmentInstitutionVacanciesInput
}

export type QueryIcelandicGovernmentInstitutionVacancyByIdArgs = {
  input: IcelandicGovernmentInstitutionVacancyByIdInput
}

export type QueryIdentityArgs = {
  input?: InputMaybe<IdentityInput>
}

export type QueryIntellectualPropertiesDesignArgs = {
  input: IntellectualPropertiesInput
}

export type QueryIntellectualPropertiesDesignImageArgs = {
  input: IntellectualPropertiesDesignImagesInput
}

export type QueryIntellectualPropertiesDesignImageListArgs = {
  input: IntellectualPropertiesInput
}

export type QueryIntellectualPropertiesPatentArgs = {
  input: IntellectualPropertiesInput
}

export type QueryIntellectualPropertiesTrademarkArgs = {
  input: IntellectualPropertiesInput
}

export type QueryIsEmployerValidArgs = {
  input: GetIsEmployerValidInput
}

export type QueryLawAndOrderCourtCaseDetailArgs = {
  input: LawAndOrderCourtCaseInput
  locale?: InputMaybe<Scalars['String']>
}

export type QueryLawAndOrderCourtCasesListArgs = {
  locale?: InputMaybe<Scalars['String']>
}

export type QueryLawAndOrderLawyersArgs = {
  locale?: InputMaybe<Scalars['String']>
}

export type QueryLawAndOrderSubpoenaArgs = {
  input: LawAndOrderSubpoenaInput
  locale?: InputMaybe<Scalars['String']>
}

export type QueryListDocumentsV2Args = {
  input: GetDocumentListInput
}

export type QueryMalwareScanStatusArgs = {
  filename: Scalars['String']
}

export type QueryMunicipalitiesFinancialAidApplicationArgs = {
  input: MunicipalitiesFinancialAidApplicationInput
}

export type QueryMunicipalitiesFinancialAidApplicationSignedUrlArgs = {
  input: MunicipalitiesFinancialAidGetSignedUrlInput
}

export type QueryMyPlateOwnershipChecksByRegnoArgs = {
  regno: Scalars['String']
}

export type QueryNationalRegistryPersonArgs = {
  useFakeData?: InputMaybe<Scalars['Boolean']>
}

export type QueryNationalRegistryUserV2ChildGuardianshipArgs = {
  input: NationalRegistryXRoadChildGuardianshipInput
}

export type QueryOccupationalLicenseArgs = {
  input: OccupationalLicensesLicenseInput
}

export type QueryOfficialJournalOfIcelandAdvertArgs = {
  params: OfficialJournalOfIcelandAdvertSingleParams
}

export type QueryOfficialJournalOfIcelandAdvertsArgs = {
  input: OfficialJournalOfIcelandAdvertsInput
}

export type QueryOfficialJournalOfIcelandAdvertsSimilarArgs = {
  params: OfficialJournalOfIcelandAdvertSimilarParams
}

export type QueryOfficialJournalOfIcelandApplicationAdvertTemplateArgs = {
  input: OfficialJournalOfIcelandAdvertTemplateInput
}

export type QueryOfficialJournalOfIcelandApplicationGetAttachmentsArgs = {
  input: OfficialJournalOfIcelandApplicationGetApplicationAttachmentInput
}

export type QueryOfficialJournalOfIcelandApplicationGetPdfUrlArgs = {
  id: Scalars['String']
}

export type QueryOfficialJournalOfIcelandApplicationGetPriceArgs = {
  id: Scalars['String']
}

export type QueryOfficialJournalOfIcelandApplicationGetUserInvolvedPartiesArgs = {
  input: GetUserInvolvedPartiesInput
}

export type QueryOfficialJournalOfIcelandApplicationInvolvedPartySignatureArgs = {
  input: OfficialJournalOfIcelandApplicationInvolvedPartySignaturesInput
}

export type QueryOfficialJournalOfIcelandCasesInProgressArgs = {
  params: OfficialJournalOfIcelandQueryInput
}

export type QueryOfficialJournalOfIcelandCategoriesArgs = {
  params: OfficialJournalOfIcelandQueryInput
}

export type QueryOfficialJournalOfIcelandDepartmentArgs = {
  params: OfficialJournalOfIcelandAdvertSingleParams
}

export type QueryOfficialJournalOfIcelandDepartmentsArgs = {
  params: OfficialJournalOfIcelandQueryInput
}

export type QueryOfficialJournalOfIcelandInstitutionsArgs = {
  params: OfficialJournalOfIcelandQueryInput
}

export type QueryOfficialJournalOfIcelandMainCategoriesArgs = {
  params: OfficialJournalOfIcelandQueryInput
}

export type QueryOfficialJournalOfIcelandMainTypesArgs = {
  params: OfficialJournalOfIcelandMainTypesInput
}

export type QueryOfficialJournalOfIcelandTypeArgs = {
  params: OfficialJournalOfIcelandAdvertSingleParams
}

export type QueryOfficialJournalOfIcelandTypesArgs = {
  params: OfficialJournalOfIcelandTypesInput
}

export type QueryPaymentCatalogArgs = {
  input: PaymentCatalogInput
}

export type QueryPaymentScheduleDistributionArgs = {
  input: GetScheduleDistributionInput
}

export type QueryPaymentScheduleInitialScheduleArgs = {
  input: GetInitialScheduleInput
}

export type QueryPaymentsGetFlowArgs = {
  input: GetPaymentFlowInput
}

export type QueryPaymentsGetVerificationStatusArgs = {
  input: GetPaymentFlowInput
}

export type QueryPlateAvailableArgs = {
  input: PlateAvailabilityInput
}

export type QueryRequestCorrectionOnMortgageCertificateArgs = {
  input: RequestCorrectionOnMortgageCertificateInput
}

export type QueryRightsPortalCopaymentBillsArgs = {
  input: RightsPortalCopaymentBillsInput
}

export type QueryRightsPortalCopaymentPeriodsArgs = {
  input: RightsPortalCopaymentPeriodInput
}

export type QueryRightsPortalDrugBillLinesArgs = {
  input: RightsPortalDrugsBillLineInput
}

export type QueryRightsPortalDrugBillsArgs = {
  input: RightsPortalDrugBillInput
}

export type QueryRightsPortalDrugsArgs = {
  input: RightsPortalDrugInput
}

export type QueryRightsPortalGetCertificateByIdArgs = {
  input: RightsPortalDrugCertificateInput
}

export type QueryRightsPortalHealthCenterDoctorsArgs = {
  input: RightsPortalHealthCenterDoctorsInput
}

export type QueryRightsPortalHealthCenterRegistrationHistoryArgs = {
  input?: InputMaybe<RightsPortalHealthCenterHistoryInput>
}

export type QueryRightsPortalPaginatedDentistsArgs = {
  input: RightsPortalDentistsInput
}

export type QueryRightsPortalPaymentOverviewArgs = {
  input: RightsPortalPaymentOverviewInput
}

export type QueryRightsPortalPaymentOverviewDocumentArgs = {
  input: RightsPortalPaymentOverviewDocumentInput
}

export type QueryRightsPortalUserDentistRegistrationArgs = {
  input?: InputMaybe<RightsPortalDentistBillsInput>
}

export type QuerySearchForAllPropertiesArgs = {
  input: SearchForPropertyInput
}

export type QuerySearchForPropertyArgs = {
  input: SearchForPropertyInput
}

export type QuerySearchResultsArgs = {
  query: SearcherInput
}

export type QuerySecondarySchoolProgramsBySchoolIdArgs = {
  isFreshman: Scalars['Boolean']
  schoolId: Scalars['String']
}

export type QuerySeminarsVerIsCompanyValidArgs = {
  nationalId: Scalars['String']
}

export type QuerySessionsListArgs = {
  input: SessionsInput
}

export type QueryShipRegistryShipSearchArgs = {
  input: ShipRegistryShipSearchInput
}

export type QuerySignatureCollectionAdminCanSignInfoArgs = {
  input: SignatureCollectionCanSignFromPaperInput
}

export type QuerySignatureCollectionAdminCandidateLookupArgs = {
  input: SignatureCollectionNationalIdInput
}

export type QuerySignatureCollectionAdminListArgs = {
  input: SignatureCollectionListIdInput
}

export type QuerySignatureCollectionAdminListStatusArgs = {
  input: SignatureCollectionListIdInput
}

export type QuerySignatureCollectionAdminListsArgs = {
  input: SignatureCollectionIdInput
}

export type QuerySignatureCollectionAdminSignaturesArgs = {
  input: SignatureCollectionListIdInput
}

export type QuerySignatureCollectionAllOpenListsArgs = {
  input: SignatureCollectionIdInput
}

export type QuerySignatureCollectionAreaSummaryReportArgs = {
  input: SignatureCollectionAreaSummaryReportInput
}

export type QuerySignatureCollectionCanSignFromPaperArgs = {
  input: SignatureCollectionCanSignFromPaperInput
}

export type QuerySignatureCollectionListArgs = {
  input: SignatureCollectionListIdInput
}

export type QuerySignatureCollectionListOverviewArgs = {
  input: SignatureCollectionListIdInput
}

export type QuerySignatureCollectionListsForOwnerArgs = {
  input: SignatureCollectionIdInput
}

export type QuerySignatureCollectionListsForUserArgs = {
  input: SignatureCollectionIdInput
}

export type QuerySignatureCollectionSignatureLookupArgs = {
  input: SignatureCollectionSignatureLookupInput
}

export type QuerySignatureCollectionSignaturesArgs = {
  input: SignatureCollectionListIdInput
}

export type QuerySyslumennGetRegistryPersonArgs = {
  input: GetRegistryPersonInput
}

export type QuerySyslumennGetVehicleArgs = {
  input: GetVehicleInput
}

export type QueryUniversityCareersStudentTrackArgs = {
  input: UniversityCareersStudentInfoByUniversityInput
}

export type QueryUniversityCareersStudentTrackHistoryArgs = {
  input: UniversityCareersStudentInfoInput
}

export type QueryUniversityGatewayApplicationByIdArgs = {
  id: Scalars['String']
}

export type QueryUniversityGatewayProgramArgs = {
  input: UniversityGatewayGetPogramInput
}

export type QueryUserNotificationArgs = {
  id: Scalars['Float']
  locale?: InputMaybe<Scalars['String']>
}

export type QueryUserNotificationsArgs = {
  input?: InputMaybe<NotificationsInput>
  locale?: InputMaybe<Scalars['String']>
}

export type QueryValidateMortgageCertificateArgs = {
  input: ValidateMortgageCertificateInput
}

export type QueryVehicleBasicInfoByPermnoArgs = {
  permno: Scalars['String']
}

export type QueryVehicleBulkMileageRegistrationRequestOverviewArgs = {
  input: BulkVehicleMileageRequestOverviewInput
}

export type QueryVehicleBulkMileageRegistrationRequestStatusArgs = {
  input: BulkVehicleMileageRequestStatusInput
}

export type QueryVehicleCoOwnerChangeValidationArgs = {
  answers: CoOwnerChangeAnswers
}

export type QueryVehicleMileageDetailsArgs = {
  input: GetVehicleMileageInput
}

export type QueryVehicleOperatorChangeChecksByPermnoArgs = {
  permno: Scalars['String']
}

export type QueryVehicleOperatorChangeValidationArgs = {
  answers: OperatorChangeAnswers
}

export type QueryVehicleOwnerChangeValidationArgs = {
  answers: OwnerChangeAnswers
}

export type QueryVehicleOwnerchangeChecksByPermnoArgs = {
  permno: Scalars['String']
}

export type QueryVehiclePlateOrderChecksByPermnoArgs = {
  permno: Scalars['String']
}

export type QueryVehiclePlateOrderValidationArgs = {
  answers: PlateOrderAnswers
}

export type QueryVehiclesDetailArgs = {
  input: GetVehicleDetailInput
}

export type QueryVehiclesListArgs = {
  input?: InputMaybe<GetVehiclesForUserInput>
}

export type QueryVehiclesListV2Args = {
  input?: InputMaybe<GetVehiclesListV2Input>
}

export type QueryVehiclesListV3Args = {
  input?: InputMaybe<VehiclesListInputV3>
}

export type QueryVehiclesMileageRegistrationHistoryArgs = {
  input?: InputMaybe<GetVehicleMileageInput>
}

export type QueryVehiclesSearchArgs = {
  input: GetVehicleSearchInput
}

export type QueryWatsonAssistantChatIdentityTokenArgs = {
  input: WatsonAssistantChatIdentityTokenInput
}

export type QueryWebSearchAutocompleteArgs = {
  input: WebSearchAutocompleteInput
}

export type QueryWebVerdictByIdArgs = {
  input: WebVerdictByIdInput
}

export type QueryWebVerdictsArgs = {
  input: WebVerdictsInput
}

export type QueryWorkMachineArgs = {
  input: WorkMachinesInput
}

export type QueryWorkMachinesCollectionDocumentArgs = {
  input?: InputMaybe<WorkMachinesCollectionDocumentInput>
}

export type QueryWorkMachinesPaginatedCollectionArgs = {
  input?: InputMaybe<WorkMachinesCollectionInput>
}

export type QuestionAndAnswer = {
  __typename?: 'QuestionAndAnswer'
  answer: Array<Slice>
  id: Scalars['ID']
  publishDate?: Maybe<Scalars['String']>
  question: Scalars['String']
}

export type RealEstateAgent = {
  __typename?: 'RealEstateAgent'
  location?: Maybe<Scalars['String']>
  name?: Maybe<Scalars['String']>
}

export type RealEstateDetail = {
  __typename?: 'RealEstateDetail'
  defaultAddress?: Maybe<Scalars['String']>
  propertyNumber?: Maybe<Scalars['String']>
  usage?: Maybe<Scalars['String']>
}

export type ReferenceLink = {
  __typename?: 'ReferenceLink'
  slug: Scalars['String']
  type: Scalars['String']
}

export type RegistryPerson = {
  __typename?: 'RegistryPerson'
  address?: Maybe<Scalars['String']>
  city?: Maybe<Scalars['String']>
  name?: Maybe<Scalars['String']>
  nationalId?: Maybe<Scalars['String']>
  postalCode?: Maybe<Scalars['String']>
}

export type RegulationAuthor = {
  __typename?: 'RegulationAuthor'
  authorId: Scalars['String']
  name: Scalars['String']
}

export type RegulationShippedAuthor = {
  __typename?: 'RegulationShippedAuthor'
  authorId: Scalars['String']
  name: Scalars['String']
}

export type RegulationSummaryAuthor = {
  __typename?: 'RegulationSummaryAuthor'
  authorId: Scalars['String']
  name: Scalars['String']
}

export type RegulationViewTypes = 'current' | 'd' | 'diff' | 'original'

export type ReligiousOrganization = {
  __typename?: 'ReligiousOrganization'
  director?: Maybe<Scalars['String']>
  homeAddress?: Maybe<Scalars['String']>
  municipality?: Maybe<Scalars['String']>
  name: Scalars['String']
  postalCode?: Maybe<Scalars['String']>
}

export type ReligiousOrganizationsResponse = {
  __typename?: 'ReligiousOrganizationsResponse'
  list: Array<ReligiousOrganization>
}

export type RequestCorrectionOnMortgageCertificateInput = {
  identityData: IdentityData
  propertyNumber: Scalars['String']
  userProfileData: UserProfileData
}

export type RequestCorrectionOnMortgageCertificateModel = {
  __typename?: 'RequestCorrectionOnMortgageCertificateModel'
  hasSentRequest: Scalars['Boolean']
}

export type RequirementKey =
  | 'beRequiresHealthCertificate'
  | 'currentLocalResidency'
  | 'deniedByService'
  | 'drivingAssessmentMissing'
  | 'drivingSchoolMissing'
  | 'hasDeprivation'
  | 'hasHadValidCategoryForFiveYearsOrMore'
  | 'hasNoPhoto'
  | 'hasNoSignature'
  | 'hasPoints'
  | 'localResidency'
  | 'noExtendedDrivingLicense'
  | 'noLicenseFound'
  | 'noTempLicense'
  | 'personNot17YearsOld'
  | 'personNotAtLeast24YearsOld'
  | 'personNotFoundInNationalRegistry'

export type Response = {
  __typename?: 'Response'
  created: Scalars['Boolean']
}

export type RightsPortalAddress = {
  __typename?: 'RightsPortalAddress'
  municipality?: Maybe<Scalars['String']>
  postalCode?: Maybe<Scalars['String']>
  streetAddress?: Maybe<Scalars['String']>
}

export type RightsPortalAidOrNutrition = {
  __typename?: 'RightsPortalAidOrNutrition'
  allowed12MonthPeriod?: Maybe<Scalars['Float']>
  available?: Maybe<Scalars['String']>
  expiring: Scalars['Boolean']
  explanation?: Maybe<Scalars['String']>
  id: Scalars['ID']
  iso: Scalars['String']
  location?: Maybe<Scalars['String']>
  maxMonthlyAmount?: Maybe<Scalars['Float']>
  maxUnitRefund?: Maybe<Scalars['String']>
  name: Scalars['String']
  nextAllowedMonth?: Maybe<Scalars['String']>
  refund: RightsPortalAidOrNutritionRefund
  renewalStatus?: Maybe<RightsPortalAidOrNutritionRenewalStatus>
  type: RightsPortalAidOrNutritionType
  validUntil?: Maybe<Scalars['DateTime']>
}

export type RightsPortalAidOrNutritionRefund = {
  __typename?: 'RightsPortalAidOrNutritionRefund'
  type: Scalars['String']
  value: Scalars['Int']
}

export type RightsPortalAidOrNutritionRenewalStatus =
  | 'NOT_VALID_FOR_RENEWAL'
  | 'RENEWAL_IN_PROGRESS'
  | 'VALID'
  | 'VALID_FOR_RENEWAL'

export type RightsPortalAidOrNutritionType = 'AID' | 'NUTRITION'

export type RightsPortalCalculatorRequest = {
  drugs?: InputMaybe<Array<RightsPortalCalculatorRequestInput>>
}

export type RightsPortalCalculatorRequestInput = {
  lineNumber?: InputMaybe<Scalars['Float']>
  nordicCode?: InputMaybe<Scalars['String']>
  price?: InputMaybe<Scalars['Float']>
  units?: InputMaybe<Scalars['Float']>
}

export type RightsPortalCopaymentBill = {
  __typename?: 'RightsPortalCopaymentBill'
  date?: Maybe<Scalars['DateTime']>
  id?: Maybe<Scalars['Int']>
  insuranceAmount?: Maybe<Scalars['Int']>
  overpaid?: Maybe<Scalars['Int']>
  ownAmount?: Maybe<Scalars['Int']>
  serviceType?: Maybe<Scalars['String']>
  totalAmount?: Maybe<Scalars['Int']>
}

export type RightsPortalCopaymentBillResponse = {
  __typename?: 'RightsPortalCopaymentBillResponse'
  errors: Array<RightsPortalPaymentError>
  items: Array<RightsPortalCopaymentBill>
}

export type RightsPortalCopaymentBillsInput = {
  periodId: Scalars['Int']
}

export type RightsPortalCopaymentInsuranceStatus = {
  __typename?: 'RightsPortalCopaymentInsuranceStatus'
  code?: Maybe<Scalars['String']>
  display?: Maybe<Scalars['String']>
}

export type RightsPortalCopaymentPeriod = {
  __typename?: 'RightsPortalCopaymentPeriod'
  id?: Maybe<Scalars['Float']>
  maximumPayment?: Maybe<Scalars['Float']>
  month?: Maybe<Scalars['String']>
  monthPayment?: Maybe<Scalars['Float']>
  overpaid?: Maybe<Scalars['Float']>
  repaid?: Maybe<Scalars['Float']>
  status?: Maybe<RightsPortalCopaymentInsuranceStatus>
}

export type RightsPortalCopaymentPeriodInput = {
  dateFrom: Scalars['DateTime']
  dateTo: Scalars['DateTime']
}

export type RightsPortalCopaymentPeriodResponse = {
  __typename?: 'RightsPortalCopaymentPeriodResponse'
  errors: Array<RightsPortalPaymentError>
  items: Array<RightsPortalCopaymentPeriod>
}

export type RightsPortalCopaymentStatus = {
  __typename?: 'RightsPortalCopaymentStatus'
  basePayment?: Maybe<Scalars['Float']>
  insuranceStatus?: Maybe<RightsPortalCopaymentInsuranceStatus>
  maximumMonthlyPayment?: Maybe<Scalars['Float']>
  maximumPayment?: Maybe<Scalars['Float']>
}

export type RightsPortalDentist = {
  __typename?: 'RightsPortalDentist'
  id: Scalars['Float']
  name?: Maybe<Scalars['String']>
  practices?: Maybe<Array<RightsPortalDentistPractice>>
}

export type RightsPortalDentistBill = {
  __typename?: 'RightsPortalDentistBill'
  amount?: Maybe<Scalars['Int']>
  coveredAmount?: Maybe<Scalars['Int']>
  date?: Maybe<Scalars['DateTime']>
  number?: Maybe<Scalars['Int']>
  refundDate?: Maybe<Scalars['DateTime']>
}

export type RightsPortalDentistBillsInput = {
  dateFrom?: InputMaybe<Scalars['DateTime']>
  dateTo?: InputMaybe<Scalars['DateTime']>
}

export type RightsPortalDentistPractice = {
  __typename?: 'RightsPortalDentistPractice'
  address?: Maybe<Scalars['String']>
  postalCode?: Maybe<Scalars['String']>
  practice?: Maybe<Scalars['String']>
  region?: Maybe<Scalars['String']>
}

export type RightsPortalDentistRegisterInput = {
  id: Scalars['ID']
}

export type RightsPortalDentistRegisterResponse = {
  __typename?: 'RightsPortalDentistRegisterResponse'
  success: Scalars['Boolean']
}

export type RightsPortalDentistStatus = {
  __typename?: 'RightsPortalDentistStatus'
  canRegister?: Maybe<Scalars['Boolean']>
  contractType?: Maybe<Scalars['String']>
  isInsured?: Maybe<Scalars['Boolean']>
}

export type RightsPortalDentistsInput = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  contractType: Scalars['String']
  limit?: InputMaybe<Scalars['Float']>
  nameStartsWith?: InputMaybe<Scalars['String']>
  pageNumber?: InputMaybe<Scalars['Float']>
}

export type RightsPortalDrug = {
  __typename?: 'RightsPortalDrug'
  atcCode?: Maybe<Scalars['String']>
  form?: Maybe<Scalars['String']>
  name?: Maybe<Scalars['String']>
  nordicCode?: Maybe<Scalars['String']>
  packaging?: Maybe<Scalars['String']>
  price?: Maybe<Scalars['Float']>
  strength?: Maybe<Scalars['String']>
}

export type RightsPortalDrugBill = {
  __typename?: 'RightsPortalDrugBill'
  date?: Maybe<Scalars['DateTime']>
  description?: Maybe<Scalars['String']>
  id?: Maybe<Scalars['ID']>
  totalCalculatedForPaymentStepAmount?: Maybe<Scalars['Float']>
  totalCopaymentAmount?: Maybe<Scalars['Float']>
  totalCustomerAmount?: Maybe<Scalars['Float']>
  totalExcessAmount?: Maybe<Scalars['Float']>
  totalInsuranceAmount?: Maybe<Scalars['Float']>
}

export type RightsPortalDrugBillInput = {
  paymentPeriodId: Scalars['ID']
}

export type RightsPortalDrugBillLine = {
  __typename?: 'RightsPortalDrugBillLine'
  billId?: Maybe<Scalars['ID']>
  calculatedForPaymentStepAmount?: Maybe<Scalars['Float']>
  copaymentAmount?: Maybe<Scalars['Float']>
  customerAmount?: Maybe<Scalars['Float']>
  drugName?: Maybe<Scalars['String']>
  excessAmount?: Maybe<Scalars['Float']>
  insuranceAmount?: Maybe<Scalars['Float']>
  quantity?: Maybe<Scalars['String']>
  salesPrice?: Maybe<Scalars['Float']>
  strength?: Maybe<Scalars['String']>
  units?: Maybe<Scalars['Float']>
}

export type RightsPortalDrugCalculation = {
  __typename?: 'RightsPortalDrugCalculation'
  calculatedCustomerPrice?: Maybe<Scalars['Float']>
  comment?: Maybe<Scalars['String']>
  customerPrice?: Maybe<Scalars['Float']>
  excessPrice?: Maybe<Scalars['Float']>
  fullPrice?: Maybe<Scalars['Float']>
  insurancePrice?: Maybe<Scalars['Float']>
  lineNumber?: Maybe<Scalars['Float']>
  referencePrice?: Maybe<Scalars['Float']>
}

export type RightsPortalDrugCalculatorInput = {
  drugCalculatorRequestDTO: RightsPortalCalculatorRequest
}

export type RightsPortalDrugCalculatorResponse = {
  __typename?: 'RightsPortalDrugCalculatorResponse'
  drugs?: Maybe<Array<RightsPortalDrugCalculation>>
  totalCustomerPrice?: Maybe<Scalars['Float']>
  totalPrice?: Maybe<Scalars['Float']>
  totalUnits?: Maybe<Scalars['Float']>
}

export type RightsPortalDrugCertificate = {
  __typename?: 'RightsPortalDrugCertificate'
  approved?: Maybe<Scalars['Boolean']>
  atcCode?: Maybe<Scalars['String']>
  atcName?: Maybe<Scalars['String']>
  comment?: Maybe<Scalars['String']>
  date?: Maybe<Scalars['DateTime']>
  doctor?: Maybe<Scalars['String']>
  documentId?: Maybe<Scalars['Float']>
  drugName?: Maybe<Scalars['String']>
  expired?: Maybe<Scalars['Boolean']>
  id?: Maybe<Scalars['Float']>
  methylDoctors?: Maybe<Array<RightsPortalMethylDoctor>>
  processed?: Maybe<Scalars['Boolean']>
  rejected?: Maybe<Scalars['Boolean']>
  valid?: Maybe<Scalars['Boolean']>
  validFrom?: Maybe<Scalars['DateTime']>
  validTo?: Maybe<Scalars['DateTime']>
}

export type RightsPortalDrugCertificateInput = {
  id: Scalars['Float']
}

export type RightsPortalDrugInput = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  limit?: InputMaybe<Scalars['Float']>
  nameStartsWith?: InputMaybe<Scalars['String']>
  pageNumber?: InputMaybe<Scalars['Float']>
}

export type RightsPortalDrugPeriod = {
  __typename?: 'RightsPortalDrugPeriod'
  active?: Maybe<Scalars['Boolean']>
  dateFrom?: Maybe<Scalars['DateTime']>
  dateTo?: Maybe<Scalars['DateTime']>
  id?: Maybe<Scalars['ID']>
  levelNumber?: Maybe<Scalars['Float']>
  levelPercentage?: Maybe<Scalars['Float']>
  numberOfBills?: Maybe<Scalars['Float']>
  paidAmount?: Maybe<Scalars['Float']>
  paymentStatus?: Maybe<Scalars['Float']>
}

export type RightsPortalDrugsBillLineInput = {
  billId: Scalars['ID']
  paymentPeriodId: Scalars['ID']
}

export type RightsPortalHealthCenter = {
  __typename?: 'RightsPortalHealthCenter'
  address?: Maybe<RightsPortalAddress>
  canRegister?: Maybe<Scalars['Boolean']>
  id: Scalars['ID']
  name?: Maybe<Scalars['String']>
  region?: Maybe<Scalars['String']>
  waitListRegistration?: Maybe<Scalars['Boolean']>
}

export type RightsPortalHealthCenterDoctors = {
  __typename?: 'RightsPortalHealthCenterDoctors'
  availableFrom?: Maybe<Scalars['String']>
  availableTo?: Maybe<Scalars['String']>
  id?: Maybe<Scalars['Float']>
  name?: Maybe<Scalars['String']>
}

export type RightsPortalHealthCenterDoctorsInput = {
  id: Scalars['String']
}

export type RightsPortalHealthCenterHistoryInput = {
  dateFrom?: InputMaybe<Scalars['DateTime']>
  dateTo?: InputMaybe<Scalars['DateTime']>
}

export type RightsPortalHealthCenterRecord = {
  __typename?: 'RightsPortalHealthCenterRecord'
  dateFrom?: Maybe<Scalars['DateTime']>
  dateTo?: Maybe<Scalars['DateTime']>
  doctor?: Maybe<Scalars['String']>
  healthCenterName?: Maybe<Scalars['String']>
}

export type RightsPortalHealthCenterRegisterInput = {
  doctorId?: InputMaybe<Scalars['Float']>
  id: Scalars['String']
}

export type RightsPortalHealthCenterRegisterResponse = {
  __typename?: 'RightsPortalHealthCenterRegisterResponse'
  success: Scalars['Boolean']
}

export type RightsPortalHealthCenterRegistrationHistory = {
  __typename?: 'RightsPortalHealthCenterRegistrationHistory'
  canRegister?: Maybe<Scalars['Boolean']>
  current?: Maybe<RightsPortalHealthCenterRecord>
  history?: Maybe<Array<RightsPortalHealthCenterRecord>>
  neighborhoodCenter?: Maybe<Scalars['String']>
}

export type RightsPortalInsuranceConfirmation = {
  __typename?: 'RightsPortalInsuranceConfirmation'
  contentType: Scalars['String']
  data: Scalars['String']
  fileName: Scalars['String']
}

export type RightsPortalInsuranceOverview = {
  __typename?: 'RightsPortalInsuranceOverview'
  ehicCardExpiryDate?: Maybe<Scalars['DateTime']>
  explanation?: Maybe<Scalars['String']>
  from?: Maybe<Scalars['DateTime']>
  isInsured: Scalars['Boolean']
  maximumPayment?: Maybe<Scalars['Int']>
  status?: Maybe<RightsPortalInsuranceStatus>
}

export type RightsPortalInsuranceStatus = {
  __typename?: 'RightsPortalInsuranceStatus'
  code?: Maybe<RightsPortalInsuranceStatusType>
  display?: Maybe<Scalars['String']>
}

export type RightsPortalInsuranceStatusType =
  | 'ALM'
  | 'ATVL'
  | 'BARN'
  | 'BAUM'
  | 'EL67'
  | 'ELLI'
  | 'GRAT'
  | 'OR'
  | 'OROR'
  | 'UNGM'

export type RightsPortalMethylDoctor = {
  __typename?: 'RightsPortalMethylDoctor'
  name?: Maybe<Scalars['String']>
}

export type RightsPortalPaginatedAidsOrNutrition = {
  __typename?: 'RightsPortalPaginatedAidsOrNutrition'
  data: Array<RightsPortalAidOrNutrition>
  pageInfo: PageInfoDto
  totalCount: Scalars['Float']
}

export type RightsPortalPaginatedDentists = {
  __typename?: 'RightsPortalPaginatedDentists'
  data: Array<RightsPortalDentist>
  pageInfo: PageInfoDto
  totalCount: Scalars['Float']
}

export type RightsPortalPaginatedDrug = {
  __typename?: 'RightsPortalPaginatedDrug'
  data: Array<RightsPortalDrug>
  pageInfo: PageInfoDto
  totalCount: Scalars['Float']
}

export type RightsPortalPaginatedHealthCenters = {
  __typename?: 'RightsPortalPaginatedHealthCenters'
  data: Array<RightsPortalHealthCenter>
  pageInfo: PageInfoDto
  totalCount: Scalars['Float']
}

export type RightsPortalPaginatedTherapies = {
  __typename?: 'RightsPortalPaginatedTherapies'
  data: Array<RightsPortalTherapy>
  pageInfo: PageInfoDto
  totalCount: Scalars['Float']
}

export type RightsPortalPaymentError = {
  __typename?: 'RightsPortalPaymentError'
  status: RightsPortalPaymentErrorStatus
}

export type RightsPortalPaymentErrorStatus =
  | 'INTERNAL_SERVICE_ERROR'
  | 'NOT_FOUND'

export type RightsPortalPaymentOverview = {
  __typename?: 'RightsPortalPaymentOverview'
  bills?: Maybe<Array<RightsPortalPaymentOverviewBill>>
  credit?: Maybe<Scalars['Float']>
  debt?: Maybe<Scalars['Float']>
}

export type RightsPortalPaymentOverviewBill = {
  __typename?: 'RightsPortalPaymentOverviewBill'
  date?: Maybe<Scalars['DateTime']>
  documentId?: Maybe<Scalars['Float']>
  downloadUrl?: Maybe<Scalars['String']>
  insuranceAmount?: Maybe<Scalars['Float']>
  serviceType?: Maybe<RightsPortalPaymentOverviewServiceType>
  totalAmount?: Maybe<Scalars['Float']>
}

export type RightsPortalPaymentOverviewDocument = {
  __typename?: 'RightsPortalPaymentOverviewDocument'
  contentType?: Maybe<Scalars['String']>
  data?: Maybe<Scalars['String']>
  fileName?: Maybe<Scalars['String']>
}

export type RightsPortalPaymentOverviewDocumentInput = {
  documentId: Scalars['Int']
}

export type RightsPortalPaymentOverviewDocumentResponse = {
  __typename?: 'RightsPortalPaymentOverviewDocumentResponse'
  errors: Array<RightsPortalPaymentError>
  items: Array<RightsPortalPaymentOverviewDocument>
}

export type RightsPortalPaymentOverviewInput = {
  dateFrom: Scalars['DateTime']
  dateTo: Scalars['DateTime']
  serviceTypeCode: Scalars['String']
}

export type RightsPortalPaymentOverviewResponse = {
  __typename?: 'RightsPortalPaymentOverviewResponse'
  errors: Array<RightsPortalPaymentError>
  items: Array<RightsPortalPaymentOverview>
}

export type RightsPortalPaymentOverviewServiceType = {
  __typename?: 'RightsPortalPaymentOverviewServiceType'
  code?: Maybe<Scalars['String']>
  name?: Maybe<Scalars['String']>
}

export type RightsPortalPaymentOverviewServiceTypeResponse = {
  __typename?: 'RightsPortalPaymentOverviewServiceTypeResponse'
  errors: Array<RightsPortalPaymentError>
  items: Array<RightsPortalPaymentOverviewServiceType>
}

export type RightsPortalTherapy = {
  __typename?: 'RightsPortalTherapy'
  id: Scalars['ID']
  name: Scalars['String']
  periods?: Maybe<Array<RightsPortalTherapyPeriod>>
  postStation?: Maybe<Scalars['String']>
  state?: Maybe<RightsPortalTherapyState>
}

export type RightsPortalTherapyPeriod = {
  __typename?: 'RightsPortalTherapyPeriod'
  from?: Maybe<Scalars['DateTime']>
  sessions?: Maybe<RightsPortalTherapySession>
  to?: Maybe<Scalars['DateTime']>
}

export type RightsPortalTherapySession = {
  __typename?: 'RightsPortalTherapySession'
  available: Scalars['Int']
  used: Scalars['Int']
}

export type RightsPortalTherapyState = {
  __typename?: 'RightsPortalTherapyState'
  code: Scalars['String']
  display: Scalars['String']
}

export type RightsPortalUserDentistInformation = {
  __typename?: 'RightsPortalUserDentistInformation'
  id?: Maybe<Scalars['Float']>
  name?: Maybe<Scalars['String']>
  status?: Maybe<RightsPortalDentistStatus>
}

export type RightsPortalUserDentistRegistration = {
  __typename?: 'RightsPortalUserDentistRegistration'
  dentist?: Maybe<RightsPortalUserDentistInformation>
  history?: Maybe<Array<RightsPortalDentistBill>>
}

export type RskCompany = {
  __typename?: 'RskCompany'
  companyInfo?: Maybe<RskCompanyInfo>
  dateOfRegistration?: Maybe<Scalars['DateTime']>
  lastUpdated?: Maybe<Scalars['DateTime']>
  name: Scalars['String']
  nationalId: Scalars['ID']
  status: Scalars['String']
  vatNumber: Scalars['String']
}

export type RskCompanyAddress = {
  __typename?: 'RskCompanyAddress'
  country?: Maybe<Scalars['String']>
  locality?: Maybe<Scalars['String']>
  municipalityNumber?: Maybe<Scalars['String']>
  postalCode?: Maybe<Scalars['String']>
  streetAddress?: Maybe<Scalars['String']>
}

export type RskCompanyClassification = {
  __typename?: 'RskCompanyClassification'
  classificationSystem: Scalars['String']
  name: Scalars['String']
  number: Scalars['String']
  type: Scalars['String']
}

export type RskCompanyFormOfOperation = {
  __typename?: 'RskCompanyFormOfOperation'
  name: Scalars['String']
  type: Scalars['String']
}

export type RskCompanyInfo = {
  __typename?: 'RskCompanyInfo'
  address?: Maybe<RskCompanyAddress>
  formOfOperation: Array<RskCompanyFormOfOperation>
  legalDomicile?: Maybe<RskCompanyAddress>
  relatedParty: Array<RskCompanyRelatedParty>
  relationships?: Maybe<Array<RskCompanyRelatedParty>>
  vat: Array<RskCompanyVat>
}

export type RskCompanyInfoInput = {
  nationalId: Scalars['String']
}

export type RskCompanyInfoSearchInput = {
  /** Cursor for pagination as base64 encoded number */
  after?: InputMaybe<Scalars['String']>
  first: Scalars['Float']
  searchTerm: Scalars['String']
}

export type RskCompanyRelatedParty = {
  __typename?: 'RskCompanyRelatedParty'
  name: Scalars['String']
  nationalId: Scalars['ID']
  type: Scalars['String']
}

export type RskCompanySearchItems = {
  __typename?: 'RskCompanySearchItems'
  data: Array<RskCompany>
  pageInfo: PageInfoDto
}

export type RskCompanyVat = {
  __typename?: 'RskCompanyVat'
  classification?: Maybe<Array<RskCompanyClassification>>
  dateOfDeregistration?: Maybe<Scalars['DateTime']>
  dateOfRegistration?: Maybe<Scalars['DateTime']>
  vatNumber?: Maybe<Scalars['String']>
}

export type RunEndpointTestsInput = {
  documentId: Scalars['String']
  nationalId: Scalars['String']
  providerId: Scalars['String']
  recipient: Scalars['String']
}

export type ScopeInput = {
  scopeName: Scalars['String']
  tenantId: Scalars['String']
}

export type ScopesInput = {
  tenantId: Scalars['String']
}

export type SearchForPropertyInput = {
  propertyNumber: Scalars['String']
  propertyType?: InputMaybe<Scalars['String']>
}

export type SearchResult = {
  __typename?: 'SearchResult'
  items: Array<Items>
  processEntryCount?: Maybe<Scalars['Int']>
  tagCounts?: Maybe<Array<TagCount>>
  total: Scalars['Int']
  typesCount?: Maybe<Array<TypeCount>>
}

export type SearchableContentTypes =
  | 'webArticle'
  | 'webDigitalIcelandCommunityPage'
  | 'webDigitalIcelandService'
  | 'webLifeEventPage'
  | 'webLink'
  | 'webManual'
  | 'webManualChapterItem'
  | 'webNews'
  | 'webOrganizationPage'
  | 'webOrganizationSubpage'
  | 'webProjectPage'
  | 'webQNA'
  | 'webSubArticle'

export type SearchableTags =
  | 'category'
  | 'organization'
  | 'processentry'
  | 'referencedBy'

export type SearcherInput = {
  contentfulTags?: InputMaybe<Array<Scalars['String']>>
  countProcessEntry?: InputMaybe<Scalars['Boolean']>
  countTag?: InputMaybe<Array<SearchableTags>>
  countTypes?: InputMaybe<Scalars['Boolean']>
  excludedTags?: InputMaybe<Array<Tag>>
  highlightResults?: InputMaybe<Scalars['Boolean']>
  language?: InputMaybe<ContentLanguage>
  order?: InputMaybe<SortDirection>
  page?: InputMaybe<Scalars['Int']>
  queryString: Scalars['String']
  size?: InputMaybe<Scalars['Int']>
  sort?: InputMaybe<SortField>
  tags?: InputMaybe<Array<Tag>>
  types?: InputMaybe<Array<SearchableContentTypes>>
  useQuery?: InputMaybe<Scalars['String']>
}

export type SecondarySchoolProgram = {
  __typename?: 'SecondarySchoolProgram'
  id: Scalars['String']
  isSpecialNeedsProgram: Scalars['Boolean']
  nameEn: Scalars['String']
  nameIs: Scalars['String']
  registrationEndDate: Scalars['DateTime']
}

export type SectionWithImage = {
  __typename?: 'SectionWithImage'
  content?: Maybe<Array<Slice>>
  id: Scalars['ID']
  image?: Maybe<Image>
  title: Scalars['String']
}

export type SectionWithVideo = {
  __typename?: 'SectionWithVideo'
  html?: Maybe<Html>
  id: Scalars['ID']
  link?: Maybe<Link>
  locale: Scalars['String']
  showDividerOnTop?: Maybe<Scalars['Boolean']>
  showTitle?: Maybe<Scalars['Boolean']>
  title: Scalars['String']
  video?: Maybe<EmbeddedVideo>
}

export type SeminarIndividual = {
  email?: InputMaybe<Scalars['String']>
  nationalId?: InputMaybe<Scalars['String']>
}

export type SeminarsCompanyValidationItem = {
  __typename?: 'SeminarsCompanyValidationItem'
  mayPayWithAnAccount?: Maybe<Scalars['Boolean']>
  nationalId?: Maybe<Scalars['String']>
}

export type SeminarsIndividualValidationItem = {
  __typename?: 'SeminarsIndividualValidationItem'
  errorCode?: Maybe<Scalars['String']>
  errorMessage?: Maybe<Scalars['String']>
  errorMessageEn?: Maybe<Scalars['String']>
  mayTakeCourse?: Maybe<Scalars['Boolean']>
  nationalID?: Maybe<Scalars['String']>
}

export type Service = {
  __typename?: 'Service'
  access: Array<AccessCategory>
  data: Array<DataCategory>
  description: Scalars['String']
  environments: Array<ServiceEnvironment>
  id: Scalars['ID']
  owner: Scalars['String']
  pricing: Array<PricingCategory>
  summary: Scalars['String']
  title: Scalars['String']
  type: Array<TypeCategory>
}

export type ServiceDetail = {
  __typename?: 'ServiceDetail'
  data: Array<DataCategory>
  description: Scalars['String']
  links: ExternalLinks
  pricing: Array<PricingCategory>
  summary: Scalars['String']
  title: Scalars['String']
  type: TypeCategory
  version: Scalars['ID']
  xroadIdentifier: XroadIdentifier
}

export type ServiceEnvironment = {
  __typename?: 'ServiceEnvironment'
  details: Array<ServiceDetail>
  environment: Environment
}

export type ServiceWebFormsInput = {
  category: Scalars['String']
  email: Scalars['String']
  institutionSlug: Scalars['String']
  lang?: InputMaybe<Scalars['String']>
  message: Scalars['String']
  name: Scalars['String']
  subject?: InputMaybe<Scalars['String']>
  syslumadur: Scalars['String']
}

export type ServiceWebPage = {
  __typename?: 'ServiceWebPage'
  alertBanner?: Maybe<AlertBanner>
  contactFormDisclaimer?: Maybe<Array<Slice>>
  emailConfig?: Maybe<ServiceWebPageEmailConfig>
  footerItems?: Maybe<Array<FooterItem>>
  id: Scalars['ID']
  organization?: Maybe<Organization>
  slices: Array<Slice>
  title: Scalars['String']
}

export type ServiceWebPageEmailConfig = {
  __typename?: 'ServiceWebPageEmailConfig'
  emails: Array<ServiceWebPageEmailConfigItem>
}

export type ServiceWebPageEmailConfigItem = {
  __typename?: 'ServiceWebPageEmailConfigItem'
  emailList: Array<Scalars['String']>
  supportCategoryId: Scalars['String']
}

export type SessionsInput = {
  after?: InputMaybe<Scalars['String']>
  before?: InputMaybe<Scalars['String']>
  fromDate?: InputMaybe<Scalars['DateTime']>
  limit?: InputMaybe<Scalars['Int']>
  nationalId?: InputMaybe<Scalars['String']>
  order?: InputMaybe<Order>
  toDate?: InputMaybe<Scalars['DateTime']>
}

export type SessionsPaginatedSessionResponse = {
  __typename?: 'SessionsPaginatedSessionResponse'
  data: Array<SessionsSession>
  pageInfo: PageInfoDto
  totalCount: Scalars['Float']
}

export type SessionsSession = {
  __typename?: 'SessionsSession'
  actor: Identity
  client: AuthClient
  device?: Maybe<Scalars['String']>
  id: Scalars['ID']
  ip: Scalars['String']
  ipLocation?: Maybe<Scalars['String']>
  subject: Identity
  timestamp: Scalars['DateTime']
  userAgent: Scalars['String']
}

export type SessionsSessionClientArgs = {
  lang?: InputMaybe<Scalars['String']>
}

export type ShipDetail = {
  __typename?: 'ShipDetail'
  initialRegistrationDate?: Maybe<Scalars['DateTime']>
  mainMeasurements?: Maybe<ShipMeasurements>
  name?: Maybe<Scalars['String']>
  shipRegistrationNumber?: Maybe<Scalars['String']>
  usageType?: Maybe<Scalars['String']>
}

export type ShipMeasurements = {
  __typename?: 'ShipMeasurements'
  bruttoWeightTons?: Maybe<Scalars['String']>
  length?: Maybe<Scalars['String']>
}

export type ShipRegistryShip = {
  __typename?: 'ShipRegistryShip'
  grossTonnage?: Maybe<Scalars['Float']>
  length?: Maybe<Scalars['Float']>
  manufactionYear?: Maybe<Scalars['String']>
  manufacturer?: Maybe<Scalars['String']>
  owners?: Maybe<Array<ShipRegistryShipOwner>>
  portOfRegistry?: Maybe<Scalars['String']>
  regStatus?: Maybe<Scalars['String']>
  region?: Maybe<Scalars['String']>
  regno?: Maybe<Scalars['Float']>
  shipName?: Maybe<Scalars['String']>
  shipType?: Maybe<Scalars['String']>
}

export type ShipRegistryShipOwner = {
  __typename?: 'ShipRegistryShipOwner'
  name?: Maybe<Scalars['String']>
  nationalId?: Maybe<Scalars['String']>
  sharePercentage?: Maybe<Scalars['Float']>
}

export type ShipRegistryShipSearch = {
  __typename?: 'ShipRegistryShipSearch'
  ships: Array<ShipRegistryShip>
}

export type ShipRegistryShipSearchInput = {
  qs: Scalars['String']
}

export type SidebarCard = {
  __typename?: 'SidebarCard'
  contentString: Scalars['String']
  id: Scalars['ID']
  image?: Maybe<Image>
  link?: Maybe<Link>
  title: Scalars['String']
  type: Scalars['String']
}

export type SignatureCollection = {
  __typename?: 'SignatureCollection'
  areas: Array<SignatureCollectionArea>
  candidates: Array<SignatureCollectionCandidate>
  collectionType: SignatureCollectionCollectionType
  endTime: Scalars['DateTime']
  id: Scalars['ID']
  isActive: Scalars['Boolean']
  name: Scalars['String']
  startTime: Scalars['DateTime']
  status: CollectionStatus
}

export type SignatureCollectionAddListsInput = {
  areaIds?: InputMaybe<Array<Scalars['String']>>
  candidateId: Scalars['String']
  collectionId: Scalars['String']
}

export type SignatureCollectionArea = {
  __typename?: 'SignatureCollectionArea'
  id: Scalars['ID']
  max?: Maybe<Scalars['Float']>
  min: Scalars['Float']
  name: Scalars['String']
}

export type SignatureCollectionAreaBase = {
  __typename?: 'SignatureCollectionAreaBase'
  id: Scalars['ID']
  name: Scalars['String']
}

export type SignatureCollectionAreaInput = {
  areaId: Scalars['String']
}

export type SignatureCollectionAreaSummaryReport = {
  __typename?: 'SignatureCollectionAreaSummaryReport'
  id: Scalars['ID']
  lists: Array<SignatureCollectionListSummary>
  max?: Maybe<Scalars['Float']>
  min: Scalars['Float']
  name: Scalars['String']
}

export type SignatureCollectionAreaSummaryReportInput = {
  areaId: Scalars['String']
  collectionId: Scalars['String']
}

export type SignatureCollectionBulk = {
  __typename?: 'SignatureCollectionBulk'
  failed: Array<SignatureCollectionNationalIds>
  success: Array<SignatureCollectionNationalIds>
}

export type SignatureCollectionCanSignFromPaperInput = {
  listId: Scalars['String']
  signeeNationalId: Scalars['String']
}

export type SignatureCollectionCancelListsInput = {
  collectionId: Scalars['String']
  listIds?: InputMaybe<Array<Scalars['String']>>
}

export type SignatureCollectionCandidate = {
  __typename?: 'SignatureCollectionCandidate'
  collectionId?: Maybe<Scalars['String']>
  email?: Maybe<Scalars['String']>
  id: Scalars['ID']
  name: Scalars['String']
  nationalId: Scalars['String']
  partyBallotLetter?: Maybe<Scalars['String']>
  phone?: Maybe<Scalars['String']>
}

export type SignatureCollectionCandidateIdInput = {
  candidateId: Scalars['String']
}

export type SignatureCollectionCandidateLookUp = {
  __typename?: 'SignatureCollectionCandidateLookUp'
  address?: Maybe<Scalars['String']>
  canCreate: Scalars['Boolean']
  canCreateInfo?: Maybe<Array<Scalars['String']>>
  name: Scalars['String']
  nationalId: Scalars['String']
}

export type SignatureCollectionCollectionType =
  | 'LocalGovernmental'
  | 'OtherSameRulesAsParliamentary'
  | 'OtherUnknown'
  | 'Parliamentary'
  | 'Presidential'
  | 'Referendum'
  | 'ResidentPoll'
  | 'SpecialLocalGovernmental'

export type SignatureCollectionCollector = {
  __typename?: 'SignatureCollectionCollector'
  name: Scalars['String']
  nationalId: Scalars['String']
}

export type SignatureCollectionExtendDeadlineInput = {
  listId: Scalars['String']
  newEndDate: Scalars['DateTime']
}

export type SignatureCollectionIdInput = {
  collectionId: Scalars['String']
}

export type SignatureCollectionList = {
  __typename?: 'SignatureCollectionList'
  active?: Maybe<Scalars['Boolean']>
  area: SignatureCollectionArea
  candidate: SignatureCollectionCandidate
  collectionId: Scalars['String']
  collectors?: Maybe<Array<SignatureCollectionCollector>>
  endTime: Scalars['DateTime']
  id: Scalars['ID']
  maxReached: Scalars['Boolean']
  numberOfSignatures?: Maybe<Scalars['Float']>
  reviewed: Scalars['Boolean']
  slug: Scalars['String']
  startTime: Scalars['DateTime']
  title: Scalars['String']
}

export type SignatureCollectionListBase = {
  __typename?: 'SignatureCollectionListBase'
  active?: Maybe<Scalars['Boolean']>
  area: SignatureCollectionArea
  collectionId: Scalars['String']
  endTime: Scalars['DateTime']
  id: Scalars['ID']
  maxReached: Scalars['Boolean']
  numberOfSignatures?: Maybe<Scalars['Float']>
  reviewed: Scalars['Boolean']
  slug: Scalars['String']
  startTime: Scalars['DateTime']
  title: Scalars['String']
}

export type SignatureCollectionListBulkUploadInput = {
  listId: Scalars['String']
  upload: Array<BulkUploadUser>
}

export type SignatureCollectionListIdInput = {
  listId: Scalars['String']
}

export type SignatureCollectionListInput = {
  /** If not provided, the list will be available in all areas */
  areas?: InputMaybe<Array<SignatureCollectionAreaInput>>
  collectionId: Scalars['String']
  owner: SignatureCollectionOwnerInput
}

export type SignatureCollectionListNationalIdsInput = {
  listId: Scalars['String']
  nationalIds: Array<Scalars['String']>
}

export type SignatureCollectionListStatus = {
  __typename?: 'SignatureCollectionListStatus'
  status: ListStatus
}

export type SignatureCollectionListSummary = {
  __typename?: 'SignatureCollectionListSummary'
  candidateName: Scalars['String']
  listName: Scalars['String']
  nrOfDigitalSignatures: Scalars['Float']
  nrOfPaperSignatures: Scalars['Float']
  nrOfSignatures: Scalars['Float']
  partyBallotLetter: Scalars['String']
}

export type SignatureCollectionNationalIdInput = {
  nationalId: Scalars['String']
}

export type SignatureCollectionNationalIds = {
  __typename?: 'SignatureCollectionNationalIds'
  nationalId: Scalars['String']
  reason?: Maybe<Scalars['String']>
}

export type SignatureCollectionNationalIdsInput = {
  collectionId: Scalars['String']
  nationalIds: Array<Scalars['String']>
}

export type SignatureCollectionOwnedList = {
  __typename?: 'SignatureCollectionOwnedList'
  area: SignatureCollectionArea
  id: Scalars['ID']
  title: Scalars['String']
}

export type SignatureCollectionOwnerInput = {
  email: Scalars['String']
  name: Scalars['String']
  nationalId: Scalars['String']
  phone: Scalars['String']
}

export type SignatureCollectionSignature = {
  __typename?: 'SignatureCollectionSignature'
  created: Scalars['DateTime']
  id: Scalars['ID']
  isDigital: Scalars['Boolean']
  listId: Scalars['String']
  listTitle?: Maybe<Scalars['String']>
  pageNumber?: Maybe<Scalars['Float']>
  signee: SignatureCollectionSigneeBase
  valid?: Maybe<Scalars['Boolean']>
}

export type SignatureCollectionSignatureIdInput = {
  signatureId: Scalars['String']
}

export type SignatureCollectionSignatureLookupInput = {
  collectionId: Scalars['String']
  nationalId: Scalars['String']
}

export type SignatureCollectionSignatureUpdateInput = {
  pageNumber: Scalars['Float']
  signatureId: Scalars['String']
}

export type SignatureCollectionSignedList = {
  __typename?: 'SignatureCollectionSignedList'
  active?: Maybe<Scalars['Boolean']>
  area: SignatureCollectionArea
  canUnsign: Scalars['Boolean']
  collectionId: Scalars['String']
  endTime: Scalars['DateTime']
  id: Scalars['ID']
  isDigital: Scalars['Boolean']
  isValid: Scalars['Boolean']
  maxReached: Scalars['Boolean']
  numberOfSignatures?: Maybe<Scalars['Float']>
  pageNumber?: Maybe<Scalars['Float']>
  reviewed: Scalars['Boolean']
  signedDate: Scalars['DateTime']
  slug: Scalars['String']
  startTime: Scalars['DateTime']
  title: Scalars['String']
}

export type SignatureCollectionSignee = {
  __typename?: 'SignatureCollectionSignee'
  address?: Maybe<Scalars['String']>
  area?: Maybe<SignatureCollectionAreaBase>
  canCreate: Scalars['Boolean']
  canCreateInfo?: Maybe<Array<Scalars['String']>>
  canSign?: Maybe<Scalars['Boolean']>
  canSignInfo?: Maybe<Array<Scalars['String']>>
  candidate?: Maybe<SignatureCollectionCandidate>
  isOwner: Scalars['Boolean']
  name: Scalars['String']
  nationalId: Scalars['String']
  ownedLists?: Maybe<Array<SignatureCollectionOwnedList>>
  signature?: Maybe<SignatureCollectionSignature>
}

export type SignatureCollectionSigneeBase = {
  __typename?: 'SignatureCollectionSigneeBase'
  address?: Maybe<Scalars['String']>
  name: Scalars['String']
  nationalId: Scalars['String']
}

export type SignatureCollectionSlug = {
  __typename?: 'SignatureCollectionSlug'
  slug: Scalars['String']
}

export type SignatureCollectionSuccess = {
  __typename?: 'SignatureCollectionSuccess'
  reasons?: Maybe<Array<Scalars['String']>>
  success: Scalars['Boolean']
}

export type SignatureCollectionUploadPaperSignatureInput = {
  listId: Scalars['String']
  nationalId: Scalars['String']
  pageNumber: Scalars['Float']
}

export type SimpleProperties = {
  __typename?: 'SimpleProperties'
  defaultAddress?: Maybe<PropertyLocation>
  propertyNumber?: Maybe<Scalars['String']>
}

export type Slice =
  | AccordionSlice
  | AnchorPageListSlice
  | Asset
  | BulletListSlice
  | Chart
  | ChartComponent
  | ChartNumberBox
  | ConnectedComponent
  | ContactUs
  | Districts
  | EmailSignup
  | Embed
  | EmbeddedVideo
  | EventSlice
  | FaqList
  | FeaturedArticles
  | FeaturedEvents
  | FeaturedLinks
  | FeaturedSupportQnAs
  | Form
  | GenericList
  | GrantCardsList
  | GraphCard
  | HeadingSlice
  | Html
  | Image
  | IntroLinkImage
  | LatestEventsSlice
  | LatestGenericListItems
  | LatestNewsSlice
  | LinkCard
  | LinkCardSection
  | LogoListSlice
  | MultipleStatistics
  | OneColumnText
  | OrganizationParentSubpageList
  | OverviewLinks
  | PowerBiSlice
  | ProcessEntry
  | SectionWithImage
  | SectionWithVideo
  | SidebarCard
  | SliceDropdown
  | Statistics
  | Stepper
  | StorySlice
  | TabSection
  | TableSlice
  | TeamList
  | TellUsAStory
  | TimelineSlice
  | TwoColumnText

export type SliceDropdown = {
  __typename?: 'SliceDropdown'
  alphabeticallyOrdered?: Maybe<Scalars['Boolean']>
  dropdownLabel?: Maybe<Scalars['String']>
  id: Scalars['ID']
  slices: Array<OneColumnText>
}

export type SocialInsuranceIncomePlan = {
  __typename?: 'SocialInsuranceIncomePlan'
  incomeCategories: Array<SocialInsuranceIncomePlanIncomeCategory>
  isEligibleForChange: SocialInsuranceIncomePlanEligbility
  registrationDate: Scalars['DateTime']
  status: SocialInsuranceIncomePlanStatus
}

export type SocialInsuranceIncomePlanEligbility = {
  __typename?: 'SocialInsuranceIncomePlanEligbility'
  isEligible?: Maybe<Scalars['Boolean']>
  reason?: Maybe<Scalars['String']>
}

export type SocialInsuranceIncomePlanIncomeCategory = {
  __typename?: 'SocialInsuranceIncomePlanIncomeCategory'
  annualSum: Scalars['Int']
  currency?: Maybe<Scalars['String']>
  name: Scalars['String']
  typeName: Scalars['String']
}

export type SocialInsuranceIncomePlanStatus =
  | 'ACCEPTED'
  | 'CANCELLED'
  | 'IN_PROGRESS'
  | 'UNKNOWN'

export type SocialInsuranceIncomeType = {
  amountApr?: InputMaybe<Scalars['Int']>
  amountAug?: InputMaybe<Scalars['Int']>
  amountDec?: InputMaybe<Scalars['Int']>
  amountFeb?: InputMaybe<Scalars['Int']>
  amountJan?: InputMaybe<Scalars['Int']>
  amountJul?: InputMaybe<Scalars['Int']>
  amountJun?: InputMaybe<Scalars['Int']>
  amountMar?: InputMaybe<Scalars['Int']>
  amountMay?: InputMaybe<Scalars['Int']>
  amountNov?: InputMaybe<Scalars['Int']>
  amountOct?: InputMaybe<Scalars['Int']>
  amountSep?: InputMaybe<Scalars['Int']>
  currencyCode?: InputMaybe<Scalars['String']>
  incomeCategoryCode?: InputMaybe<Scalars['String']>
  incomeCategoryName?: InputMaybe<Scalars['String']>
  incomeCategoryNumber?: InputMaybe<Scalars['Int']>
  incomeTypeCode?: InputMaybe<Scalars['String']>
  incomeTypeName?: InputMaybe<Scalars['String']>
  incomeTypeNumber?: InputMaybe<Scalars['Int']>
}

export type SocialInsurancePayment = {
  __typename?: 'SocialInsurancePayment'
  markWithAsterisk?: Maybe<Scalars['Boolean']>
  monthlyPaymentHistory: Array<SocialInsurancePaymentMonth>
  name: Scalars['String']
  totalYearCumulativeAmount: Scalars['Int']
}

export type SocialInsurancePaymentGroup = {
  __typename?: 'SocialInsurancePaymentGroup'
  monthlyPaymentHistory: Array<SocialInsurancePaymentMonth>
  name: Scalars['String']
  payments: Array<SocialInsurancePayment>
  totalYearCumulativeAmount: Scalars['Int']
  type: SocialInsurancePaymentGroupType
}

export type SocialInsurancePaymentGroupType =
  | 'DEBT'
  | 'PAID'
  | 'PAYMENTS'
  | 'SUBTRACTION'
  | 'UNKNOWN'

export type SocialInsurancePaymentMonth = {
  __typename?: 'SocialInsurancePaymentMonth'
  amount: Scalars['Int']
  monthIndex: Scalars['Int']
}

export type SocialInsurancePaymentPlan = {
  __typename?: 'SocialInsurancePaymentPlan'
  paymentGroups?: Maybe<Array<SocialInsurancePaymentGroup>>
  totalPayments?: Maybe<Scalars['Int']>
  totalPaymentsReceived?: Maybe<Scalars['Int']>
  totalPaymentsSubtraction?: Maybe<Scalars['Int']>
}

export type SocialInsurancePayments = {
  __typename?: 'SocialInsurancePayments'
  nextPayment?: Maybe<Scalars['Int']>
  previousPayment?: Maybe<Scalars['Int']>
}

export type SocialInsurancePensionCalculationBasePensionType =
  | 'Disability'
  | 'FishermanRetirement'
  | 'HalfRetirement'
  | 'NewSystem'
  | 'NewSystemDisability'
  | 'NewSystemMedicalAndRehabilitation'
  | 'NewSystemPartialDisability'
  | 'Rehabilitation'
  | 'Retirement'

export type SocialInsurancePensionCalculationInput = {
  ageOfFirst75DisabilityAssessment?: InputMaybe<Scalars['Int']>
  benefitsFromMunicipality?: InputMaybe<Scalars['Int']>
  birthMonth?: InputMaybe<Scalars['Int']>
  birthYear?: InputMaybe<Scalars['Int']>
  capitalIncome?: InputMaybe<Scalars['Int']>
  childCount?: InputMaybe<Scalars['Int']>
  childSupportCount?: InputMaybe<Scalars['Int']>
  dateOfCalculations?: InputMaybe<Scalars['String']>
  foreignBasicPension?: InputMaybe<Scalars['Int']>
  hasSpouse?: InputMaybe<Scalars['Boolean']>
  income?: InputMaybe<Scalars['Int']>
  installmentClaims?: InputMaybe<Scalars['Int']>
  livingCondition?: InputMaybe<SocialInsurancePensionCalculationLivingCondition>
  livingConditionAbroadInYears?: InputMaybe<Scalars['Int']>
  livingConditionRatio?: InputMaybe<Scalars['Int']>
  otherIncome?: InputMaybe<Scalars['Int']>
  pensionPayments?: InputMaybe<Scalars['Int']>
  premium?: InputMaybe<Scalars['Int']>
  privatePensionPayments?: InputMaybe<Scalars['Int']>
  startMonth?: InputMaybe<Scalars['Int']>
  startYear?: InputMaybe<Scalars['Int']>
  taxCard?: InputMaybe<Scalars['Int']>
  typeOfBasePension?: InputMaybe<SocialInsurancePensionCalculationBasePensionType>
  typeOfPeriodIncome?: InputMaybe<SocialInsurancePensionCalculationPeriodIncomeType>
}

export type SocialInsurancePensionCalculationLivingCondition =
  | 'DoesNotLiveAlone'
  | 'LivesAlone'

export type SocialInsurancePensionCalculationPeriodIncomeType = 'Month' | 'Year'

export type SocialInsurancePensionCalculationResponse = {
  __typename?: 'SocialInsurancePensionCalculationResponse'
  groups?: Maybe<Array<SocialInsurancePensionCalculationResponseItemGroup>>
  highlightedItems?: Maybe<Array<SocialInsurancePensionCalculationResponseItem>>
}

export type SocialInsurancePensionCalculationResponseItem = {
  __typename?: 'SocialInsurancePensionCalculationResponseItem'
  monthlyAmount?: Maybe<Scalars['Float']>
  name?: Maybe<Scalars['String']>
  yearlyAmount?: Maybe<Scalars['Float']>
}

export type SocialInsurancePensionCalculationResponseItemGroup = {
  __typename?: 'SocialInsurancePensionCalculationResponseItemGroup'
  items: Array<SocialInsurancePensionCalculationResponseItem>
  name?: Maybe<Scalars['String']>
}

export type SocialInsuranceTemporaryCalculation = {
  __typename?: 'SocialInsuranceTemporaryCalculation'
  groups?: Maybe<Array<SocialInsuranceTemporaryCalculationGroup>>
  paidOut?: Maybe<Scalars['Int']>
  subtracted?: Maybe<Scalars['Int']>
  totalPayment?: Maybe<Scalars['Int']>
}

export type SocialInsuranceTemporaryCalculationGroup = {
  __typename?: 'SocialInsuranceTemporaryCalculationGroup'
  group?: Maybe<Scalars['String']>
  groupId?: Maybe<Scalars['Int']>
  monthTotals?: Maybe<Array<SocialInsuranceTemporaryCalculationMonth>>
  rows?: Maybe<Array<SocialInsuranceTemporaryCalculationRow>>
  total?: Maybe<Scalars['Int']>
}

export type SocialInsuranceTemporaryCalculationInput = {
  incomeTypes?: InputMaybe<Array<SocialInsuranceIncomeType>>
  incomeYear: Scalars['Int']
}

export type SocialInsuranceTemporaryCalculationMonth = {
  __typename?: 'SocialInsuranceTemporaryCalculationMonth'
  amount?: Maybe<Scalars['Int']>
  month: Scalars['Int']
}

export type SocialInsuranceTemporaryCalculationRow = {
  __typename?: 'SocialInsuranceTemporaryCalculationRow'
  months?: Maybe<Array<SocialInsuranceTemporaryCalculationMonth>>
  name?: Maybe<Scalars['String']>
  total?: Maybe<Scalars['Int']>
}

export type SortDirection = 'ASC' | 'DESC'

export type SortField = 'POPULAR' | 'RELEASE_DATE' | 'TITLE'

export type Statistic = {
  __typename?: 'Statistic'
  id: Scalars['ID']
  label: Scalars['String']
  value: Scalars['String']
}

export type StatisticKeyValue = {
  __typename?: 'StatisticKeyValue'
  key: Scalars['String']
  value?: Maybe<Scalars['Float']>
}

export type Statistics = {
  __typename?: 'Statistics'
  id: Scalars['ID']
  statistics: Array<Statistic>
  title: Scalars['String']
}

export type StatisticsCard = {
  __typename?: 'StatisticsCard'
  image?: Maybe<Image>
  statistic: Scalars['String']
  title: Scalars['String']
}

export type StatisticsForHeader = {
  __typename?: 'StatisticsForHeader'
  header: Scalars['String']
  headerType: Scalars['String']
  statisticsForHeader: Array<StatisticKeyValue>
}

export type StatisticsInput = {
  /** Date format: YYYY-MM-DD */
  fromDate?: InputMaybe<Scalars['String']>
  organisationId?: InputMaybe<Scalars['String']>
  /** Date format: YYYY-MM-DD */
  toDate?: InputMaybe<Scalars['String']>
}

export type StatisticsQueryInput = {
  dateFrom?: InputMaybe<Scalars['DateTime']>
  dateTo?: InputMaybe<Scalars['DateTime']>
  interval?: InputMaybe<Scalars['Float']>
  numberOfDataPoints?: InputMaybe<Scalars['Float']>
  sourceDataKeys: Array<Scalars['String']>
}

export type StatisticsQueryResponse = {
  __typename?: 'StatisticsQueryResponse'
  statistics: Array<StatisticsForHeader>
}

export type Step = {
  __typename?: 'Step'
  config?: Maybe<Scalars['String']>
  id: Scalars['ID']
  slug: Scalars['String']
  stepType?: Maybe<Scalars['String']>
  subtitle?: Maybe<Array<Slice>>
  title: Scalars['String']
}

export type Stepper = {
  __typename?: 'Stepper'
  config?: Maybe<Scalars['String']>
  id: Scalars['ID']
  steps?: Maybe<Array<Step>>
  title: Scalars['String']
}

export type Story = {
  __typename?: 'Story'
  body?: Maybe<Scalars['String']>
  date: Scalars['String']
  intro: Scalars['String']
  label: Scalars['String']
  link: Scalars['String']
  linkedPage?: Maybe<Scalars['String']>
  logo: Image
  readMoreText: Scalars['String']
  title: Scalars['String']
}

export type StorySlice = {
  __typename?: 'StorySlice'
  id: Scalars['ID']
  readMoreText: Scalars['String']
  stories: Array<Story>
}

export type StudentAssessment = {
  __typename?: 'StudentAssessment'
  studentNationalId?: Maybe<Scalars['String']>
  teacherName?: Maybe<Scalars['String']>
  teacherNationalId?: Maybe<Scalars['String']>
}

export type StudentCanGetPracticePermit = {
  __typename?: 'StudentCanGetPracticePermit'
  errorCode?: Maybe<Scalars['String']>
  instructor?: Maybe<Scalars['String']>
  isOk?: Maybe<Scalars['Boolean']>
  student?: Maybe<Scalars['String']>
}

export type StudentCanGetPracticePermitInput = {
  studentSSN: Scalars['String']
}

export type StudentInformation = {
  __typename?: 'StudentInformation'
  name: Scalars['String']
}

export type StudentInformationResult = {
  __typename?: 'StudentInformationResult'
  student?: Maybe<StudentInformation>
}

export type SubArticle = {
  __typename?: 'SubArticle'
  body: Array<Slice>
  id: Scalars['ID']
  parent?: Maybe<ArticleReference>
  showTableOfContents?: Maybe<Scalars['Boolean']>
  signLanguageVideo?: Maybe<EmbeddedVideo>
  slug: Scalars['String']
  stepper?: Maybe<Stepper>
  title: Scalars['String']
}

export type SubmitApplicationInput = {
  answers?: InputMaybe<Scalars['JSON']>
  event: Scalars['String']
  id: Scalars['String']
}

export type SubmitFormSystemScreenInput = {
  screenId?: InputMaybe<Scalars['String']>
}

export type SubpageHeader = {
  __typename?: 'SubpageHeader'
  body?: Maybe<Array<Slice>>
  featuredImage?: Maybe<Image>
  subpageId: Scalars['String']
  summary: Scalars['String']
  title: Scalars['String']
}

export type SubscriptionType = 'AllChanges' | 'OnlyNew' | 'StatusChanges'

export type SupportCategory = {
  __typename?: 'SupportCategory'
  description?: Maybe<Scalars['String']>
  id: Scalars['ID']
  importance: Scalars['Float']
  organization?: Maybe<Organization>
  slug?: Maybe<Scalars['String']>
  title?: Maybe<Scalars['String']>
}

export type SupportQna = {
  __typename?: 'SupportQNA'
  answer: Array<Slice>
  category?: Maybe<SupportCategory>
  contactLink: Scalars['String']
  id: Scalars['ID']
  importance: Scalars['Float']
  organization?: Maybe<Organization>
  relatedLinks: Array<Link>
  slug: Scalars['String']
  subCategory?: Maybe<SupportSubCategory>
  title: Scalars['String']
}

export type SupportSubCategory = {
  __typename?: 'SupportSubCategory'
  description?: Maybe<Scalars['String']>
  importance: Scalars['Float']
  slug?: Maybe<Scalars['String']>
  title: Scalars['String']
}

export type SyslumennAuction = {
  __typename?: 'SyslumennAuction'
  auctionDate?: Maybe<Scalars['String']>
  auctionTakesPlaceAt?: Maybe<Scalars['String']>
  auctionTime?: Maybe<Scalars['String']>
  auctionType?: Maybe<Scalars['String']>
  location?: Maybe<Scalars['String']>
  lotId?: Maybe<Scalars['String']>
  lotItems?: Maybe<Scalars['String']>
  lotName?: Maybe<Scalars['String']>
  lotType?: Maybe<Scalars['String']>
  office?: Maybe<Scalars['String']>
  petitioners?: Maybe<Scalars['String']>
  publishText?: Maybe<Scalars['String']>
  respondent?: Maybe<Scalars['String']>
}

export type TabContent = {
  __typename?: 'TabContent'
  body?: Maybe<Array<Slice>>
  contentTitle?: Maybe<Scalars['String']>
  image?: Maybe<Image>
  tabTitle: Scalars['String']
}

export type TabSection = {
  __typename?: 'TabSection'
  id: Scalars['ID']
  tabs: Array<TabContent>
  title: Scalars['String']
}

export type TableSlice = {
  __typename?: 'TableSlice'
  id: Scalars['ID']
  tableContent?: Maybe<Scalars['JSON']>
  title: Scalars['String']
}

export type Tag = {
  key: Scalars['String']
  type: SearchableTags
}

export type TagCount = {
  __typename?: 'TagCount'
  count: Scalars['Int']
  key: Scalars['String']
  type?: Maybe<Scalars['String']>
  value: Scalars['String']
}

export type TeacherV4 = {
  __typename?: 'TeacherV4'
  driverLicenseId?: Maybe<Scalars['Float']>
  name: Scalars['String']
  nationalId: Scalars['ID']
}

export type TeamList = {
  __typename?: 'TeamList'
  filterTags?: Maybe<Array<GenericTag>>
  id: Scalars['ID']
  showSearchInput?: Maybe<Scalars['Boolean']>
  teamMemberOrder?: Maybe<GetTeamMembersInputOrderBy>
  teamMembers: Array<TeamMember>
  variant?: Maybe<Scalars['String']>
}

export type TeamMember = {
  __typename?: 'TeamMember'
  createdAt?: Maybe<Scalars['String']>
  email?: Maybe<Scalars['String']>
  filterTags?: Maybe<Array<GenericTag>>
  id: Scalars['ID']
  image?: Maybe<Image>
  imageOnSelect?: Maybe<Image>
  intro?: Maybe<Array<Slice>>
  name: Scalars['String']
  phone?: Maybe<Scalars['String']>
  tagGroups?: Maybe<Array<TeamMemberTagGroup>>
  title: Scalars['String']
}

export type TeamMemberResponse = {
  __typename?: 'TeamMemberResponse'
  input: TeamMemberResponseInput
  items: Array<TeamMember>
  total: Scalars['Int']
}

export type TeamMemberResponseInput = {
  __typename?: 'TeamMemberResponseInput'
  lang: Scalars['String']
  orderBy?: Maybe<GetTeamMembersInputOrderBy>
  page?: Maybe<Scalars['Int']>
  queryString?: Maybe<Scalars['String']>
  size?: Maybe<Scalars['Int']>
  tagGroups?: Maybe<Scalars['JSON']>
  tags?: Maybe<Array<Scalars['String']>>
  teamListId: Scalars['String']
}

export type TeamMemberTagGroup = {
  __typename?: 'TeamMemberTagGroup'
  groupId: Scalars['String']
  groupLabel: Scalars['String']
  tagLabels: Array<Scalars['String']>
}

export type TellUsAStory = {
  __typename?: 'TellUsAStory'
  SuccessMessageTitle: Scalars['String']
  dateOfStoryInputErrorMessage: Scalars['String']
  dateOfStoryLabel: Scalars['String']
  dateOfStoryPlaceholder: Scalars['String']
  emailInputErrorMessage: Scalars['String']
  emailLabel: Scalars['String']
  emailPlaceholder: Scalars['String']
  errorMessage?: Maybe<Html>
  errorMessageTitle: Scalars['String']
  firstSectionTitle: Scalars['String']
  id: Scalars['ID']
  instructionsDescription?: Maybe<Html>
  instructionsImage: Image
  instructionsTitle: Scalars['String']
  introDescription?: Maybe<Html>
  introImage?: Maybe<Image>
  introTitle: Scalars['String']
  messageInputErrorMessage: Scalars['String']
  messageLabel: Scalars['String']
  messagePlaceholder: Scalars['String']
  nameInputErrorMessage: Scalars['String']
  nameLabel: Scalars['String']
  namePlaceholder: Scalars['String']
  organizationInputErrorMessage: Scalars['String']
  organizationLabel: Scalars['String']
  organizationPlaceholder: Scalars['String']
  publicationAllowedLabel: Scalars['String']
  secondSectionTitle: Scalars['String']
  subjectInputErrorMessage?: Maybe<Scalars['String']>
  subjectLabel: Scalars['String']
  subjectPlaceholder: Scalars['String']
  submitButtonTitle: Scalars['String']
  successMessage?: Maybe<Html>
  thirdSectionTitle: Scalars['String']
}

export type TellUsAStoryInput = {
  dateOfStory: Scalars['String']
  email: Scalars['String']
  message: Scalars['String']
  name: Scalars['String']
  organization: Scalars['String']
  publicationAllowed?: InputMaybe<Scalars['Boolean']>
  subject?: InputMaybe<Scalars['String']>
}

export type TemporaryEventLicence = {
  __typename?: 'TemporaryEventLicence'
  estimatedNumberOfGuests?: Maybe<Scalars['Float']>
  issuedBy?: Maybe<Scalars['String']>
  licenceSubType?: Maybe<Scalars['String']>
  licenceType?: Maybe<Scalars['String']>
  licenseHolder?: Maybe<Scalars['String']>
  licenseNumber?: Maybe<Scalars['String']>
  licenseResponsible?: Maybe<Scalars['String']>
  location?: Maybe<Scalars['String']>
  maximumNumberOfGuests?: Maybe<Scalars['Float']>
  validFrom?: Maybe<Scalars['DateTime']>
  validTo?: Maybe<Scalars['DateTime']>
  year?: Maybe<Scalars['Float']>
}

export type TestResult = {
  __typename?: 'TestResult'
  id: Scalars['String']
  isValid: Scalars['Boolean']
  message?: Maybe<Scalars['String']>
}

export type TextFieldLocales = {
  __typename?: 'TextFieldLocales'
  en: Scalars['String']
  is: Scalars['String']
}

export type TimelineEvent = {
  __typename?: 'TimelineEvent'
  body?: Maybe<Html>
  date: Scalars['String']
  denominator?: Maybe<Scalars['Int']>
  id: Scalars['ID']
  label: Scalars['String']
  link: Scalars['String']
  numerator?: Maybe<Scalars['Int']>
  tags?: Maybe<Array<Scalars['String']>>
  title: Scalars['String']
}

export type TimelineSlice = {
  __typename?: 'TimelineSlice'
  events: Array<TimelineEvent>
  hasBorderAbove?: Maybe<Scalars['Boolean']>
  id: Scalars['ID']
  intro: Scalars['String']
  title: Scalars['String']
}

export type TrademarkSubType =
  | 'CERTIFICATION_MARK'
  | 'COLLECTIVE_MARK'
  | 'TRADEMARK'

export type TrademarkType =
  | 'ANIMATION'
  | 'AUDIO'
  | 'IMAGE'
  | 'MULTIMEDIA'
  | 'TEXT'
  | 'TEXT_AND_IMAGE'
  | 'UNKNOWN'

export type TransactionType =
  | 'A'
  | 'AF'
  | 'AS'
  | 'E'
  | 'G'
  | 'I'
  | 'KG'
  | 'KS'
  | 'L'
  | 'LM'
  | 'M'

export type TwoColumnText = {
  __typename?: 'TwoColumnText'
  dividerOnTop?: Maybe<Scalars['Boolean']>
  id: Scalars['ID']
  leftContent?: Maybe<Array<Slice>>
  leftLink?: Maybe<Link>
  leftTitle?: Maybe<Scalars['String']>
  onlyUseOneTitle?: Maybe<Scalars['Boolean']>
  rightContent?: Maybe<Array<Slice>>
  rightLink?: Maybe<Link>
  rightTitle?: Maybe<Scalars['String']>
}

export type TypeCategory = 'GRAPHQL' | 'REST' | 'SOAP'

export type TypeCount = {
  __typename?: 'TypeCount'
  count: Scalars['Int']
  key: Scalars['String']
}

export type Tyres = {
  __typename?: 'Tyres'
  axle1?: Maybe<Scalars['String']>
  axle2?: Maybe<Scalars['String']>
  axle3?: Maybe<Scalars['String']>
  axle4?: Maybe<Scalars['String']>
  axle5?: Maybe<Scalars['String']>
}

export type Union = {
  __typename?: 'Union'
  id: Scalars['String']
  name: Scalars['String']
}

export type UnitOfUse = {
  __typename?: 'UnitOfUse'
  address?: Maybe<PropertyLocation>
  appraisal?: Maybe<Appraisal>
  buildYearDisplay?: Maybe<Scalars['String']>
  displaySize?: Maybe<Scalars['Float']>
  explanation?: Maybe<Scalars['String']>
  fireAssessment?: Maybe<Scalars['Float']>
  marking?: Maybe<Scalars['String']>
  propertyNumber?: Maybe<Scalars['String']>
  unitOfUseNumber?: Maybe<Scalars['String']>
  usageDisplay?: Maybe<Scalars['String']>
}

export type UnitsOfUseModel = {
  __typename?: 'UnitsOfUseModel'
  paging?: Maybe<PagingData>
  unitsOfUse?: Maybe<Array<UnitOfUse>>
}

export type UniversityCareersInstitution = {
  __typename?: 'UniversityCareersInstitution'
  displayName?: Maybe<Scalars['String']>
  id: UniversityCareersUniversityId
  logoUrl?: Maybe<Scalars['String']>
  shortId: Scalars['String']
}

export type UniversityCareersStudentFile = {
  __typename?: 'UniversityCareersStudentFile'
  displayName: Scalars['String']
  fileName: Scalars['String']
  locale: Scalars['String']
  type: Scalars['String']
}

export type UniversityCareersStudentInfoByUniversityInput = {
  locale: Scalars['String']
  trackNumber: Scalars['Float']
  universityId: UniversityCareersUniversityId
}

export type UniversityCareersStudentInfoInput = {
  locale: Scalars['String']
}

export type UniversityCareersStudentTrack = {
  __typename?: 'UniversityCareersStudentTrack'
  downloadServiceURL?: Maybe<Scalars['String']>
  /** Extra info about any available files for download */
  files: Array<UniversityCareersStudentFile>
  metadata: UniversityCareersStudentTrackMetadata
  transcript: UniversityCareersStudentTrackTranscript
}

export type UniversityCareersStudentTrackHistory = {
  __typename?: 'UniversityCareersStudentTrackHistory'
  errors?: Maybe<Array<UniversityCareersStudentTrackTranscriptError>>
  transcripts: Array<UniversityCareersStudentTrackTranscript>
}

export type UniversityCareersStudentTrackMetadata = {
  __typename?: 'UniversityCareersStudentTrackMetadata'
  description: Scalars['String']
  footer: Scalars['String']
  unconfirmedData?: Maybe<Scalars['String']>
}

export type UniversityCareersStudentTrackTranscript = {
  __typename?: 'UniversityCareersStudentTrackTranscript'
  degree?: Maybe<Scalars['String']>
  faculty: Scalars['String']
  graduationDate: Scalars['String']
  institution: UniversityCareersInstitution
  name: Scalars['String']
  nationalId?: Maybe<Scalars['String']>
  school: Scalars['String']
  studyProgram?: Maybe<Scalars['String']>
  trackNumber: Scalars['Int']
}

export type UniversityCareersStudentTrackTranscriptError = {
  __typename?: 'UniversityCareersStudentTrackTranscriptError'
  /** The error, raw */
  error?: Maybe<Scalars['String']>
  institution: UniversityCareersInstitution
}

export type UniversityCareersUniversityId =
  | 'AGRICULTURAL_UNIVERSITY_OF_ICELAND'
  | 'BIFROST_UNIVERSITY'
  | 'HOLAR_UNIVERSITY'
  | 'ICELAND_UNIVERSITY_OF_THE_ARTS'
  | 'UNIVERSITY_OF_AKUREYRI'
  | 'UNIVERSITY_OF_ICELAND'

export type UniversityGatewayApplication = {
  __typename?: 'UniversityGatewayApplication'
  id: Scalars['String']
  nationalId: Scalars['String']
}

export type UniversityGatewayGetPogramInput = {
  id: Scalars['String']
}

export type UniversityGatewayProgram = {
  __typename?: 'UniversityGatewayProgram'
  active: Scalars['Boolean']
  applicationEndDate: Scalars['DateTime']
  applicationInUniversityGateway: Scalars['Boolean']
  applicationPeriodOpen: Scalars['Boolean']
  applicationStartDate: Scalars['DateTime']
  costPerYear?: Maybe<Scalars['Float']>
  credits: Scalars['Float']
  degreeAbbreviation: Scalars['String']
  degreeType: Scalars['String']
  departmentNameEn: Scalars['String']
  departmentNameIs: Scalars['String']
  descriptionEn: Scalars['String']
  descriptionIs: Scalars['String']
  durationInYears: Scalars['Float']
  externalId: Scalars['String']
  id: Scalars['String']
  iscedCode: Scalars['String']
  modeOfDelivery: Array<Scalars['String']>
  nameEn: Scalars['String']
  nameIs: Scalars['String']
  schoolAnswerDate?: Maybe<Scalars['DateTime']>
  specializationExternalId?: Maybe<Scalars['String']>
  specializationNameEn?: Maybe<Scalars['String']>
  specializationNameIs?: Maybe<Scalars['String']>
  startingSemesterSeason: Scalars['String']
  startingSemesterYear: Scalars['Float']
  studentAnswerDate?: Maybe<Scalars['DateTime']>
  universityContentfulKey: Scalars['String']
  universityId: Scalars['String']
}

export type UniversityGatewayProgramDetails = {
  __typename?: 'UniversityGatewayProgramDetails'
  active: Scalars['Boolean']
  admissionRequirementsEn?: Maybe<Scalars['String']>
  admissionRequirementsIs?: Maybe<Scalars['String']>
  allowException: Scalars['Boolean']
  allowThirdLevelQualification: Scalars['Boolean']
  applicationEndDate: Scalars['DateTime']
  applicationInUniversityGateway: Scalars['Boolean']
  applicationPeriodOpen: Scalars['Boolean']
  applicationStartDate: Scalars['DateTime']
  arrangementEn?: Maybe<Scalars['String']>
  arrangementIs?: Maybe<Scalars['String']>
  costInformationEn?: Maybe<Scalars['String']>
  costInformationIs?: Maybe<Scalars['String']>
  costPerYear?: Maybe<Scalars['Float']>
  credits: Scalars['Float']
  degreeAbbreviation: Scalars['String']
  degreeType: Scalars['String']
  departmentNameEn: Scalars['String']
  departmentNameIs: Scalars['String']
  descriptionEn: Scalars['String']
  descriptionHtmlEn?: Maybe<Scalars['JSON']>
  descriptionHtmlIs?: Maybe<Scalars['JSON']>
  descriptionIs: Scalars['String']
  durationInYears: Scalars['Float']
  externalId: Scalars['String']
  externalUrlEn?: Maybe<Scalars['String']>
  externalUrlIs?: Maybe<Scalars['String']>
  extraApplicationFields: Array<UniversityGatewayProgramExtraApplicationField>
  id: Scalars['String']
  iscedCode: Scalars['String']
  modeOfDelivery: Array<Scalars['String']>
  nameEn: Scalars['String']
  nameIs: Scalars['String']
  schoolAnswerDate?: Maybe<Scalars['DateTime']>
  specializationExternalId?: Maybe<Scalars['String']>
  specializationNameEn?: Maybe<Scalars['String']>
  specializationNameIs?: Maybe<Scalars['String']>
  startingSemesterSeason: Scalars['String']
  startingSemesterYear: Scalars['Float']
  studentAnswerDate?: Maybe<Scalars['DateTime']>
  studyRequirementsEn?: Maybe<Scalars['String']>
  studyRequirementsIs?: Maybe<Scalars['String']>
  universityContentfulKey: Scalars['String']
  universityId: Scalars['String']
}

export type UniversityGatewayProgramExtraApplicationField = {
  __typename?: 'UniversityGatewayProgramExtraApplicationField'
  descriptionEn?: Maybe<Scalars['String']>
  descriptionIs?: Maybe<Scalars['String']>
  externalKey: Scalars['String']
  fieldType: Scalars['String']
  nameEn: Scalars['String']
  nameIs: Scalars['String']
  options?: Maybe<Scalars['String']>
  required: Scalars['Boolean']
  uploadAcceptedFileType?: Maybe<Scalars['String']>
}

export type UniversityGatewayProgramFilter = {
  __typename?: 'UniversityGatewayProgramFilter'
  field: Scalars['String']
  options: Array<Scalars['String']>
}

export type UniversityGatewayProgramsPaginated = {
  __typename?: 'UniversityGatewayProgramsPaginated'
  data: Array<UniversityGatewayProgram>
  pageInfo: PageInfoDto
  totalCount: Scalars['Float']
}

export type UniversityGatewayUniversity = {
  __typename?: 'UniversityGatewayUniversity'
  contentfulKey: Scalars['String']
  contentfulLink?: Maybe<Scalars['String']>
  contentfulLinkEn?: Maybe<Scalars['String']>
  contentfulLogoUrl?: Maybe<Scalars['String']>
  contentfulTitle?: Maybe<Scalars['String']>
  contentfulTitleEn?: Maybe<Scalars['String']>
  id: Scalars['String']
  nationalId: Scalars['String']
}

export type UpdateApplicationExternalDataInput = {
  dataProviders: Array<DataProvider>
  id: Scalars['String']
}

export type UpdateApplicationInput = {
  answers?: InputMaybe<Scalars['JSON']>
  draftProgress?: InputMaybe<DraftProgressInput>
  id: Scalars['String']
  skipValidation?: InputMaybe<Scalars['Boolean']>
}

export type UpdateAuthDelegationInput = {
  delegationId: Scalars['String']
  scopes: Array<AuthDelegationScopeInput>
}

export type UpdateChangeAppendixInput = {
  diff?: InputMaybe<Scalars['String']>
  text?: InputMaybe<Scalars['String']>
  title?: InputMaybe<Scalars['String']>
}

export type UpdateContactInput = {
  address?: InputMaybe<Scalars['String']>
  email?: InputMaybe<Scalars['String']>
  name?: InputMaybe<Scalars['String']>
  phoneNumber?: InputMaybe<Scalars['String']>
}

export type UpdateCurrentEmployerInput = {
  employerNationalId: Scalars['String']
}

export type UpdateCurrentEmployerResponse = {
  __typename?: 'UpdateCurrentEmployerResponse'
  success: Scalars['Boolean']
}

export type UpdateDraftRegulationCancelInput = {
  date?: InputMaybe<Scalars['String']>
  id: Scalars['String']
}

export type UpdateDraftRegulationChangeInput = {
  appendixes?: InputMaybe<Array<UpdateChangeAppendixInput>>
  comments?: InputMaybe<Scalars['String']>
  date?: InputMaybe<Scalars['String']>
  diff?: InputMaybe<Scalars['String']>
  id: Scalars['String']
  text?: InputMaybe<Scalars['String']>
  title?: InputMaybe<Scalars['String']>
}

export type UpdateEndorsementListDto = {
  closedDate: Scalars['DateTime']
  description?: InputMaybe<Scalars['String']>
  openedDate: Scalars['DateTime']
  title: Scalars['String']
}

export type UpdateEndorsementListInput = {
  endorsementList: UpdateEndorsementListDto
  listId: Scalars['String']
}

export type UpdateEndpointInput = {
  endpoint: Scalars['String']
  nationalId: Scalars['String']
  providerId: Scalars['String']
  xroad?: InputMaybe<Scalars['Boolean']>
}

export type UpdateFormSystemApplicantDtoInput = {
  name?: InputMaybe<FormSystemLanguageTypeInput>
}

export type UpdateFormSystemApplicantInput = {
  id?: InputMaybe<Scalars['String']>
  updateFormApplicantTypeDto?: InputMaybe<UpdateFormSystemApplicantDtoInput>
}

export type UpdateFormSystemApplicationDependenciesInput = {
  completed?: InputMaybe<Array<InputMaybe<Scalars['String']>>>
  dependencies?: InputMaybe<Array<InputMaybe<FormSystemDependencyInput>>>
}

export type UpdateHelpdeskInput = {
  email?: InputMaybe<Scalars['String']>
  phoneNumber?: InputMaybe<Scalars['String']>
}

export type UpdateIcelandicNameInput = {
  body: CreateIcelandicNameInput
  id: Scalars['Float']
}

export type UpdateOrganisationInput = {
  address?: InputMaybe<Scalars['String']>
  email?: InputMaybe<Scalars['String']>
  name?: InputMaybe<Scalars['String']>
  nationalId?: InputMaybe<Scalars['String']>
  phoneNumber?: InputMaybe<Scalars['String']>
}

export type UpdatePracticalDrivingLessonInput = {
  bookId: Scalars['String']
  comments: Scalars['String']
  createdOn: Scalars['String']
  id: Scalars['String']
  minutes: Scalars['Float']
}

export type UpdateUserProfileInput = {
  bankInfo?: InputMaybe<Scalars['String']>
  canNudge?: InputMaybe<Scalars['Boolean']>
  documentNotifications?: InputMaybe<Scalars['Boolean']>
  email?: InputMaybe<Scalars['String']>
  emailCode?: InputMaybe<Scalars['String']>
  emailStatus?: InputMaybe<Scalars['String']>
  locale?: InputMaybe<Scalars['String']>
  mobilePhoneNumber?: InputMaybe<Scalars['String']>
  mobileStatus?: InputMaybe<Scalars['String']>
  smsCode?: InputMaybe<Scalars['String']>
}

export type Url = {
  __typename?: 'Url'
  explicitRedirect?: Maybe<Scalars['String']>
  id: Scalars['ID']
  page?: Maybe<ReferenceLink>
  title?: Maybe<Scalars['String']>
  urlsList: Array<Scalars['String']>
}

export type UserDeviceToken = {
  __typename?: 'UserDeviceToken'
  created: Scalars['DateTime']
  deviceToken: Scalars['String']
  id: Scalars['ID']
  modified: Scalars['DateTime']
  nationalId: Scalars['String']
}

export type UserDeviceTokenInput = {
  deviceToken: Scalars['String']
}

export type UserProfile = {
  __typename?: 'UserProfile'
  bankInfo?: Maybe<Scalars['String']>
  /** @deprecated Deprecated due to new field EmailNotification from UserProfile V2 */
  canNudge?: Maybe<Scalars['Boolean']>
  documentNotifications: Scalars['Boolean']
  email?: Maybe<Scalars['String']>
  emailNotifications?: Maybe<Scalars['Boolean']>
  emailStatus?: Maybe<Scalars['String']>
  emailVerified: Scalars['Boolean']
  locale?: Maybe<Scalars['String']>
  mobilePhoneNumber?: Maybe<Scalars['String']>
  mobilePhoneNumberVerified: Scalars['Boolean']
  mobileStatus?: Maybe<Scalars['String']>
  /** @deprecated needsNudge should be used to determine if profile needs nudge. v2 doesnt provide the modified value. */
  modified?: Maybe<Scalars['DateTime']>
  nationalId: Scalars['ID']
  needsNudge?: Maybe<Scalars['Boolean']>
}

export type UserProfileActorProfile = {
  __typename?: 'UserProfileActorProfile'
  emailNotifications: Scalars['Boolean']
  fromName?: Maybe<Scalars['String']>
  fromNationalId: Scalars['String']
}

export type UserProfileActorProfileResponse = {
  __typename?: 'UserProfileActorProfileResponse'
  data: Array<UserProfileActorProfile>
  pageInfo: PageInfoDto
  totalCount: Scalars['Float']
}

export type UserProfileAdminProfile = {
  __typename?: 'UserProfileAdminProfile'
  bankInfo?: Maybe<Scalars['String']>
  /** @deprecated Deprecated due to new field EmailNotification from UserProfile V2 */
  canNudge?: Maybe<Scalars['Boolean']>
  documentNotifications: Scalars['Boolean']
  email?: Maybe<Scalars['String']>
  emailNotifications?: Maybe<Scalars['Boolean']>
  emailStatus?: Maybe<Scalars['String']>
  emailVerified: Scalars['Boolean']
  fullName?: Maybe<Scalars['String']>
  lastNudge?: Maybe<Scalars['DateTime']>
  locale?: Maybe<Scalars['String']>
  mobilePhoneNumber?: Maybe<Scalars['String']>
  mobilePhoneNumberVerified: Scalars['Boolean']
  mobileStatus?: Maybe<Scalars['String']>
  /** @deprecated needsNudge should be used to determine if profile needs nudge. v2 doesnt provide the modified value. */
  modified?: Maybe<Scalars['DateTime']>
  nationalId: Scalars['ID']
  needsNudge?: Maybe<Scalars['Boolean']>
  nextNudge?: Maybe<Scalars['DateTime']>
}

export type UserProfileAdminProfilesResponse = {
  __typename?: 'UserProfileAdminProfilesResponse'
  data: Array<UserProfileAdminProfile>
  pageInfo: PageInfoDto
  totalCount: Scalars['Float']
}

export type UserProfileData = {
  email: Scalars['String']
  mobilePhoneNumber: Scalars['String']
}

export type UserProfileLocale = {
  __typename?: 'UserProfileLocale'
  locale?: Maybe<Scalars['String']>
  nationalId: Scalars['ID']
}

export type UserProfileUpdateActorProfileInput = {
  emailNotifications: Scalars['Boolean']
  fromNationalId: Scalars['String']
}

export type VacanciesGetLanguageEnum = 'EN' | 'IS' | 'ONLYEN' | 'ONLYIS'

export type VacanciesVacancyIdGetLanguageEnum =
  | 'EN'
  | 'IS'
  | 'ONLYEN'
  | 'ONLYIS'

export type ValidateMortgageCertificateInput = {
  properties: Array<Properties>
}

export type ValidateSeminarIndividualsInput = {
  individuals: Array<SeminarIndividual>
}

export type VehicleCurrentWithMileage = {
  __typename?: 'VehicleCurrentWithMileage'
  color?: Maybe<Scalars['String']>
  mileageDetails?: Maybe<VehiclesMileageDetails>
  registrationNumber?: Maybe<Scalars['String']>
  type?: Maybe<Scalars['String']>
  userRole?: Maybe<Scalars['String']>
  vehicleId: Scalars['String']
}

export type VehicleDetail = {
  __typename?: 'VehicleDetail'
  color?: Maybe<Scalars['String']>
  dateOfRegistration?: Maybe<Scalars['DateTime']>
  licencePlate?: Maybe<Scalars['String']>
  manufacturer?: Maybe<Scalars['String']>
  manufacturerType?: Maybe<Scalars['String']>
  propertyNumber?: Maybe<Scalars['String']>
}

export type VehicleListed = {
  __typename?: 'VehicleListed'
  canRegisterMileage?: Maybe<Scalars['Boolean']>
  colorCode?: Maybe<Scalars['String']>
  colorName?: Maybe<Scalars['String']>
  lastMileageRegistration?: Maybe<VehicleMileageDetail>
  latestMileage?: Maybe<Scalars['Float']>
  make?: Maybe<Scalars['String']>
  mileageRegistrationHistory?: Maybe<Array<VehicleMileageDetail>>
  modelYear?: Maybe<Scalars['String']>
  nextMainInspection?: Maybe<Scalars['DateTime']>
  permno?: Maybe<Scalars['String']>
  persidno?: Maybe<Scalars['String']>
  regTypeCode?: Maybe<Scalars['String']>
  regTypeName?: Maybe<Scalars['String']>
  regTypeSubName?: Maybe<Scalars['String']>
  regno?: Maybe<Scalars['String']>
  requiresMileageRegistration?: Maybe<Scalars['Boolean']>
  role?: Maybe<Scalars['String']>
}

export type VehicleMileageDetail = {
  __typename?: 'VehicleMileageDetail'
  internalId?: Maybe<Scalars['ID']>
  /**
   * Deprecated. Use {mileageNumber} instead. Keeping in for backwards compatibility
   * @deprecated Third party service wants this as an integer.
   */
  mileage?: Maybe<Scalars['String']>
  mileageNumber?: Maybe<Scalars['Float']>
  originCode?: Maybe<Scalars['String']>
  permno?: Maybe<Scalars['String']>
  readDate?: Maybe<Scalars['DateTime']>
}

export type VehicleMileageOverview = {
  __typename?: 'VehicleMileageOverview'
  canRegisterMileage?: Maybe<Scalars['Boolean']>
  canUserRegisterVehicleMileage?: Maybe<Scalars['Boolean']>
  data?: Maybe<Array<VehicleMileageDetail>>
  /** Indicates that the user has already posted a reading today. So instead of posting a new reading, should be editing the reading from today */
  editing?: Maybe<Scalars['Boolean']>
  permno?: Maybe<Scalars['String']>
  requiresMileageRegistration?: Maybe<Scalars['Boolean']>
}

export type VehicleMileagePostResponse =
  | VehicleMileageDetail
  | VehiclesMileageUpdateError

export type VehicleMileagePutModel = {
  __typename?: 'VehicleMileagePutModel'
  internalId?: Maybe<Scalars['ID']>
  mileage?: Maybe<Scalars['String']>
  mileageNumber?: Maybe<Scalars['Float']>
  permno?: Maybe<Scalars['String']>
}

export type VehicleMileagePutResponse =
  | VehicleMileagePutModel
  | VehiclesMileageUpdateError

export type VehicleOperatorChangeChecksByPermno = {
  __typename?: 'VehicleOperatorChangeChecksByPermno'
  basicVehicleInformation?: Maybe<BasicVehicleInformation>
  isDebtLess?: Maybe<Scalars['Boolean']>
  validationErrorMessages?: Maybe<Array<VehicleValidationErrorMessage>>
}

export type VehicleOwnerchangeChecksByPermno = {
  __typename?: 'VehicleOwnerchangeChecksByPermno'
  basicVehicleInformation?: Maybe<BasicVehicleInformation>
  isDebtLess?: Maybe<Scalars['Boolean']>
  validationErrorMessages?: Maybe<Array<VehicleValidationErrorMessage>>
}

export type VehiclePaging = {
  __typename?: 'VehiclePaging'
  pageNumber?: Maybe<Scalars['Float']>
  pageSize?: Maybe<Scalars['Float']>
  totalPages?: Maybe<Scalars['Float']>
  totalRecords?: Maybe<Scalars['Float']>
}

export type VehiclePlateOrderChecksByPermno = {
  __typename?: 'VehiclePlateOrderChecksByPermno'
  basicVehicleInformation?: Maybe<BasicVehicleInformation>
  validationErrorMessages?: Maybe<Array<VehicleValidationErrorMessage>>
}

export type VehicleRegistration = {
  __typename?: 'VehicleRegistration'
  color?: Maybe<Scalars['String']>
  licensePlate?: Maybe<Scalars['String']>
  manufacturer?: Maybe<Scalars['String']>
  modelName?: Maybe<Scalars['String']>
}

export type VehicleUserTypeEnum = 'eigandi' | 'medeigandi' | 'umradamadur'

export type VehicleValidationErrorMessage = {
  __typename?: 'VehicleValidationErrorMessage'
  defaultMessage?: Maybe<Scalars['String']>
  errorNo?: Maybe<Scalars['String']>
}

export type VehiclesAxle = {
  __typename?: 'VehiclesAxle'
  axleMaxWeight?: Maybe<Scalars['Float']>
  wheelAxle?: Maybe<Scalars['String']>
}

export type VehiclesBasicInfo = {
  __typename?: 'VehiclesBasicInfo'
  country?: Maybe<Scalars['String']>
  formerCountry?: Maybe<Scalars['String']>
  importStatus?: Maybe<Scalars['String']>
  model?: Maybe<Scalars['String']>
  permno?: Maybe<Scalars['String']>
  preregDateYear?: Maybe<Scalars['String']>
  regno?: Maybe<Scalars['String']>
  subModel?: Maybe<Scalars['String']>
  vehicleStatus?: Maybe<Scalars['String']>
  verno?: Maybe<Scalars['String']>
  year?: Maybe<Scalars['Float']>
}

export type VehiclesBulkMileageReadingResponse = {
  __typename?: 'VehiclesBulkMileageReadingResponse'
  errorCode?: Maybe<Scalars['Int']>
  errorMessage?: Maybe<Scalars['String']>
  /** The GUID of the mileage registration post request. Used to fetch job status */
  requestId?: Maybe<Scalars['ID']>
}

export type VehiclesBulkMileageRegistrationJob = {
  __typename?: 'VehiclesBulkMileageRegistrationJob'
  /** When did the bulk request execution finish */
  dateFinished?: Maybe<Scalars['DateTime']>
  /** When was the bulk request requested? */
  dateRequested?: Maybe<Scalars['DateTime']>
  /** When did the bulk request start executing? */
  dateStarted?: Maybe<Scalars['DateTime']>
  guid: Scalars['ID']
  originCode?: Maybe<Scalars['String']>
  originName?: Maybe<Scalars['String']>
  reportingPersonName?: Maybe<Scalars['String']>
  reportingPersonNationalId?: Maybe<Scalars['String']>
}

export type VehiclesBulkMileageRegistrationJobHistory = {
  __typename?: 'VehiclesBulkMileageRegistrationJobHistory'
  history: Array<VehiclesBulkMileageRegistrationJob>
}

export type VehiclesBulkMileageRegistrationRequestDetail = {
  __typename?: 'VehiclesBulkMileageRegistrationRequestDetail'
  errors?: Maybe<Array<VehiclesBulkMileageRegistrationRequestError>>
  guid: Scalars['ID']
  mileage?: Maybe<Scalars['Int']>
  returnCode?: Maybe<Scalars['String']>
  vehicleId: Scalars['String']
}

export type VehiclesBulkMileageRegistrationRequestError = {
  __typename?: 'VehiclesBulkMileageRegistrationRequestError'
  code?: Maybe<Scalars['String']>
  message?: Maybe<Scalars['String']>
  warningSerialCode?: Maybe<Scalars['Int']>
  warningText?: Maybe<Scalars['String']>
}

export type VehiclesBulkMileageRegistrationRequestOverview = {
  __typename?: 'VehiclesBulkMileageRegistrationRequestOverview'
  requests: Array<VehiclesBulkMileageRegistrationRequestDetail>
}

export type VehiclesBulkMileageRegistrationRequestStatus = {
  __typename?: 'VehiclesBulkMileageRegistrationRequestStatus'
  jobsErrored?: Maybe<Scalars['Int']>
  jobsFinished?: Maybe<Scalars['Int']>
  jobsRemaining?: Maybe<Scalars['Int']>
  jobsSubmitted?: Maybe<Scalars['Int']>
  jobsValid?: Maybe<Scalars['Int']>
  requestId: Scalars['ID']
}

export type VehiclesCurrentListResponse = {
  __typename?: 'VehiclesCurrentListResponse'
  data?: Maybe<Array<VehicleCurrentWithMileage>>
  pageNumber: Scalars['Int']
  pageSize: Scalars['Int']
  totalPages: Scalars['Int']
  totalRecords: Scalars['Int']
}

export type VehiclesCurrentOwnerInfo = {
  __typename?: 'VehiclesCurrentOwnerInfo'
  address?: Maybe<Scalars['String']>
  city?: Maybe<Scalars['String']>
  dateOfPurchase?: Maybe<Scalars['DateTime']>
  nationalId?: Maybe<Scalars['String']>
  owner?: Maybe<Scalars['String']>
  postalcode?: Maybe<Scalars['String']>
}

export type VehiclesDetail = {
  __typename?: 'VehiclesDetail'
  basicInfo?: Maybe<VehiclesBasicInfo>
  coOwners?: Maybe<Array<VehiclesCurrentOwnerInfo>>
  currentOwnerInfo?: Maybe<VehiclesCurrentOwnerInfo>
  downloadServiceURL?: Maybe<Scalars['String']>
  inspectionInfo?: Maybe<VehiclesInspectionInfo>
  isDebtLess?: Maybe<Scalars['Boolean']>
  isOutOfCommission?: Maybe<Scalars['Boolean']>
  lastMileage?: Maybe<VehicleMileageDetail>
  mainInfo?: Maybe<VehiclesMainInfo>
  operators?: Maybe<Array<VehiclesOperator>>
  ownersInfo?: Maybe<Array<VehiclesOwners>>
  registrationInfo?: Maybe<VehiclesRegistrationInfo>
  technicalInfo?: Maybe<VehiclesTechnicalInfo>
}

export type VehiclesExcel = {
  __typename?: 'VehiclesExcel'
  name?: Maybe<Scalars['String']>
  persidno?: Maybe<Scalars['String']>
  vehicles?: Maybe<Array<VehiclesDetail>>
}

export type VehiclesInspectionInfo = {
  __typename?: 'VehiclesInspectionInfo'
  carTax?: Maybe<Scalars['Float']>
  date?: Maybe<Scalars['DateTime']>
  inspectionFine?: Maybe<Scalars['Float']>
  insuranceStatus?: Maybe<Scalars['Boolean']>
  lastInspectionDate?: Maybe<Scalars['DateTime']>
  mortages?: Maybe<Scalars['Float']>
  nextInspectionDate?: Maybe<Scalars['DateTime']>
  odometer?: Maybe<Scalars['String']>
  result?: Maybe<Scalars['String']>
  type?: Maybe<Scalars['String']>
}

export type VehiclesList = {
  __typename?: 'VehiclesList'
  /** @deprecated New service does not include this field */
  address?: Maybe<Scalars['String']>
  /** @deprecated New service does not include this field */
  createdTimestamp?: Maybe<Scalars['String']>
  downloadServiceURL?: Maybe<Scalars['String']>
  /** @deprecated New service does not include this field */
  name?: Maybe<Scalars['String']>
  paging?: Maybe<VehiclePaging>
  /** @deprecated New service does not include this field */
  persidno?: Maybe<Scalars['String']>
  /** @deprecated New service does not include this field */
  postStation?: Maybe<Scalars['String']>
  /** @deprecated Too slow. Use VehiclesListV2 when possible. */
  vehicleList?: Maybe<Array<VehiclesVehicle>>
}

export type VehiclesListInputV3 = {
  filterOnlyRequiredMileageRegistration?: InputMaybe<Scalars['Boolean']>
  page: Scalars['Float']
  pageSize: Scalars['Float']
  query?: InputMaybe<Scalars['String']>
}

export type VehiclesListV2 = {
  __typename?: 'VehiclesListV2'
  downloadServiceURL?: Maybe<Scalars['String']>
  paging?: Maybe<VehiclePaging>
  vehicleList?: Maybe<Array<VehicleListed>>
}

export type VehiclesMainInfo = {
  __typename?: 'VehiclesMainInfo'
  canRegisterMileage?: Maybe<Scalars['Boolean']>
  co2?: Maybe<Scalars['Float']>
  co2Wltp?: Maybe<Scalars['Float']>
  cubicCapacity?: Maybe<Scalars['Float']>
  model?: Maybe<Scalars['String']>
  nextAvailableMileageReadDate?: Maybe<Scalars['DateTime']>
  regno?: Maybe<Scalars['String']>
  requiresMileageRegistration?: Maybe<Scalars['Boolean']>
  subModel?: Maybe<Scalars['String']>
  trailerWithBrakesWeight?: Maybe<Scalars['Float']>
  trailerWithoutBrakesWeight?: Maybe<Scalars['Float']>
  weightedCo2?: Maybe<Scalars['Float']>
  weightedCo2Wltp?: Maybe<Scalars['Float']>
  year?: Maybe<Scalars['Float']>
}

export type VehiclesMileageDetails = {
  __typename?: 'VehiclesMileageDetails'
  canRegisterMileage?: Maybe<Scalars['Boolean']>
  lastMileageRegistration?: Maybe<VehiclesMileageRegistration>
  mileageRegistrations?: Maybe<VehiclesMileageRegistrationHistory>
  requiresMileageRegistration?: Maybe<Scalars['Boolean']>
}

export type VehiclesMileageRegistration = {
  __typename?: 'VehiclesMileageRegistration'
  date: Scalars['DateTime']
  internalId?: Maybe<Scalars['Int']>
  mileage: Scalars['Int']
  originCode: Scalars['String']
}

export type VehiclesMileageRegistrationHistory = {
  __typename?: 'VehiclesMileageRegistrationHistory'
  mileageRegistrationHistory?: Maybe<Array<VehiclesMileageRegistration>>
  vehicleId: Scalars['String']
}

export type VehiclesMileageUpdateError = {
  __typename?: 'VehiclesMileageUpdateError'
  code?: Maybe<Scalars['Int']>
  error?: Maybe<Scalars['JSON']>
  message: Scalars['String']
}

export type VehiclesOperator = {
  __typename?: 'VehiclesOperator'
  address?: Maybe<Scalars['String']>
  city?: Maybe<Scalars['String']>
  endDate?: Maybe<Scalars['DateTime']>
  mainOperator?: Maybe<Scalars['Boolean']>
  /** Deprecated. Keeping in for now for backward compatibility. */
  mainoperator?: Maybe<Scalars['Boolean']>
  name?: Maybe<Scalars['String']>
  nationalId?: Maybe<Scalars['String']>
  postalcode?: Maybe<Scalars['String']>
  serial?: Maybe<Scalars['Float']>
  startDate?: Maybe<Scalars['DateTime']>
}

export type VehiclesOwners = {
  __typename?: 'VehiclesOwners'
  address?: Maybe<Scalars['String']>
  current?: Maybe<Scalars['Boolean']>
  dateOfPurchase: Scalars['DateTime']
  name?: Maybe<Scalars['String']>
  nationalId?: Maybe<Scalars['String']>
}

export type VehiclesPublicVehicleSearch = {
  __typename?: 'VehiclesPublicVehicleSearch'
  co?: Maybe<Scalars['Float']>
  co2?: Maybe<Scalars['Float']>
  co2WLTP?: Maybe<Scalars['Float']>
  color?: Maybe<Scalars['String']>
  firstRegDate?: Maybe<Scalars['DateTime']>
  make?: Maybe<Scalars['String']>
  mass?: Maybe<Scalars['Float']>
  massLaden?: Maybe<Scalars['Float']>
  newRegDate?: Maybe<Scalars['DateTime']>
  nextVehicleMainInspection?: Maybe<Scalars['DateTime']>
  permno?: Maybe<Scalars['String']>
  regno?: Maybe<Scalars['String']>
  typeNumber?: Maybe<Scalars['String']>
  vehicleCommercialName?: Maybe<Scalars['String']>
  vehicleStatus?: Maybe<Scalars['String']>
  vin?: Maybe<Scalars['String']>
  weightedCo2?: Maybe<Scalars['Float']>
  weightedCo2WLTP?: Maybe<Scalars['Float']>
}

export type VehiclesRegistrationInfo = {
  __typename?: 'VehiclesRegistrationInfo'
  color?: Maybe<Scalars['String']>
  driversPassengers?: Maybe<Scalars['Float']>
  firstRegistrationDate?: Maybe<Scalars['DateTime']>
  newRegistrationDate?: Maybe<Scalars['DateTime']>
  passengers?: Maybe<Scalars['Float']>
  plateLocation?: Maybe<Scalars['String']>
  plateStatus?: Maybe<Scalars['String']>
  plateTypeFront?: Maybe<Scalars['String']>
  plateTypeRear?: Maybe<Scalars['String']>
  preRegistrationDate?: Maybe<Scalars['DateTime']>
  reggroup?: Maybe<Scalars['String']>
  reggroupName?: Maybe<Scalars['String']>
  specialName?: Maybe<Scalars['String']>
  standingPassengers?: Maybe<Scalars['Float']>
  useGroup?: Maybe<Scalars['String']>
  vehicleGroup?: Maybe<Scalars['String']>
}

export type VehiclesTechnicalInfo = {
  __typename?: 'VehiclesTechnicalInfo'
  axleTotalWeight?: Maybe<Scalars['Float']>
  axles?: Maybe<Array<VehiclesAxle>>
  capacityWeight?: Maybe<Scalars['Float']>
  carryingCapacity?: Maybe<Scalars['Float']>
  cubicCapacity?: Maybe<Scalars['String']>
  engine?: Maybe<Scalars['String']>
  horsepower?: Maybe<Scalars['Float']>
  length?: Maybe<Scalars['Float']>
  totalWeight?: Maybe<Scalars['String']>
  trailerWithBrakesWeight?: Maybe<Scalars['Float']>
  trailerWithoutBrakesWeight?: Maybe<Scalars['Float']>
  tyres?: Maybe<Tyres>
  vehicleWeight?: Maybe<Scalars['Float']>
  width?: Maybe<Scalars['Float']>
}

export type VehiclesVehicle = {
  __typename?: 'VehiclesVehicle'
  buyerPersidno?: Maybe<Scalars['String']>
  canRegisterMileage?: Maybe<Scalars['Boolean']>
  color?: Maybe<Scalars['String']>
  deregistrationDate?: Maybe<Scalars['DateTime']>
  firstRegDate?: Maybe<Scalars['DateTime']>
  isCurrent?: Maybe<Scalars['Boolean']>
  lastInspectionDate?: Maybe<Scalars['DateTime']>
  lastInspectionResult?: Maybe<Scalars['String']>
  lastInspectionType?: Maybe<Scalars['String']>
  modelYear?: Maybe<Scalars['String']>
  nextAvailableMileageReadDate?: Maybe<Scalars['DateTime']>
  nextInspection?: Maybe<NextInspection>
  nextInspectionDate?: Maybe<Scalars['DateTime']>
  operatorEndDate?: Maybe<Scalars['DateTime']>
  operatorNumber?: Maybe<Scalars['Float']>
  operatorStartDate?: Maybe<Scalars['DateTime']>
  otherOwners?: Maybe<Scalars['Boolean']>
  outOfUse?: Maybe<Scalars['Boolean']>
  ownerName?: Maybe<Scalars['String']>
  ownerPersidno?: Maybe<Scalars['String']>
  ownerSsid?: Maybe<Scalars['String']>
  permno?: Maybe<Scalars['String']>
  plateStatus?: Maybe<Scalars['String']>
  primaryOperator?: Maybe<Scalars['Boolean']>
  productYear?: Maybe<Scalars['String']>
  registrationType?: Maybe<Scalars['String']>
  regno?: Maybe<Scalars['String']>
  requiresMileageRegistration?: Maybe<Scalars['Boolean']>
  role?: Maybe<Scalars['String']>
  termination?: Maybe<Scalars['String']>
  type?: Maybe<Scalars['String']>
  useGroup?: Maybe<Scalars['String']>
  vehGroup?: Maybe<Scalars['String']>
  vehicleStatus?: Maybe<Scalars['String']>
  vin?: Maybe<Scalars['String']>
}

export type VehiclesVehicleSearch = {
  __typename?: 'VehiclesVehicleSearch'
  canRegisterMileage?: Maybe<Scalars['Boolean']>
  co?: Maybe<Scalars['Float']>
  co2Wltp?: Maybe<Scalars['Float']>
  color?: Maybe<Scalars['String']>
  currentOwner?: Maybe<Scalars['String']>
  currentOwnerAddress?: Maybe<Scalars['String']>
  currentOwnerIsAnonymous?: Maybe<Scalars['Boolean']>
  engine?: Maybe<Scalars['String']>
  firstregdate?: Maybe<Scalars['DateTime']>
  latestregistration?: Maybe<Scalars['String']>
  mass?: Maybe<Scalars['Float']>
  massLaden?: Maybe<Scalars['Float']>
  nextAvailableMileageReadDate?: Maybe<Scalars['DateTime']>
  nextInspection?: Maybe<VehiclesVehicleSearchNextInspection>
  operatorAnonymityStatus: OperatorAnonymityStatus
  /** Basic operator array, names only. */
  operatorNames?: Maybe<Array<Scalars['String']>>
  permno?: Maybe<Scalars['String']>
  regno?: Maybe<Scalars['String']>
  regtype?: Maybe<Scalars['String']>
  requiresMileageRegistration?: Maybe<Scalars['Boolean']>
  type?: Maybe<Scalars['String']>
  useGroup?: Maybe<Scalars['String']>
  vehicleStatus?: Maybe<Scalars['String']>
  vin?: Maybe<Scalars['String']>
  weightedco2Wltp?: Maybe<Scalars['Float']>
}

export type VehiclesVehicleSearchNextInspection = {
  __typename?: 'VehiclesVehicleSearchNextInspection'
  nextinspectiondate?: Maybe<Scalars['DateTime']>
  nextinspectiondateIfPassedInspectionToday?: Maybe<Scalars['DateTime']>
}

export type VerifyLicenseBarcodeDataUnion = LicenseDriverLicenseData

/** Exhaustive list of verify license barcode errors */
export type VerifyLicenseBarcodeError = 'ERROR' | 'EXPIRED'

export type VerifyLicenseBarcodeInput = {
  data: Scalars['String']
}

export type VerifyLicenseBarcodeResult = {
  __typename?: 'VerifyLicenseBarcodeResult'
  /** Verify license barcode type */
  barcodeType: VerifyLicenseBarcodeType
  /** Optional data related to the verify verification */
  data?: Maybe<VerifyLicenseBarcodeDataUnion>
  /** Verify result error */
  error?: Maybe<VerifyLicenseBarcodeError>
  licenseType?: Maybe<GenericLicenseType>
  /** Is the verify valid? */
  valid: Scalars['Boolean']
}

/** Exhaustive list of verify license barcode types */
export type VerifyLicenseBarcodeType = 'PK_PASS' | 'UNKNOWN' | 'V2'

export type VerifyPkPassInput = {
  data: Scalars['String']
}

export type WatsonAssistantChatIdentityTokenInput = {
  email: Scalars['String']
  name: Scalars['String']
  userID: Scalars['String']
}

export type WatsonAssistantChatIdentityTokenResponse = {
  __typename?: 'WatsonAssistantChatIdentityTokenResponse'
  token: Scalars['String']
}

export type WatsonAssistantChatSubmitFeedbackInput = {
  assistantChatLog: Array<Scalars['JSONObject']>
  feedback?: InputMaybe<Scalars['String']>
  thumbStatus: WatsonAssistantChatSubmitFeedbackThumbStatus
  url?: InputMaybe<Scalars['String']>
}

export type WatsonAssistantChatSubmitFeedbackResponse = {
  __typename?: 'WatsonAssistantChatSubmitFeedbackResponse'
  success: Scalars['Boolean']
}

export type WatsonAssistantChatSubmitFeedbackThumbStatus =
  | 'Down'
  | 'NoChoice'
  | 'Up'

export type WebSearchAutocomplete = {
  __typename?: 'WebSearchAutocomplete'
  completions: Array<Scalars['String']>
  total: Scalars['Int']
}

export type WebSearchAutocompleteInput = {
  language?: InputMaybe<ContentLanguage>
  singleTerm: Scalars['String']
  size?: InputMaybe<Scalars['Int']>
}

export type WebVerdictByIdInput = {
  id: Scalars['String']
}

export type WebVerdictByIdItem = {
  __typename?: 'WebVerdictByIdItem'
  caseNumber: Scalars['String']
  court: Scalars['String']
  keywords: Array<Scalars['String']>
  pdfString?: Maybe<Scalars['String']>
  presentings: Scalars['String']
  richText?: Maybe<Scalars['JSON']>
  title: Scalars['String']
  verdictDate?: Maybe<Scalars['DateTime']>
}

export type WebVerdictByIdResponse = {
  __typename?: 'WebVerdictByIdResponse'
  item: WebVerdictByIdItem
}

export type WebVerdictCaseCategoriesResponse = {
  __typename?: 'WebVerdictCaseCategoriesResponse'
  caseCategories: Array<WebVerdictCaseCategory>
}

export type WebVerdictCaseCategory = {
  __typename?: 'WebVerdictCaseCategory'
  label: Scalars['String']
}

export type WebVerdictCaseType = {
  __typename?: 'WebVerdictCaseType'
  label: Scalars['String']
}

export type WebVerdictCaseTypesResponse = {
  __typename?: 'WebVerdictCaseTypesResponse'
  caseTypes: Array<WebVerdictCaseType>
}

export type WebVerdictItem = {
  __typename?: 'WebVerdictItem'
  caseNumber: Scalars['String']
  court: Scalars['String']
  id: Scalars['String']
  keywords: Array<Scalars['String']>
  presentings: Scalars['String']
  presidentJudge?: Maybe<WebVerdictJudge>
  title: Scalars['String']
  verdictDate?: Maybe<Scalars['DateTime']>
}

export type WebVerdictJudge = {
  __typename?: 'WebVerdictJudge'
  name?: Maybe<Scalars['String']>
  title?: Maybe<Scalars['String']>
}

export type WebVerdictKeyword = {
  __typename?: 'WebVerdictKeyword'
  label: Scalars['String']
}

export type WebVerdictKeywordsResponse = {
  __typename?: 'WebVerdictKeywordsResponse'
  keywords: Array<WebVerdictKeyword>
}

export type WebVerdictsInput = {
  caseCategories?: InputMaybe<Array<Scalars['String']>>
  caseNumber?: InputMaybe<Scalars['String']>
  caseTypes?: InputMaybe<Array<Scalars['String']>>
  courtLevel?: InputMaybe<Scalars['String']>
  dateFrom?: InputMaybe<Scalars['String']>
  dateTo?: InputMaybe<Scalars['String']>
  keywords?: InputMaybe<Array<Scalars['String']>>
  laws?: InputMaybe<Array<Scalars['String']>>
  page?: InputMaybe<Scalars['Int']>
  searchTerm?: InputMaybe<Scalars['String']>
}

export type WebVerdictsInputResponse = {
  __typename?: 'WebVerdictsInputResponse'
  caseCategories?: Maybe<Array<Scalars['String']>>
  caseNumber?: Maybe<Scalars['String']>
  caseTypes?: Maybe<Array<Scalars['String']>>
  courtLevel?: Maybe<Scalars['String']>
  dateFrom?: Maybe<Scalars['String']>
  dateTo?: Maybe<Scalars['String']>
  keywords?: Maybe<Array<Scalars['String']>>
  laws?: Maybe<Array<Scalars['String']>>
  page?: Maybe<Scalars['Int']>
  searchTerm?: Maybe<Scalars['String']>
}

export type WebVerdictsResponse = {
  __typename?: 'WebVerdictsResponse'
  input: WebVerdictsInputResponse
  items: Array<WebVerdictItem>
  total: Scalars['Int']
}

export type WorkMachine = {
  __typename?: 'WorkMachine'
  category?: Maybe<Scalars['String']>
  dateLastInspection?: Maybe<Scalars['DateTime']>
  id?: Maybe<Scalars['ID']>
  importer?: Maybe<Scalars['String']>
  insurer?: Maybe<Scalars['String']>
  labels?: Maybe<Array<WorkMachinesLabel>>
  licensePlateNumber?: Maybe<Scalars['String']>
  links?: Maybe<Array<WorkMachinesLink>>
  ownerAddress?: Maybe<Scalars['String']>
  ownerName?: Maybe<Scalars['String']>
  ownerNationalId?: Maybe<Scalars['String']>
  ownerNumber?: Maybe<Scalars['String']>
  ownerPostcode?: Maybe<Scalars['String']>
  productionCountry?: Maybe<Scalars['String']>
  productionNumber?: Maybe<Scalars['String']>
  productionYear?: Maybe<Scalars['Float']>
  registrationDate?: Maybe<Scalars['String']>
  registrationNumber?: Maybe<Scalars['String']>
  status?: Maybe<Scalars['String']>
  subCategory?: Maybe<Scalars['String']>
  supervisorAddress?: Maybe<Scalars['String']>
  supervisorName?: Maybe<Scalars['String']>
  supervisorNationalId?: Maybe<Scalars['String']>
  supervisorPostcode?: Maybe<Scalars['String']>
  type?: Maybe<Scalars['String']>
}

export type WorkMachinesAction =
  | 'CHANGE_STATUS'
  | 'OWNER_CHANGE'
  | 'REGISTER_FOR_TRAFFIC'
  | 'REQUEST_INSPECTION'
  | 'SUPERVISOR_CHANGE'

export type WorkMachinesCategory = {
  __typename?: 'WorkMachinesCategory'
  name?: Maybe<Scalars['String']>
  nameEn?: Maybe<Scalars['String']>
  registrationNumberPrefix?: Maybe<Scalars['String']>
  subCategoryName?: Maybe<Scalars['String']>
  subCategoryNameEn?: Maybe<Scalars['String']>
}

export type WorkMachinesCollectionDocument = {
  __typename?: 'WorkMachinesCollectionDocument'
  downloadUrl?: Maybe<Scalars['String']>
}

export type WorkMachinesCollectionDocumentInput = {
  fileType?: InputMaybe<WorkMachinesFileType>
}

export type WorkMachinesCollectionInput = {
  locale?: InputMaybe<Scalars['String']>
  onlyInOwnerChangeProcess?: InputMaybe<Scalars['Boolean']>
  orderBy?: InputMaybe<Scalars['String']>
  pageNumber?: InputMaybe<Scalars['Float']>
  pageSize?: InputMaybe<Scalars['Float']>
  searchQuery?: InputMaybe<Scalars['String']>
  showDeregisteredMachines?: InputMaybe<Scalars['Boolean']>
  supervisorRegistered?: InputMaybe<Scalars['Boolean']>
}

export type WorkMachinesCollectionLink = {
  __typename?: 'WorkMachinesCollectionLink'
  displayTitle?: Maybe<Scalars['String']>
  href?: Maybe<Scalars['String']>
  method?: Maybe<Scalars['String']>
  rel?: Maybe<WorkMachinesExternalLink>
}

export type WorkMachinesExternalLink = 'CSV' | 'EXCEL' | 'NEXT_PAGE' | 'SELF'

export type WorkMachinesFileType = 'CSV' | 'EXCEL'

export type WorkMachinesInput = {
  id: Scalars['String']
  locale: Scalars['String']
}

export type WorkMachinesLabel = {
  __typename?: 'WorkMachinesLabel'
  columnName?: Maybe<Scalars['String']>
  displayTitle?: Maybe<Scalars['String']>
  tooltip?: Maybe<Scalars['String']>
}

export type WorkMachinesLink = {
  __typename?: 'WorkMachinesLink'
  displayTitle?: Maybe<Scalars['String']>
  href?: Maybe<Scalars['String']>
  method?: Maybe<Scalars['String']>
  rel?: Maybe<WorkMachinesAction>
}

export type WorkMachinesMachineType = {
  __typename?: 'WorkMachinesMachineType'
  name?: Maybe<Scalars['String']>
}

export type WorkMachinesModel = {
  __typename?: 'WorkMachinesModel'
  name?: Maybe<Scalars['String']>
}

export type WorkMachinesPaginatedCollection = {
  __typename?: 'WorkMachinesPaginatedCollection'
  data: Array<WorkMachine>
  labels?: Maybe<Array<WorkMachinesLabel>>
  links?: Maybe<Array<WorkMachinesCollectionLink>>
  pageInfo: PageInfoDto
  totalCount: Scalars['Float']
}

export type WorkMachinesParentCategoryByTypeAndModelInput = {
  model: Scalars['String']
  type: Scalars['String']
}

export type WorkMachinesSubCategory = {
  __typename?: 'WorkMachinesSubCategory'
  name?: Maybe<Scalars['String']>
  nameEn?: Maybe<Scalars['String']>
  parentCategoryName?: Maybe<Scalars['String']>
  parentCategoryNameEn?: Maybe<Scalars['String']>
  registrationNumberPrefix?: Maybe<Scalars['String']>
}

export type WorkMachinesTechInfoItem = {
  __typename?: 'WorkMachinesTechInfoItem'
  label?: Maybe<Scalars['String']>
  labelEn?: Maybe<Scalars['String']>
  maxLength?: Maybe<Scalars['String']>
  required?: Maybe<Scalars['Boolean']>
  type?: Maybe<Scalars['String']>
  values?: Maybe<Array<WorkMachinesTechInfoListItem>>
  variableName?: Maybe<Scalars['String']>
}

export type WorkMachinesTechInfoListItem = {
  __typename?: 'WorkMachinesTechInfoListItem'
  name?: Maybe<Scalars['String']>
  nameEn?: Maybe<Scalars['String']>
}

export type XroadIdentifier = {
  __typename?: 'XroadIdentifier'
  instance: Scalars['String']
  memberClass: Scalars['String']
  memberCode: Scalars['String']
  serviceCode: Scalars['String']
  subsystemCode: Scalars['String']
}

export type ChangeEndorsmentListClosedDateDto = {
  closedDate: Scalars['DateTime']
}

export type OccupationalLicenseLicenseType =
  | 'DISTRICT_COMMISSIONERS'
  | 'EDUCATION'
  | 'HEALTH_DIRECTORATE'

export type OfficialJournalOfIcelandApplicationAdvertTemplateResponse = {
  __typename?: 'officialJournalOfIcelandApplicationAdvertTemplateResponse'
  html: Scalars['String']
  type: OfficialJournalOfIcelandApplicationAdvertTemplateTypeEnum
}

export type OfficialJournalOfIcelandApplicationAdvertTemplateType = {
  __typename?: 'officialJournalOfIcelandApplicationAdvertTemplateType'
  title: Scalars['String']
  type: OfficialJournalOfIcelandApplicationAdvertTemplateTypeEnum
}

export type OfficialJournalOfIcelandApplicationAdvertTemplateTypeEnum =
  | 'AUGLYSING'
  | 'GJALDSKRA'
  | 'REGLUGERD'
  | 'UNKNOWN'

export type OfficialJournalOfIcelandApplicationAdvertTemplateTypesResponse = {
  __typename?: 'officialJournalOfIcelandApplicationAdvertTemplateTypesResponse'
  types: Array<OfficialJournalOfIcelandApplicationAdvertTemplateType>
}

export type SendPdfEmailInput = {
  emailAddress: Scalars['String']
  listId: Scalars['String']
}

export type SendPdfEmailResponse = {
  __typename?: 'sendPdfEmailResponse'
  success: Scalars['Boolean']
}

export type ResolverTypeWrapper<T> = Promise<T> | T

export type ResolverWithResolve<TResult, TParent, TContext, TArgs> = {
  resolve: ResolverFn<TResult, TParent, TContext, TArgs>
}
export type Resolver<TResult, TParent = {}, TContext = {}, TArgs = {}> =
  | ResolverFn<TResult, TParent, TContext, TArgs>
  | ResolverWithResolve<TResult, TParent, TContext, TArgs>

export type ResolverFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo,
) => Promise<TResult> | TResult

export type SubscriptionSubscribeFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo,
) => AsyncIterable<TResult> | Promise<AsyncIterable<TResult>>

export type SubscriptionResolveFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo,
) => TResult | Promise<TResult>

export interface SubscriptionSubscriberObject<
  TResult,
  TKey extends string,
  TParent,
  TContext,
  TArgs
> {
  subscribe: SubscriptionSubscribeFn<
    { [key in TKey]: TResult },
    TParent,
    TContext,
    TArgs
  >
  resolve?: SubscriptionResolveFn<
    TResult,
    { [key in TKey]: TResult },
    TContext,
    TArgs
  >
}

export interface SubscriptionResolverObject<TResult, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<any, TParent, TContext, TArgs>
  resolve: SubscriptionResolveFn<TResult, any, TContext, TArgs>
}

export type SubscriptionObject<
  TResult,
  TKey extends string,
  TParent,
  TContext,
  TArgs
> =
  | SubscriptionSubscriberObject<TResult, TKey, TParent, TContext, TArgs>
  | SubscriptionResolverObject<TResult, TParent, TContext, TArgs>

export type SubscriptionResolver<
  TResult,
  TKey extends string,
  TParent = {},
  TContext = {},
  TArgs = {}
> =
  | ((
      ...args: any[]
    ) => SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>)
  | SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>

export type TypeResolveFn<TTypes, TParent = {}, TContext = {}> = (
  parent: TParent,
  context: TContext,
  info: GraphQLResolveInfo,
) => Maybe<TTypes> | Promise<Maybe<TTypes>>

export type IsTypeOfResolverFn<T = {}, TContext = {}> = (
  obj: T,
  context: TContext,
  info: GraphQLResolveInfo,
) => boolean | Promise<boolean>

export type NextResolverFn<T> = () => Promise<T>

export type DirectiveResolverFn<
  TResult = {},
  TParent = {},
  TContext = {},
  TArgs = {}
> = (
  next: NextResolverFn<TResult>,
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo,
) => TResult | Promise<TResult>

/** Mapping between all available schema types and the resolvers types */
export type ResolversTypes = {
  AccessCategory: AccessCategory
  AccidentNotificationAttachment: ResolverTypeWrapper<AccidentNotificationAttachment>
  AccidentNotificationConfirmation: ResolverTypeWrapper<AccidentNotificationConfirmation>
  AccidentNotificationStatus: ResolverTypeWrapper<AccidentNotificationStatus>
  AccordionSlice: ResolverTypeWrapper<AccordionSlice>
  ActionCardMetaData: ResolverTypeWrapper<ActionCardMetaData>
  ActionCardTag: ResolverTypeWrapper<ActionCardTag>
  ActionMailBody: ResolverTypeWrapper<ActionMailBody>
  AddAttachmentInput: AddAttachmentInput
  Address: Address
  AdminNotification: ResolverTypeWrapper<AdminNotification>
  AdminNotifications: ResolverTypeWrapper<AdminNotifications>
  AdministrationofOccupationalSafetyandHealthCourseModel: ResolverTypeWrapper<AdministrationofOccupationalSafetyandHealthCourseModel>
  AdministrationofOccupationalSafetyandHealthCoursesResponseModel: ResolverTypeWrapper<AdministrationofOccupationalSafetyandHealthCoursesResponseModel>
  AirDiscountSchemeConfirmInvoiceInput: AirDiscountSchemeConfirmInvoiceInput
  AirDiscountSchemeConnectionDiscountCode: ResolverTypeWrapper<AirDiscountSchemeConnectionDiscountCode>
  AirDiscountSchemeCreateExplicitDiscountCodeInput: AirDiscountSchemeCreateExplicitDiscountCodeInput
  AirDiscountSchemeDiscount: ResolverTypeWrapper<AirDiscountSchemeDiscount>
  AirDiscountSchemeFlight: ResolverTypeWrapper<AirDiscountSchemeFlight>
  AirDiscountSchemeFlightLeg: ResolverTypeWrapper<AirDiscountSchemeFlightLeg>
  AirDiscountSchemeFlightLegGender: AirDiscountSchemeFlightLegGender
  AirDiscountSchemeFlightLegState: AirDiscountSchemeFlightLegState
  AirDiscountSchemeFlightLegsInput: AirDiscountSchemeFlightLegsInput
  AirDiscountSchemeFund: ResolverTypeWrapper<AirDiscountSchemeFund>
  AirDiscountSchemePeriodInput: AirDiscountSchemePeriodInput
  AirDiscountSchemeRangeInput: AirDiscountSchemeRangeInput
  AirDiscountSchemeTravelInput: AirDiscountSchemeTravelInput
  AirDiscountSchemeUser: ResolverTypeWrapper<AirDiscountSchemeUser>
  AirDiscountSchemeUserInfo: ResolverTypeWrapper<AirDiscountSchemeUserInfo>
  AircraftRegistryAircraft: ResolverTypeWrapper<AircraftRegistryAircraft>
  AircraftRegistryAllAircraftsInput: AircraftRegistryAllAircraftsInput
  AircraftRegistryAllAircraftsResponse: ResolverTypeWrapper<AircraftRegistryAllAircraftsResponse>
  AircraftRegistryPerson: ResolverTypeWrapper<AircraftRegistryPerson>
  AlcoholLicence: ResolverTypeWrapper<AlcoholLicence>
  AlertBanner: ResolverTypeWrapper<AlertBanner>
  AnchorPage: ResolverTypeWrapper<
    Omit<AnchorPage, 'content'> & { content: Array<ResolversTypes['Slice']> }
  >
  AnchorPageListSlice: ResolverTypeWrapper<AnchorPageListSlice>
  ApiCatalogue: ResolverTypeWrapper<ApiCatalogue>
  Appendix: ResolverTypeWrapper<Appendix>
  AppendixInput: AppendixInput
  Application: ResolverTypeWrapper<Application>
  ApplicationAdmin: ResolverTypeWrapper<ApplicationAdmin>
  ApplicationAdminPaginatedResponse: ResolverTypeWrapper<ApplicationAdminPaginatedResponse>
  ApplicationApplicationInput: ApplicationApplicationInput
  ApplicationApplicationsAdminInput: ApplicationApplicationsAdminInput
  ApplicationApplicationsAdminStatisticsInput: ApplicationApplicationsAdminStatisticsInput
  ApplicationApplicationsInput: ApplicationApplicationsInput
  ApplicationApplicationsInstitutionAdminInput: ApplicationApplicationsInstitutionAdminInput
  ApplicationEligibility: ResolverTypeWrapper<ApplicationEligibility>
  ApplicationEligibilityInput: ApplicationEligibilityInput
  ApplicationEligibilityRequirement: ResolverTypeWrapper<ApplicationEligibilityRequirement>
  ApplicationFileInput: ApplicationFileInput
  ApplicationHistory: ResolverTypeWrapper<ApplicationHistory>
  ApplicationInformation: ResolverTypeWrapper<ApplicationInformation>
  ApplicationInformationChildren: ResolverTypeWrapper<ApplicationInformationChildren>
  ApplicationInformationEmployer: ResolverTypeWrapper<ApplicationInformationEmployer>
  ApplicationInformationPeriod: ResolverTypeWrapper<ApplicationInformationPeriod>
  ApplicationListAdminResponseDtoStatusEnum: ApplicationListAdminResponseDtoStatusEnum
  ApplicationListAdminResponseDtoTypeIdEnum: ApplicationListAdminResponseDtoTypeIdEnum
  ApplicationPayment: ResolverTypeWrapper<ApplicationPayment>
  ApplicationResponseDtoStatusEnum: ApplicationResponseDtoStatusEnum
  ApplicationResponseDtoTypeIdEnum: ApplicationResponseDtoTypeIdEnum
  ApplicationRights: ResolverTypeWrapper<ApplicationRights>
  ApplicationStatistics: ResolverTypeWrapper<ApplicationStatistics>
  Appraisal: ResolverTypeWrapper<Appraisal>
  Article: ResolverTypeWrapper<
    Omit<Article, 'body'> & { body: Array<ResolversTypes['Slice']> }
  >
  ArticleCategory: ResolverTypeWrapper<ArticleCategory>
  ArticleGroup: ResolverTypeWrapper<ArticleGroup>
  ArticleReference: ResolverTypeWrapper<ArticleReference>
  ArticleSubgroup: ResolverTypeWrapper<ArticleSubgroup>
  Asset: ResolverTypeWrapper<Asset>
  AssetName: ResolverTypeWrapper<AssetName>
  AssignApplicationInput: AssignApplicationInput
  AttachmentPresignedUrlInput: AttachmentPresignedUrlInput
  Auction: ResolverTypeWrapper<
    Omit<Auction, 'content'> & {
      content?: Maybe<Array<ResolversTypes['Slice']>>
    }
  >
  AudienceAndScope: ResolverTypeWrapper<AudienceAndScope>
  AuthActorDelegationInput: AuthActorDelegationInput
  AuthAdminClient: ResolverTypeWrapper<AuthAdminClient>
  AuthAdminClientAllowedScope: ResolverTypeWrapper<AuthAdminClientAllowedScope>
  AuthAdminClientClaim: ResolverTypeWrapper<AuthAdminClientClaim>
  AuthAdminClientClaimInput: AuthAdminClientClaimInput
  AuthAdminClientEnvironment: ResolverTypeWrapper<AuthAdminClientEnvironment>
  AuthAdminClientInput: AuthAdminClientInput
  AuthAdminClientSecret: ResolverTypeWrapper<AuthAdminClientSecret>
  AuthAdminClientSso: AuthAdminClientSso
  AuthAdminClientType: AuthAdminClientType
  AuthAdminClientsInput: AuthAdminClientsInput
  AuthAdminClientsPayload: ResolverTypeWrapper<AuthAdminClientsPayload>
  AuthAdminCreateClientResponse: ResolverTypeWrapper<AuthAdminCreateClientResponse>
  AuthAdminCreateClientType: AuthAdminCreateClientType
  AuthAdminCreateScopeResponse: ResolverTypeWrapper<AuthAdminCreateScopeResponse>
  AuthAdminDelegationProvider: ResolverTypeWrapper<AuthAdminDelegationProvider>
  AuthAdminDelegationType: ResolverTypeWrapper<AuthAdminDelegationType>
  AuthAdminDeleteClientInput: AuthAdminDeleteClientInput
  AuthAdminEnvironment: AuthAdminEnvironment
  AuthAdminPatchClientInput: AuthAdminPatchClientInput
  AuthAdminPatchScopeInput: AuthAdminPatchScopeInput
  AuthAdminPublishClientInput: AuthAdminPublishClientInput
  AuthAdminPublishScopeInput: AuthAdminPublishScopeInput
  AuthAdminRefreshTokenExpiration: AuthAdminRefreshTokenExpiration
  AuthAdminRevokeSecretsInput: AuthAdminRevokeSecretsInput
  AuthAdminRotateSecretInput: AuthAdminRotateSecretInput
  AuthAdminScope: ResolverTypeWrapper<AuthAdminScope>
  AuthAdminScopeEnvironment: ResolverTypeWrapper<AuthAdminScopeEnvironment>
  AuthAdminScopesPayload: ResolverTypeWrapper<AuthAdminScopesPayload>
  AuthAdminTenant: ResolverTypeWrapper<AuthAdminTenant>
  AuthAdminTenantEnvironment: ResolverTypeWrapper<AuthAdminTenantEnvironment>
  AuthAdminTenantsPayload: ResolverTypeWrapper<AuthAdminTenantsPayload>
  AuthAdminTranslatedValue: ResolverTypeWrapper<AuthAdminTranslatedValue>
  AuthAdminTranslatedValueInput: AuthAdminTranslatedValueInput
  AuthApiScope: ResolverTypeWrapper<AuthApiScope>
  AuthApiScopeGroup: ResolverTypeWrapper<AuthApiScopeGroup>
  AuthApiScopesInput: AuthApiScopesInput
  AuthClient: ResolverTypeWrapper<AuthClient>
  AuthConsent: ResolverTypeWrapper<AuthConsent>
  AuthConsentScopeNode: ResolverTypeWrapper<AuthConsentScopeNode>
  AuthConsentTenant: ResolverTypeWrapper<AuthConsentTenant>
  AuthConsentsPaginated: ResolverTypeWrapper<AuthConsentsPaginated>
  AuthCustomDelegation: ResolverTypeWrapper<AuthCustomDelegation>
  AuthDelegation:
    | ResolversTypes['AuthCustomDelegation']
    | ResolversTypes['AuthGeneralMandate']
    | ResolversTypes['AuthLegalGuardianDelegation']
    | ResolversTypes['AuthLegalGuardianMinorDelegation']
    | ResolversTypes['AuthLegalRepresentativeDelegation']
    | ResolversTypes['AuthPersonalRepresentativeDelegation']
    | ResolversTypes['AuthProcuringHolderDelegation']
  AuthDelegationDirection: AuthDelegationDirection
  AuthDelegationInput: AuthDelegationInput
  AuthDelegationProvider: AuthDelegationProvider
  AuthDelegationProviderEnvironment: ResolverTypeWrapper<AuthDelegationProviderEnvironment>
  AuthDelegationProviderPayload: ResolverTypeWrapper<AuthDelegationProviderPayload>
  AuthDelegationScope: ResolverTypeWrapper<AuthDelegationScope>
  AuthDelegationScopeInput: AuthDelegationScopeInput
  AuthDelegationType: AuthDelegationType
  AuthDelegationsInput: AuthDelegationsInput
  AuthDomain: ResolverTypeWrapper<AuthDomain>
  AuthDomainDirection: AuthDomainDirection
  AuthDomainsInput: AuthDomainsInput
  AuthExtensionCredProps: AuthExtensionCredProps
  AuthGeneralMandate: ResolverTypeWrapper<AuthGeneralMandate>
  AuthLegalGuardianDelegation: ResolverTypeWrapper<AuthLegalGuardianDelegation>
  AuthLegalGuardianMinorDelegation: ResolverTypeWrapper<AuthLegalGuardianMinorDelegation>
  AuthLegalRepresentativeDelegation: ResolverTypeWrapper<AuthLegalRepresentativeDelegation>
  AuthLoginRestriction: ResolverTypeWrapper<AuthLoginRestriction>
  AuthMergedDelegation: ResolverTypeWrapper<AuthMergedDelegation>
  AuthPasskeyAuthenticationOptions: ResolverTypeWrapper<AuthPasskeyAuthenticationOptions>
  AuthPasskeyAuthenticationOptionsCredentials: ResolverTypeWrapper<AuthPasskeyAuthenticationOptionsCredentials>
  AuthPasskeyRegistrationObject: AuthPasskeyRegistrationObject
  AuthPasskeyRegistrationObjectClientExtensionResults: AuthPasskeyRegistrationObjectClientExtensionResults
  AuthPasskeyRegistrationObjectResponse: AuthPasskeyRegistrationObjectResponse
  AuthPasskeyRegistrationOptions: ResolverTypeWrapper<AuthPasskeyRegistrationOptions>
  AuthPasskeyRegistrationVerification: ResolverTypeWrapper<AuthPasskeyRegistrationVerification>
  AuthPersonalRepresentativeDelegation: ResolverTypeWrapper<AuthPersonalRepresentativeDelegation>
  AuthProcuringHolderDelegation: ResolverTypeWrapper<AuthProcuringHolderDelegation>
  AuthRegistrationOptionsAuthenticatorSelection: ResolverTypeWrapper<AuthRegistrationOptionsAuthenticatorSelection>
  AuthRegistrationOptionsExtensions: ResolverTypeWrapper<AuthRegistrationOptionsExtensions>
  AuthRegistrationOptionsPublicKeyCredentialDescriptorJSON: ResolverTypeWrapper<AuthRegistrationOptionsPublicKeyCredentialDescriptorJson>
  AuthRegistrationOptionsPublicKeyCredentialOption: ResolverTypeWrapper<AuthRegistrationOptionsPublicKeyCredentialOption>
  AuthRegistrationOptionsRp: ResolverTypeWrapper<AuthRegistrationOptionsRp>
  AuthRegistrationOptionsUser: ResolverTypeWrapper<AuthRegistrationOptionsUser>
  AuthScopeTreeNode:
    | ResolversTypes['AuthApiScope']
    | ResolversTypes['AuthApiScopeGroup']
  BasicVehicleInformation: ResolverTypeWrapper<BasicVehicleInformation>
  BloodDonationRestrictionDetails: ResolverTypeWrapper<
    Omit<BloodDonationRestrictionDetails, 'cardText' | 'detailedText'> & {
      cardText: Array<ResolversTypes['Slice']>
      detailedText: Array<ResolversTypes['Slice']>
    }
  >
  BloodDonationRestrictionGenericTag: ResolverTypeWrapper<BloodDonationRestrictionGenericTag>
  BloodDonationRestrictionGenericTagList: ResolverTypeWrapper<BloodDonationRestrictionGenericTagList>
  BloodDonationRestrictionList: ResolverTypeWrapper<BloodDonationRestrictionList>
  BloodDonationRestrictionListItem: ResolverTypeWrapper<
    Omit<BloodDonationRestrictionListItem, 'cardText'> & {
      cardText: Array<ResolversTypes['Slice']>
    }
  >
  Boolean: ResolverTypeWrapper<Scalars['Boolean']>
  Broker: ResolverTypeWrapper<Broker>
  BulkMailAction: ResolverTypeWrapper<BulkMailAction>
  BulkUploadUser: BulkUploadUser
  BulkVehicleMileageRequestOverviewInput: BulkVehicleMileageRequestOverviewInput
  BulkVehicleMileageRequestStatusInput: BulkVehicleMileageRequestStatusInput
  BulletEntry:
    | ResolversTypes['IconBullet']
    | ResolversTypes['NumberBulletGroup']
  BulletListSlice: ResolverTypeWrapper<
    Omit<BulletListSlice, 'bullets'> & {
      bullets: Array<ResolversTypes['BulletEntry']>
    }
  >
  BurningPermit: ResolverTypeWrapper<BurningPermit>
  BurningPermitsResponse: ResolverTypeWrapper<BurningPermitsResponse>
  CalculationType: CalculationType
  CaseSubscriptionType: CaseSubscriptionType
  CategoryPage: ResolversTypes['Article'] | ResolversTypes['Manual']
  CertificateInfoResponse: ResolverTypeWrapper<CertificateInfoResponse>
  ChangeAppendix: ResolverTypeWrapper<ChangeAppendix>
  Chart: ResolverTypeWrapper<Chart>
  ChartComponent: ResolverTypeWrapper<ChartComponent>
  ChartNumberBox: ResolverTypeWrapper<ChartNumberBox>
  CheckTachoNetExists: ResolverTypeWrapper<CheckTachoNetExists>
  CheckTachoNetInput: CheckTachoNetInput
  ClientCredentials: ResolverTypeWrapper<ClientCredentials>
  CoOwnerChangeAnswers: CoOwnerChangeAnswers
  CoOwnerChangeAnswersCoOwners: CoOwnerChangeAnswersCoOwners
  CoOwnerChangeAnswersOwnerCoOwners: CoOwnerChangeAnswersOwnerCoOwners
  CoOwnerChangeAnswersPickVehicle: CoOwnerChangeAnswersPickVehicle
  CoOwnerChangeAnswersUser: CoOwnerChangeAnswersUser
  CoOwnerChangeAnswersVehicleMileage: CoOwnerChangeAnswersVehicleMileage
  CollectionStatus: CollectionStatus
  CommunicationResponse: ResolverTypeWrapper<CommunicationResponse>
  ConnectedComponent: ResolverTypeWrapper<ConnectedComponent>
  ConsultationPortalAdviceResult: ResolverTypeWrapper<ConsultationPortalAdviceResult>
  ConsultationPortalAllTypesResult: ResolverTypeWrapper<ConsultationPortalAllTypesResult>
  ConsultationPortalCaseInput: ConsultationPortalCaseInput
  ConsultationPortalCaseItemResult: ResolverTypeWrapper<ConsultationPortalCaseItemResult>
  ConsultationPortalCasePostAdviceCommandInput: ConsultationPortalCasePostAdviceCommandInput
  ConsultationPortalCaseResult: ResolverTypeWrapper<ConsultationPortalCaseResult>
  ConsultationPortalCaseStakeholderResult: ResolverTypeWrapper<ConsultationPortalCaseStakeholderResult>
  ConsultationPortalCaseSubscriptionCommandInput: ConsultationPortalCaseSubscriptionCommandInput
  ConsultationPortalCaseSubscriptionResult: ResolverTypeWrapper<ConsultationPortalCaseSubscriptionResult>
  ConsultationPortalCasesAggregateResult: ResolverTypeWrapper<ConsultationPortalCasesAggregateResult>
  ConsultationPortalCasesInput: ConsultationPortalCasesInput
  ConsultationPortalDocumentInfoResult: ResolverTypeWrapper<ConsultationPortalDocumentInfoResult>
  ConsultationPortalPostAdviceInput: ConsultationPortalPostAdviceInput
  ConsultationPortalPostCaseSubscriptionCommandInput: ConsultationPortalPostCaseSubscriptionCommandInput
  ConsultationPortalPostCaseSubscriptionTypeInput: ConsultationPortalPostCaseSubscriptionTypeInput
  ConsultationPortalPostEmailCommandInput: ConsultationPortalPostEmailCommandInput
  ConsultationPortalRelatedCaseResult: ResolverTypeWrapper<ConsultationPortalRelatedCaseResult>
  ConsultationPortalStatisticsResult: ResolverTypeWrapper<ConsultationPortalStatisticsResult>
  ConsultationPortalSubscriptionCommandInput: ConsultationPortalSubscriptionCommandInput
  ConsultationPortalUserAdviceAggregate: ResolverTypeWrapper<ConsultationPortalUserAdviceAggregate>
  ConsultationPortalUserAdviceCaseResult: ResolverTypeWrapper<ConsultationPortalUserAdviceCaseResult>
  ConsultationPortalUserAdviceResult: ResolverTypeWrapper<ConsultationPortalUserAdviceResult>
  ConsultationPortalUserAdvicesInput: ConsultationPortalUserAdvicesInput
  ConsultationPortalUserCaseSubscriptionResult: ResolverTypeWrapper<ConsultationPortalUserCaseSubscriptionResult>
  ConsultationPortalUserEmailResult: ResolverTypeWrapper<ConsultationPortalUserEmailResult>
  ConsultationPortalUserSubscriptionResult: ResolverTypeWrapper<ConsultationPortalUserSubscriptionResult>
  ConsultationPortalUserSubscriptionsAggregate: ResolverTypeWrapper<ConsultationPortalUserSubscriptionsAggregate>
  ConsultationPortalUserSubscriptionsCommandInput: ConsultationPortalUserSubscriptionsCommandInput
  Contact: ResolverTypeWrapper<Contact>
  ContactUs: ResolverTypeWrapper<ContactUs>
  ContactUsInput: ContactUsInput
  ContentLanguage: ContentLanguage
  ContentSlug: ResolverTypeWrapper<ContentSlug>
  CostOfLivingCalculatorModel: ResolverTypeWrapper<CostOfLivingCalculatorModel>
  CostOfLivingCalculatorResponseModel: ResolverTypeWrapper<CostOfLivingCalculatorResponseModel>
  CoursesModel: ResolverTypeWrapper<CoursesModel>
  CreateApplicationDtoTypeIdEnum: CreateApplicationDtoTypeIdEnum
  CreateApplicationInput: CreateApplicationInput
  CreateAuthAdminClientInput: CreateAuthAdminClientInput
  CreateAuthDelegationInput: CreateAuthDelegationInput
  CreateAuthLoginRestrictionInput: CreateAuthLoginRestrictionInput
  CreateBarcodeResult: ResolverTypeWrapper<CreateBarcodeResult>
  CreateChangeAppendixInput: CreateChangeAppendixInput
  CreateContactInput: CreateContactInput
  CreateDelegationInput: CreateDelegationInput
  CreateDraftRegulationCancelInput: CreateDraftRegulationCancelInput
  CreateDraftRegulationChangeInput: CreateDraftRegulationChangeInput
  CreateDraftRegulationInput: CreateDraftRegulationInput
  CreateDrivingSchoolTestResultInput: CreateDrivingSchoolTestResultInput
  CreateEmailVerificationInput: CreateEmailVerificationInput
  CreateEndorsementInput: CreateEndorsementInput
  CreateEndorsementListDto: CreateEndorsementListDto
  CreateFormSystemApplicantDtoInput: CreateFormSystemApplicantDtoInput
  CreateFormSystemApplicantInput: CreateFormSystemApplicantInput
  CreateFormSystemApplicationInput: CreateFormSystemApplicationInput
  CreateFormSystemCertificationDtoInput: CreateFormSystemCertificationDtoInput
  CreateFormSystemCertificationInput: CreateFormSystemCertificationInput
  CreateFormSystemFieldDtoInput: CreateFormSystemFieldDtoInput
  CreateHelpdeskInput: CreateHelpdeskInput
  CreateIcelandicNameInput: CreateIcelandicNameInput
  CreatePracticalDrivingLessonInput: CreatePracticalDrivingLessonInput
  CreateProviderInput: CreateProviderInput
  CreateRegulationPresignedPostInput: CreateRegulationPresignedPostInput
  CreateScopeInput: CreateScopeInput
  CreateSmsVerificationInput: CreateSmsVerificationInput
  CreateUserProfileInput: CreateUserProfileInput
  CustomPage: ResolverTypeWrapper<
    Omit<CustomPage, 'content'> & {
      content?: Maybe<Array<ResolversTypes['Slice']>>
    }
  >
  CustomPageUniqueIdentifier: CustomPageUniqueIdentifier
  DataCategory: DataCategory
  DataProvider: DataProvider
  DateTime: ResolverTypeWrapper<Scalars['DateTime']>
  DelegationAdminCustomModel: ResolverTypeWrapper<DelegationAdminCustomModel>
  DeleteApplicationInput: DeleteApplicationInput
  DeleteAttachmentInput: DeleteAttachmentInput
  DeleteAuthDelegationInput: DeleteAuthDelegationInput
  DeleteDraftRegulationCancelInput: DeleteDraftRegulationCancelInput
  DeleteDraftRegulationChangeInput: DeleteDraftRegulationChangeInput
  DeleteDraftRegulationInput: DeleteDraftRegulationInput
  DeleteDraftRegulationModel: ResolverTypeWrapper<DeleteDraftRegulationModel>
  DeleteFormSystemApplicantInput: DeleteFormSystemApplicantInput
  DeleteFormSystemCertificationInput: DeleteFormSystemCertificationInput
  DeleteIcelandicNameByIdInput: DeleteIcelandicNameByIdInput
  DeleteIslykillValueInput: DeleteIslykillValueInput
  DeleteNameResponse: ResolverTypeWrapper<DeleteNameResponse>
  DeletePracticalDrivingLessonInput: DeletePracticalDrivingLessonInput
  DeleteTokenResponse: ResolverTypeWrapper<DeleteTokenResponse>
  DetailedSchedule: ResolverTypeWrapper<DetailedSchedule>
  DiplomaItems: ResolverTypeWrapper<DiplomaItems>
  DiplomaModel: ResolverTypeWrapper<DiplomaModel>
  DirectTaxPaymentModel: ResolverTypeWrapper<DirectTaxPaymentModel>
  Disqualification: ResolverTypeWrapper<Disqualification>
  DistrictCommissionerAgencies: ResolverTypeWrapper<DistrictCommissionerAgencies>
  Districts: ResolverTypeWrapper<Districts>
  Document: ResolverTypeWrapper<Document>
  DocumentCategory: ResolverTypeWrapper<DocumentCategory>
  DocumentConfirmActions: ResolverTypeWrapper<DocumentConfirmActions>
  DocumentConfirmActionsInput: DocumentConfirmActionsInput
  DocumentDetails: ResolverTypeWrapper<DocumentDetails>
  DocumentInput: DocumentInput
  DocumentListResponse: ResolverTypeWrapper<DocumentListResponse>
  DocumentMailAction: ResolverTypeWrapper<DocumentMailAction>
  DocumentPageNumber: ResolverTypeWrapper<DocumentPageNumber>
  DocumentPageResponse: ResolverTypeWrapper<DocumentPageResponse>
  DocumentPdfRenderer: ResolverTypeWrapper<DocumentPdfRenderer>
  DocumentPdfRendererInput: DocumentPdfRendererInput
  DocumentProviderCategoriesAndTypesPostInput: DocumentProviderCategoriesAndTypesPostInput
  DocumentProviderCategoriesAndTypesPutInput: DocumentProviderCategoriesAndTypesPutInput
  DocumentProviderCategory: ResolverTypeWrapper<DocumentProviderCategory>
  DocumentProviderPaperMail: ResolverTypeWrapper<DocumentProviderPaperMail>
  DocumentProviderPaperMailInput: DocumentProviderPaperMailInput
  DocumentProviderPaperMailResponse: ResolverTypeWrapper<DocumentProviderPaperMailResponse>
  DocumentProviderType: ResolverTypeWrapper<DocumentProviderType>
  DocumentSender: ResolverTypeWrapper<DocumentSender>
  DocumentType: ResolverTypeWrapper<DocumentType>
  DocumentV2: ResolverTypeWrapper<DocumentV2>
  DocumentV2Action: ResolverTypeWrapper<DocumentV2Action>
  DocumentV2Content: ResolverTypeWrapper<DocumentV2Content>
  DocumentV2MarkAllMailAsRead: ResolverTypeWrapper<DocumentV2MarkAllMailAsRead>
  DocumentV2PaperMailPreferences: ResolverTypeWrapper<DocumentV2PaperMailPreferences>
  DocumentsV2: ResolverTypeWrapper<DocumentsV2>
  DocumentsV2Base:
    | ResolversTypes['DocumentsV2Category']
    | ResolversTypes['DocumentsV2Type']
  DocumentsV2Category: ResolverTypeWrapper<DocumentsV2Category>
  DocumentsV2DocumentsInput: DocumentsV2DocumentsInput
  DocumentsV2FileType: DocumentsV2FileType
  DocumentsV2MailActionInput: DocumentsV2MailActionInput
  DocumentsV2PageOrder: DocumentsV2PageOrder
  DocumentsV2PageSort: DocumentsV2PageSort
  DocumentsV2Sender: ResolverTypeWrapper<DocumentsV2Sender>
  DocumentsV2Type: ResolverTypeWrapper<DocumentsV2Type>
  DraftProgressInput: DraftProgressInput
  DraftRegulationCancelModel: ResolverTypeWrapper<DraftRegulationCancelModel>
  DraftRegulationChangeModel: ResolverTypeWrapper<DraftRegulationChangeModel>
  DraftRegulationPagingModel: ResolverTypeWrapper<DraftRegulationPagingModel>
  DraftRegulationPdfDownloadModel: ResolverTypeWrapper<DraftRegulationPdfDownloadModel>
  DraftRegulationShippedModel: ResolverTypeWrapper<DraftRegulationShippedModel>
  DraftRegulationSummary: ResolverTypeWrapper<DraftRegulationSummary>
  DrivingBookLesson: ResolverTypeWrapper<DrivingBookLesson>
  DrivingLicenceTestResult: ResolverTypeWrapper<DrivingLicenceTestResult>
  DrivingLicenceTestResultId: ResolverTypeWrapper<DrivingLicenceTestResultId>
  DrivingLicense: ResolverTypeWrapper<DrivingLicense>
  DrivingLicenseBook: ResolverTypeWrapper<DrivingLicenseBook>
  DrivingLicenseBookSchool: ResolverTypeWrapper<DrivingLicenseBookSchool>
  DrivingLicenseBookStudent: ResolverTypeWrapper<DrivingLicenseBookStudent>
  DrivingLicenseBookStudentForTeacher: ResolverTypeWrapper<DrivingLicenseBookStudentForTeacher>
  DrivingLicenseBookStudentInput: DrivingLicenseBookStudentInput
  DrivingLicenseBookStudentOverview: ResolverTypeWrapper<DrivingLicenseBookStudentOverview>
  DrivingLicenseBookStudentsInput: DrivingLicenseBookStudentsInput
  DrivingLicenseBookSuccess: ResolverTypeWrapper<DrivingLicenseBookSuccess>
  DrivingLicenseQualityPhoto: ResolverTypeWrapper<DrivingLicenseQualityPhoto>
  DrivingLicenseQualitySignature: ResolverTypeWrapper<DrivingLicenseQualitySignature>
  DrivingSchoolExam: ResolverTypeWrapper<DrivingSchoolExam>
  DrivingSchoolType: ResolverTypeWrapper<DrivingSchoolType>
  EditDraftBody: EditDraftBody
  EditDraftRegulationInput: EditDraftRegulationInput
  EducationCompulsorySchoolCourse: ResolverTypeWrapper<EducationCompulsorySchoolCourse>
  EducationCompulsorySchoolCourseCompetence: ResolverTypeWrapper<EducationCompulsorySchoolCourseCompetence>
  EducationCompulsorySchoolGrade: ResolverTypeWrapper<EducationCompulsorySchoolGrade>
  EducationCompulsorySchoolGradeCategory:
    | ResolversTypes['EducationCompulsorySchoolGradeCategoryText']
    | ResolversTypes['EducationCompulsorySchoolGradeCategoryWeighted']
  EducationCompulsorySchoolGradeCategoryText: ResolverTypeWrapper<EducationCompulsorySchoolGradeCategoryText>
  EducationCompulsorySchoolGradeCategoryWeighted: ResolverTypeWrapper<EducationCompulsorySchoolGradeCategoryWeighted>
  EducationCompulsorySchoolGradeDetail: ResolverTypeWrapper<EducationCompulsorySchoolGradeDetail>
  EducationCompulsorySchoolGradeLevelExamResults: ResolverTypeWrapper<EducationCompulsorySchoolGradeLevelExamResults>
  EducationCompulsorySchoolStudentCareer: ResolverTypeWrapper<EducationCompulsorySchoolStudentCareer>
  EducationCourseGrade: ResolverTypeWrapper<EducationCourseGrade>
  EducationExamFamilyOverview: ResolverTypeWrapper<EducationExamFamilyOverview>
  EducationExamResult: ResolverTypeWrapper<EducationExamResult>
  EducationFriggAddressModel: ResolverTypeWrapper<EducationFriggAddressModel>
  EducationFriggKeyOptionModel: ResolverTypeWrapper<EducationFriggKeyOptionModel>
  EducationFriggOptionModel: ResolverTypeWrapper<EducationFriggOptionModel>
  EducationFriggOptionsListInput: EducationFriggOptionsListInput
  EducationFriggOrganizationModel: ResolverTypeWrapper<EducationFriggOrganizationModel>
  EducationFriggValueModel: ResolverTypeWrapper<EducationFriggValueModel>
  EducationGradeResult: ResolverTypeWrapper<EducationGradeResult>
  EducationLicense: ResolverTypeWrapper<EducationLicense>
  EducationSignedLicense: ResolverTypeWrapper<EducationSignedLicense>
  EducationUserFamilyCompulsorySchoolCareer: ResolverTypeWrapper<EducationUserFamilyCompulsorySchoolCareer>
  Eligibility: ResolverTypeWrapper<Eligibility>
  EmailSignup: ResolverTypeWrapper<EmailSignup>
  EmailSignupInput: EmailSignupInput
  EmailSignupInputField: EmailSignupInputField
  EmailSignupResponse: ResolverTypeWrapper<EmailSignupResponse>
  Embed: ResolverTypeWrapper<Embed>
  EmbeddedVideo: ResolverTypeWrapper<EmbeddedVideo>
  Endorsement: ResolverTypeWrapper<Endorsement>
  EndorsementInput: EndorsementInput
  EndorsementList: ResolverTypeWrapper<EndorsementList>
  EndorsementListControllerFindByTagsTagsEnum: EndorsementListControllerFindByTagsTagsEnum
  EndorsementListDtoTagsEnum: EndorsementListDtoTagsEnum
  EndorsementListOpen: ResolverTypeWrapper<EndorsementListOpen>
  EndorsementListOpenTagsEnum: EndorsementListOpenTagsEnum
  EndorsementListTagsEnum: EndorsementListTagsEnum
  EndorsementMetadata: ResolverTypeWrapper<EndorsementMetadata>
  EndorsementMetadataDtoFieldEnum: EndorsementMetadataDtoFieldEnum
  EndorsementPaginationInput: EndorsementPaginationInput
  EnergyFundVehicleDetailsWithGrant: ResolverTypeWrapper<EnergyFundVehicleDetailsWithGrant>
  EnergyFundVehicleGrant: ResolverTypeWrapper<EnergyFundVehicleGrant>
  EnhancedAsset: ResolverTypeWrapper<EnhancedAsset>
  EnhancedAssetSearchResult: ResolverTypeWrapper<EnhancedAssetSearchResult>
  EntryTitle: ResolverTypeWrapper<EntryTitle>
  Environment: Environment
  ErrorPage: ResolverTypeWrapper<ErrorPage>
  EstateRelations: ResolverTypeWrapper<EstateRelations>
  Event: ResolverTypeWrapper<
    Omit<Event, 'content'> & { content?: Maybe<Array<ResolversTypes['Slice']>> }
  >
  EventList: ResolverTypeWrapper<EventList>
  EventLocation: ResolverTypeWrapper<EventLocation>
  EventSlice: ResolverTypeWrapper<EventSlice>
  EventTime: ResolverTypeWrapper<EventTime>
  ExistsEndorsementResponse: ResolverTypeWrapper<ExistsEndorsementResponse>
  ExportEndorsementListInput: ExportEndorsementListInput
  ExportUrlResponse: ResolverTypeWrapper<ExportUrlResponse>
  ExternalLinks: ResolverTypeWrapper<ExternalLinks>
  FaqList: ResolverTypeWrapper<FaqList>
  Featured: ResolverTypeWrapper<Featured>
  FeaturedArticles: ResolverTypeWrapper<
    Omit<FeaturedArticles, 'introText'> & {
      introText?: Maybe<Array<ResolversTypes['Slice']>>
    }
  >
  FeaturedEvents: ResolverTypeWrapper<
    Omit<FeaturedEvents, 'noEventsFoundText'> & {
      noEventsFoundText?: Maybe<Array<ResolversTypes['Slice']>>
    }
  >
  FeaturedLinks: ResolverTypeWrapper<FeaturedLinks>
  FeaturedSupportQNAs: ResolverTypeWrapper<FeaturedSupportQnAs>
  FetchEducationSignedLicenseUrlInput: FetchEducationSignedLicenseUrlInput
  FinanceAssessmentYears: ResolverTypeWrapper<FinanceAssessmentYears>
  FinanceChargeItemSubjectsByYear: ResolverTypeWrapper<FinanceChargeItemSubjectsByYear>
  FinanceChargeItemSubjectsByYearData: ResolverTypeWrapper<FinanceChargeItemSubjectsByYearData>
  FinanceChargeItemSubjectsByYearPeriodData: ResolverTypeWrapper<FinanceChargeItemSubjectsByYearPeriodData>
  FinanceChargeTypeDetails: ResolverTypeWrapper<FinanceChargeTypeDetails>
  FinanceChargeTypeDetailsData: ResolverTypeWrapper<FinanceChargeTypeDetailsData>
  FinanceChargeTypePeriodSubject: ResolverTypeWrapper<FinanceChargeTypePeriodSubject>
  FinanceChargeTypePeriodSubjectData: ResolverTypeWrapper<FinanceChargeTypePeriodSubjectData>
  FinanceChargeTypesByYear: ResolverTypeWrapper<FinanceChargeTypesByYear>
  FinanceChargeTypesByYearData: ResolverTypeWrapper<FinanceChargeTypesByYearData>
  FinanceCustomerChargeType: ResolverTypeWrapper<FinanceCustomerChargeType>
  FinanceCustomerChargeTypeItem: ResolverTypeWrapper<FinanceCustomerChargeTypeItem>
  FinanceCustomerRecords: ResolverTypeWrapper<FinanceCustomerRecords>
  FinanceCustomerRecordsItem: ResolverTypeWrapper<FinanceCustomerRecordsItem>
  FinanceCustomerTapsControlModel: ResolverTypeWrapper<FinanceCustomerTapsControlModel>
  FinanceDebtStatus: ResolverTypeWrapper<FinanceDebtStatus>
  FinanceDebtStatusModel: ResolverTypeWrapper<FinanceDebtStatusModel>
  FinanceDocumentData: ResolverTypeWrapper<FinanceDocumentData>
  FinanceDocumentModel: ResolverTypeWrapper<FinanceDocumentModel>
  FinanceDocumentsListItem: ResolverTypeWrapper<FinanceDocumentsListItem>
  FinanceDocumentsListModel: ResolverTypeWrapper<FinanceDocumentsListModel>
  FinancialStatementsInaoClientType: ResolverTypeWrapper<FinancialStatementsInaoClientType>
  FinancialStatementsInaoConfig: ResolverTypeWrapper<FinancialStatementsInaoConfig>
  FinancialStatementsInaoElection: ResolverTypeWrapper<FinancialStatementsInaoElection>
  FinancialStatementsInaoTaxInfo: ResolverTypeWrapper<FinancialStatementsInaoTaxInfo>
  FindEndorsementListInput: FindEndorsementListInput
  FishingLicenseCodeType: FishingLicenseCodeType
  FishingLicenseDateRestriction: ResolverTypeWrapper<FishingLicenseDateRestriction>
  FishingLicenseDeprivation: ResolverTypeWrapper<FishingLicenseDeprivation>
  FishingLicenseInfo: ResolverTypeWrapper<FishingLicenseInfo>
  FishingLicenseLicense: ResolverTypeWrapper<FishingLicenseLicense>
  FishingLicenseListOptions: ResolverTypeWrapper<FishingLicenseListOptions>
  FishingLicenseReason: ResolverTypeWrapper<FishingLicenseReason>
  FishingLicenseSeaworthiness: ResolverTypeWrapper<FishingLicenseSeaworthiness>
  FishingLicenseShip: ResolverTypeWrapper<FishingLicenseShip>
  FiskistofaCatchQuotaCategory: ResolverTypeWrapper<FiskistofaCatchQuotaCategory>
  FiskistofaCategoryChange: FiskistofaCategoryChange
  FiskistofaExtendedCatchQuotaCategory: ResolverTypeWrapper<FiskistofaExtendedCatchQuotaCategory>
  FiskistofaExtendedShipStatusInformation: ResolverTypeWrapper<FiskistofaExtendedShipStatusInformation>
  FiskistofaExtendedShipStatusInformationResponse: ResolverTypeWrapper<FiskistofaExtendedShipStatusInformationResponse>
  FiskistofaExtendedShipStatusInformationUpdate: ResolverTypeWrapper<FiskistofaExtendedShipStatusInformationUpdate>
  FiskistofaExtendedShipStatusInformationUpdateResponse: ResolverTypeWrapper<FiskistofaExtendedShipStatusInformationUpdateResponse>
  FiskistofaGetQuotaTypesForCalendarYearInput: FiskistofaGetQuotaTypesForCalendarYearInput
  FiskistofaGetQuotaTypesForTimePeriodInput: FiskistofaGetQuotaTypesForTimePeriodInput
  FiskistofaGetShipStatusForCalendarYearInput: FiskistofaGetShipStatusForCalendarYearInput
  FiskistofaGetShipStatusForTimePeriodInput: FiskistofaGetShipStatusForTimePeriodInput
  FiskistofaGetShipsInput: FiskistofaGetShipsInput
  FiskistofaGetSingleShipInput: FiskistofaGetSingleShipInput
  FiskistofaQuotaCategoryChange: FiskistofaQuotaCategoryChange
  FiskistofaQuotaStatus: ResolverTypeWrapper<FiskistofaQuotaStatus>
  FiskistofaQuotaStatusResponse: ResolverTypeWrapper<FiskistofaQuotaStatusResponse>
  FiskistofaQuotaType: ResolverTypeWrapper<FiskistofaQuotaType>
  FiskistofaQuotaTypeResponse: ResolverTypeWrapper<FiskistofaQuotaTypeResponse>
  FiskistofaShip: ResolverTypeWrapper<FiskistofaShip>
  FiskistofaShipBasicInfo: ResolverTypeWrapper<FiskistofaShipBasicInfo>
  FiskistofaShipBasicInfoResponse: ResolverTypeWrapper<FiskistofaShipBasicInfoResponse>
  FiskistofaShipStatusInformation: ResolverTypeWrapper<FiskistofaShipStatusInformation>
  FiskistofaShipStatusInformationResponse: ResolverTypeWrapper<FiskistofaShipStatusInformationResponse>
  FiskistofaSingleShip: ResolverTypeWrapper<FiskistofaSingleShip>
  FiskistofaSingleShipResponse: ResolverTypeWrapper<FiskistofaSingleShipResponse>
  FiskistofaUpdateShipQuotaStatusForTimePeriodInput: FiskistofaUpdateShipQuotaStatusForTimePeriodInput
  FiskistofaUpdateShipStatusForCalendarYearInput: FiskistofaUpdateShipStatusForCalendarYearInput
  FiskistofaUpdateShipStatusForTimePeriodInput: FiskistofaUpdateShipStatusForTimePeriodInput
  Float: ResolverTypeWrapper<Scalars['Float']>
  FooterItem: ResolverTypeWrapper<
    Omit<FooterItem, 'content' | 'serviceWebContent'> & {
      content?: Maybe<Array<ResolversTypes['Slice']>>
      serviceWebContent?: Maybe<Array<ResolversTypes['Slice']>>
    }
  >
  Form: ResolverTypeWrapper<Form>
  FormField: ResolverTypeWrapper<FormField>
  FormSystemApplicant: ResolverTypeWrapper<FormSystemApplicant>
  FormSystemApplication: ResolverTypeWrapper<FormSystemApplication>
  FormSystemApplicationEventDto: ResolverTypeWrapper<FormSystemApplicationEventDto>
  FormSystemApplicationInput: FormSystemApplicationInput
  FormSystemCreateFieldInput: FormSystemCreateFieldInput
  FormSystemCreateFormInput: FormSystemCreateFormInput
  FormSystemCreateListItemDtoInput: FormSystemCreateListItemDtoInput
  FormSystemCreateListItemInput: FormSystemCreateListItemInput
  FormSystemCreateScreenDtoInput: FormSystemCreateScreenDtoInput
  FormSystemCreateScreenInput: FormSystemCreateScreenInput
  FormSystemCreateSectionDtoInput: FormSystemCreateSectionDtoInput
  FormSystemCreateSectionInput: FormSystemCreateSectionInput
  FormSystemDeleteFieldInput: FormSystemDeleteFieldInput
  FormSystemDeleteFormInput: FormSystemDeleteFormInput
  FormSystemDeleteListItemInput: FormSystemDeleteListItemInput
  FormSystemDeleteScreenInput: FormSystemDeleteScreenInput
  FormSystemDeleteSectionInput: FormSystemDeleteSectionInput
  FormSystemDependency: ResolverTypeWrapper<FormSystemDependency>
  FormSystemDependencyInput: FormSystemDependencyInput
  FormSystemField: ResolverTypeWrapper<FormSystemField>
  FormSystemFieldDisplayOrderInput: FormSystemFieldDisplayOrderInput
  FormSystemFieldSettings: ResolverTypeWrapper<FormSystemFieldSettings>
  FormSystemFieldSettingsInput: FormSystemFieldSettingsInput
  FormSystemFieldType: ResolverTypeWrapper<FormSystemFieldType>
  FormSystemForm: ResolverTypeWrapper<FormSystemForm>
  FormSystemFormApplicant: ResolverTypeWrapper<FormSystemFormApplicant>
  FormSystemFormCertificationType: ResolverTypeWrapper<FormSystemFormCertificationType>
  FormSystemFormCertificationTypeDto: ResolverTypeWrapper<FormSystemFormCertificationTypeDto>
  FormSystemFormResponse: ResolverTypeWrapper<FormSystemFormResponse>
  FormSystemFormUrl: ResolverTypeWrapper<FormSystemFormUrl>
  FormSystemFormUrlInput: FormSystemFormUrlInput
  FormSystemGetFormInput: FormSystemGetFormInput
  FormSystemGetFormsInput: FormSystemGetFormsInput
  FormSystemGetOrganizationAdminInput: FormSystemGetOrganizationAdminInput
  FormSystemGetOrganizationInput: FormSystemGetOrganizationInput
  FormSystemLanguageType: ResolverTypeWrapper<FormSystemLanguageType>
  FormSystemLanguageTypeInput: FormSystemLanguageTypeInput
  FormSystemListItem: ResolverTypeWrapper<FormSystemListItem>
  FormSystemListItemDisplayOrderInput: FormSystemListItemDisplayOrderInput
  FormSystemListItemInput: FormSystemListItemInput
  FormSystemListType: ResolverTypeWrapper<FormSystemListType>
  FormSystemMonth: ResolverTypeWrapper<FormSystemMonth>
  FormSystemOption: ResolverTypeWrapper<FormSystemOption>
  FormSystemOrganization: ResolverTypeWrapper<FormSystemOrganization>
  FormSystemOrganizationAdmin: ResolverTypeWrapper<FormSystemOrganizationAdmin>
  FormSystemOrganizationPermissionDto: ResolverTypeWrapper<FormSystemOrganizationPermissionDto>
  FormSystemOrganizationPermissionDtoInput: FormSystemOrganizationPermissionDtoInput
  FormSystemOrganizationUrl: ResolverTypeWrapper<FormSystemOrganizationUrl>
  FormSystemPermissionType: ResolverTypeWrapper<FormSystemPermissionType>
  FormSystemScreen: ResolverTypeWrapper<FormSystemScreen>
  FormSystemScreenDisplayOrderInput: FormSystemScreenDisplayOrderInput
  FormSystemSection: ResolverTypeWrapper<FormSystemSection>
  FormSystemSectionDisplayOrderInput: FormSystemSectionDisplayOrderInput
  FormSystemTranslation: ResolverTypeWrapper<FormSystemTranslation>
  FormSystemTranslationInput: FormSystemTranslationInput
  FormSystemUpdateFieldDtoInput: FormSystemUpdateFieldDtoInput
  FormSystemUpdateFieldInput: FormSystemUpdateFieldInput
  FormSystemUpdateFieldsDisplayOrderInput: FormSystemUpdateFieldsDisplayOrderInput
  FormSystemUpdateFormDtoInput: FormSystemUpdateFormDtoInput
  FormSystemUpdateFormInput: FormSystemUpdateFormInput
  FormSystemUpdateListItemDtoInput: FormSystemUpdateListItemDtoInput
  FormSystemUpdateListItemInput: FormSystemUpdateListItemInput
  FormSystemUpdateListItemsDisplayOrderDtoInput: FormSystemUpdateListItemsDisplayOrderDtoInput
  FormSystemUpdateListItemsDisplayOrderInput: FormSystemUpdateListItemsDisplayOrderInput
  FormSystemUpdateOrganizationPermissionInput: FormSystemUpdateOrganizationPermissionInput
  FormSystemUpdateScreenDisplayOrderDtoInput: FormSystemUpdateScreenDisplayOrderDtoInput
  FormSystemUpdateScreenDtoInput: FormSystemUpdateScreenDtoInput
  FormSystemUpdateScreenInput: FormSystemUpdateScreenInput
  FormSystemUpdateScreensDisplayOrderInput: FormSystemUpdateScreensDisplayOrderInput
  FormSystemUpdateSectionDtoInput: FormSystemUpdateSectionDtoInput
  FormSystemUpdateSectionInput: FormSystemUpdateSectionInput
  FormSystemUpdateSectionsDisplayOrderDtoInput: FormSystemUpdateSectionsDisplayOrderDtoInput
  FormSystemUpdateSectionsDisplayOrderInput: FormSystemUpdateSectionsDisplayOrderInput
  FormSystemValue: ResolverTypeWrapper<FormSystemValue>
  FormSystemValueDto: ResolverTypeWrapper<FormSystemValueDto>
  Frontpage: ResolverTypeWrapper<Frontpage>
  FrontpageSlider: ResolverTypeWrapper<FrontpageSlider>
  GeneratePkPassInput: GeneratePkPassInput
  GenericFormInput: GenericFormInput
  GenericLicense: ResolverTypeWrapper<GenericLicense>
  GenericLicenseCollection: ResolverTypeWrapper<GenericLicenseCollection>
  GenericLicenseDataField: ResolverTypeWrapper<GenericLicenseDataField>
  GenericLicenseDataFieldType: GenericLicenseDataFieldType
  GenericLicenseError: ResolverTypeWrapper<GenericLicenseError>
  GenericLicenseFetch: ResolverTypeWrapper<GenericLicenseFetch>
  GenericLicenseProvider: ResolverTypeWrapper<GenericLicenseProvider>
  GenericLicenseProviderId: GenericLicenseProviderId
  GenericLicenseType: GenericLicenseType
  GenericList: ResolverTypeWrapper<GenericList>
  GenericListItem: ResolverTypeWrapper<
    Omit<GenericListItem, 'cardIntro' | 'content'> & {
      cardIntro: Array<ResolversTypes['Slice']>
      content?: Maybe<Array<ResolversTypes['Slice']>>
    }
  >
  GenericListItemResponse: ResolverTypeWrapper<GenericListItemResponse>
  GenericListItemResponseInput: ResolverTypeWrapper<GenericListItemResponseInput>
  GenericListItemType: GenericListItemType
  GenericOverviewPage: ResolverTypeWrapper<GenericOverviewPage>
  GenericPage: ResolverTypeWrapper<GenericPage>
  GenericPkPass: ResolverTypeWrapper<GenericPkPass>
  GenericPkPassQrCode: ResolverTypeWrapper<GenericPkPassQrCode>
  GenericPkPassVerification: ResolverTypeWrapper<GenericPkPassVerification>
  GenericPkPassVerificationError: ResolverTypeWrapper<GenericPkPassVerificationError>
  GenericTag: ResolverTypeWrapper<GenericTag>
  GenericTagGroup: ResolverTypeWrapper<GenericTagGroup>
  GenericUserLicense: ResolverTypeWrapper<GenericUserLicense>
  GenericUserLicenseAlert: ResolverTypeWrapper<GenericUserLicenseAlert>
  GenericUserLicenseAlertType: GenericUserLicenseAlertType
  GenericUserLicenseDataFieldTagColor: GenericUserLicenseDataFieldTagColor
  GenericUserLicenseDataFieldTagType: GenericUserLicenseDataFieldTagType
  GenericUserLicenseExpiryStatus: GenericUserLicenseExpiryStatus
  GenericUserLicenseFetchStatus: GenericUserLicenseFetchStatus
  GenericUserLicenseMetaLinks: ResolverTypeWrapper<GenericUserLicenseMetaLinks>
  GenericUserLicenseMetaLinksType: GenericUserLicenseMetaLinksType
  GenericUserLicenseMetaTag: ResolverTypeWrapper<GenericUserLicenseMetaTag>
  GenericUserLicenseMetadata: ResolverTypeWrapper<GenericUserLicenseMetadata>
  GenericUserLicenseMetadataDescription: ResolverTypeWrapper<GenericUserLicenseMetadataDescription>
  GenericUserLicensePkPassStatus: GenericUserLicensePkPassStatus
  GenericUserLicenseStatus: GenericUserLicenseStatus
  GetAlertBannerInput: GetAlertBannerInput
  GetAnchorPageInput: GetAnchorPageInput
  GetAnchorPagesInput: GetAnchorPagesInput
  GetAnnualStatusDocumentInput: GetAnnualStatusDocumentInput
  GetApiCatalogueInput: GetApiCatalogueInput
  GetApiServiceInput: GetApiServiceInput
  GetArticleCategoriesInput: GetArticleCategoriesInput
  GetArticlesInput: GetArticlesInput
  GetAuctionInput: GetAuctionInput
  GetAuctionsInput: GetAuctionsInput
  GetBloodDonationRestrictionDetailsInput: GetBloodDonationRestrictionDetailsInput
  GetBloodDonationRestrictionGenericTagsInput: GetBloodDonationRestrictionGenericTagsInput
  GetBloodDonationRestrictionsInput: GetBloodDonationRestrictionsInput
  GetBloodDonationRestrictionsInputModel: ResolverTypeWrapper<GetBloodDonationRestrictionsInputModel>
  GetCategoryPagesInput: GetCategoryPagesInput
  GetChargeItemSubjectsByYearInput: GetChargeItemSubjectsByYearInput
  GetChargeTypePeriodSubjectInput: GetChargeTypePeriodSubjectInput
  GetChargeTypesByYearInput: GetChargeTypesByYearInput
  GetChargeTypesDetailsByYearInput: GetChargeTypesDetailsByYearInput
  GetContentSlugInput: GetContentSlugInput
  GetCustomPageInput: GetCustomPageInput
  GetCustomSubpageInput: GetCustomSubpageInput
  GetCustomerRecordsInput: GetCustomerRecordsInput
  GetDocumentInput: GetDocumentInput
  GetDocumentListInput: GetDocumentListInput
  GetDocumentPageInput: GetDocumentPageInput
  GetDraftRegulationInput: GetDraftRegulationInput
  GetDraftRegulationPdfDownloadInput: GetDraftRegulationPdfDownloadInput
  GetDraftRegulationsInput: GetDraftRegulationsInput
  GetElectronicIDInput: GetElectronicIdInput
  GetErrorPageInput: GetErrorPageInput
  GetEventsInput: GetEventsInput
  GetFeaturedSupportQNAsInput: GetFeaturedSupportQnAsInput
  GetFinanceDocumentInput: GetFinanceDocumentInput
  GetFinanceDocumentsListInput: GetFinanceDocumentsListInput
  GetFinancePaymentScheduleInput: GetFinancePaymentScheduleInput
  GetFinancialOverviewInput: GetFinancialOverviewInput
  GetFrontpageInput: GetFrontpageInput
  GetGenericLicenseInput: GetGenericLicenseInput
  GetGenericLicensesInput: GetGenericLicensesInput
  GetGenericListItemBySlugInput: GetGenericListItemBySlugInput
  GetGenericListItemsInput: GetGenericListItemsInput
  GetGenericListItemsInputOrderBy: GetGenericListItemsInputOrderBy
  GetGenericOverviewPageInput: GetGenericOverviewPageInput
  GetGenericPageInput: GetGenericPageInput
  GetGenericTagBySlugInput: GetGenericTagBySlugInput
  GetGenericTagsInTagGroupsInput: GetGenericTagsInTagGroupsInput
  GetGrantsInput: GetGrantsInput
  GetGrantsInputAvailabilityStatusEnum: GetGrantsInputAvailabilityStatusEnum
  GetGrantsInputSortByEnum: GetGrantsInputSortByEnum
  GetHmsLoansPaymentHistoryInput: GetHmsLoansPaymentHistoryInput
  GetHomestaysInput: GetHomestaysInput
  GetIcelandicNameByIdInput: GetIcelandicNameByIdInput
  GetIcelandicNameByInitialLetterInput: GetIcelandicNameByInitialLetterInput
  GetIcelandicNameBySearchInput: GetIcelandicNameBySearchInput
  GetInitialScheduleInput: GetInitialScheduleInput
  GetIsEmployerValidInput: GetIsEmployerValidInput
  GetLifeEventPageInput: GetLifeEventPageInput
  GetLifeEventsInCategoryInput: GetLifeEventsInCategoryInput
  GetLifeEventsInput: GetLifeEventsInput
  GetMenuInput: GetMenuInput
  GetMultiPropertyInput: GetMultiPropertyInput
  GetNamespaceInput: GetNamespaceInput
  GetNewsDatesInput: GetNewsDatesInput
  GetNewsInput: GetNewsInput
  GetOpenApiInput: GetOpenApiInput
  GetOpenDataPageInput: GetOpenDataPageInput
  GetOpenDataSubpageInput: GetOpenDataSubpageInput
  GetOperatingLicensesInput: GetOperatingLicensesInput
  GetOrganizationByNationalIdInput: GetOrganizationByNationalIdInput
  GetOrganizationByTitleInput: GetOrganizationByTitleInput
  GetOrganizationInput: GetOrganizationInput
  GetOrganizationPageInput: GetOrganizationPageInput
  GetOrganizationPageStandaloneSitemapLevel1Input: GetOrganizationPageStandaloneSitemapLevel1Input
  GetOrganizationPageStandaloneSitemapLevel2Input: GetOrganizationPageStandaloneSitemapLevel2Input
  GetOrganizationParentSubpageInput: GetOrganizationParentSubpageInput
  GetOrganizationSubpageByIdInput: GetOrganizationSubpageByIdInput
  GetOrganizationSubpageInput: GetOrganizationSubpageInput
  GetOrganizationTagsInput: GetOrganizationTagsInput
  GetOrganizationsInput: GetOrganizationsInput
  GetPagingTypes: GetPagingTypes
  GetParentalLeavesApplicationPaymentPlanInput: GetParentalLeavesApplicationPaymentPlanInput
  GetParentalLeavesEntitlementsInput: GetParentalLeavesEntitlementsInput
  GetParentalLeavesEstimatedPaymentPlanInput: GetParentalLeavesEstimatedPaymentPlanInput
  GetParentalLeavesPeriodEndDateInput: GetParentalLeavesPeriodEndDateInput
  GetParentalLeavesPeriodLengthInput: GetParentalLeavesPeriodLengthInput
  GetPaymentFlowInput: GetPaymentFlowInput
  GetPowerBiEmbedPropsFromServerResponse: ResolverTypeWrapper<GetPowerBiEmbedPropsFromServerResponse>
  GetProjectPageInput: GetProjectPageInput
  GetPublicVehicleSearchInput: GetPublicVehicleSearchInput
  GetPublishedMaterialInput: GetPublishedMaterialInput
  GetRealEstateInput: GetRealEstateInput
  GetRegistryPersonInput: GetRegistryPersonInput
  GetRegulationFromApiInput: GetRegulationFromApiInput
  GetRegulationImpactsInput: GetRegulationImpactsInput
  GetRegulationInput: GetRegulationInput
  GetRegulationOptionListInput: GetRegulationOptionListInput
  GetRegulationsInput: GetRegulationsInput
  GetRegulationsLawChaptersInput: GetRegulationsLawChaptersInput
  GetRegulationsMinistriesInput: GetRegulationsMinistriesInput
  GetRegulationsSearchInput: GetRegulationsSearchInput
  GetScheduleDistributionInput: GetScheduleDistributionInput
  GetServicePortalAlertBannersInput: GetServicePortalAlertBannersInput
  GetServiceWebPageInput: GetServiceWebPageInput
  GetSingleArticleInput: GetSingleArticleInput
  GetSingleEntryTitleByIdInput: GetSingleEntryTitleByIdInput
  GetSingleEventInput: GetSingleEventInput
  GetSingleGrantInput: GetSingleGrantInput
  GetSingleManualInput: GetSingleManualInput
  GetSingleMenuInput: GetSingleMenuInput
  GetSingleNewsInput: GetSingleNewsInput
  GetSingleSupportQNAInput: GetSingleSupportQnaInput
  GetSubpageHeaderInput: GetSubpageHeaderInput
  GetSupportCategoriesInOrganizationInput: GetSupportCategoriesInOrganizationInput
  GetSupportCategoriesInput: GetSupportCategoriesInput
  GetSupportCategoryInput: GetSupportCategoryInput
  GetSupportQNAsInCategoryInput: GetSupportQnAsInCategoryInput
  GetSupportQNAsInput: GetSupportQnAsInput
  GetTabSectionInput: GetTabSectionInput
  GetTeamMembersInput: GetTeamMembersInput
  GetTeamMembersInputOrderBy: GetTeamMembersInputOrderBy
  GetTranslationsInput: GetTranslationsInput
  GetUrlInput: GetUrlInput
  GetUserInvolvedPartiesInput: GetUserInvolvedPartiesInput
  GetVehicleDetailInput: GetVehicleDetailInput
  GetVehicleInput: GetVehicleInput
  GetVehicleMileageInput: GetVehicleMileageInput
  GetVehicleSearchInput: GetVehicleSearchInput
  GetVehiclesForUserInput: GetVehiclesForUserInput
  GetVehiclesListV2Input: GetVehiclesListV2Input
  Grade: ResolverTypeWrapper<Grade>
  GradeType: ResolverTypeWrapper<GradeType>
  Grant: ResolverTypeWrapper<
    Omit<
      Grant,
      | 'answeringQuestions'
      | 'applicationHints'
      | 'howToApply'
      | 'specialEmphasis'
      | 'whoCanApply'
    > & {
      answeringQuestions: Array<ResolversTypes['Slice']>
      applicationHints: Array<ResolversTypes['Slice']>
      howToApply: Array<ResolversTypes['Slice']>
      specialEmphasis: Array<ResolversTypes['Slice']>
      whoCanApply: Array<ResolversTypes['Slice']>
    }
  >
  GrantCardsList: ResolverTypeWrapper<GrantCardsList>
  GrantCardsListSorting: GrantCardsListSorting
  GrantList: ResolverTypeWrapper<GrantList>
  GrantStatus: GrantStatus
  GraphCard: ResolverTypeWrapper<GraphCard>
  GroupedMenu: ResolverTypeWrapper<GroupedMenu>
  HasTeachingRights: ResolverTypeWrapper<HasTeachingRights>
  HeadingSlice: ResolverTypeWrapper<HeadingSlice>
  HealthDirectorateDispensation: ResolverTypeWrapper<HealthDirectorateDispensation>
  HealthDirectorateDispensedItem: ResolverTypeWrapper<HealthDirectorateDispensedItem>
  HealthDirectorateOrganDonation: ResolverTypeWrapper<HealthDirectorateOrganDonation>
  HealthDirectorateOrganDonationLimitations: ResolverTypeWrapper<HealthDirectorateOrganDonationLimitations>
  HealthDirectorateOrganDonationOrgan: ResolverTypeWrapper<HealthDirectorateOrganDonationOrgan>
  HealthDirectorateOrganDonor: ResolverTypeWrapper<HealthDirectorateOrganDonor>
  HealthDirectorateOrganDonorInput: HealthDirectorateOrganDonorInput
  HealthDirectoratePrescribedItemCategory: HealthDirectoratePrescribedItemCategory
  HealthDirectoratePrescription: ResolverTypeWrapper<HealthDirectoratePrescription>
  HealthDirectoratePrescriptionRenewalBlockedReason: HealthDirectoratePrescriptionRenewalBlockedReason
  HealthDirectoratePrescriptionRenewalStatus: HealthDirectoratePrescriptionRenewalStatus
  HealthDirectoratePrescriptions: ResolverTypeWrapper<HealthDirectoratePrescriptions>
  HealthDirectorateReferral: ResolverTypeWrapper<HealthDirectorateReferral>
  HealthDirectorateReferralContact: ResolverTypeWrapper<HealthDirectorateReferralContact>
  HealthDirectorateReferrals: ResolverTypeWrapper<HealthDirectorateReferrals>
  HealthDirectorateVaccination: ResolverTypeWrapper<HealthDirectorateVaccination>
  HealthDirectorateVaccinationStatusEnum: HealthDirectorateVaccinationStatusEnum
  HealthDirectorateVaccinations: ResolverTypeWrapper<HealthDirectorateVaccinations>
  HealthDirectorateVaccinationsAge: ResolverTypeWrapper<HealthDirectorateVaccinationsAge>
  HealthDirectorateVaccinationsInfo: ResolverTypeWrapper<HealthDirectorateVaccinationsInfo>
  HealthDirectorateWaitlist: ResolverTypeWrapper<HealthDirectorateWaitlist>
  HealthDirectorateWaitlists: ResolverTypeWrapper<HealthDirectorateWaitlists>
  HealthInsuranceAccidentNotificationStatusTypes: HealthInsuranceAccidentNotificationStatusTypes
  HealthInsuranceAccidentStatusInput: HealthInsuranceAccidentStatusInput
  Helpdesk: ResolverTypeWrapper<Helpdesk>
  HmsLoansCoPayer: ResolverTypeWrapper<HmsLoansCoPayer>
  HmsLoansHistory: ResolverTypeWrapper<HmsLoansHistory>
  HmsLoansHistoryPdf: ResolverTypeWrapper<HmsLoansHistoryPdf>
  HmsLoansPaymentHistory: ResolverTypeWrapper<HmsLoansPaymentHistory>
  HmsLoansProperty: ResolverTypeWrapper<HmsLoansProperty>
  Homestay: ResolverTypeWrapper<Homestay>
  HousingBenefitCalculationModel: ResolverTypeWrapper<HousingBenefitCalculationModel>
  HousingBenefitCalculatorCalculationInput: HousingBenefitCalculatorCalculationInput
  HousingBenefitCalculatorSpecificSupportCalculationInput: HousingBenefitCalculatorSpecificSupportCalculationInput
  HousingBenefitsPageInfo: ResolverTypeWrapper<HousingBenefitsPageInfo>
  HousingBenefitsPayment: ResolverTypeWrapper<HousingBenefitsPayment>
  HousingBenefitsPayments: ResolverTypeWrapper<HousingBenefitsPayments>
  HousingBenefitsPaymentsInput: HousingBenefitsPaymentsInput
  Html: ResolverTypeWrapper<Html>
  ID: ResolverTypeWrapper<Scalars['ID']>
  IcelandicGovernmentInstitutionVacanciesInput: IcelandicGovernmentInstitutionVacanciesInput
  IcelandicGovernmentInstitutionVacanciesResponse: ResolverTypeWrapper<IcelandicGovernmentInstitutionVacanciesResponse>
  IcelandicGovernmentInstitutionVacancy: ResolverTypeWrapper<IcelandicGovernmentInstitutionVacancy>
  IcelandicGovernmentInstitutionVacancyByIdInput: IcelandicGovernmentInstitutionVacancyByIdInput
  IcelandicGovernmentInstitutionVacancyByIdResponse: ResolverTypeWrapper<IcelandicGovernmentInstitutionVacancyByIdResponse>
  IcelandicGovernmentInstitutionVacancyContact: ResolverTypeWrapper<IcelandicGovernmentInstitutionVacancyContact>
  IcelandicGovernmentInstitutionVacancyListItem: ResolverTypeWrapper<IcelandicGovernmentInstitutionVacancyListItem>
  IcelandicGovernmentInstitutionVacancyLocation: ResolverTypeWrapper<IcelandicGovernmentInstitutionVacancyLocation>
  IcelandicName: ResolverTypeWrapper<IcelandicName>
  IconBullet: ResolverTypeWrapper<IconBullet>
  Identity: ResolversTypes['IdentityCompany'] | ResolversTypes['IdentityPerson']
  IdentityAddress: ResolverTypeWrapper<IdentityAddress>
  IdentityCompany: ResolverTypeWrapper<IdentityCompany>
  IdentityData: IdentityData
  IdentityDocumentModel: ResolverTypeWrapper<IdentityDocumentModel>
  IdentityDocumentModelChild: ResolverTypeWrapper<IdentityDocumentModelChild>
  IdentityInput: IdentityInput
  IdentityPerson: ResolverTypeWrapper<IdentityPerson>
  IdentityType: IdentityType
  Image: ResolverTypeWrapper<Image>
  InaoClientFinancialLimitInput: InaoClientFinancialLimitInput
  Int: ResolverTypeWrapper<Scalars['Int']>
  IntellectualPropertiesAnnualFee: ResolverTypeWrapper<IntellectualPropertiesAnnualFee>
  IntellectualPropertiesAnnualFeesInfo: ResolverTypeWrapper<IntellectualPropertiesAnnualFeesInfo>
  IntellectualPropertiesApplicationLifecycle: ResolverTypeWrapper<IntellectualPropertiesApplicationLifecycle>
  IntellectualPropertiesCategory: ResolverTypeWrapper<IntellectualPropertiesCategory>
  IntellectualPropertiesClassification: ResolverTypeWrapper<IntellectualPropertiesClassification>
  IntellectualPropertiesCountry: ResolverTypeWrapper<IntellectualPropertiesCountry>
  IntellectualPropertiesDesign: ResolverTypeWrapper<IntellectualPropertiesDesign>
  IntellectualPropertiesDesignImagesInput: IntellectualPropertiesDesignImagesInput
  IntellectualPropertiesEPApplicationLifecycle: ResolverTypeWrapper<IntellectualPropertiesEpApplicationLifecycle>
  IntellectualPropertiesImage: ResolverTypeWrapper<IntellectualPropertiesImage>
  IntellectualPropertiesImageList: ResolverTypeWrapper<IntellectualPropertiesImageList>
  IntellectualPropertiesInput: IntellectualPropertiesInput
  IntellectualPropertiesMarketingAuthorization: ResolverTypeWrapper<IntellectualPropertiesMarketingAuthorization>
  IntellectualPropertiesMedia: ResolverTypeWrapper<IntellectualPropertiesMedia>
  IntellectualPropertiesPCT: ResolverTypeWrapper<IntellectualPropertiesPct>
  IntellectualPropertiesPatent:
    | ResolversTypes['IntellectualPropertiesPatentEP']
    | ResolversTypes['IntellectualPropertiesPatentIS']
    | ResolversTypes['IntellectualPropertiesSPC']
  IntellectualPropertiesPatentEP: ResolverTypeWrapper<IntellectualPropertiesPatentEp>
  IntellectualPropertiesPatentIS: ResolverTypeWrapper<IntellectualPropertiesPatentIs>
  IntellectualPropertiesPerson: ResolverTypeWrapper<IntellectualPropertiesPerson>
  IntellectualPropertiesPriority: ResolverTypeWrapper<IntellectualPropertiesPriority>
  IntellectualPropertiesResponse: ResolverTypeWrapper<IntellectualPropertiesResponse>
  IntellectualPropertiesSPC: ResolverTypeWrapper<IntellectualPropertiesSpc>
  IntellectualPropertiesSpecification: ResolverTypeWrapper<IntellectualPropertiesSpecification>
  IntellectualPropertiesTrademark: ResolverTypeWrapper<IntellectualPropertiesTrademark>
  IntellectualProperty:
    | ResolversTypes['IntellectualPropertiesDesign']
    | ResolversTypes['IntellectualPropertiesPatentEP']
    | ResolversTypes['IntellectualPropertiesPatentIS']
    | ResolversTypes['IntellectualPropertiesSPC']
    | ResolversTypes['IntellectualPropertiesTrademark']
  IntroLinkImage: ResolverTypeWrapper<IntroLinkImage>
  IsHealthInsuredInput: IsHealthInsuredInput
  Items:
    | ResolversTypes['AnchorPage']
    | ResolversTypes['Article']
    | ResolversTypes['LifeEventPage']
    | ResolversTypes['Link']
    | ResolversTypes['Manual']
    | ResolversTypes['ManualChapterItem']
    | ResolversTypes['News']
    | ResolversTypes['OrganizationPage']
    | ResolversTypes['OrganizationSubpage']
    | ResolversTypes['ProjectPage']
    | ResolversTypes['SubArticle']
    | ResolversTypes['SupportQNA']
  JSON: ResolverTypeWrapper<Scalars['JSON']>
  JSONObject: ResolverTypeWrapper<Scalars['JSONObject']>
  JourneymanLicence: ResolverTypeWrapper<JourneymanLicence>
  JourneymanLicencesResponse: ResolverTypeWrapper<JourneymanLicencesResponse>
  LandModel: ResolverTypeWrapper<LandModel>
  LatestEventsSlice: ResolverTypeWrapper<LatestEventsSlice>
  LatestGenericListItems: ResolverTypeWrapper<
    Omit<LatestGenericListItems, 'seeMorePage'> & {
      seeMorePage?: Maybe<ResolversTypes['Page']>
    }
  >
  LatestNewsSlice: ResolverTypeWrapper<LatestNewsSlice>
  LawAndOrderAction: ResolverTypeWrapper<LawAndOrderAction>
  LawAndOrderActionTypeEnum: LawAndOrderActionTypeEnum
  LawAndOrderCourtCase: ResolverTypeWrapper<LawAndOrderCourtCase>
  LawAndOrderCourtCaseData: ResolverTypeWrapper<LawAndOrderCourtCaseData>
  LawAndOrderCourtCaseInput: LawAndOrderCourtCaseInput
  LawAndOrderCourtCaseStateTagColorEnum: LawAndOrderCourtCaseStateTagColorEnum
  LawAndOrderCourtCaseText: ResolverTypeWrapper<LawAndOrderCourtCaseText>
  LawAndOrderCourtCases: ResolverTypeWrapper<LawAndOrderCourtCases>
  LawAndOrderCourtCasesCase: ResolverTypeWrapper<LawAndOrderCourtCasesCase>
  LawAndOrderCourtCasesState: ResolverTypeWrapper<LawAndOrderCourtCasesState>
  LawAndOrderDefenseChoice: ResolverTypeWrapper<LawAndOrderDefenseChoice>
  LawAndOrderDefenseChoiceEnum: LawAndOrderDefenseChoiceEnum
  LawAndOrderDefenseChoiceInput: LawAndOrderDefenseChoiceInput
  LawAndOrderGroup: ResolverTypeWrapper<LawAndOrderGroup>
  LawAndOrderLawyer: ResolverTypeWrapper<LawAndOrderLawyer>
  LawAndOrderLawyerChoices: ResolverTypeWrapper<LawAndOrderLawyerChoices>
  LawAndOrderLawyers: ResolverTypeWrapper<LawAndOrderLawyers>
  LawAndOrderSubpoena: ResolverTypeWrapper<LawAndOrderSubpoena>
  LawAndOrderSubpoenaData: ResolverTypeWrapper<LawAndOrderSubpoenaData>
  LawAndOrderSubpoenaInput: LawAndOrderSubpoenaInput
  LawAndOrderSubpoenaItem: ResolverTypeWrapper<LawAndOrderSubpoenaItem>
  LawAndOrderSubpoenaTexts: ResolverTypeWrapper<LawAndOrderSubpoenaTexts>
  Lawyer: ResolverTypeWrapper<Lawyer>
  LicenseDriverLicenseData: ResolverTypeWrapper<LicenseDriverLicenseData>
  LifeEventPage: ResolverTypeWrapper<
    Omit<LifeEventPage, 'content'> & { content: Array<ResolversTypes['Slice']> }
  >
  Link: ResolverTypeWrapper<Link>
  LinkCard: ResolverTypeWrapper<LinkCard>
  LinkCardSection: ResolverTypeWrapper<LinkCardSection>
  LinkGroup: ResolverTypeWrapper<LinkGroup>
  LinkList: ResolverTypeWrapper<LinkList>
  ListStatus: ListStatus
  LogoListSlice: ResolverTypeWrapper<LogoListSlice>
  MachineDetails: ResolverTypeWrapper<MachineDetails>
  MalwareScanStatus: MalwareScanStatus
  Manual: ResolverTypeWrapper<
    Omit<Manual, 'description' | 'info'> & {
      description?: Maybe<Array<ResolversTypes['Slice']>>
      info?: Maybe<Array<ResolversTypes['Slice']>>
    }
  >
  ManualChapter: ResolverTypeWrapper<
    Omit<ManualChapter, 'description'> & {
      description?: Maybe<Array<ResolversTypes['Slice']>>
    }
  >
  ManualChapterChangelog: ResolverTypeWrapper<ManualChapterChangelog>
  ManualChapterChangelogItem: ResolverTypeWrapper<ManualChapterChangelogItem>
  ManualChapterItem: ResolverTypeWrapper<
    Omit<ManualChapterItem, 'content'> & {
      content?: Maybe<Array<ResolversTypes['Slice']>>
    }
  >
  ManualPageData: ResolverTypeWrapper<ManualPageData>
  ManyPropertyDetail: ResolverTypeWrapper<ManyPropertyDetail>
  MarkNotificationReadResponse: ResolverTypeWrapper<MarkNotificationReadResponse>
  MasterLicence: ResolverTypeWrapper<MasterLicence>
  MasterLicencesResponse: ResolverTypeWrapper<MasterLicencesResponse>
  Menu: ResolverTypeWrapper<Menu>
  MenuLink: ResolverTypeWrapper<MenuLink>
  MenuLinkWithChildren: ResolverTypeWrapper<MenuLinkWithChildren>
  MetadataInput: MetadataInput
  MortgageCertificateValidationModel: ResolverTypeWrapper<MortgageCertificateValidationModel>
  MultipleStatistics: ResolverTypeWrapper<MultipleStatistics>
  MunicipalitiesFinancialAidAmountModel: ResolverTypeWrapper<MunicipalitiesFinancialAidAmountModel>
  MunicipalitiesFinancialAidApplicationChildren: ResolverTypeWrapper<MunicipalitiesFinancialAidApplicationChildren>
  MunicipalitiesFinancialAidApplicationEventModel: ResolverTypeWrapper<MunicipalitiesFinancialAidApplicationEventModel>
  MunicipalitiesFinancialAidApplicationFileModel: ResolverTypeWrapper<MunicipalitiesFinancialAidApplicationFileModel>
  MunicipalitiesFinancialAidApplicationFilesInput: MunicipalitiesFinancialAidApplicationFilesInput
  MunicipalitiesFinancialAidApplicationInput: MunicipalitiesFinancialAidApplicationInput
  MunicipalitiesFinancialAidApplicationModel: ResolverTypeWrapper<MunicipalitiesFinancialAidApplicationModel>
  MunicipalitiesFinancialAidCreateFilesModel: ResolverTypeWrapper<MunicipalitiesFinancialAidCreateFilesModel>
  MunicipalitiesFinancialAidCreateSignedUrlInput: MunicipalitiesFinancialAidCreateSignedUrlInput
  MunicipalitiesFinancialAidDeductionFactorsModel: ResolverTypeWrapper<MunicipalitiesFinancialAidDeductionFactorsModel>
  MunicipalitiesFinancialAidGetSignedUrlInput: MunicipalitiesFinancialAidGetSignedUrlInput
  MunicipalitiesFinancialAidSignedUrlModel: ResolverTypeWrapper<MunicipalitiesFinancialAidSignedUrlModel>
  MunicipalitiesFinancialAidUpdateApplicationInput: MunicipalitiesFinancialAidUpdateApplicationInput
  Mutation: ResolverTypeWrapper<{}>
  MyPlateOwnershipChecksByRegno: ResolverTypeWrapper<MyPlateOwnershipChecksByRegno>
  Namespace: ResolverTypeWrapper<Namespace>
  NationalRegistryAddress: ResolverTypeWrapper<NationalRegistryAddress>
  NationalRegistryBanMarking: ResolverTypeWrapper<NationalRegistryBanMarking>
  NationalRegistryBirthplace: ResolverTypeWrapper<NationalRegistryBirthplace>
  NationalRegistryChild: ResolverTypeWrapper<NationalRegistryChild>
  NationalRegistryChildCustody: ResolverTypeWrapper<NationalRegistryChildCustody>
  NationalRegistryCitizenship: ResolverTypeWrapper<NationalRegistryCitizenship>
  NationalRegistryCustodian: ResolverTypeWrapper<NationalRegistryCustodian>
  NationalRegistryGender: NationalRegistryGender
  NationalRegistryHousing: ResolverTypeWrapper<NationalRegistryHousing>
  NationalRegistryMaritalStatus: NationalRegistryMaritalStatus
  NationalRegistryName: ResolverTypeWrapper<NationalRegistryName>
  NationalRegistryNationalIdType: NationalRegistryNationalIdType
  NationalRegistryPerson: ResolverTypeWrapper<NationalRegistryPerson>
  NationalRegistryPersonBase: ResolverTypeWrapper<NationalRegistryPersonBase>
  NationalRegistryReligion: ResolverTypeWrapper<NationalRegistryReligion>
  NationalRegistryResidence: ResolverTypeWrapper<NationalRegistryResidence>
  NationalRegistrySpouse: ResolverTypeWrapper<NationalRegistrySpouse>
  NationalRegistryUser: ResolverTypeWrapper<NationalRegistryUser>
  NationalRegistryXRoadAddress: ResolverTypeWrapper<NationalRegistryXRoadAddress>
  NationalRegistryXRoadBirthplace: ResolverTypeWrapper<NationalRegistryXRoadBirthplace>
  NationalRegistryXRoadChildGuardianship: ResolverTypeWrapper<NationalRegistryXRoadChildGuardianship>
  NationalRegistryXRoadChildGuardianshipInput: NationalRegistryXRoadChildGuardianshipInput
  NationalRegistryXRoadCitizenship: ResolverTypeWrapper<NationalRegistryXRoadCitizenship>
  NationalRegistryXRoadPerson: ResolverTypeWrapper<NationalRegistryXRoadPerson>
  NationalRegistryXRoadSpouse: ResolverTypeWrapper<NationalRegistryXRoadSpouse>
  News: ResolverTypeWrapper<
    Omit<News, 'content'> & { content?: Maybe<Array<ResolversTypes['Slice']>> }
  >
  NewsList: ResolverTypeWrapper<NewsList>
  NextInspection: ResolverTypeWrapper<NextInspection>
  Notification: ResolverTypeWrapper<Notification>
  NotificationLink: ResolverTypeWrapper<NotificationLink>
  NotificationMessage: ResolverTypeWrapper<NotificationMessage>
  NotificationMetadata: ResolverTypeWrapper<NotificationMetadata>
  NotificationRecipient: ResolverTypeWrapper<NotificationRecipient>
  NotificationResponse: ResolverTypeWrapper<NotificationResponse>
  NotificationSender: ResolverTypeWrapper<NotificationSender>
  Notifications: ResolverTypeWrapper<Notifications>
  NotificationsInput: NotificationsInput
  NotificationsMarkAllAsReadResponse: ResolverTypeWrapper<NotificationsMarkAllAsReadResponse>
  NotificationsMarkAllAsSeenResponse: ResolverTypeWrapper<NotificationsMarkAllAsSeenResponse>
  NumberBullet: ResolverTypeWrapper<NumberBullet>
  NumberBulletGroup: ResolverTypeWrapper<NumberBulletGroup>
  OJOIAApplicationCaseResponse: ResolverTypeWrapper<OjoiaApplicationCaseResponse>
  OJOIAComment: ResolverTypeWrapper<OjoiaComment>
  OJOIAGetCommentsInput: OjoiaGetCommentsInput
  OJOIAGetCommentsResponse: ResolverTypeWrapper<OjoiaGetCommentsResponse>
  OJOIAGetPdfResponse: ResolverTypeWrapper<OjoiaGetPdfResponse>
  OJOIAIdInput: OjoiaIdInput
  OJOIAPostCommentInput: OjoiaPostCommentInput
  OJOICommentActionEnum: OjoiCommentActionEnum
  OJOICommentDirection: OjoiCommentDirection
  OccupationalLicense: ResolverTypeWrapper<OccupationalLicense>
  OccupationalLicenseStatus: OccupationalLicenseStatus
  OccupationalLicensesError: ResolverTypeWrapper<OccupationalLicensesError>
  OccupationalLicensesGenericField: ResolverTypeWrapper<OccupationalLicensesGenericField>
  OccupationalLicensesLicenseInput: OccupationalLicensesLicenseInput
  OccupationalLicensesLicenseResponse: ResolverTypeWrapper<OccupationalLicensesLicenseResponse>
  OccupationalLicensesLicenseResult:
    | ResolversTypes['OccupationalLicense']
    | ResolversTypes['OccupationalLicensesError']
  OccupationalLicensesLicenses: ResolverTypeWrapper<
    Omit<OccupationalLicensesLicenses, 'licenses'> & {
      licenses: Array<ResolversTypes['OccupationalLicensesLicenseResult']>
    }
  >
  OccupationalLicensesLink: ResolverTypeWrapper<OccupationalLicensesLink>
  OccupationalLicensesLinkType: OccupationalLicensesLinkType
  OfficialJournalOfIcelandAdvert: ResolverTypeWrapper<OfficialJournalOfIcelandAdvert>
  OfficialJournalOfIcelandAdvertCategory: ResolverTypeWrapper<OfficialJournalOfIcelandAdvertCategory>
  OfficialJournalOfIcelandAdvertCorrections: ResolverTypeWrapper<OfficialJournalOfIcelandAdvertCorrections>
  OfficialJournalOfIcelandAdvertDocument: ResolverTypeWrapper<OfficialJournalOfIcelandAdvertDocument>
  OfficialJournalOfIcelandAdvertEntity: ResolverTypeWrapper<OfficialJournalOfIcelandAdvertEntity>
  OfficialJournalOfIcelandAdvertMainCategory: ResolverTypeWrapper<OfficialJournalOfIcelandAdvertMainCategory>
  OfficialJournalOfIcelandAdvertPublicationNumber: ResolverTypeWrapper<OfficialJournalOfIcelandAdvertPublicationNumber>
  OfficialJournalOfIcelandAdvertResponse: ResolverTypeWrapper<OfficialJournalOfIcelandAdvertResponse>
  OfficialJournalOfIcelandAdvertSimilar: ResolverTypeWrapper<OfficialJournalOfIcelandAdvertSimilar>
  OfficialJournalOfIcelandAdvertSimilarParams: OfficialJournalOfIcelandAdvertSimilarParams
  OfficialJournalOfIcelandAdvertSimilarResponse: ResolverTypeWrapper<OfficialJournalOfIcelandAdvertSimilarResponse>
  OfficialJournalOfIcelandAdvertSingleParams: OfficialJournalOfIcelandAdvertSingleParams
  OfficialJournalOfIcelandAdvertStatus: OfficialJournalOfIcelandAdvertStatus
  OfficialJournalOfIcelandAdvertTemplateInput: OfficialJournalOfIcelandAdvertTemplateInput
  OfficialJournalOfIcelandAdvertType: ResolverTypeWrapper<OfficialJournalOfIcelandAdvertType>
  OfficialJournalOfIcelandAdvertsCategoryResponse: ResolverTypeWrapper<OfficialJournalOfIcelandAdvertsCategoryResponse>
  OfficialJournalOfIcelandAdvertsDepartmentResponse: ResolverTypeWrapper<OfficialJournalOfIcelandAdvertsDepartmentResponse>
  OfficialJournalOfIcelandAdvertsDepartmentsResponse: ResolverTypeWrapper<OfficialJournalOfIcelandAdvertsDepartmentsResponse>
  OfficialJournalOfIcelandAdvertsInput: OfficialJournalOfIcelandAdvertsInput
  OfficialJournalOfIcelandAdvertsInstitutionsResponse: ResolverTypeWrapper<OfficialJournalOfIcelandAdvertsInstitutionsResponse>
  OfficialJournalOfIcelandAdvertsMainCategoriesResponse: ResolverTypeWrapper<OfficialJournalOfIcelandAdvertsMainCategoriesResponse>
  OfficialJournalOfIcelandAdvertsMainType: ResolverTypeWrapper<OfficialJournalOfIcelandAdvertsMainType>
  OfficialJournalOfIcelandAdvertsResponse: ResolverTypeWrapper<OfficialJournalOfIcelandAdvertsResponse>
  OfficialJournalOfIcelandAdvertsTypeResponse: ResolverTypeWrapper<OfficialJournalOfIcelandAdvertsTypeResponse>
  OfficialJournalOfIcelandAdvertsTypesResponse: ResolverTypeWrapper<OfficialJournalOfIcelandAdvertsTypesResponse>
  OfficialJournalOfIcelandApplicationAddApplicationAttachmentInput: OfficialJournalOfIcelandApplicationAddApplicationAttachmentInput
  OfficialJournalOfIcelandApplicationAddApplicationAttachmentResponse: ResolverTypeWrapper<OfficialJournalOfIcelandApplicationAddApplicationAttachmentResponse>
  OfficialJournalOfIcelandApplicationDeleteApplicationAttachmentInput: OfficialJournalOfIcelandApplicationDeleteApplicationAttachmentInput
  OfficialJournalOfIcelandApplicationGetApplicationAttachmentInput: OfficialJournalOfIcelandApplicationGetApplicationAttachmentInput
  OfficialJournalOfIcelandApplicationGetApplicationAttachmentResponse: ResolverTypeWrapper<OfficialJournalOfIcelandApplicationGetApplicationAttachmentResponse>
  OfficialJournalOfIcelandApplicationGetApplicationAttachments: ResolverTypeWrapper<OfficialJournalOfIcelandApplicationGetApplicationAttachments>
  OfficialJournalOfIcelandApplicationGetMyUserInfoResponse: ResolverTypeWrapper<OfficialJournalOfIcelandApplicationGetMyUserInfoResponse>
  OfficialJournalOfIcelandApplicationGetPdfUrlResponse: ResolverTypeWrapper<OfficialJournalOfIcelandApplicationGetPdfUrlResponse>
  OfficialJournalOfIcelandApplicationGetPresignedUrlInput: OfficialJournalOfIcelandApplicationGetPresignedUrlInput
  OfficialJournalOfIcelandApplicationGetPresignedUrlResponse: ResolverTypeWrapper<OfficialJournalOfIcelandApplicationGetPresignedUrlResponse>
  OfficialJournalOfIcelandApplicationGetPriceResponse: ResolverTypeWrapper<OfficialJournalOfIcelandApplicationGetPriceResponse>
  OfficialJournalOfIcelandApplicationGetUserInvolvedPartiesResponse: ResolverTypeWrapper<OfficialJournalOfIcelandApplicationGetUserInvolvedPartiesResponse>
  OfficialJournalOfIcelandApplicationGetUserInvolvedParty: ResolverTypeWrapper<OfficialJournalOfIcelandApplicationGetUserInvolvedParty>
  OfficialJournalOfIcelandApplicationInvolvedPartySignature: ResolverTypeWrapper<OfficialJournalOfIcelandApplicationInvolvedPartySignature>
  OfficialJournalOfIcelandApplicationInvolvedPartySignatureResponse: ResolverTypeWrapper<OfficialJournalOfIcelandApplicationInvolvedPartySignatureResponse>
  OfficialJournalOfIcelandApplicationInvolvedPartySignaturesInput: OfficialJournalOfIcelandApplicationInvolvedPartySignaturesInput
  OfficialJournalOfIcelandApplicationPostCommentResponse: ResolverTypeWrapper<OfficialJournalOfIcelandApplicationPostCommentResponse>
  OfficialJournalOfIcelandApplicationSignatureMember: ResolverTypeWrapper<OfficialJournalOfIcelandApplicationSignatureMember>
  OfficialJournalOfIcelandApplicationSignatureType: OfficialJournalOfIcelandApplicationSignatureType
  OfficialJournalOfIcelandCaseInProgress: ResolverTypeWrapper<OfficialJournalOfIcelandCaseInProgress>
  OfficialJournalOfIcelandCasesInProgressResponse: ResolverTypeWrapper<OfficialJournalOfIcelandCasesInProgressResponse>
  OfficialJournalOfIcelandMainTypesInput: OfficialJournalOfIcelandMainTypesInput
  OfficialJournalOfIcelandMainTypesResponse: ResolverTypeWrapper<OfficialJournalOfIcelandMainTypesResponse>
  OfficialJournalOfIcelandPaging: ResolverTypeWrapper<OfficialJournalOfIcelandPaging>
  OfficialJournalOfIcelandQueryInput: OfficialJournalOfIcelandQueryInput
  OfficialJournalOfIcelandTypesInput: OfficialJournalOfIcelandTypesInput
  OneColumnText: ResolverTypeWrapper<
    Omit<OneColumnText, 'content'> & {
      content?: Maybe<Array<ResolversTypes['Slice']>>
    }
  >
  OpenApi: ResolverTypeWrapper<OpenApi>
  OpenDataPage: ResolverTypeWrapper<OpenDataPage>
  OpenDataSubpage: ResolverTypeWrapper<OpenDataSubpage>
  OpenListInput: OpenListInput
  OperatingLicense: ResolverTypeWrapper<OperatingLicense>
  OperatingLicensesCSV: ResolverTypeWrapper<OperatingLicensesCsv>
  OperatorAnonymityStatus: OperatorAnonymityStatus
  OperatorChangeAnswers: OperatorChangeAnswers
  OperatorChangeAnswersMainOperator: OperatorChangeAnswersMainOperator
  OperatorChangeAnswersOperators: OperatorChangeAnswersOperators
  OperatorChangeAnswersPickVehicle: OperatorChangeAnswersPickVehicle
  OperatorChangeAnswersPlateDelivery: OperatorChangeAnswersPlateDelivery
  OperatorChangeAnswersUser: OperatorChangeAnswersUser
  OperatorChangeAnswersVehicleMileage: OperatorChangeAnswersVehicleMileage
  OperatorChangeValidation: ResolverTypeWrapper<OperatorChangeValidation>
  OperatorChangeValidationMessage: ResolverTypeWrapper<OperatorChangeValidationMessage>
  Order: Order
  Organisation: ResolverTypeWrapper<Organisation>
  Organization: ResolverTypeWrapper<Organization>
  OrganizationFund: ResolverTypeWrapper<OrganizationFund>
  OrganizationModelTypeEnum: OrganizationModelTypeEnum
  OrganizationPage: ResolverTypeWrapper<
    Omit<OrganizationPage, 'bottomSlices' | 'sidebarCards' | 'slices'> & {
      bottomSlices: Array<ResolversTypes['Slice']>
      sidebarCards?: Maybe<Array<ResolversTypes['Slice']>>
      slices: Array<ResolversTypes['Slice']>
    }
  >
  OrganizationPageStandaloneSitemap: ResolverTypeWrapper<OrganizationPageStandaloneSitemap>
  OrganizationPageStandaloneSitemapLevel2: ResolverTypeWrapper<OrganizationPageStandaloneSitemapLevel2>
  OrganizationPageStandaloneSitemapLevel2Category: ResolverTypeWrapper<OrganizationPageStandaloneSitemapLevel2Category>
  OrganizationPageStandaloneSitemapLevel2Link: ResolverTypeWrapper<OrganizationPageStandaloneSitemapLevel2Link>
  OrganizationPageStandaloneSitemapLink: ResolverTypeWrapper<OrganizationPageStandaloneSitemapLink>
  OrganizationPageTopLevelNavigation: ResolverTypeWrapper<OrganizationPageTopLevelNavigation>
  OrganizationPageTopLevelNavigationLink: ResolverTypeWrapper<OrganizationPageTopLevelNavigationLink>
  OrganizationParentSubpage: ResolverTypeWrapper<OrganizationParentSubpage>
  OrganizationParentSubpageList: ResolverTypeWrapper<OrganizationParentSubpageList>
  OrganizationParentSubpageListPageLink: ResolverTypeWrapper<OrganizationParentSubpageListPageLink>
  OrganizationParentSubpageListVariant: OrganizationParentSubpageListVariant
  OrganizationSubpage: ResolverTypeWrapper<
    Omit<OrganizationSubpage, 'bottomSlices' | 'description' | 'slices'> & {
      bottomSlices?: Maybe<Array<ResolversTypes['Slice']>>
      description?: Maybe<Array<ResolversTypes['Slice']>>
      slices?: Maybe<Array<ResolversTypes['Slice']>>
    }
  >
  OrganizationSubpageLink: ResolverTypeWrapper<OrganizationSubpageLink>
  OrganizationTag: ResolverTypeWrapper<OrganizationTag>
  OrganizationTags: ResolverTypeWrapper<OrganizationTags>
  OrganizationTheme: ResolverTypeWrapper<OrganizationTheme>
  Organizations: ResolverTypeWrapper<Organizations>
  OverviewLinks: ResolverTypeWrapper<OverviewLinks>
  OverviewLinksLinkData: ResolverTypeWrapper<OverviewLinksLinkData>
  OverviewLinksLinkDataCategoryCardItem: ResolverTypeWrapper<OverviewLinksLinkDataCategoryCardItem>
  OverviewLinksLinkDataVariant: OverviewLinksLinkDataVariant
  OwnerChangeAnswers: OwnerChangeAnswers
  OwnerChangeAnswersBuyerOrCoOwner: OwnerChangeAnswersBuyerOrCoOwner
  OwnerChangeAnswersInsurance: OwnerChangeAnswersInsurance
  OwnerChangeAnswersMainOperator: OwnerChangeAnswersMainOperator
  OwnerChangeAnswersPickVehicle: OwnerChangeAnswersPickVehicle
  OwnerChangeAnswersUser: OwnerChangeAnswersUser
  OwnerChangeAnswersVehicle: OwnerChangeAnswersVehicle
  OwnerChangeAnswersVehicleMileage: OwnerChangeAnswersVehicleMileage
  OwnerChangeValidation: ResolverTypeWrapper<OwnerChangeValidation>
  OwnerChangeValidationMessage: ResolverTypeWrapper<OwnerChangeValidationMessage>
  Page:
    | ResolversTypes['AnchorPage']
    | ResolversTypes['Article']
    | ResolversTypes['ArticleCategory']
    | ResolversTypes['LifeEventPage']
    | ResolversTypes['News']
    | ResolversTypes['OrganizationPage']
    | ResolversTypes['OrganizationSubpage']
    | ResolversTypes['ProjectPage']
    | ResolversTypes['SubArticle']
  PageInfo: ResolverTypeWrapper<PageInfo>
  PageInfoDto: ResolverTypeWrapper<PageInfoDto>
  PageInfoResponse: ResolverTypeWrapper<PageInfoResponse>
  PaginatedEndorsementInput: PaginatedEndorsementInput
  PaginatedEndorsementListInput: PaginatedEndorsementListInput
  PaginatedEndorsementListResponse: ResolverTypeWrapper<PaginatedEndorsementListResponse>
  PaginatedEndorsementResponse: ResolverTypeWrapper<PaginatedEndorsementResponse>
  PaginatedOperatingLicenses: ResolverTypeWrapper<PaginatedOperatingLicenses>
  PaginationInfo: ResolverTypeWrapper<PaginationInfo>
  PagingData: ResolverTypeWrapper<PagingData>
  PaperMailBody: ResolverTypeWrapper<PaperMailBody>
  ParentalLeave: ResolverTypeWrapper<ParentalLeave>
  ParentalLeaveAttachment: ResolverTypeWrapper<ParentalLeaveAttachment>
  ParentalLeaveEmployer: ResolverTypeWrapper<ParentalLeaveEmployer>
  ParentalLeaveEntitlement: ResolverTypeWrapper<ParentalLeaveEntitlement>
  ParentalLeavePaymentInfo: ResolverTypeWrapper<ParentalLeavePaymentInfo>
  ParentalLeavePaymentPlan: ResolverTypeWrapper<ParentalLeavePaymentPlan>
  ParentalLeavePensionFund: ResolverTypeWrapper<ParentalLeavePensionFund>
  ParentalLeavePeriod: ResolverTypeWrapper<ParentalLeavePeriod>
  ParentalLeavePeriodEndDate: ResolverTypeWrapper<ParentalLeavePeriodEndDate>
  ParentalLeavePeriodLength: ResolverTypeWrapper<ParentalLeavePeriodLength>
  ParentalLeaveUnion: ResolverTypeWrapper<ParentalLeaveUnion>
  Passport: ResolverTypeWrapper<Passport>
  PatchAuthConsentInput: PatchAuthConsentInput
  PatchAuthDelegationInput: PatchAuthDelegationInput
  Payload: ResolverTypeWrapper<Payload>
  PaymentCatalogInput: PaymentCatalogInput
  PaymentCatalogItem: ResolverTypeWrapper<PaymentCatalogItem>
  PaymentCatalogResponse: ResolverTypeWrapper<PaymentCatalogResponse>
  PaymentSchedule: ResolverTypeWrapper<PaymentSchedule>
  PaymentScheduleCharge: ResolverTypeWrapper<PaymentScheduleCharge>
  PaymentScheduleCompanyConditions: ResolverTypeWrapper<PaymentScheduleCompanyConditions>
  PaymentScheduleConditions: ResolverTypeWrapper<PaymentScheduleConditions>
  PaymentScheduleData: ResolverTypeWrapper<PaymentScheduleData>
  PaymentScheduleDebts: ResolverTypeWrapper<PaymentScheduleDebts>
  PaymentScheduleDetailData: ResolverTypeWrapper<PaymentScheduleDetailData>
  PaymentScheduleDetailModel: ResolverTypeWrapper<PaymentScheduleDetailModel>
  PaymentScheduleDistribution: ResolverTypeWrapper<PaymentScheduleDistribution>
  PaymentScheduleEmployer: ResolverTypeWrapper<PaymentScheduleEmployer>
  PaymentScheduleInitialSchedule: ResolverTypeWrapper<PaymentScheduleInitialSchedule>
  PaymentScheduleModel: ResolverTypeWrapper<PaymentScheduleModel>
  PaymentSchedulePayment: ResolverTypeWrapper<PaymentSchedulePayment>
  PaymentScheduleType: PaymentScheduleType
  PaymentsCardInformation: ResolverTypeWrapper<PaymentsCardInformation>
  PaymentsCardVerificationCallbackInput: PaymentsCardVerificationCallbackInput
  PaymentsCardVerificationField: ResolverTypeWrapper<PaymentsCardVerificationField>
  PaymentsCardVerificationResponse: ResolverTypeWrapper<PaymentsCardVerificationResponse>
  PaymentsChargeCardInput: PaymentsChargeCardInput
  PaymentsChargeCardResponse: ResolverTypeWrapper<PaymentsChargeCardResponse>
  PaymentsCreateInvoiceInput: PaymentsCreateInvoiceInput
  PaymentsCreateInvoiceResponse: ResolverTypeWrapper<PaymentsCreateInvoiceResponse>
  PaymentsGetFlowPaymentStatus: PaymentsGetFlowPaymentStatus
  PaymentsGetPaymentFlowResponse: ResolverTypeWrapper<PaymentsGetPaymentFlowResponse>
  PaymentsGetVerificationStatus: ResolverTypeWrapper<PaymentsGetVerificationStatus>
  PaymentsVerifyCardInput: PaymentsVerifyCardInput
  PaymentsVerifyCardResponse: ResolverTypeWrapper<PaymentsVerifyCardResponse>
  PendingAction: ResolverTypeWrapper<PendingAction>
  PensionFund: ResolverTypeWrapper<PensionFund>
  Period: Period
  PeriodItems: ResolverTypeWrapper<PeriodItems>
  PeriodsModel: ResolverTypeWrapper<PeriodsModel>
  PlateAvailability: ResolverTypeWrapper<PlateAvailability>
  PlateAvailabilityInput: PlateAvailabilityInput
  PlateOrderAnswers: PlateOrderAnswers
  PlateOrderAnswersPickVehicle: PlateOrderAnswersPickVehicle
  PlateOrderAnswersPlateSize: PlateOrderAnswersPlateSize
  PlateOrderValidation: ResolverTypeWrapper<PlateOrderValidation>
  PlateOrderValidationMessage: ResolverTypeWrapper<PlateOrderValidationMessage>
  PostBulkMailActionResolverInput: PostBulkMailActionResolverInput
  PostMailActionResolverInput: PostMailActionResolverInput
  PostRequestPaperInput: PostRequestPaperInput
  PostVehicleBulkMileageInput: PostVehicleBulkMileageInput
  PostVehicleBulkMileageSingleInput: PostVehicleBulkMileageSingleInput
  PostVehicleMileageInput: PostVehicleMileageInput
  PowerBiSlice: ResolverTypeWrapper<PowerBiSlice>
  PracticalDrivingLesson: ResolverTypeWrapper<PracticalDrivingLesson>
  PracticalDrivingLessonsInput: PracticalDrivingLessonsInput
  PregnancyStatus: ResolverTypeWrapper<PregnancyStatus>
  PresignedPost: ResolverTypeWrapper<PresignedPost>
  PresignedUrlResponse: ResolverTypeWrapper<PresignedUrlResponse>
  PricingCategory: PricingCategory
  ProcessEntry: ResolverTypeWrapper<ProcessEntry>
  ProfessionRight: ResolverTypeWrapper<ProfessionRight>
  ProfessionRightsResponse: ResolverTypeWrapper<ProfessionRightsResponse>
  ProjectPage: ResolverTypeWrapper<
    Omit<ProjectPage, 'bottomSlices' | 'content' | 'slices'> & {
      bottomSlices: Array<ResolversTypes['Slice']>
      content?: Maybe<Array<ResolversTypes['Slice']>>
      slices: Array<ResolversTypes['Slice']>
    }
  >
  ProjectPageThemeProperties: ResolverTypeWrapper<ProjectPageThemeProperties>
  ProjectSubpage: ResolverTypeWrapper<
    Omit<ProjectSubpage, 'bottomSlices' | 'content' | 'slices'> & {
      bottomSlices?: Maybe<Array<ResolversTypes['Slice']>>
      content?: Maybe<Array<ResolversTypes['Slice']>>
      slices: Array<ResolversTypes['Slice']>
    }
  >
  Properties: Properties
  PropertyDetail: ResolverTypeWrapper<PropertyDetail>
  PropertyLocation: ResolverTypeWrapper<PropertyLocation>
  PropertyOverview: ResolverTypeWrapper<PropertyOverview>
  PropertyOwner: ResolverTypeWrapper<PropertyOwner>
  PropertyOwnersModel: ResolverTypeWrapper<PropertyOwnersModel>
  Provider: ResolverTypeWrapper<Provider>
  ProviderStatistics: ResolverTypeWrapper<ProviderStatistics>
  PutVehicleMileageInput: PutVehicleMileageInput
  Query: ResolverTypeWrapper<{}>
  QuestionAndAnswer: ResolverTypeWrapper<
    Omit<QuestionAndAnswer, 'answer'> & {
      answer: Array<ResolversTypes['Slice']>
    }
  >
  RealEstateAgent: ResolverTypeWrapper<RealEstateAgent>
  RealEstateDetail: ResolverTypeWrapper<RealEstateDetail>
  ReferenceLink: ResolverTypeWrapper<ReferenceLink>
  RegistryPerson: ResolverTypeWrapper<RegistryPerson>
  RegulationAuthor: ResolverTypeWrapper<RegulationAuthor>
  RegulationShippedAuthor: ResolverTypeWrapper<RegulationShippedAuthor>
  RegulationSummaryAuthor: ResolverTypeWrapper<RegulationSummaryAuthor>
  RegulationViewTypes: RegulationViewTypes
  ReligiousOrganization: ResolverTypeWrapper<ReligiousOrganization>
  ReligiousOrganizationsResponse: ResolverTypeWrapper<ReligiousOrganizationsResponse>
  RequestCorrectionOnMortgageCertificateInput: RequestCorrectionOnMortgageCertificateInput
  RequestCorrectionOnMortgageCertificateModel: ResolverTypeWrapper<RequestCorrectionOnMortgageCertificateModel>
  RequirementKey: RequirementKey
  Response: ResolverTypeWrapper<Response>
  RightsPortalAddress: ResolverTypeWrapper<RightsPortalAddress>
  RightsPortalAidOrNutrition: ResolverTypeWrapper<RightsPortalAidOrNutrition>
  RightsPortalAidOrNutritionRefund: ResolverTypeWrapper<RightsPortalAidOrNutritionRefund>
  RightsPortalAidOrNutritionRenewalStatus: RightsPortalAidOrNutritionRenewalStatus
  RightsPortalAidOrNutritionType: RightsPortalAidOrNutritionType
  RightsPortalCalculatorRequest: RightsPortalCalculatorRequest
  RightsPortalCalculatorRequestInput: RightsPortalCalculatorRequestInput
  RightsPortalCopaymentBill: ResolverTypeWrapper<RightsPortalCopaymentBill>
  RightsPortalCopaymentBillResponse: ResolverTypeWrapper<RightsPortalCopaymentBillResponse>
  RightsPortalCopaymentBillsInput: RightsPortalCopaymentBillsInput
  RightsPortalCopaymentInsuranceStatus: ResolverTypeWrapper<RightsPortalCopaymentInsuranceStatus>
  RightsPortalCopaymentPeriod: ResolverTypeWrapper<RightsPortalCopaymentPeriod>
  RightsPortalCopaymentPeriodInput: RightsPortalCopaymentPeriodInput
  RightsPortalCopaymentPeriodResponse: ResolverTypeWrapper<RightsPortalCopaymentPeriodResponse>
  RightsPortalCopaymentStatus: ResolverTypeWrapper<RightsPortalCopaymentStatus>
  RightsPortalDentist: ResolverTypeWrapper<RightsPortalDentist>
  RightsPortalDentistBill: ResolverTypeWrapper<RightsPortalDentistBill>
  RightsPortalDentistBillsInput: RightsPortalDentistBillsInput
  RightsPortalDentistPractice: ResolverTypeWrapper<RightsPortalDentistPractice>
  RightsPortalDentistRegisterInput: RightsPortalDentistRegisterInput
  RightsPortalDentistRegisterResponse: ResolverTypeWrapper<RightsPortalDentistRegisterResponse>
  RightsPortalDentistStatus: ResolverTypeWrapper<RightsPortalDentistStatus>
  RightsPortalDentistsInput: RightsPortalDentistsInput
  RightsPortalDrug: ResolverTypeWrapper<RightsPortalDrug>
  RightsPortalDrugBill: ResolverTypeWrapper<RightsPortalDrugBill>
  RightsPortalDrugBillInput: RightsPortalDrugBillInput
  RightsPortalDrugBillLine: ResolverTypeWrapper<RightsPortalDrugBillLine>
  RightsPortalDrugCalculation: ResolverTypeWrapper<RightsPortalDrugCalculation>
  RightsPortalDrugCalculatorInput: RightsPortalDrugCalculatorInput
  RightsPortalDrugCalculatorResponse: ResolverTypeWrapper<RightsPortalDrugCalculatorResponse>
  RightsPortalDrugCertificate: ResolverTypeWrapper<RightsPortalDrugCertificate>
  RightsPortalDrugCertificateInput: RightsPortalDrugCertificateInput
  RightsPortalDrugInput: RightsPortalDrugInput
  RightsPortalDrugPeriod: ResolverTypeWrapper<RightsPortalDrugPeriod>
  RightsPortalDrugsBillLineInput: RightsPortalDrugsBillLineInput
  RightsPortalHealthCenter: ResolverTypeWrapper<RightsPortalHealthCenter>
  RightsPortalHealthCenterDoctors: ResolverTypeWrapper<RightsPortalHealthCenterDoctors>
  RightsPortalHealthCenterDoctorsInput: RightsPortalHealthCenterDoctorsInput
  RightsPortalHealthCenterHistoryInput: RightsPortalHealthCenterHistoryInput
  RightsPortalHealthCenterRecord: ResolverTypeWrapper<RightsPortalHealthCenterRecord>
  RightsPortalHealthCenterRegisterInput: RightsPortalHealthCenterRegisterInput
  RightsPortalHealthCenterRegisterResponse: ResolverTypeWrapper<RightsPortalHealthCenterRegisterResponse>
  RightsPortalHealthCenterRegistrationHistory: ResolverTypeWrapper<RightsPortalHealthCenterRegistrationHistory>
  RightsPortalInsuranceConfirmation: ResolverTypeWrapper<RightsPortalInsuranceConfirmation>
  RightsPortalInsuranceOverview: ResolverTypeWrapper<RightsPortalInsuranceOverview>
  RightsPortalInsuranceStatus: ResolverTypeWrapper<RightsPortalInsuranceStatus>
  RightsPortalInsuranceStatusType: RightsPortalInsuranceStatusType
  RightsPortalMethylDoctor: ResolverTypeWrapper<RightsPortalMethylDoctor>
  RightsPortalPaginatedAidsOrNutrition: ResolverTypeWrapper<RightsPortalPaginatedAidsOrNutrition>
  RightsPortalPaginatedDentists: ResolverTypeWrapper<RightsPortalPaginatedDentists>
  RightsPortalPaginatedDrug: ResolverTypeWrapper<RightsPortalPaginatedDrug>
  RightsPortalPaginatedHealthCenters: ResolverTypeWrapper<RightsPortalPaginatedHealthCenters>
  RightsPortalPaginatedTherapies: ResolverTypeWrapper<RightsPortalPaginatedTherapies>
  RightsPortalPaymentError: ResolverTypeWrapper<RightsPortalPaymentError>
  RightsPortalPaymentErrorStatus: RightsPortalPaymentErrorStatus
  RightsPortalPaymentOverview: ResolverTypeWrapper<RightsPortalPaymentOverview>
  RightsPortalPaymentOverviewBill: ResolverTypeWrapper<RightsPortalPaymentOverviewBill>
  RightsPortalPaymentOverviewDocument: ResolverTypeWrapper<RightsPortalPaymentOverviewDocument>
  RightsPortalPaymentOverviewDocumentInput: RightsPortalPaymentOverviewDocumentInput
  RightsPortalPaymentOverviewDocumentResponse: ResolverTypeWrapper<RightsPortalPaymentOverviewDocumentResponse>
  RightsPortalPaymentOverviewInput: RightsPortalPaymentOverviewInput
  RightsPortalPaymentOverviewResponse: ResolverTypeWrapper<RightsPortalPaymentOverviewResponse>
  RightsPortalPaymentOverviewServiceType: ResolverTypeWrapper<RightsPortalPaymentOverviewServiceType>
  RightsPortalPaymentOverviewServiceTypeResponse: ResolverTypeWrapper<RightsPortalPaymentOverviewServiceTypeResponse>
  RightsPortalTherapy: ResolverTypeWrapper<RightsPortalTherapy>
  RightsPortalTherapyPeriod: ResolverTypeWrapper<RightsPortalTherapyPeriod>
  RightsPortalTherapySession: ResolverTypeWrapper<RightsPortalTherapySession>
  RightsPortalTherapyState: ResolverTypeWrapper<RightsPortalTherapyState>
  RightsPortalUserDentistInformation: ResolverTypeWrapper<RightsPortalUserDentistInformation>
  RightsPortalUserDentistRegistration: ResolverTypeWrapper<RightsPortalUserDentistRegistration>
  RskCompany: ResolverTypeWrapper<RskCompany>
  RskCompanyAddress: ResolverTypeWrapper<RskCompanyAddress>
  RskCompanyClassification: ResolverTypeWrapper<RskCompanyClassification>
  RskCompanyFormOfOperation: ResolverTypeWrapper<RskCompanyFormOfOperation>
  RskCompanyInfo: ResolverTypeWrapper<RskCompanyInfo>
  RskCompanyInfoInput: RskCompanyInfoInput
  RskCompanyInfoSearchInput: RskCompanyInfoSearchInput
  RskCompanyRelatedParty: ResolverTypeWrapper<RskCompanyRelatedParty>
  RskCompanySearchItems: ResolverTypeWrapper<RskCompanySearchItems>
  RskCompanyVat: ResolverTypeWrapper<RskCompanyVat>
  RunEndpointTestsInput: RunEndpointTestsInput
  ScopeInput: ScopeInput
  ScopesInput: ScopesInput
  SearchForPropertyInput: SearchForPropertyInput
  SearchResult: ResolverTypeWrapper<
    Omit<SearchResult, 'items'> & { items: Array<ResolversTypes['Items']> }
  >
  SearchableContentTypes: SearchableContentTypes
  SearchableTags: SearchableTags
  SearcherInput: SearcherInput
  SecondarySchoolProgram: ResolverTypeWrapper<SecondarySchoolProgram>
  SectionWithImage: ResolverTypeWrapper<
    Omit<SectionWithImage, 'content'> & {
      content?: Maybe<Array<ResolversTypes['Slice']>>
    }
  >
  SectionWithVideo: ResolverTypeWrapper<SectionWithVideo>
  SeminarIndividual: SeminarIndividual
  SeminarsCompanyValidationItem: ResolverTypeWrapper<SeminarsCompanyValidationItem>
  SeminarsIndividualValidationItem: ResolverTypeWrapper<SeminarsIndividualValidationItem>
  Service: ResolverTypeWrapper<Service>
  ServiceDetail: ResolverTypeWrapper<ServiceDetail>
  ServiceEnvironment: ResolverTypeWrapper<ServiceEnvironment>
  ServiceWebFormsInput: ServiceWebFormsInput
  ServiceWebPage: ResolverTypeWrapper<
    Omit<ServiceWebPage, 'contactFormDisclaimer' | 'slices'> & {
      contactFormDisclaimer?: Maybe<Array<ResolversTypes['Slice']>>
      slices: Array<ResolversTypes['Slice']>
    }
  >
  ServiceWebPageEmailConfig: ResolverTypeWrapper<ServiceWebPageEmailConfig>
  ServiceWebPageEmailConfigItem: ResolverTypeWrapper<ServiceWebPageEmailConfigItem>
  SessionsInput: SessionsInput
  SessionsPaginatedSessionResponse: ResolverTypeWrapper<SessionsPaginatedSessionResponse>
  SessionsSession: ResolverTypeWrapper<SessionsSession>
  ShipDetail: ResolverTypeWrapper<ShipDetail>
  ShipMeasurements: ResolverTypeWrapper<ShipMeasurements>
  ShipRegistryShip: ResolverTypeWrapper<ShipRegistryShip>
  ShipRegistryShipOwner: ResolverTypeWrapper<ShipRegistryShipOwner>
  ShipRegistryShipSearch: ResolverTypeWrapper<ShipRegistryShipSearch>
  ShipRegistryShipSearchInput: ShipRegistryShipSearchInput
  SidebarCard: ResolverTypeWrapper<SidebarCard>
  SignatureCollection: ResolverTypeWrapper<SignatureCollection>
  SignatureCollectionAddListsInput: SignatureCollectionAddListsInput
  SignatureCollectionArea: ResolverTypeWrapper<SignatureCollectionArea>
  SignatureCollectionAreaBase: ResolverTypeWrapper<SignatureCollectionAreaBase>
  SignatureCollectionAreaInput: SignatureCollectionAreaInput
  SignatureCollectionAreaSummaryReport: ResolverTypeWrapper<SignatureCollectionAreaSummaryReport>
  SignatureCollectionAreaSummaryReportInput: SignatureCollectionAreaSummaryReportInput
  SignatureCollectionBulk: ResolverTypeWrapper<SignatureCollectionBulk>
  SignatureCollectionCanSignFromPaperInput: SignatureCollectionCanSignFromPaperInput
  SignatureCollectionCancelListsInput: SignatureCollectionCancelListsInput
  SignatureCollectionCandidate: ResolverTypeWrapper<SignatureCollectionCandidate>
  SignatureCollectionCandidateIdInput: SignatureCollectionCandidateIdInput
  SignatureCollectionCandidateLookUp: ResolverTypeWrapper<SignatureCollectionCandidateLookUp>
  SignatureCollectionCollectionType: SignatureCollectionCollectionType
  SignatureCollectionCollector: ResolverTypeWrapper<SignatureCollectionCollector>
  SignatureCollectionExtendDeadlineInput: SignatureCollectionExtendDeadlineInput
  SignatureCollectionIdInput: SignatureCollectionIdInput
  SignatureCollectionList: ResolverTypeWrapper<SignatureCollectionList>
  SignatureCollectionListBase: ResolverTypeWrapper<SignatureCollectionListBase>
  SignatureCollectionListBulkUploadInput: SignatureCollectionListBulkUploadInput
  SignatureCollectionListIdInput: SignatureCollectionListIdInput
  SignatureCollectionListInput: SignatureCollectionListInput
  SignatureCollectionListNationalIdsInput: SignatureCollectionListNationalIdsInput
  SignatureCollectionListStatus: ResolverTypeWrapper<SignatureCollectionListStatus>
  SignatureCollectionListSummary: ResolverTypeWrapper<SignatureCollectionListSummary>
  SignatureCollectionNationalIdInput: SignatureCollectionNationalIdInput
  SignatureCollectionNationalIds: ResolverTypeWrapper<SignatureCollectionNationalIds>
  SignatureCollectionNationalIdsInput: SignatureCollectionNationalIdsInput
  SignatureCollectionOwnedList: ResolverTypeWrapper<SignatureCollectionOwnedList>
  SignatureCollectionOwnerInput: SignatureCollectionOwnerInput
  SignatureCollectionSignature: ResolverTypeWrapper<SignatureCollectionSignature>
  SignatureCollectionSignatureIdInput: SignatureCollectionSignatureIdInput
  SignatureCollectionSignatureLookupInput: SignatureCollectionSignatureLookupInput
  SignatureCollectionSignatureUpdateInput: SignatureCollectionSignatureUpdateInput
  SignatureCollectionSignedList: ResolverTypeWrapper<SignatureCollectionSignedList>
  SignatureCollectionSignee: ResolverTypeWrapper<SignatureCollectionSignee>
  SignatureCollectionSigneeBase: ResolverTypeWrapper<SignatureCollectionSigneeBase>
  SignatureCollectionSlug: ResolverTypeWrapper<SignatureCollectionSlug>
  SignatureCollectionSuccess: ResolverTypeWrapper<SignatureCollectionSuccess>
  SignatureCollectionUploadPaperSignatureInput: SignatureCollectionUploadPaperSignatureInput
  SimpleProperties: ResolverTypeWrapper<SimpleProperties>
  Slice:
    | ResolversTypes['AccordionSlice']
    | ResolversTypes['AnchorPageListSlice']
    | ResolversTypes['Asset']
    | ResolversTypes['BulletListSlice']
    | ResolversTypes['Chart']
    | ResolversTypes['ChartComponent']
    | ResolversTypes['ChartNumberBox']
    | ResolversTypes['ConnectedComponent']
    | ResolversTypes['ContactUs']
    | ResolversTypes['Districts']
    | ResolversTypes['EmailSignup']
    | ResolversTypes['Embed']
    | ResolversTypes['EmbeddedVideo']
    | ResolversTypes['EventSlice']
    | ResolversTypes['FaqList']
    | ResolversTypes['FeaturedArticles']
    | ResolversTypes['FeaturedEvents']
    | ResolversTypes['FeaturedLinks']
    | ResolversTypes['FeaturedSupportQNAs']
    | ResolversTypes['Form']
    | ResolversTypes['GenericList']
    | ResolversTypes['GrantCardsList']
    | ResolversTypes['GraphCard']
    | ResolversTypes['HeadingSlice']
    | ResolversTypes['Html']
    | ResolversTypes['Image']
    | ResolversTypes['IntroLinkImage']
    | ResolversTypes['LatestEventsSlice']
    | ResolversTypes['LatestGenericListItems']
    | ResolversTypes['LatestNewsSlice']
    | ResolversTypes['LinkCard']
    | ResolversTypes['LinkCardSection']
    | ResolversTypes['LogoListSlice']
    | ResolversTypes['MultipleStatistics']
    | ResolversTypes['OneColumnText']
    | ResolversTypes['OrganizationParentSubpageList']
    | ResolversTypes['OverviewLinks']
    | ResolversTypes['PowerBiSlice']
    | ResolversTypes['ProcessEntry']
    | ResolversTypes['SectionWithImage']
    | ResolversTypes['SectionWithVideo']
    | ResolversTypes['SidebarCard']
    | ResolversTypes['SliceDropdown']
    | ResolversTypes['Statistics']
    | ResolversTypes['Stepper']
    | ResolversTypes['StorySlice']
    | ResolversTypes['TabSection']
    | ResolversTypes['TableSlice']
    | ResolversTypes['TeamList']
    | ResolversTypes['TellUsAStory']
    | ResolversTypes['TimelineSlice']
    | ResolversTypes['TwoColumnText']
  SliceDropdown: ResolverTypeWrapper<SliceDropdown>
  SocialInsuranceIncomePlan: ResolverTypeWrapper<SocialInsuranceIncomePlan>
  SocialInsuranceIncomePlanEligbility: ResolverTypeWrapper<SocialInsuranceIncomePlanEligbility>
  SocialInsuranceIncomePlanIncomeCategory: ResolverTypeWrapper<SocialInsuranceIncomePlanIncomeCategory>
  SocialInsuranceIncomePlanStatus: SocialInsuranceIncomePlanStatus
  SocialInsuranceIncomeType: SocialInsuranceIncomeType
  SocialInsurancePayment: ResolverTypeWrapper<SocialInsurancePayment>
  SocialInsurancePaymentGroup: ResolverTypeWrapper<SocialInsurancePaymentGroup>
  SocialInsurancePaymentGroupType: SocialInsurancePaymentGroupType
  SocialInsurancePaymentMonth: ResolverTypeWrapper<SocialInsurancePaymentMonth>
  SocialInsurancePaymentPlan: ResolverTypeWrapper<SocialInsurancePaymentPlan>
  SocialInsurancePayments: ResolverTypeWrapper<SocialInsurancePayments>
  SocialInsurancePensionCalculationBasePensionType: SocialInsurancePensionCalculationBasePensionType
  SocialInsurancePensionCalculationInput: SocialInsurancePensionCalculationInput
  SocialInsurancePensionCalculationLivingCondition: SocialInsurancePensionCalculationLivingCondition
  SocialInsurancePensionCalculationPeriodIncomeType: SocialInsurancePensionCalculationPeriodIncomeType
  SocialInsurancePensionCalculationResponse: ResolverTypeWrapper<SocialInsurancePensionCalculationResponse>
  SocialInsurancePensionCalculationResponseItem: ResolverTypeWrapper<SocialInsurancePensionCalculationResponseItem>
  SocialInsurancePensionCalculationResponseItemGroup: ResolverTypeWrapper<SocialInsurancePensionCalculationResponseItemGroup>
  SocialInsuranceTemporaryCalculation: ResolverTypeWrapper<SocialInsuranceTemporaryCalculation>
  SocialInsuranceTemporaryCalculationGroup: ResolverTypeWrapper<SocialInsuranceTemporaryCalculationGroup>
  SocialInsuranceTemporaryCalculationInput: SocialInsuranceTemporaryCalculationInput
  SocialInsuranceTemporaryCalculationMonth: ResolverTypeWrapper<SocialInsuranceTemporaryCalculationMonth>
  SocialInsuranceTemporaryCalculationRow: ResolverTypeWrapper<SocialInsuranceTemporaryCalculationRow>
  SortDirection: SortDirection
  SortField: SortField
  Statistic: ResolverTypeWrapper<Statistic>
  StatisticKeyValue: ResolverTypeWrapper<StatisticKeyValue>
  Statistics: ResolverTypeWrapper<Statistics>
  StatisticsCard: ResolverTypeWrapper<StatisticsCard>
  StatisticsForHeader: ResolverTypeWrapper<StatisticsForHeader>
  StatisticsInput: StatisticsInput
  StatisticsQueryInput: StatisticsQueryInput
  StatisticsQueryResponse: ResolverTypeWrapper<StatisticsQueryResponse>
  Step: ResolverTypeWrapper<
    Omit<Step, 'subtitle'> & {
      subtitle?: Maybe<Array<ResolversTypes['Slice']>>
    }
  >
  Stepper: ResolverTypeWrapper<Stepper>
  Story: ResolverTypeWrapper<Story>
  StorySlice: ResolverTypeWrapper<StorySlice>
  String: ResolverTypeWrapper<Scalars['String']>
  StudentAssessment: ResolverTypeWrapper<StudentAssessment>
  StudentCanGetPracticePermit: ResolverTypeWrapper<StudentCanGetPracticePermit>
  StudentCanGetPracticePermitInput: StudentCanGetPracticePermitInput
  StudentInformation: ResolverTypeWrapper<StudentInformation>
  StudentInformationResult: ResolverTypeWrapper<StudentInformationResult>
  SubArticle: ResolverTypeWrapper<
    Omit<SubArticle, 'body'> & { body: Array<ResolversTypes['Slice']> }
  >
  SubmitApplicationInput: SubmitApplicationInput
  SubmitFormSystemScreenInput: SubmitFormSystemScreenInput
  SubpageHeader: ResolverTypeWrapper<
    Omit<SubpageHeader, 'body'> & {
      body?: Maybe<Array<ResolversTypes['Slice']>>
    }
  >
  SubscriptionType: SubscriptionType
  SupportCategory: ResolverTypeWrapper<SupportCategory>
  SupportQNA: ResolverTypeWrapper<
    Omit<SupportQna, 'answer'> & { answer: Array<ResolversTypes['Slice']> }
  >
  SupportSubCategory: ResolverTypeWrapper<SupportSubCategory>
  SyslumennAuction: ResolverTypeWrapper<SyslumennAuction>
  TabContent: ResolverTypeWrapper<
    Omit<TabContent, 'body'> & { body?: Maybe<Array<ResolversTypes['Slice']>> }
  >
  TabSection: ResolverTypeWrapper<TabSection>
  TableSlice: ResolverTypeWrapper<TableSlice>
  Tag: Tag
  TagCount: ResolverTypeWrapper<TagCount>
  TeacherV4: ResolverTypeWrapper<TeacherV4>
  TeamList: ResolverTypeWrapper<TeamList>
  TeamMember: ResolverTypeWrapper<
    Omit<TeamMember, 'intro'> & {
      intro?: Maybe<Array<ResolversTypes['Slice']>>
    }
  >
  TeamMemberResponse: ResolverTypeWrapper<TeamMemberResponse>
  TeamMemberResponseInput: ResolverTypeWrapper<TeamMemberResponseInput>
  TeamMemberTagGroup: ResolverTypeWrapper<TeamMemberTagGroup>
  TellUsAStory: ResolverTypeWrapper<TellUsAStory>
  TellUsAStoryInput: TellUsAStoryInput
  TemporaryEventLicence: ResolverTypeWrapper<TemporaryEventLicence>
  TestResult: ResolverTypeWrapper<TestResult>
  TextFieldLocales: ResolverTypeWrapper<TextFieldLocales>
  TimelineEvent: ResolverTypeWrapper<TimelineEvent>
  TimelineSlice: ResolverTypeWrapper<TimelineSlice>
  TrademarkSubType: TrademarkSubType
  TrademarkType: TrademarkType
  TransactionType: TransactionType
  TwoColumnText: ResolverTypeWrapper<
    Omit<TwoColumnText, 'leftContent' | 'rightContent'> & {
      leftContent?: Maybe<Array<ResolversTypes['Slice']>>
      rightContent?: Maybe<Array<ResolversTypes['Slice']>>
    }
  >
  TypeCategory: TypeCategory
  TypeCount: ResolverTypeWrapper<TypeCount>
  Tyres: ResolverTypeWrapper<Tyres>
  Union: ResolverTypeWrapper<Union>
  UnitOfUse: ResolverTypeWrapper<UnitOfUse>
  UnitsOfUseModel: ResolverTypeWrapper<UnitsOfUseModel>
  UniversityCareersInstitution: ResolverTypeWrapper<UniversityCareersInstitution>
  UniversityCareersStudentFile: ResolverTypeWrapper<UniversityCareersStudentFile>
  UniversityCareersStudentInfoByUniversityInput: UniversityCareersStudentInfoByUniversityInput
  UniversityCareersStudentInfoInput: UniversityCareersStudentInfoInput
  UniversityCareersStudentTrack: ResolverTypeWrapper<UniversityCareersStudentTrack>
  UniversityCareersStudentTrackHistory: ResolverTypeWrapper<UniversityCareersStudentTrackHistory>
  UniversityCareersStudentTrackMetadata: ResolverTypeWrapper<UniversityCareersStudentTrackMetadata>
  UniversityCareersStudentTrackTranscript: ResolverTypeWrapper<UniversityCareersStudentTrackTranscript>
  UniversityCareersStudentTrackTranscriptError: ResolverTypeWrapper<UniversityCareersStudentTrackTranscriptError>
  UniversityCareersUniversityId: UniversityCareersUniversityId
  UniversityGatewayApplication: ResolverTypeWrapper<UniversityGatewayApplication>
  UniversityGatewayGetPogramInput: UniversityGatewayGetPogramInput
  UniversityGatewayProgram: ResolverTypeWrapper<UniversityGatewayProgram>
  UniversityGatewayProgramDetails: ResolverTypeWrapper<UniversityGatewayProgramDetails>
  UniversityGatewayProgramExtraApplicationField: ResolverTypeWrapper<UniversityGatewayProgramExtraApplicationField>
  UniversityGatewayProgramFilter: ResolverTypeWrapper<UniversityGatewayProgramFilter>
  UniversityGatewayProgramsPaginated: ResolverTypeWrapper<UniversityGatewayProgramsPaginated>
  UniversityGatewayUniversity: ResolverTypeWrapper<UniversityGatewayUniversity>
  UpdateApplicationExternalDataInput: UpdateApplicationExternalDataInput
  UpdateApplicationInput: UpdateApplicationInput
  UpdateAuthDelegationInput: UpdateAuthDelegationInput
  UpdateChangeAppendixInput: UpdateChangeAppendixInput
  UpdateContactInput: UpdateContactInput
  UpdateCurrentEmployerInput: UpdateCurrentEmployerInput
  UpdateCurrentEmployerResponse: ResolverTypeWrapper<UpdateCurrentEmployerResponse>
  UpdateDraftRegulationCancelInput: UpdateDraftRegulationCancelInput
  UpdateDraftRegulationChangeInput: UpdateDraftRegulationChangeInput
  UpdateEndorsementListDto: UpdateEndorsementListDto
  UpdateEndorsementListInput: UpdateEndorsementListInput
  UpdateEndpointInput: UpdateEndpointInput
  UpdateFormSystemApplicantDtoInput: UpdateFormSystemApplicantDtoInput
  UpdateFormSystemApplicantInput: UpdateFormSystemApplicantInput
  UpdateFormSystemApplicationDependenciesInput: UpdateFormSystemApplicationDependenciesInput
  UpdateHelpdeskInput: UpdateHelpdeskInput
  UpdateIcelandicNameInput: UpdateIcelandicNameInput
  UpdateOrganisationInput: UpdateOrganisationInput
  UpdatePracticalDrivingLessonInput: UpdatePracticalDrivingLessonInput
  UpdateUserProfileInput: UpdateUserProfileInput
  Url: ResolverTypeWrapper<Url>
  UserDeviceToken: ResolverTypeWrapper<UserDeviceToken>
  UserDeviceTokenInput: UserDeviceTokenInput
  UserProfile: ResolverTypeWrapper<UserProfile>
  UserProfileActorProfile: ResolverTypeWrapper<UserProfileActorProfile>
  UserProfileActorProfileResponse: ResolverTypeWrapper<UserProfileActorProfileResponse>
  UserProfileAdminProfile: ResolverTypeWrapper<UserProfileAdminProfile>
  UserProfileAdminProfilesResponse: ResolverTypeWrapper<UserProfileAdminProfilesResponse>
  UserProfileData: UserProfileData
  UserProfileLocale: ResolverTypeWrapper<UserProfileLocale>
  UserProfileUpdateActorProfileInput: UserProfileUpdateActorProfileInput
  VacanciesGetLanguageEnum: VacanciesGetLanguageEnum
  VacanciesVacancyIdGetLanguageEnum: VacanciesVacancyIdGetLanguageEnum
  ValidateMortgageCertificateInput: ValidateMortgageCertificateInput
  ValidateSeminarIndividualsInput: ValidateSeminarIndividualsInput
  VehicleCurrentWithMileage: ResolverTypeWrapper<VehicleCurrentWithMileage>
  VehicleDetail: ResolverTypeWrapper<VehicleDetail>
  VehicleListed: ResolverTypeWrapper<VehicleListed>
  VehicleMileageDetail: ResolverTypeWrapper<VehicleMileageDetail>
  VehicleMileageOverview: ResolverTypeWrapper<VehicleMileageOverview>
  VehicleMileagePostResponse:
    | ResolversTypes['VehicleMileageDetail']
    | ResolversTypes['VehiclesMileageUpdateError']
  VehicleMileagePutModel: ResolverTypeWrapper<VehicleMileagePutModel>
  VehicleMileagePutResponse:
    | ResolversTypes['VehicleMileagePutModel']
    | ResolversTypes['VehiclesMileageUpdateError']
  VehicleOperatorChangeChecksByPermno: ResolverTypeWrapper<VehicleOperatorChangeChecksByPermno>
  VehicleOwnerchangeChecksByPermno: ResolverTypeWrapper<VehicleOwnerchangeChecksByPermno>
  VehiclePaging: ResolverTypeWrapper<VehiclePaging>
  VehiclePlateOrderChecksByPermno: ResolverTypeWrapper<VehiclePlateOrderChecksByPermno>
  VehicleRegistration: ResolverTypeWrapper<VehicleRegistration>
  VehicleUserTypeEnum: VehicleUserTypeEnum
  VehicleValidationErrorMessage: ResolverTypeWrapper<VehicleValidationErrorMessage>
  VehiclesAxle: ResolverTypeWrapper<VehiclesAxle>
  VehiclesBasicInfo: ResolverTypeWrapper<VehiclesBasicInfo>
  VehiclesBulkMileageReadingResponse: ResolverTypeWrapper<VehiclesBulkMileageReadingResponse>
  VehiclesBulkMileageRegistrationJob: ResolverTypeWrapper<VehiclesBulkMileageRegistrationJob>
  VehiclesBulkMileageRegistrationJobHistory: ResolverTypeWrapper<VehiclesBulkMileageRegistrationJobHistory>
  VehiclesBulkMileageRegistrationRequestDetail: ResolverTypeWrapper<VehiclesBulkMileageRegistrationRequestDetail>
  VehiclesBulkMileageRegistrationRequestError: ResolverTypeWrapper<VehiclesBulkMileageRegistrationRequestError>
  VehiclesBulkMileageRegistrationRequestOverview: ResolverTypeWrapper<VehiclesBulkMileageRegistrationRequestOverview>
  VehiclesBulkMileageRegistrationRequestStatus: ResolverTypeWrapper<VehiclesBulkMileageRegistrationRequestStatus>
  VehiclesCurrentListResponse: ResolverTypeWrapper<VehiclesCurrentListResponse>
  VehiclesCurrentOwnerInfo: ResolverTypeWrapper<VehiclesCurrentOwnerInfo>
  VehiclesDetail: ResolverTypeWrapper<VehiclesDetail>
  VehiclesExcel: ResolverTypeWrapper<VehiclesExcel>
  VehiclesInspectionInfo: ResolverTypeWrapper<VehiclesInspectionInfo>
  VehiclesList: ResolverTypeWrapper<VehiclesList>
  VehiclesListInputV3: VehiclesListInputV3
  VehiclesListV2: ResolverTypeWrapper<VehiclesListV2>
  VehiclesMainInfo: ResolverTypeWrapper<VehiclesMainInfo>
  VehiclesMileageDetails: ResolverTypeWrapper<VehiclesMileageDetails>
  VehiclesMileageRegistration: ResolverTypeWrapper<VehiclesMileageRegistration>
  VehiclesMileageRegistrationHistory: ResolverTypeWrapper<VehiclesMileageRegistrationHistory>
  VehiclesMileageUpdateError: ResolverTypeWrapper<VehiclesMileageUpdateError>
  VehiclesOperator: ResolverTypeWrapper<VehiclesOperator>
  VehiclesOwners: ResolverTypeWrapper<VehiclesOwners>
  VehiclesPublicVehicleSearch: ResolverTypeWrapper<VehiclesPublicVehicleSearch>
  VehiclesRegistrationInfo: ResolverTypeWrapper<VehiclesRegistrationInfo>
  VehiclesTechnicalInfo: ResolverTypeWrapper<VehiclesTechnicalInfo>
  VehiclesVehicle: ResolverTypeWrapper<VehiclesVehicle>
  VehiclesVehicleSearch: ResolverTypeWrapper<VehiclesVehicleSearch>
  VehiclesVehicleSearchNextInspection: ResolverTypeWrapper<VehiclesVehicleSearchNextInspection>
  VerifyLicenseBarcodeDataUnion: ResolversTypes['LicenseDriverLicenseData']
  VerifyLicenseBarcodeError: VerifyLicenseBarcodeError
  VerifyLicenseBarcodeInput: VerifyLicenseBarcodeInput
  VerifyLicenseBarcodeResult: ResolverTypeWrapper<
    Omit<VerifyLicenseBarcodeResult, 'data'> & {
      data?: Maybe<ResolversTypes['VerifyLicenseBarcodeDataUnion']>
    }
  >
  VerifyLicenseBarcodeType: VerifyLicenseBarcodeType
  VerifyPkPassInput: VerifyPkPassInput
  WatsonAssistantChatIdentityTokenInput: WatsonAssistantChatIdentityTokenInput
  WatsonAssistantChatIdentityTokenResponse: ResolverTypeWrapper<WatsonAssistantChatIdentityTokenResponse>
  WatsonAssistantChatSubmitFeedbackInput: WatsonAssistantChatSubmitFeedbackInput
  WatsonAssistantChatSubmitFeedbackResponse: ResolverTypeWrapper<WatsonAssistantChatSubmitFeedbackResponse>
  WatsonAssistantChatSubmitFeedbackThumbStatus: WatsonAssistantChatSubmitFeedbackThumbStatus
  WebSearchAutocomplete: ResolverTypeWrapper<WebSearchAutocomplete>
  WebSearchAutocompleteInput: WebSearchAutocompleteInput
  WebVerdictByIdInput: WebVerdictByIdInput
  WebVerdictByIdItem: ResolverTypeWrapper<WebVerdictByIdItem>
  WebVerdictByIdResponse: ResolverTypeWrapper<WebVerdictByIdResponse>
  WebVerdictCaseCategoriesResponse: ResolverTypeWrapper<WebVerdictCaseCategoriesResponse>
  WebVerdictCaseCategory: ResolverTypeWrapper<WebVerdictCaseCategory>
  WebVerdictCaseType: ResolverTypeWrapper<WebVerdictCaseType>
  WebVerdictCaseTypesResponse: ResolverTypeWrapper<WebVerdictCaseTypesResponse>
  WebVerdictItem: ResolverTypeWrapper<WebVerdictItem>
  WebVerdictJudge: ResolverTypeWrapper<WebVerdictJudge>
  WebVerdictKeyword: ResolverTypeWrapper<WebVerdictKeyword>
  WebVerdictKeywordsResponse: ResolverTypeWrapper<WebVerdictKeywordsResponse>
  WebVerdictsInput: WebVerdictsInput
  WebVerdictsInputResponse: ResolverTypeWrapper<WebVerdictsInputResponse>
  WebVerdictsResponse: ResolverTypeWrapper<WebVerdictsResponse>
  WorkMachine: ResolverTypeWrapper<WorkMachine>
  WorkMachinesAction: WorkMachinesAction
  WorkMachinesCategory: ResolverTypeWrapper<WorkMachinesCategory>
  WorkMachinesCollectionDocument: ResolverTypeWrapper<WorkMachinesCollectionDocument>
  WorkMachinesCollectionDocumentInput: WorkMachinesCollectionDocumentInput
  WorkMachinesCollectionInput: WorkMachinesCollectionInput
  WorkMachinesCollectionLink: ResolverTypeWrapper<WorkMachinesCollectionLink>
  WorkMachinesExternalLink: WorkMachinesExternalLink
  WorkMachinesFileType: WorkMachinesFileType
  WorkMachinesInput: WorkMachinesInput
  WorkMachinesLabel: ResolverTypeWrapper<WorkMachinesLabel>
  WorkMachinesLink: ResolverTypeWrapper<WorkMachinesLink>
  WorkMachinesMachineType: ResolverTypeWrapper<WorkMachinesMachineType>
  WorkMachinesModel: ResolverTypeWrapper<WorkMachinesModel>
  WorkMachinesPaginatedCollection: ResolverTypeWrapper<WorkMachinesPaginatedCollection>
  WorkMachinesParentCategoryByTypeAndModelInput: WorkMachinesParentCategoryByTypeAndModelInput
  WorkMachinesSubCategory: ResolverTypeWrapper<WorkMachinesSubCategory>
  WorkMachinesTechInfoItem: ResolverTypeWrapper<WorkMachinesTechInfoItem>
  WorkMachinesTechInfoListItem: ResolverTypeWrapper<WorkMachinesTechInfoListItem>
  XroadIdentifier: ResolverTypeWrapper<XroadIdentifier>
  changeEndorsmentListClosedDateDto: ChangeEndorsmentListClosedDateDto
  occupationalLicenseLicenseType: OccupationalLicenseLicenseType
  officialJournalOfIcelandApplicationAdvertTemplateResponse: ResolverTypeWrapper<OfficialJournalOfIcelandApplicationAdvertTemplateResponse>
  officialJournalOfIcelandApplicationAdvertTemplateType: ResolverTypeWrapper<OfficialJournalOfIcelandApplicationAdvertTemplateType>
  officialJournalOfIcelandApplicationAdvertTemplateTypeEnum: OfficialJournalOfIcelandApplicationAdvertTemplateTypeEnum
  officialJournalOfIcelandApplicationAdvertTemplateTypesResponse: ResolverTypeWrapper<OfficialJournalOfIcelandApplicationAdvertTemplateTypesResponse>
  sendPdfEmailInput: SendPdfEmailInput
  sendPdfEmailResponse: ResolverTypeWrapper<SendPdfEmailResponse>
}

/** Mapping between all available schema types and the resolvers parents */
export type ResolversParentTypes = {
  AccidentNotificationAttachment: AccidentNotificationAttachment
  AccidentNotificationConfirmation: AccidentNotificationConfirmation
  AccidentNotificationStatus: AccidentNotificationStatus
  AccordionSlice: AccordionSlice
  ActionCardMetaData: ActionCardMetaData
  ActionCardTag: ActionCardTag
  ActionMailBody: ActionMailBody
  AddAttachmentInput: AddAttachmentInput
  Address: Address
  AdminNotification: AdminNotification
  AdminNotifications: AdminNotifications
  AdministrationofOccupationalSafetyandHealthCourseModel: AdministrationofOccupationalSafetyandHealthCourseModel
  AdministrationofOccupationalSafetyandHealthCoursesResponseModel: AdministrationofOccupationalSafetyandHealthCoursesResponseModel
  AirDiscountSchemeConfirmInvoiceInput: AirDiscountSchemeConfirmInvoiceInput
  AirDiscountSchemeConnectionDiscountCode: AirDiscountSchemeConnectionDiscountCode
  AirDiscountSchemeCreateExplicitDiscountCodeInput: AirDiscountSchemeCreateExplicitDiscountCodeInput
  AirDiscountSchemeDiscount: AirDiscountSchemeDiscount
  AirDiscountSchemeFlight: AirDiscountSchemeFlight
  AirDiscountSchemeFlightLeg: AirDiscountSchemeFlightLeg
  AirDiscountSchemeFlightLegsInput: AirDiscountSchemeFlightLegsInput
  AirDiscountSchemeFund: AirDiscountSchemeFund
  AirDiscountSchemePeriodInput: AirDiscountSchemePeriodInput
  AirDiscountSchemeRangeInput: AirDiscountSchemeRangeInput
  AirDiscountSchemeTravelInput: AirDiscountSchemeTravelInput
  AirDiscountSchemeUser: AirDiscountSchemeUser
  AirDiscountSchemeUserInfo: AirDiscountSchemeUserInfo
  AircraftRegistryAircraft: AircraftRegistryAircraft
  AircraftRegistryAllAircraftsInput: AircraftRegistryAllAircraftsInput
  AircraftRegistryAllAircraftsResponse: AircraftRegistryAllAircraftsResponse
  AircraftRegistryPerson: AircraftRegistryPerson
  AlcoholLicence: AlcoholLicence
  AlertBanner: AlertBanner
  AnchorPage: Omit<AnchorPage, 'content'> & {
    content: Array<ResolversParentTypes['Slice']>
  }
  AnchorPageListSlice: AnchorPageListSlice
  ApiCatalogue: ApiCatalogue
  Appendix: Appendix
  AppendixInput: AppendixInput
  Application: Application
  ApplicationAdmin: ApplicationAdmin
  ApplicationAdminPaginatedResponse: ApplicationAdminPaginatedResponse
  ApplicationApplicationInput: ApplicationApplicationInput
  ApplicationApplicationsAdminInput: ApplicationApplicationsAdminInput
  ApplicationApplicationsAdminStatisticsInput: ApplicationApplicationsAdminStatisticsInput
  ApplicationApplicationsInput: ApplicationApplicationsInput
  ApplicationApplicationsInstitutionAdminInput: ApplicationApplicationsInstitutionAdminInput
  ApplicationEligibility: ApplicationEligibility
  ApplicationEligibilityInput: ApplicationEligibilityInput
  ApplicationEligibilityRequirement: ApplicationEligibilityRequirement
  ApplicationFileInput: ApplicationFileInput
  ApplicationHistory: ApplicationHistory
  ApplicationInformation: ApplicationInformation
  ApplicationInformationChildren: ApplicationInformationChildren
  ApplicationInformationEmployer: ApplicationInformationEmployer
  ApplicationInformationPeriod: ApplicationInformationPeriod
  ApplicationPayment: ApplicationPayment
  ApplicationRights: ApplicationRights
  ApplicationStatistics: ApplicationStatistics
  Appraisal: Appraisal
  Article: Omit<Article, 'body'> & {
    body: Array<ResolversParentTypes['Slice']>
  }
  ArticleCategory: ArticleCategory
  ArticleGroup: ArticleGroup
  ArticleReference: ArticleReference
  ArticleSubgroup: ArticleSubgroup
  Asset: Asset
  AssetName: AssetName
  AssignApplicationInput: AssignApplicationInput
  AttachmentPresignedUrlInput: AttachmentPresignedUrlInput
  Auction: Omit<Auction, 'content'> & {
    content?: Maybe<Array<ResolversParentTypes['Slice']>>
  }
  AudienceAndScope: AudienceAndScope
  AuthActorDelegationInput: AuthActorDelegationInput
  AuthAdminClient: AuthAdminClient
  AuthAdminClientAllowedScope: AuthAdminClientAllowedScope
  AuthAdminClientClaim: AuthAdminClientClaim
  AuthAdminClientClaimInput: AuthAdminClientClaimInput
  AuthAdminClientEnvironment: AuthAdminClientEnvironment
  AuthAdminClientInput: AuthAdminClientInput
  AuthAdminClientSecret: AuthAdminClientSecret
  AuthAdminClientsInput: AuthAdminClientsInput
  AuthAdminClientsPayload: AuthAdminClientsPayload
  AuthAdminCreateClientResponse: AuthAdminCreateClientResponse
  AuthAdminCreateScopeResponse: AuthAdminCreateScopeResponse
  AuthAdminDelegationProvider: AuthAdminDelegationProvider
  AuthAdminDelegationType: AuthAdminDelegationType
  AuthAdminDeleteClientInput: AuthAdminDeleteClientInput
  AuthAdminPatchClientInput: AuthAdminPatchClientInput
  AuthAdminPatchScopeInput: AuthAdminPatchScopeInput
  AuthAdminPublishClientInput: AuthAdminPublishClientInput
  AuthAdminPublishScopeInput: AuthAdminPublishScopeInput
  AuthAdminRevokeSecretsInput: AuthAdminRevokeSecretsInput
  AuthAdminRotateSecretInput: AuthAdminRotateSecretInput
  AuthAdminScope: AuthAdminScope
  AuthAdminScopeEnvironment: AuthAdminScopeEnvironment
  AuthAdminScopesPayload: AuthAdminScopesPayload
  AuthAdminTenant: AuthAdminTenant
  AuthAdminTenantEnvironment: AuthAdminTenantEnvironment
  AuthAdminTenantsPayload: AuthAdminTenantsPayload
  AuthAdminTranslatedValue: AuthAdminTranslatedValue
  AuthAdminTranslatedValueInput: AuthAdminTranslatedValueInput
  AuthApiScope: AuthApiScope
  AuthApiScopeGroup: AuthApiScopeGroup
  AuthApiScopesInput: AuthApiScopesInput
  AuthClient: AuthClient
  AuthConsent: AuthConsent
  AuthConsentScopeNode: AuthConsentScopeNode
  AuthConsentTenant: AuthConsentTenant
  AuthConsentsPaginated: AuthConsentsPaginated
  AuthCustomDelegation: AuthCustomDelegation
  AuthDelegation:
    | ResolversParentTypes['AuthCustomDelegation']
    | ResolversParentTypes['AuthGeneralMandate']
    | ResolversParentTypes['AuthLegalGuardianDelegation']
    | ResolversParentTypes['AuthLegalGuardianMinorDelegation']
    | ResolversParentTypes['AuthLegalRepresentativeDelegation']
    | ResolversParentTypes['AuthPersonalRepresentativeDelegation']
    | ResolversParentTypes['AuthProcuringHolderDelegation']
  AuthDelegationInput: AuthDelegationInput
  AuthDelegationProviderEnvironment: AuthDelegationProviderEnvironment
  AuthDelegationProviderPayload: AuthDelegationProviderPayload
  AuthDelegationScope: AuthDelegationScope
  AuthDelegationScopeInput: AuthDelegationScopeInput
  AuthDelegationsInput: AuthDelegationsInput
  AuthDomain: AuthDomain
  AuthDomainsInput: AuthDomainsInput
  AuthExtensionCredProps: AuthExtensionCredProps
  AuthGeneralMandate: AuthGeneralMandate
  AuthLegalGuardianDelegation: AuthLegalGuardianDelegation
  AuthLegalGuardianMinorDelegation: AuthLegalGuardianMinorDelegation
  AuthLegalRepresentativeDelegation: AuthLegalRepresentativeDelegation
  AuthLoginRestriction: AuthLoginRestriction
  AuthMergedDelegation: AuthMergedDelegation
  AuthPasskeyAuthenticationOptions: AuthPasskeyAuthenticationOptions
  AuthPasskeyAuthenticationOptionsCredentials: AuthPasskeyAuthenticationOptionsCredentials
  AuthPasskeyRegistrationObject: AuthPasskeyRegistrationObject
  AuthPasskeyRegistrationObjectClientExtensionResults: AuthPasskeyRegistrationObjectClientExtensionResults
  AuthPasskeyRegistrationObjectResponse: AuthPasskeyRegistrationObjectResponse
  AuthPasskeyRegistrationOptions: AuthPasskeyRegistrationOptions
  AuthPasskeyRegistrationVerification: AuthPasskeyRegistrationVerification
  AuthPersonalRepresentativeDelegation: AuthPersonalRepresentativeDelegation
  AuthProcuringHolderDelegation: AuthProcuringHolderDelegation
  AuthRegistrationOptionsAuthenticatorSelection: AuthRegistrationOptionsAuthenticatorSelection
  AuthRegistrationOptionsExtensions: AuthRegistrationOptionsExtensions
  AuthRegistrationOptionsPublicKeyCredentialDescriptorJSON: AuthRegistrationOptionsPublicKeyCredentialDescriptorJson
  AuthRegistrationOptionsPublicKeyCredentialOption: AuthRegistrationOptionsPublicKeyCredentialOption
  AuthRegistrationOptionsRp: AuthRegistrationOptionsRp
  AuthRegistrationOptionsUser: AuthRegistrationOptionsUser
  AuthScopeTreeNode:
    | ResolversParentTypes['AuthApiScope']
    | ResolversParentTypes['AuthApiScopeGroup']
  BasicVehicleInformation: BasicVehicleInformation
  BloodDonationRestrictionDetails: Omit<
    BloodDonationRestrictionDetails,
    'cardText' | 'detailedText'
  > & {
    cardText: Array<ResolversParentTypes['Slice']>
    detailedText: Array<ResolversParentTypes['Slice']>
  }
  BloodDonationRestrictionGenericTag: BloodDonationRestrictionGenericTag
  BloodDonationRestrictionGenericTagList: BloodDonationRestrictionGenericTagList
  BloodDonationRestrictionList: BloodDonationRestrictionList
  BloodDonationRestrictionListItem: Omit<
    BloodDonationRestrictionListItem,
    'cardText'
  > & { cardText: Array<ResolversParentTypes['Slice']> }
  Boolean: Scalars['Boolean']
  Broker: Broker
  BulkMailAction: BulkMailAction
  BulkUploadUser: BulkUploadUser
  BulkVehicleMileageRequestOverviewInput: BulkVehicleMileageRequestOverviewInput
  BulkVehicleMileageRequestStatusInput: BulkVehicleMileageRequestStatusInput
  BulletEntry:
    | ResolversParentTypes['IconBullet']
    | ResolversParentTypes['NumberBulletGroup']
  BulletListSlice: Omit<BulletListSlice, 'bullets'> & {
    bullets: Array<ResolversParentTypes['BulletEntry']>
  }
  BurningPermit: BurningPermit
  BurningPermitsResponse: BurningPermitsResponse
  CategoryPage: ResolversParentTypes['Article'] | ResolversParentTypes['Manual']
  CertificateInfoResponse: CertificateInfoResponse
  ChangeAppendix: ChangeAppendix
  Chart: Chart
  ChartComponent: ChartComponent
  ChartNumberBox: ChartNumberBox
  CheckTachoNetExists: CheckTachoNetExists
  CheckTachoNetInput: CheckTachoNetInput
  ClientCredentials: ClientCredentials
  CoOwnerChangeAnswers: CoOwnerChangeAnswers
  CoOwnerChangeAnswersCoOwners: CoOwnerChangeAnswersCoOwners
  CoOwnerChangeAnswersOwnerCoOwners: CoOwnerChangeAnswersOwnerCoOwners
  CoOwnerChangeAnswersPickVehicle: CoOwnerChangeAnswersPickVehicle
  CoOwnerChangeAnswersUser: CoOwnerChangeAnswersUser
  CoOwnerChangeAnswersVehicleMileage: CoOwnerChangeAnswersVehicleMileage
  CommunicationResponse: CommunicationResponse
  ConnectedComponent: ConnectedComponent
  ConsultationPortalAdviceResult: ConsultationPortalAdviceResult
  ConsultationPortalAllTypesResult: ConsultationPortalAllTypesResult
  ConsultationPortalCaseInput: ConsultationPortalCaseInput
  ConsultationPortalCaseItemResult: ConsultationPortalCaseItemResult
  ConsultationPortalCasePostAdviceCommandInput: ConsultationPortalCasePostAdviceCommandInput
  ConsultationPortalCaseResult: ConsultationPortalCaseResult
  ConsultationPortalCaseStakeholderResult: ConsultationPortalCaseStakeholderResult
  ConsultationPortalCaseSubscriptionCommandInput: ConsultationPortalCaseSubscriptionCommandInput
  ConsultationPortalCaseSubscriptionResult: ConsultationPortalCaseSubscriptionResult
  ConsultationPortalCasesAggregateResult: ConsultationPortalCasesAggregateResult
  ConsultationPortalCasesInput: ConsultationPortalCasesInput
  ConsultationPortalDocumentInfoResult: ConsultationPortalDocumentInfoResult
  ConsultationPortalPostAdviceInput: ConsultationPortalPostAdviceInput
  ConsultationPortalPostCaseSubscriptionCommandInput: ConsultationPortalPostCaseSubscriptionCommandInput
  ConsultationPortalPostCaseSubscriptionTypeInput: ConsultationPortalPostCaseSubscriptionTypeInput
  ConsultationPortalPostEmailCommandInput: ConsultationPortalPostEmailCommandInput
  ConsultationPortalRelatedCaseResult: ConsultationPortalRelatedCaseResult
  ConsultationPortalStatisticsResult: ConsultationPortalStatisticsResult
  ConsultationPortalSubscriptionCommandInput: ConsultationPortalSubscriptionCommandInput
  ConsultationPortalUserAdviceAggregate: ConsultationPortalUserAdviceAggregate
  ConsultationPortalUserAdviceCaseResult: ConsultationPortalUserAdviceCaseResult
  ConsultationPortalUserAdviceResult: ConsultationPortalUserAdviceResult
  ConsultationPortalUserAdvicesInput: ConsultationPortalUserAdvicesInput
  ConsultationPortalUserCaseSubscriptionResult: ConsultationPortalUserCaseSubscriptionResult
  ConsultationPortalUserEmailResult: ConsultationPortalUserEmailResult
  ConsultationPortalUserSubscriptionResult: ConsultationPortalUserSubscriptionResult
  ConsultationPortalUserSubscriptionsAggregate: ConsultationPortalUserSubscriptionsAggregate
  ConsultationPortalUserSubscriptionsCommandInput: ConsultationPortalUserSubscriptionsCommandInput
  Contact: Contact
  ContactUs: ContactUs
  ContactUsInput: ContactUsInput
  ContentSlug: ContentSlug
  CostOfLivingCalculatorModel: CostOfLivingCalculatorModel
  CostOfLivingCalculatorResponseModel: CostOfLivingCalculatorResponseModel
  CoursesModel: CoursesModel
  CreateApplicationInput: CreateApplicationInput
  CreateAuthAdminClientInput: CreateAuthAdminClientInput
  CreateAuthDelegationInput: CreateAuthDelegationInput
  CreateAuthLoginRestrictionInput: CreateAuthLoginRestrictionInput
  CreateBarcodeResult: CreateBarcodeResult
  CreateChangeAppendixInput: CreateChangeAppendixInput
  CreateContactInput: CreateContactInput
  CreateDelegationInput: CreateDelegationInput
  CreateDraftRegulationCancelInput: CreateDraftRegulationCancelInput
  CreateDraftRegulationChangeInput: CreateDraftRegulationChangeInput
  CreateDraftRegulationInput: CreateDraftRegulationInput
  CreateDrivingSchoolTestResultInput: CreateDrivingSchoolTestResultInput
  CreateEmailVerificationInput: CreateEmailVerificationInput
  CreateEndorsementInput: CreateEndorsementInput
  CreateEndorsementListDto: CreateEndorsementListDto
  CreateFormSystemApplicantDtoInput: CreateFormSystemApplicantDtoInput
  CreateFormSystemApplicantInput: CreateFormSystemApplicantInput
  CreateFormSystemApplicationInput: CreateFormSystemApplicationInput
  CreateFormSystemCertificationDtoInput: CreateFormSystemCertificationDtoInput
  CreateFormSystemCertificationInput: CreateFormSystemCertificationInput
  CreateFormSystemFieldDtoInput: CreateFormSystemFieldDtoInput
  CreateHelpdeskInput: CreateHelpdeskInput
  CreateIcelandicNameInput: CreateIcelandicNameInput
  CreatePracticalDrivingLessonInput: CreatePracticalDrivingLessonInput
  CreateProviderInput: CreateProviderInput
  CreateRegulationPresignedPostInput: CreateRegulationPresignedPostInput
  CreateScopeInput: CreateScopeInput
  CreateSmsVerificationInput: CreateSmsVerificationInput
  CreateUserProfileInput: CreateUserProfileInput
  CustomPage: Omit<CustomPage, 'content'> & {
    content?: Maybe<Array<ResolversParentTypes['Slice']>>
  }
  DataProvider: DataProvider
  DateTime: Scalars['DateTime']
  DelegationAdminCustomModel: DelegationAdminCustomModel
  DeleteApplicationInput: DeleteApplicationInput
  DeleteAttachmentInput: DeleteAttachmentInput
  DeleteAuthDelegationInput: DeleteAuthDelegationInput
  DeleteDraftRegulationCancelInput: DeleteDraftRegulationCancelInput
  DeleteDraftRegulationChangeInput: DeleteDraftRegulationChangeInput
  DeleteDraftRegulationInput: DeleteDraftRegulationInput
  DeleteDraftRegulationModel: DeleteDraftRegulationModel
  DeleteFormSystemApplicantInput: DeleteFormSystemApplicantInput
  DeleteFormSystemCertificationInput: DeleteFormSystemCertificationInput
  DeleteIcelandicNameByIdInput: DeleteIcelandicNameByIdInput
  DeleteIslykillValueInput: DeleteIslykillValueInput
  DeleteNameResponse: DeleteNameResponse
  DeletePracticalDrivingLessonInput: DeletePracticalDrivingLessonInput
  DeleteTokenResponse: DeleteTokenResponse
  DetailedSchedule: DetailedSchedule
  DiplomaItems: DiplomaItems
  DiplomaModel: DiplomaModel
  DirectTaxPaymentModel: DirectTaxPaymentModel
  Disqualification: Disqualification
  DistrictCommissionerAgencies: DistrictCommissionerAgencies
  Districts: Districts
  Document: Document
  DocumentCategory: DocumentCategory
  DocumentConfirmActions: DocumentConfirmActions
  DocumentConfirmActionsInput: DocumentConfirmActionsInput
  DocumentDetails: DocumentDetails
  DocumentInput: DocumentInput
  DocumentListResponse: DocumentListResponse
  DocumentMailAction: DocumentMailAction
  DocumentPageNumber: DocumentPageNumber
  DocumentPageResponse: DocumentPageResponse
  DocumentPdfRenderer: DocumentPdfRenderer
  DocumentPdfRendererInput: DocumentPdfRendererInput
  DocumentProviderCategoriesAndTypesPostInput: DocumentProviderCategoriesAndTypesPostInput
  DocumentProviderCategoriesAndTypesPutInput: DocumentProviderCategoriesAndTypesPutInput
  DocumentProviderCategory: DocumentProviderCategory
  DocumentProviderPaperMail: DocumentProviderPaperMail
  DocumentProviderPaperMailInput: DocumentProviderPaperMailInput
  DocumentProviderPaperMailResponse: DocumentProviderPaperMailResponse
  DocumentProviderType: DocumentProviderType
  DocumentSender: DocumentSender
  DocumentType: DocumentType
  DocumentV2: DocumentV2
  DocumentV2Action: DocumentV2Action
  DocumentV2Content: DocumentV2Content
  DocumentV2MarkAllMailAsRead: DocumentV2MarkAllMailAsRead
  DocumentV2PaperMailPreferences: DocumentV2PaperMailPreferences
  DocumentsV2: DocumentsV2
  DocumentsV2Base:
    | ResolversParentTypes['DocumentsV2Category']
    | ResolversParentTypes['DocumentsV2Type']
  DocumentsV2Category: DocumentsV2Category
  DocumentsV2DocumentsInput: DocumentsV2DocumentsInput
  DocumentsV2MailActionInput: DocumentsV2MailActionInput
  DocumentsV2Sender: DocumentsV2Sender
  DocumentsV2Type: DocumentsV2Type
  DraftProgressInput: DraftProgressInput
  DraftRegulationCancelModel: DraftRegulationCancelModel
  DraftRegulationChangeModel: DraftRegulationChangeModel
  DraftRegulationPagingModel: DraftRegulationPagingModel
  DraftRegulationPdfDownloadModel: DraftRegulationPdfDownloadModel
  DraftRegulationShippedModel: DraftRegulationShippedModel
  DraftRegulationSummary: DraftRegulationSummary
  DrivingBookLesson: DrivingBookLesson
  DrivingLicenceTestResult: DrivingLicenceTestResult
  DrivingLicenceTestResultId: DrivingLicenceTestResultId
  DrivingLicense: DrivingLicense
  DrivingLicenseBook: DrivingLicenseBook
  DrivingLicenseBookSchool: DrivingLicenseBookSchool
  DrivingLicenseBookStudent: DrivingLicenseBookStudent
  DrivingLicenseBookStudentForTeacher: DrivingLicenseBookStudentForTeacher
  DrivingLicenseBookStudentInput: DrivingLicenseBookStudentInput
  DrivingLicenseBookStudentOverview: DrivingLicenseBookStudentOverview
  DrivingLicenseBookStudentsInput: DrivingLicenseBookStudentsInput
  DrivingLicenseBookSuccess: DrivingLicenseBookSuccess
  DrivingLicenseQualityPhoto: DrivingLicenseQualityPhoto
  DrivingLicenseQualitySignature: DrivingLicenseQualitySignature
  DrivingSchoolExam: DrivingSchoolExam
  DrivingSchoolType: DrivingSchoolType
  EditDraftBody: EditDraftBody
  EditDraftRegulationInput: EditDraftRegulationInput
  EducationCompulsorySchoolCourse: EducationCompulsorySchoolCourse
  EducationCompulsorySchoolCourseCompetence: EducationCompulsorySchoolCourseCompetence
  EducationCompulsorySchoolGrade: EducationCompulsorySchoolGrade
  EducationCompulsorySchoolGradeCategory:
    | ResolversParentTypes['EducationCompulsorySchoolGradeCategoryText']
    | ResolversParentTypes['EducationCompulsorySchoolGradeCategoryWeighted']
  EducationCompulsorySchoolGradeCategoryText: EducationCompulsorySchoolGradeCategoryText
  EducationCompulsorySchoolGradeCategoryWeighted: EducationCompulsorySchoolGradeCategoryWeighted
  EducationCompulsorySchoolGradeDetail: EducationCompulsorySchoolGradeDetail
  EducationCompulsorySchoolGradeLevelExamResults: EducationCompulsorySchoolGradeLevelExamResults
  EducationCompulsorySchoolStudentCareer: EducationCompulsorySchoolStudentCareer
  EducationCourseGrade: EducationCourseGrade
  EducationExamFamilyOverview: EducationExamFamilyOverview
  EducationExamResult: EducationExamResult
  EducationFriggAddressModel: EducationFriggAddressModel
  EducationFriggKeyOptionModel: EducationFriggKeyOptionModel
  EducationFriggOptionModel: EducationFriggOptionModel
  EducationFriggOptionsListInput: EducationFriggOptionsListInput
  EducationFriggOrganizationModel: EducationFriggOrganizationModel
  EducationFriggValueModel: EducationFriggValueModel
  EducationGradeResult: EducationGradeResult
  EducationLicense: EducationLicense
  EducationSignedLicense: EducationSignedLicense
  EducationUserFamilyCompulsorySchoolCareer: EducationUserFamilyCompulsorySchoolCareer
  Eligibility: Eligibility
  EmailSignup: EmailSignup
  EmailSignupInput: EmailSignupInput
  EmailSignupInputField: EmailSignupInputField
  EmailSignupResponse: EmailSignupResponse
  Embed: Embed
  EmbeddedVideo: EmbeddedVideo
  Endorsement: Endorsement
  EndorsementInput: EndorsementInput
  EndorsementList: EndorsementList
  EndorsementListOpen: EndorsementListOpen
  EndorsementMetadata: EndorsementMetadata
  EndorsementPaginationInput: EndorsementPaginationInput
  EnergyFundVehicleDetailsWithGrant: EnergyFundVehicleDetailsWithGrant
  EnergyFundVehicleGrant: EnergyFundVehicleGrant
  EnhancedAsset: EnhancedAsset
  EnhancedAssetSearchResult: EnhancedAssetSearchResult
  EntryTitle: EntryTitle
  ErrorPage: ErrorPage
  EstateRelations: EstateRelations
  Event: Omit<Event, 'content'> & {
    content?: Maybe<Array<ResolversParentTypes['Slice']>>
  }
  EventList: EventList
  EventLocation: EventLocation
  EventSlice: EventSlice
  EventTime: EventTime
  ExistsEndorsementResponse: ExistsEndorsementResponse
  ExportEndorsementListInput: ExportEndorsementListInput
  ExportUrlResponse: ExportUrlResponse
  ExternalLinks: ExternalLinks
  FaqList: FaqList
  Featured: Featured
  FeaturedArticles: Omit<FeaturedArticles, 'introText'> & {
    introText?: Maybe<Array<ResolversParentTypes['Slice']>>
  }
  FeaturedEvents: Omit<FeaturedEvents, 'noEventsFoundText'> & {
    noEventsFoundText?: Maybe<Array<ResolversParentTypes['Slice']>>
  }
  FeaturedLinks: FeaturedLinks
  FeaturedSupportQNAs: FeaturedSupportQnAs
  FetchEducationSignedLicenseUrlInput: FetchEducationSignedLicenseUrlInput
  FinanceAssessmentYears: FinanceAssessmentYears
  FinanceChargeItemSubjectsByYear: FinanceChargeItemSubjectsByYear
  FinanceChargeItemSubjectsByYearData: FinanceChargeItemSubjectsByYearData
  FinanceChargeItemSubjectsByYearPeriodData: FinanceChargeItemSubjectsByYearPeriodData
  FinanceChargeTypeDetails: FinanceChargeTypeDetails
  FinanceChargeTypeDetailsData: FinanceChargeTypeDetailsData
  FinanceChargeTypePeriodSubject: FinanceChargeTypePeriodSubject
  FinanceChargeTypePeriodSubjectData: FinanceChargeTypePeriodSubjectData
  FinanceChargeTypesByYear: FinanceChargeTypesByYear
  FinanceChargeTypesByYearData: FinanceChargeTypesByYearData
  FinanceCustomerChargeType: FinanceCustomerChargeType
  FinanceCustomerChargeTypeItem: FinanceCustomerChargeTypeItem
  FinanceCustomerRecords: FinanceCustomerRecords
  FinanceCustomerRecordsItem: FinanceCustomerRecordsItem
  FinanceCustomerTapsControlModel: FinanceCustomerTapsControlModel
  FinanceDebtStatus: FinanceDebtStatus
  FinanceDebtStatusModel: FinanceDebtStatusModel
  FinanceDocumentData: FinanceDocumentData
  FinanceDocumentModel: FinanceDocumentModel
  FinanceDocumentsListItem: FinanceDocumentsListItem
  FinanceDocumentsListModel: FinanceDocumentsListModel
  FinancialStatementsInaoClientType: FinancialStatementsInaoClientType
  FinancialStatementsInaoConfig: FinancialStatementsInaoConfig
  FinancialStatementsInaoElection: FinancialStatementsInaoElection
  FinancialStatementsInaoTaxInfo: FinancialStatementsInaoTaxInfo
  FindEndorsementListInput: FindEndorsementListInput
  FishingLicenseDateRestriction: FishingLicenseDateRestriction
  FishingLicenseDeprivation: FishingLicenseDeprivation
  FishingLicenseInfo: FishingLicenseInfo
  FishingLicenseLicense: FishingLicenseLicense
  FishingLicenseListOptions: FishingLicenseListOptions
  FishingLicenseReason: FishingLicenseReason
  FishingLicenseSeaworthiness: FishingLicenseSeaworthiness
  FishingLicenseShip: FishingLicenseShip
  FiskistofaCatchQuotaCategory: FiskistofaCatchQuotaCategory
  FiskistofaCategoryChange: FiskistofaCategoryChange
  FiskistofaExtendedCatchQuotaCategory: FiskistofaExtendedCatchQuotaCategory
  FiskistofaExtendedShipStatusInformation: FiskistofaExtendedShipStatusInformation
  FiskistofaExtendedShipStatusInformationResponse: FiskistofaExtendedShipStatusInformationResponse
  FiskistofaExtendedShipStatusInformationUpdate: FiskistofaExtendedShipStatusInformationUpdate
  FiskistofaExtendedShipStatusInformationUpdateResponse: FiskistofaExtendedShipStatusInformationUpdateResponse
  FiskistofaGetQuotaTypesForCalendarYearInput: FiskistofaGetQuotaTypesForCalendarYearInput
  FiskistofaGetQuotaTypesForTimePeriodInput: FiskistofaGetQuotaTypesForTimePeriodInput
  FiskistofaGetShipStatusForCalendarYearInput: FiskistofaGetShipStatusForCalendarYearInput
  FiskistofaGetShipStatusForTimePeriodInput: FiskistofaGetShipStatusForTimePeriodInput
  FiskistofaGetShipsInput: FiskistofaGetShipsInput
  FiskistofaGetSingleShipInput: FiskistofaGetSingleShipInput
  FiskistofaQuotaCategoryChange: FiskistofaQuotaCategoryChange
  FiskistofaQuotaStatus: FiskistofaQuotaStatus
  FiskistofaQuotaStatusResponse: FiskistofaQuotaStatusResponse
  FiskistofaQuotaType: FiskistofaQuotaType
  FiskistofaQuotaTypeResponse: FiskistofaQuotaTypeResponse
  FiskistofaShip: FiskistofaShip
  FiskistofaShipBasicInfo: FiskistofaShipBasicInfo
  FiskistofaShipBasicInfoResponse: FiskistofaShipBasicInfoResponse
  FiskistofaShipStatusInformation: FiskistofaShipStatusInformation
  FiskistofaShipStatusInformationResponse: FiskistofaShipStatusInformationResponse
  FiskistofaSingleShip: FiskistofaSingleShip
  FiskistofaSingleShipResponse: FiskistofaSingleShipResponse
  FiskistofaUpdateShipQuotaStatusForTimePeriodInput: FiskistofaUpdateShipQuotaStatusForTimePeriodInput
  FiskistofaUpdateShipStatusForCalendarYearInput: FiskistofaUpdateShipStatusForCalendarYearInput
  FiskistofaUpdateShipStatusForTimePeriodInput: FiskistofaUpdateShipStatusForTimePeriodInput
  Float: Scalars['Float']
  FooterItem: Omit<FooterItem, 'content' | 'serviceWebContent'> & {
    content?: Maybe<Array<ResolversParentTypes['Slice']>>
    serviceWebContent?: Maybe<Array<ResolversParentTypes['Slice']>>
  }
  Form: Form
  FormField: FormField
  FormSystemApplicant: FormSystemApplicant
  FormSystemApplication: FormSystemApplication
  FormSystemApplicationEventDto: FormSystemApplicationEventDto
  FormSystemApplicationInput: FormSystemApplicationInput
  FormSystemCreateFieldInput: FormSystemCreateFieldInput
  FormSystemCreateFormInput: FormSystemCreateFormInput
  FormSystemCreateListItemDtoInput: FormSystemCreateListItemDtoInput
  FormSystemCreateListItemInput: FormSystemCreateListItemInput
  FormSystemCreateScreenDtoInput: FormSystemCreateScreenDtoInput
  FormSystemCreateScreenInput: FormSystemCreateScreenInput
  FormSystemCreateSectionDtoInput: FormSystemCreateSectionDtoInput
  FormSystemCreateSectionInput: FormSystemCreateSectionInput
  FormSystemDeleteFieldInput: FormSystemDeleteFieldInput
  FormSystemDeleteFormInput: FormSystemDeleteFormInput
  FormSystemDeleteListItemInput: FormSystemDeleteListItemInput
  FormSystemDeleteScreenInput: FormSystemDeleteScreenInput
  FormSystemDeleteSectionInput: FormSystemDeleteSectionInput
  FormSystemDependency: FormSystemDependency
  FormSystemDependencyInput: FormSystemDependencyInput
  FormSystemField: FormSystemField
  FormSystemFieldDisplayOrderInput: FormSystemFieldDisplayOrderInput
  FormSystemFieldSettings: FormSystemFieldSettings
  FormSystemFieldSettingsInput: FormSystemFieldSettingsInput
  FormSystemFieldType: FormSystemFieldType
  FormSystemForm: FormSystemForm
  FormSystemFormApplicant: FormSystemFormApplicant
  FormSystemFormCertificationType: FormSystemFormCertificationType
  FormSystemFormCertificationTypeDto: FormSystemFormCertificationTypeDto
  FormSystemFormResponse: FormSystemFormResponse
  FormSystemFormUrl: FormSystemFormUrl
  FormSystemFormUrlInput: FormSystemFormUrlInput
  FormSystemGetFormInput: FormSystemGetFormInput
  FormSystemGetFormsInput: FormSystemGetFormsInput
  FormSystemGetOrganizationAdminInput: FormSystemGetOrganizationAdminInput
  FormSystemGetOrganizationInput: FormSystemGetOrganizationInput
  FormSystemLanguageType: FormSystemLanguageType
  FormSystemLanguageTypeInput: FormSystemLanguageTypeInput
  FormSystemListItem: FormSystemListItem
  FormSystemListItemDisplayOrderInput: FormSystemListItemDisplayOrderInput
  FormSystemListItemInput: FormSystemListItemInput
  FormSystemListType: FormSystemListType
  FormSystemMonth: FormSystemMonth
  FormSystemOption: FormSystemOption
  FormSystemOrganization: FormSystemOrganization
  FormSystemOrganizationAdmin: FormSystemOrganizationAdmin
  FormSystemOrganizationPermissionDto: FormSystemOrganizationPermissionDto
  FormSystemOrganizationPermissionDtoInput: FormSystemOrganizationPermissionDtoInput
  FormSystemOrganizationUrl: FormSystemOrganizationUrl
  FormSystemPermissionType: FormSystemPermissionType
  FormSystemScreen: FormSystemScreen
  FormSystemScreenDisplayOrderInput: FormSystemScreenDisplayOrderInput
  FormSystemSection: FormSystemSection
  FormSystemSectionDisplayOrderInput: FormSystemSectionDisplayOrderInput
  FormSystemTranslation: FormSystemTranslation
  FormSystemTranslationInput: FormSystemTranslationInput
  FormSystemUpdateFieldDtoInput: FormSystemUpdateFieldDtoInput
  FormSystemUpdateFieldInput: FormSystemUpdateFieldInput
  FormSystemUpdateFieldsDisplayOrderInput: FormSystemUpdateFieldsDisplayOrderInput
  FormSystemUpdateFormDtoInput: FormSystemUpdateFormDtoInput
  FormSystemUpdateFormInput: FormSystemUpdateFormInput
  FormSystemUpdateListItemDtoInput: FormSystemUpdateListItemDtoInput
  FormSystemUpdateListItemInput: FormSystemUpdateListItemInput
  FormSystemUpdateListItemsDisplayOrderDtoInput: FormSystemUpdateListItemsDisplayOrderDtoInput
  FormSystemUpdateListItemsDisplayOrderInput: FormSystemUpdateListItemsDisplayOrderInput
  FormSystemUpdateOrganizationPermissionInput: FormSystemUpdateOrganizationPermissionInput
  FormSystemUpdateScreenDisplayOrderDtoInput: FormSystemUpdateScreenDisplayOrderDtoInput
  FormSystemUpdateScreenDtoInput: FormSystemUpdateScreenDtoInput
  FormSystemUpdateScreenInput: FormSystemUpdateScreenInput
  FormSystemUpdateScreensDisplayOrderInput: FormSystemUpdateScreensDisplayOrderInput
  FormSystemUpdateSectionDtoInput: FormSystemUpdateSectionDtoInput
  FormSystemUpdateSectionInput: FormSystemUpdateSectionInput
  FormSystemUpdateSectionsDisplayOrderDtoInput: FormSystemUpdateSectionsDisplayOrderDtoInput
  FormSystemUpdateSectionsDisplayOrderInput: FormSystemUpdateSectionsDisplayOrderInput
  FormSystemValue: FormSystemValue
  FormSystemValueDto: FormSystemValueDto
  Frontpage: Frontpage
  FrontpageSlider: FrontpageSlider
  GeneratePkPassInput: GeneratePkPassInput
  GenericFormInput: GenericFormInput
  GenericLicense: GenericLicense
  GenericLicenseCollection: GenericLicenseCollection
  GenericLicenseDataField: GenericLicenseDataField
  GenericLicenseError: GenericLicenseError
  GenericLicenseFetch: GenericLicenseFetch
  GenericLicenseProvider: GenericLicenseProvider
  GenericList: GenericList
  GenericListItem: Omit<GenericListItem, 'cardIntro' | 'content'> & {
    cardIntro: Array<ResolversParentTypes['Slice']>
    content?: Maybe<Array<ResolversParentTypes['Slice']>>
  }
  GenericListItemResponse: GenericListItemResponse
  GenericListItemResponseInput: GenericListItemResponseInput
  GenericOverviewPage: GenericOverviewPage
  GenericPage: GenericPage
  GenericPkPass: GenericPkPass
  GenericPkPassQrCode: GenericPkPassQrCode
  GenericPkPassVerification: GenericPkPassVerification
  GenericPkPassVerificationError: GenericPkPassVerificationError
  GenericTag: GenericTag
  GenericTagGroup: GenericTagGroup
  GenericUserLicense: GenericUserLicense
  GenericUserLicenseAlert: GenericUserLicenseAlert
  GenericUserLicenseMetaLinks: GenericUserLicenseMetaLinks
  GenericUserLicenseMetaTag: GenericUserLicenseMetaTag
  GenericUserLicenseMetadata: GenericUserLicenseMetadata
  GenericUserLicenseMetadataDescription: GenericUserLicenseMetadataDescription
  GetAlertBannerInput: GetAlertBannerInput
  GetAnchorPageInput: GetAnchorPageInput
  GetAnchorPagesInput: GetAnchorPagesInput
  GetAnnualStatusDocumentInput: GetAnnualStatusDocumentInput
  GetApiCatalogueInput: GetApiCatalogueInput
  GetApiServiceInput: GetApiServiceInput
  GetArticleCategoriesInput: GetArticleCategoriesInput
  GetArticlesInput: GetArticlesInput
  GetAuctionInput: GetAuctionInput
  GetAuctionsInput: GetAuctionsInput
  GetBloodDonationRestrictionDetailsInput: GetBloodDonationRestrictionDetailsInput
  GetBloodDonationRestrictionGenericTagsInput: GetBloodDonationRestrictionGenericTagsInput
  GetBloodDonationRestrictionsInput: GetBloodDonationRestrictionsInput
  GetBloodDonationRestrictionsInputModel: GetBloodDonationRestrictionsInputModel
  GetCategoryPagesInput: GetCategoryPagesInput
  GetChargeItemSubjectsByYearInput: GetChargeItemSubjectsByYearInput
  GetChargeTypePeriodSubjectInput: GetChargeTypePeriodSubjectInput
  GetChargeTypesByYearInput: GetChargeTypesByYearInput
  GetChargeTypesDetailsByYearInput: GetChargeTypesDetailsByYearInput
  GetContentSlugInput: GetContentSlugInput
  GetCustomPageInput: GetCustomPageInput
  GetCustomSubpageInput: GetCustomSubpageInput
  GetCustomerRecordsInput: GetCustomerRecordsInput
  GetDocumentInput: GetDocumentInput
  GetDocumentListInput: GetDocumentListInput
  GetDocumentPageInput: GetDocumentPageInput
  GetDraftRegulationInput: GetDraftRegulationInput
  GetDraftRegulationPdfDownloadInput: GetDraftRegulationPdfDownloadInput
  GetDraftRegulationsInput: GetDraftRegulationsInput
  GetElectronicIDInput: GetElectronicIdInput
  GetErrorPageInput: GetErrorPageInput
  GetEventsInput: GetEventsInput
  GetFeaturedSupportQNAsInput: GetFeaturedSupportQnAsInput
  GetFinanceDocumentInput: GetFinanceDocumentInput
  GetFinanceDocumentsListInput: GetFinanceDocumentsListInput
  GetFinancePaymentScheduleInput: GetFinancePaymentScheduleInput
  GetFinancialOverviewInput: GetFinancialOverviewInput
  GetFrontpageInput: GetFrontpageInput
  GetGenericLicenseInput: GetGenericLicenseInput
  GetGenericLicensesInput: GetGenericLicensesInput
  GetGenericListItemBySlugInput: GetGenericListItemBySlugInput
  GetGenericListItemsInput: GetGenericListItemsInput
  GetGenericOverviewPageInput: GetGenericOverviewPageInput
  GetGenericPageInput: GetGenericPageInput
  GetGenericTagBySlugInput: GetGenericTagBySlugInput
  GetGenericTagsInTagGroupsInput: GetGenericTagsInTagGroupsInput
  GetGrantsInput: GetGrantsInput
  GetHmsLoansPaymentHistoryInput: GetHmsLoansPaymentHistoryInput
  GetHomestaysInput: GetHomestaysInput
  GetIcelandicNameByIdInput: GetIcelandicNameByIdInput
  GetIcelandicNameByInitialLetterInput: GetIcelandicNameByInitialLetterInput
  GetIcelandicNameBySearchInput: GetIcelandicNameBySearchInput
  GetInitialScheduleInput: GetInitialScheduleInput
  GetIsEmployerValidInput: GetIsEmployerValidInput
  GetLifeEventPageInput: GetLifeEventPageInput
  GetLifeEventsInCategoryInput: GetLifeEventsInCategoryInput
  GetLifeEventsInput: GetLifeEventsInput
  GetMenuInput: GetMenuInput
  GetMultiPropertyInput: GetMultiPropertyInput
  GetNamespaceInput: GetNamespaceInput
  GetNewsDatesInput: GetNewsDatesInput
  GetNewsInput: GetNewsInput
  GetOpenApiInput: GetOpenApiInput
  GetOpenDataPageInput: GetOpenDataPageInput
  GetOpenDataSubpageInput: GetOpenDataSubpageInput
  GetOperatingLicensesInput: GetOperatingLicensesInput
  GetOrganizationByNationalIdInput: GetOrganizationByNationalIdInput
  GetOrganizationByTitleInput: GetOrganizationByTitleInput
  GetOrganizationInput: GetOrganizationInput
  GetOrganizationPageInput: GetOrganizationPageInput
  GetOrganizationPageStandaloneSitemapLevel1Input: GetOrganizationPageStandaloneSitemapLevel1Input
  GetOrganizationPageStandaloneSitemapLevel2Input: GetOrganizationPageStandaloneSitemapLevel2Input
  GetOrganizationParentSubpageInput: GetOrganizationParentSubpageInput
  GetOrganizationSubpageByIdInput: GetOrganizationSubpageByIdInput
  GetOrganizationSubpageInput: GetOrganizationSubpageInput
  GetOrganizationTagsInput: GetOrganizationTagsInput
  GetOrganizationsInput: GetOrganizationsInput
  GetPagingTypes: GetPagingTypes
  GetParentalLeavesApplicationPaymentPlanInput: GetParentalLeavesApplicationPaymentPlanInput
  GetParentalLeavesEntitlementsInput: GetParentalLeavesEntitlementsInput
  GetParentalLeavesEstimatedPaymentPlanInput: GetParentalLeavesEstimatedPaymentPlanInput
  GetParentalLeavesPeriodEndDateInput: GetParentalLeavesPeriodEndDateInput
  GetParentalLeavesPeriodLengthInput: GetParentalLeavesPeriodLengthInput
  GetPaymentFlowInput: GetPaymentFlowInput
  GetPowerBiEmbedPropsFromServerResponse: GetPowerBiEmbedPropsFromServerResponse
  GetProjectPageInput: GetProjectPageInput
  GetPublicVehicleSearchInput: GetPublicVehicleSearchInput
  GetPublishedMaterialInput: GetPublishedMaterialInput
  GetRealEstateInput: GetRealEstateInput
  GetRegistryPersonInput: GetRegistryPersonInput
  GetRegulationFromApiInput: GetRegulationFromApiInput
  GetRegulationImpactsInput: GetRegulationImpactsInput
  GetRegulationInput: GetRegulationInput
  GetRegulationOptionListInput: GetRegulationOptionListInput
  GetRegulationsInput: GetRegulationsInput
  GetRegulationsLawChaptersInput: GetRegulationsLawChaptersInput
  GetRegulationsMinistriesInput: GetRegulationsMinistriesInput
  GetRegulationsSearchInput: GetRegulationsSearchInput
  GetScheduleDistributionInput: GetScheduleDistributionInput
  GetServicePortalAlertBannersInput: GetServicePortalAlertBannersInput
  GetServiceWebPageInput: GetServiceWebPageInput
  GetSingleArticleInput: GetSingleArticleInput
  GetSingleEntryTitleByIdInput: GetSingleEntryTitleByIdInput
  GetSingleEventInput: GetSingleEventInput
  GetSingleGrantInput: GetSingleGrantInput
  GetSingleManualInput: GetSingleManualInput
  GetSingleMenuInput: GetSingleMenuInput
  GetSingleNewsInput: GetSingleNewsInput
  GetSingleSupportQNAInput: GetSingleSupportQnaInput
  GetSubpageHeaderInput: GetSubpageHeaderInput
  GetSupportCategoriesInOrganizationInput: GetSupportCategoriesInOrganizationInput
  GetSupportCategoriesInput: GetSupportCategoriesInput
  GetSupportCategoryInput: GetSupportCategoryInput
  GetSupportQNAsInCategoryInput: GetSupportQnAsInCategoryInput
  GetSupportQNAsInput: GetSupportQnAsInput
  GetTabSectionInput: GetTabSectionInput
  GetTeamMembersInput: GetTeamMembersInput
  GetTranslationsInput: GetTranslationsInput
  GetUrlInput: GetUrlInput
  GetUserInvolvedPartiesInput: GetUserInvolvedPartiesInput
  GetVehicleDetailInput: GetVehicleDetailInput
  GetVehicleInput: GetVehicleInput
  GetVehicleMileageInput: GetVehicleMileageInput
  GetVehicleSearchInput: GetVehicleSearchInput
  GetVehiclesForUserInput: GetVehiclesForUserInput
  GetVehiclesListV2Input: GetVehiclesListV2Input
  Grade: Grade
  GradeType: GradeType
  Grant: Omit<
    Grant,
    | 'answeringQuestions'
    | 'applicationHints'
    | 'howToApply'
    | 'specialEmphasis'
    | 'whoCanApply'
  > & {
    answeringQuestions: Array<ResolversParentTypes['Slice']>
    applicationHints: Array<ResolversParentTypes['Slice']>
    howToApply: Array<ResolversParentTypes['Slice']>
    specialEmphasis: Array<ResolversParentTypes['Slice']>
    whoCanApply: Array<ResolversParentTypes['Slice']>
  }
  GrantCardsList: GrantCardsList
  GrantList: GrantList
  GraphCard: GraphCard
  GroupedMenu: GroupedMenu
  HasTeachingRights: HasTeachingRights
  HeadingSlice: HeadingSlice
  HealthDirectorateDispensation: HealthDirectorateDispensation
  HealthDirectorateDispensedItem: HealthDirectorateDispensedItem
  HealthDirectorateOrganDonation: HealthDirectorateOrganDonation
  HealthDirectorateOrganDonationLimitations: HealthDirectorateOrganDonationLimitations
  HealthDirectorateOrganDonationOrgan: HealthDirectorateOrganDonationOrgan
  HealthDirectorateOrganDonor: HealthDirectorateOrganDonor
  HealthDirectorateOrganDonorInput: HealthDirectorateOrganDonorInput
  HealthDirectoratePrescription: HealthDirectoratePrescription
  HealthDirectoratePrescriptions: HealthDirectoratePrescriptions
  HealthDirectorateReferral: HealthDirectorateReferral
  HealthDirectorateReferralContact: HealthDirectorateReferralContact
  HealthDirectorateReferrals: HealthDirectorateReferrals
  HealthDirectorateVaccination: HealthDirectorateVaccination
  HealthDirectorateVaccinations: HealthDirectorateVaccinations
  HealthDirectorateVaccinationsAge: HealthDirectorateVaccinationsAge
  HealthDirectorateVaccinationsInfo: HealthDirectorateVaccinationsInfo
  HealthDirectorateWaitlist: HealthDirectorateWaitlist
  HealthDirectorateWaitlists: HealthDirectorateWaitlists
  HealthInsuranceAccidentStatusInput: HealthInsuranceAccidentStatusInput
  Helpdesk: Helpdesk
  HmsLoansCoPayer: HmsLoansCoPayer
  HmsLoansHistory: HmsLoansHistory
  HmsLoansHistoryPdf: HmsLoansHistoryPdf
  HmsLoansPaymentHistory: HmsLoansPaymentHistory
  HmsLoansProperty: HmsLoansProperty
  Homestay: Homestay
  HousingBenefitCalculationModel: HousingBenefitCalculationModel
  HousingBenefitCalculatorCalculationInput: HousingBenefitCalculatorCalculationInput
  HousingBenefitCalculatorSpecificSupportCalculationInput: HousingBenefitCalculatorSpecificSupportCalculationInput
  HousingBenefitsPageInfo: HousingBenefitsPageInfo
  HousingBenefitsPayment: HousingBenefitsPayment
  HousingBenefitsPayments: HousingBenefitsPayments
  HousingBenefitsPaymentsInput: HousingBenefitsPaymentsInput
  Html: Html
  ID: Scalars['ID']
  IcelandicGovernmentInstitutionVacanciesInput: IcelandicGovernmentInstitutionVacanciesInput
  IcelandicGovernmentInstitutionVacanciesResponse: IcelandicGovernmentInstitutionVacanciesResponse
  IcelandicGovernmentInstitutionVacancy: IcelandicGovernmentInstitutionVacancy
  IcelandicGovernmentInstitutionVacancyByIdInput: IcelandicGovernmentInstitutionVacancyByIdInput
  IcelandicGovernmentInstitutionVacancyByIdResponse: IcelandicGovernmentInstitutionVacancyByIdResponse
  IcelandicGovernmentInstitutionVacancyContact: IcelandicGovernmentInstitutionVacancyContact
  IcelandicGovernmentInstitutionVacancyListItem: IcelandicGovernmentInstitutionVacancyListItem
  IcelandicGovernmentInstitutionVacancyLocation: IcelandicGovernmentInstitutionVacancyLocation
  IcelandicName: IcelandicName
  IconBullet: IconBullet
  Identity:
    | ResolversParentTypes['IdentityCompany']
    | ResolversParentTypes['IdentityPerson']
  IdentityAddress: IdentityAddress
  IdentityCompany: IdentityCompany
  IdentityData: IdentityData
  IdentityDocumentModel: IdentityDocumentModel
  IdentityDocumentModelChild: IdentityDocumentModelChild
  IdentityInput: IdentityInput
  IdentityPerson: IdentityPerson
  Image: Image
  InaoClientFinancialLimitInput: InaoClientFinancialLimitInput
  Int: Scalars['Int']
  IntellectualPropertiesAnnualFee: IntellectualPropertiesAnnualFee
  IntellectualPropertiesAnnualFeesInfo: IntellectualPropertiesAnnualFeesInfo
  IntellectualPropertiesApplicationLifecycle: IntellectualPropertiesApplicationLifecycle
  IntellectualPropertiesCategory: IntellectualPropertiesCategory
  IntellectualPropertiesClassification: IntellectualPropertiesClassification
  IntellectualPropertiesCountry: IntellectualPropertiesCountry
  IntellectualPropertiesDesign: IntellectualPropertiesDesign
  IntellectualPropertiesDesignImagesInput: IntellectualPropertiesDesignImagesInput
  IntellectualPropertiesEPApplicationLifecycle: IntellectualPropertiesEpApplicationLifecycle
  IntellectualPropertiesImage: IntellectualPropertiesImage
  IntellectualPropertiesImageList: IntellectualPropertiesImageList
  IntellectualPropertiesInput: IntellectualPropertiesInput
  IntellectualPropertiesMarketingAuthorization: IntellectualPropertiesMarketingAuthorization
  IntellectualPropertiesMedia: IntellectualPropertiesMedia
  IntellectualPropertiesPCT: IntellectualPropertiesPct
  IntellectualPropertiesPatent:
    | ResolversParentTypes['IntellectualPropertiesPatentEP']
    | ResolversParentTypes['IntellectualPropertiesPatentIS']
    | ResolversParentTypes['IntellectualPropertiesSPC']
  IntellectualPropertiesPatentEP: IntellectualPropertiesPatentEp
  IntellectualPropertiesPatentIS: IntellectualPropertiesPatentIs
  IntellectualPropertiesPerson: IntellectualPropertiesPerson
  IntellectualPropertiesPriority: IntellectualPropertiesPriority
  IntellectualPropertiesResponse: IntellectualPropertiesResponse
  IntellectualPropertiesSPC: IntellectualPropertiesSpc
  IntellectualPropertiesSpecification: IntellectualPropertiesSpecification
  IntellectualPropertiesTrademark: IntellectualPropertiesTrademark
  IntellectualProperty:
    | ResolversParentTypes['IntellectualPropertiesDesign']
    | ResolversParentTypes['IntellectualPropertiesPatentEP']
    | ResolversParentTypes['IntellectualPropertiesPatentIS']
    | ResolversParentTypes['IntellectualPropertiesSPC']
    | ResolversParentTypes['IntellectualPropertiesTrademark']
  IntroLinkImage: IntroLinkImage
  IsHealthInsuredInput: IsHealthInsuredInput
  Items:
    | ResolversParentTypes['AnchorPage']
    | ResolversParentTypes['Article']
    | ResolversParentTypes['LifeEventPage']
    | ResolversParentTypes['Link']
    | ResolversParentTypes['Manual']
    | ResolversParentTypes['ManualChapterItem']
    | ResolversParentTypes['News']
    | ResolversParentTypes['OrganizationPage']
    | ResolversParentTypes['OrganizationSubpage']
    | ResolversParentTypes['ProjectPage']
    | ResolversParentTypes['SubArticle']
    | ResolversParentTypes['SupportQNA']
  JSON: Scalars['JSON']
  JSONObject: Scalars['JSONObject']
  JourneymanLicence: JourneymanLicence
  JourneymanLicencesResponse: JourneymanLicencesResponse
  LandModel: LandModel
  LatestEventsSlice: LatestEventsSlice
  LatestGenericListItems: Omit<LatestGenericListItems, 'seeMorePage'> & {
    seeMorePage?: Maybe<ResolversParentTypes['Page']>
  }
  LatestNewsSlice: LatestNewsSlice
  LawAndOrderAction: LawAndOrderAction
  LawAndOrderCourtCase: LawAndOrderCourtCase
  LawAndOrderCourtCaseData: LawAndOrderCourtCaseData
  LawAndOrderCourtCaseInput: LawAndOrderCourtCaseInput
  LawAndOrderCourtCaseText: LawAndOrderCourtCaseText
  LawAndOrderCourtCases: LawAndOrderCourtCases
  LawAndOrderCourtCasesCase: LawAndOrderCourtCasesCase
  LawAndOrderCourtCasesState: LawAndOrderCourtCasesState
  LawAndOrderDefenseChoice: LawAndOrderDefenseChoice
  LawAndOrderDefenseChoiceInput: LawAndOrderDefenseChoiceInput
  LawAndOrderGroup: LawAndOrderGroup
  LawAndOrderLawyer: LawAndOrderLawyer
  LawAndOrderLawyerChoices: LawAndOrderLawyerChoices
  LawAndOrderLawyers: LawAndOrderLawyers
  LawAndOrderSubpoena: LawAndOrderSubpoena
  LawAndOrderSubpoenaData: LawAndOrderSubpoenaData
  LawAndOrderSubpoenaInput: LawAndOrderSubpoenaInput
  LawAndOrderSubpoenaItem: LawAndOrderSubpoenaItem
  LawAndOrderSubpoenaTexts: LawAndOrderSubpoenaTexts
  Lawyer: Lawyer
  LicenseDriverLicenseData: LicenseDriverLicenseData
  LifeEventPage: Omit<LifeEventPage, 'content'> & {
    content: Array<ResolversParentTypes['Slice']>
  }
  Link: Link
  LinkCard: LinkCard
  LinkCardSection: LinkCardSection
  LinkGroup: LinkGroup
  LinkList: LinkList
  LogoListSlice: LogoListSlice
  MachineDetails: MachineDetails
  Manual: Omit<Manual, 'description' | 'info'> & {
    description?: Maybe<Array<ResolversParentTypes['Slice']>>
    info?: Maybe<Array<ResolversParentTypes['Slice']>>
  }
  ManualChapter: Omit<ManualChapter, 'description'> & {
    description?: Maybe<Array<ResolversParentTypes['Slice']>>
  }
  ManualChapterChangelog: ManualChapterChangelog
  ManualChapterChangelogItem: ManualChapterChangelogItem
  ManualChapterItem: Omit<ManualChapterItem, 'content'> & {
    content?: Maybe<Array<ResolversParentTypes['Slice']>>
  }
  ManualPageData: ManualPageData
  ManyPropertyDetail: ManyPropertyDetail
  MarkNotificationReadResponse: MarkNotificationReadResponse
  MasterLicence: MasterLicence
  MasterLicencesResponse: MasterLicencesResponse
  Menu: Menu
  MenuLink: MenuLink
  MenuLinkWithChildren: MenuLinkWithChildren
  MetadataInput: MetadataInput
  MortgageCertificateValidationModel: MortgageCertificateValidationModel
  MultipleStatistics: MultipleStatistics
  MunicipalitiesFinancialAidAmountModel: MunicipalitiesFinancialAidAmountModel
  MunicipalitiesFinancialAidApplicationChildren: MunicipalitiesFinancialAidApplicationChildren
  MunicipalitiesFinancialAidApplicationEventModel: MunicipalitiesFinancialAidApplicationEventModel
  MunicipalitiesFinancialAidApplicationFileModel: MunicipalitiesFinancialAidApplicationFileModel
  MunicipalitiesFinancialAidApplicationFilesInput: MunicipalitiesFinancialAidApplicationFilesInput
  MunicipalitiesFinancialAidApplicationInput: MunicipalitiesFinancialAidApplicationInput
  MunicipalitiesFinancialAidApplicationModel: MunicipalitiesFinancialAidApplicationModel
  MunicipalitiesFinancialAidCreateFilesModel: MunicipalitiesFinancialAidCreateFilesModel
  MunicipalitiesFinancialAidCreateSignedUrlInput: MunicipalitiesFinancialAidCreateSignedUrlInput
  MunicipalitiesFinancialAidDeductionFactorsModel: MunicipalitiesFinancialAidDeductionFactorsModel
  MunicipalitiesFinancialAidGetSignedUrlInput: MunicipalitiesFinancialAidGetSignedUrlInput
  MunicipalitiesFinancialAidSignedUrlModel: MunicipalitiesFinancialAidSignedUrlModel
  MunicipalitiesFinancialAidUpdateApplicationInput: MunicipalitiesFinancialAidUpdateApplicationInput
  Mutation: {}
  MyPlateOwnershipChecksByRegno: MyPlateOwnershipChecksByRegno
  Namespace: Namespace
  NationalRegistryAddress: NationalRegistryAddress
  NationalRegistryBanMarking: NationalRegistryBanMarking
  NationalRegistryBirthplace: NationalRegistryBirthplace
  NationalRegistryChild: NationalRegistryChild
  NationalRegistryChildCustody: NationalRegistryChildCustody
  NationalRegistryCitizenship: NationalRegistryCitizenship
  NationalRegistryCustodian: NationalRegistryCustodian
  NationalRegistryHousing: NationalRegistryHousing
  NationalRegistryName: NationalRegistryName
  NationalRegistryPerson: NationalRegistryPerson
  NationalRegistryPersonBase: NationalRegistryPersonBase
  NationalRegistryReligion: NationalRegistryReligion
  NationalRegistryResidence: NationalRegistryResidence
  NationalRegistrySpouse: NationalRegistrySpouse
  NationalRegistryUser: NationalRegistryUser
  NationalRegistryXRoadAddress: NationalRegistryXRoadAddress
  NationalRegistryXRoadBirthplace: NationalRegistryXRoadBirthplace
  NationalRegistryXRoadChildGuardianship: NationalRegistryXRoadChildGuardianship
  NationalRegistryXRoadChildGuardianshipInput: NationalRegistryXRoadChildGuardianshipInput
  NationalRegistryXRoadCitizenship: NationalRegistryXRoadCitizenship
  NationalRegistryXRoadPerson: NationalRegistryXRoadPerson
  NationalRegistryXRoadSpouse: NationalRegistryXRoadSpouse
  News: Omit<News, 'content'> & {
    content?: Maybe<Array<ResolversParentTypes['Slice']>>
  }
  NewsList: NewsList
  NextInspection: NextInspection
  Notification: Notification
  NotificationLink: NotificationLink
  NotificationMessage: NotificationMessage
  NotificationMetadata: NotificationMetadata
  NotificationRecipient: NotificationRecipient
  NotificationResponse: NotificationResponse
  NotificationSender: NotificationSender
  Notifications: Notifications
  NotificationsInput: NotificationsInput
  NotificationsMarkAllAsReadResponse: NotificationsMarkAllAsReadResponse
  NotificationsMarkAllAsSeenResponse: NotificationsMarkAllAsSeenResponse
  NumberBullet: NumberBullet
  NumberBulletGroup: NumberBulletGroup
  OJOIAApplicationCaseResponse: OjoiaApplicationCaseResponse
  OJOIAComment: OjoiaComment
  OJOIAGetCommentsInput: OjoiaGetCommentsInput
  OJOIAGetCommentsResponse: OjoiaGetCommentsResponse
  OJOIAGetPdfResponse: OjoiaGetPdfResponse
  OJOIAIdInput: OjoiaIdInput
  OJOIAPostCommentInput: OjoiaPostCommentInput
  OccupationalLicense: OccupationalLicense
  OccupationalLicensesError: OccupationalLicensesError
  OccupationalLicensesGenericField: OccupationalLicensesGenericField
  OccupationalLicensesLicenseInput: OccupationalLicensesLicenseInput
  OccupationalLicensesLicenseResponse: OccupationalLicensesLicenseResponse
  OccupationalLicensesLicenseResult:
    | ResolversParentTypes['OccupationalLicense']
    | ResolversParentTypes['OccupationalLicensesError']
  OccupationalLicensesLicenses: Omit<
    OccupationalLicensesLicenses,
    'licenses'
  > & {
    licenses: Array<ResolversParentTypes['OccupationalLicensesLicenseResult']>
  }
  OccupationalLicensesLink: OccupationalLicensesLink
  OfficialJournalOfIcelandAdvert: OfficialJournalOfIcelandAdvert
  OfficialJournalOfIcelandAdvertCategory: OfficialJournalOfIcelandAdvertCategory
  OfficialJournalOfIcelandAdvertCorrections: OfficialJournalOfIcelandAdvertCorrections
  OfficialJournalOfIcelandAdvertDocument: OfficialJournalOfIcelandAdvertDocument
  OfficialJournalOfIcelandAdvertEntity: OfficialJournalOfIcelandAdvertEntity
  OfficialJournalOfIcelandAdvertMainCategory: OfficialJournalOfIcelandAdvertMainCategory
  OfficialJournalOfIcelandAdvertPublicationNumber: OfficialJournalOfIcelandAdvertPublicationNumber
  OfficialJournalOfIcelandAdvertResponse: OfficialJournalOfIcelandAdvertResponse
  OfficialJournalOfIcelandAdvertSimilar: OfficialJournalOfIcelandAdvertSimilar
  OfficialJournalOfIcelandAdvertSimilarParams: OfficialJournalOfIcelandAdvertSimilarParams
  OfficialJournalOfIcelandAdvertSimilarResponse: OfficialJournalOfIcelandAdvertSimilarResponse
  OfficialJournalOfIcelandAdvertSingleParams: OfficialJournalOfIcelandAdvertSingleParams
  OfficialJournalOfIcelandAdvertTemplateInput: OfficialJournalOfIcelandAdvertTemplateInput
  OfficialJournalOfIcelandAdvertType: OfficialJournalOfIcelandAdvertType
  OfficialJournalOfIcelandAdvertsCategoryResponse: OfficialJournalOfIcelandAdvertsCategoryResponse
  OfficialJournalOfIcelandAdvertsDepartmentResponse: OfficialJournalOfIcelandAdvertsDepartmentResponse
  OfficialJournalOfIcelandAdvertsDepartmentsResponse: OfficialJournalOfIcelandAdvertsDepartmentsResponse
  OfficialJournalOfIcelandAdvertsInput: OfficialJournalOfIcelandAdvertsInput
  OfficialJournalOfIcelandAdvertsInstitutionsResponse: OfficialJournalOfIcelandAdvertsInstitutionsResponse
  OfficialJournalOfIcelandAdvertsMainCategoriesResponse: OfficialJournalOfIcelandAdvertsMainCategoriesResponse
  OfficialJournalOfIcelandAdvertsMainType: OfficialJournalOfIcelandAdvertsMainType
  OfficialJournalOfIcelandAdvertsResponse: OfficialJournalOfIcelandAdvertsResponse
  OfficialJournalOfIcelandAdvertsTypeResponse: OfficialJournalOfIcelandAdvertsTypeResponse
  OfficialJournalOfIcelandAdvertsTypesResponse: OfficialJournalOfIcelandAdvertsTypesResponse
  OfficialJournalOfIcelandApplicationAddApplicationAttachmentInput: OfficialJournalOfIcelandApplicationAddApplicationAttachmentInput
  OfficialJournalOfIcelandApplicationAddApplicationAttachmentResponse: OfficialJournalOfIcelandApplicationAddApplicationAttachmentResponse
  OfficialJournalOfIcelandApplicationDeleteApplicationAttachmentInput: OfficialJournalOfIcelandApplicationDeleteApplicationAttachmentInput
  OfficialJournalOfIcelandApplicationGetApplicationAttachmentInput: OfficialJournalOfIcelandApplicationGetApplicationAttachmentInput
  OfficialJournalOfIcelandApplicationGetApplicationAttachmentResponse: OfficialJournalOfIcelandApplicationGetApplicationAttachmentResponse
  OfficialJournalOfIcelandApplicationGetApplicationAttachments: OfficialJournalOfIcelandApplicationGetApplicationAttachments
  OfficialJournalOfIcelandApplicationGetMyUserInfoResponse: OfficialJournalOfIcelandApplicationGetMyUserInfoResponse
  OfficialJournalOfIcelandApplicationGetPdfUrlResponse: OfficialJournalOfIcelandApplicationGetPdfUrlResponse
  OfficialJournalOfIcelandApplicationGetPresignedUrlInput: OfficialJournalOfIcelandApplicationGetPresignedUrlInput
  OfficialJournalOfIcelandApplicationGetPresignedUrlResponse: OfficialJournalOfIcelandApplicationGetPresignedUrlResponse
  OfficialJournalOfIcelandApplicationGetPriceResponse: OfficialJournalOfIcelandApplicationGetPriceResponse
  OfficialJournalOfIcelandApplicationGetUserInvolvedPartiesResponse: OfficialJournalOfIcelandApplicationGetUserInvolvedPartiesResponse
  OfficialJournalOfIcelandApplicationGetUserInvolvedParty: OfficialJournalOfIcelandApplicationGetUserInvolvedParty
  OfficialJournalOfIcelandApplicationInvolvedPartySignature: OfficialJournalOfIcelandApplicationInvolvedPartySignature
  OfficialJournalOfIcelandApplicationInvolvedPartySignatureResponse: OfficialJournalOfIcelandApplicationInvolvedPartySignatureResponse
  OfficialJournalOfIcelandApplicationInvolvedPartySignaturesInput: OfficialJournalOfIcelandApplicationInvolvedPartySignaturesInput
  OfficialJournalOfIcelandApplicationPostCommentResponse: OfficialJournalOfIcelandApplicationPostCommentResponse
  OfficialJournalOfIcelandApplicationSignatureMember: OfficialJournalOfIcelandApplicationSignatureMember
  OfficialJournalOfIcelandCaseInProgress: OfficialJournalOfIcelandCaseInProgress
  OfficialJournalOfIcelandCasesInProgressResponse: OfficialJournalOfIcelandCasesInProgressResponse
  OfficialJournalOfIcelandMainTypesInput: OfficialJournalOfIcelandMainTypesInput
  OfficialJournalOfIcelandMainTypesResponse: OfficialJournalOfIcelandMainTypesResponse
  OfficialJournalOfIcelandPaging: OfficialJournalOfIcelandPaging
  OfficialJournalOfIcelandQueryInput: OfficialJournalOfIcelandQueryInput
  OfficialJournalOfIcelandTypesInput: OfficialJournalOfIcelandTypesInput
  OneColumnText: Omit<OneColumnText, 'content'> & {
    content?: Maybe<Array<ResolversParentTypes['Slice']>>
  }
  OpenApi: OpenApi
  OpenDataPage: OpenDataPage
  OpenDataSubpage: OpenDataSubpage
  OpenListInput: OpenListInput
  OperatingLicense: OperatingLicense
  OperatingLicensesCSV: OperatingLicensesCsv
  OperatorChangeAnswers: OperatorChangeAnswers
  OperatorChangeAnswersMainOperator: OperatorChangeAnswersMainOperator
  OperatorChangeAnswersOperators: OperatorChangeAnswersOperators
  OperatorChangeAnswersPickVehicle: OperatorChangeAnswersPickVehicle
  OperatorChangeAnswersPlateDelivery: OperatorChangeAnswersPlateDelivery
  OperatorChangeAnswersUser: OperatorChangeAnswersUser
  OperatorChangeAnswersVehicleMileage: OperatorChangeAnswersVehicleMileage
  OperatorChangeValidation: OperatorChangeValidation
  OperatorChangeValidationMessage: OperatorChangeValidationMessage
  Organisation: Organisation
  Organization: Organization
  OrganizationFund: OrganizationFund
  OrganizationPage: Omit<
    OrganizationPage,
    'bottomSlices' | 'sidebarCards' | 'slices'
  > & {
    bottomSlices: Array<ResolversParentTypes['Slice']>
    sidebarCards?: Maybe<Array<ResolversParentTypes['Slice']>>
    slices: Array<ResolversParentTypes['Slice']>
  }
  OrganizationPageStandaloneSitemap: OrganizationPageStandaloneSitemap
  OrganizationPageStandaloneSitemapLevel2: OrganizationPageStandaloneSitemapLevel2
  OrganizationPageStandaloneSitemapLevel2Category: OrganizationPageStandaloneSitemapLevel2Category
  OrganizationPageStandaloneSitemapLevel2Link: OrganizationPageStandaloneSitemapLevel2Link
  OrganizationPageStandaloneSitemapLink: OrganizationPageStandaloneSitemapLink
  OrganizationPageTopLevelNavigation: OrganizationPageTopLevelNavigation
  OrganizationPageTopLevelNavigationLink: OrganizationPageTopLevelNavigationLink
  OrganizationParentSubpage: OrganizationParentSubpage
  OrganizationParentSubpageList: OrganizationParentSubpageList
  OrganizationParentSubpageListPageLink: OrganizationParentSubpageListPageLink
  OrganizationSubpage: Omit<
    OrganizationSubpage,
    'bottomSlices' | 'description' | 'slices'
  > & {
    bottomSlices?: Maybe<Array<ResolversParentTypes['Slice']>>
    description?: Maybe<Array<ResolversParentTypes['Slice']>>
    slices?: Maybe<Array<ResolversParentTypes['Slice']>>
  }
  OrganizationSubpageLink: OrganizationSubpageLink
  OrganizationTag: OrganizationTag
  OrganizationTags: OrganizationTags
  OrganizationTheme: OrganizationTheme
  Organizations: Organizations
  OverviewLinks: OverviewLinks
  OverviewLinksLinkData: OverviewLinksLinkData
  OverviewLinksLinkDataCategoryCardItem: OverviewLinksLinkDataCategoryCardItem
  OwnerChangeAnswers: OwnerChangeAnswers
  OwnerChangeAnswersBuyerOrCoOwner: OwnerChangeAnswersBuyerOrCoOwner
  OwnerChangeAnswersInsurance: OwnerChangeAnswersInsurance
  OwnerChangeAnswersMainOperator: OwnerChangeAnswersMainOperator
  OwnerChangeAnswersPickVehicle: OwnerChangeAnswersPickVehicle
  OwnerChangeAnswersUser: OwnerChangeAnswersUser
  OwnerChangeAnswersVehicle: OwnerChangeAnswersVehicle
  OwnerChangeAnswersVehicleMileage: OwnerChangeAnswersVehicleMileage
  OwnerChangeValidation: OwnerChangeValidation
  OwnerChangeValidationMessage: OwnerChangeValidationMessage
  Page:
    | ResolversParentTypes['AnchorPage']
    | ResolversParentTypes['Article']
    | ResolversParentTypes['ArticleCategory']
    | ResolversParentTypes['LifeEventPage']
    | ResolversParentTypes['News']
    | ResolversParentTypes['OrganizationPage']
    | ResolversParentTypes['OrganizationSubpage']
    | ResolversParentTypes['ProjectPage']
    | ResolversParentTypes['SubArticle']
  PageInfo: PageInfo
  PageInfoDto: PageInfoDto
  PageInfoResponse: PageInfoResponse
  PaginatedEndorsementInput: PaginatedEndorsementInput
  PaginatedEndorsementListInput: PaginatedEndorsementListInput
  PaginatedEndorsementListResponse: PaginatedEndorsementListResponse
  PaginatedEndorsementResponse: PaginatedEndorsementResponse
  PaginatedOperatingLicenses: PaginatedOperatingLicenses
  PaginationInfo: PaginationInfo
  PagingData: PagingData
  PaperMailBody: PaperMailBody
  ParentalLeave: ParentalLeave
  ParentalLeaveAttachment: ParentalLeaveAttachment
  ParentalLeaveEmployer: ParentalLeaveEmployer
  ParentalLeaveEntitlement: ParentalLeaveEntitlement
  ParentalLeavePaymentInfo: ParentalLeavePaymentInfo
  ParentalLeavePaymentPlan: ParentalLeavePaymentPlan
  ParentalLeavePensionFund: ParentalLeavePensionFund
  ParentalLeavePeriod: ParentalLeavePeriod
  ParentalLeavePeriodEndDate: ParentalLeavePeriodEndDate
  ParentalLeavePeriodLength: ParentalLeavePeriodLength
  ParentalLeaveUnion: ParentalLeaveUnion
  Passport: Passport
  PatchAuthConsentInput: PatchAuthConsentInput
  PatchAuthDelegationInput: PatchAuthDelegationInput
  Payload: Payload
  PaymentCatalogInput: PaymentCatalogInput
  PaymentCatalogItem: PaymentCatalogItem
  PaymentCatalogResponse: PaymentCatalogResponse
  PaymentSchedule: PaymentSchedule
  PaymentScheduleCharge: PaymentScheduleCharge
  PaymentScheduleCompanyConditions: PaymentScheduleCompanyConditions
  PaymentScheduleConditions: PaymentScheduleConditions
  PaymentScheduleData: PaymentScheduleData
  PaymentScheduleDebts: PaymentScheduleDebts
  PaymentScheduleDetailData: PaymentScheduleDetailData
  PaymentScheduleDetailModel: PaymentScheduleDetailModel
  PaymentScheduleDistribution: PaymentScheduleDistribution
  PaymentScheduleEmployer: PaymentScheduleEmployer
  PaymentScheduleInitialSchedule: PaymentScheduleInitialSchedule
  PaymentScheduleModel: PaymentScheduleModel
  PaymentSchedulePayment: PaymentSchedulePayment
  PaymentsCardInformation: PaymentsCardInformation
  PaymentsCardVerificationCallbackInput: PaymentsCardVerificationCallbackInput
  PaymentsCardVerificationField: PaymentsCardVerificationField
  PaymentsCardVerificationResponse: PaymentsCardVerificationResponse
  PaymentsChargeCardInput: PaymentsChargeCardInput
  PaymentsChargeCardResponse: PaymentsChargeCardResponse
  PaymentsCreateInvoiceInput: PaymentsCreateInvoiceInput
  PaymentsCreateInvoiceResponse: PaymentsCreateInvoiceResponse
  PaymentsGetPaymentFlowResponse: PaymentsGetPaymentFlowResponse
  PaymentsGetVerificationStatus: PaymentsGetVerificationStatus
  PaymentsVerifyCardInput: PaymentsVerifyCardInput
  PaymentsVerifyCardResponse: PaymentsVerifyCardResponse
  PendingAction: PendingAction
  PensionFund: PensionFund
  Period: Period
  PeriodItems: PeriodItems
  PeriodsModel: PeriodsModel
  PlateAvailability: PlateAvailability
  PlateAvailabilityInput: PlateAvailabilityInput
  PlateOrderAnswers: PlateOrderAnswers
  PlateOrderAnswersPickVehicle: PlateOrderAnswersPickVehicle
  PlateOrderAnswersPlateSize: PlateOrderAnswersPlateSize
  PlateOrderValidation: PlateOrderValidation
  PlateOrderValidationMessage: PlateOrderValidationMessage
  PostBulkMailActionResolverInput: PostBulkMailActionResolverInput
  PostMailActionResolverInput: PostMailActionResolverInput
  PostRequestPaperInput: PostRequestPaperInput
  PostVehicleBulkMileageInput: PostVehicleBulkMileageInput
  PostVehicleBulkMileageSingleInput: PostVehicleBulkMileageSingleInput
  PostVehicleMileageInput: PostVehicleMileageInput
  PowerBiSlice: PowerBiSlice
  PracticalDrivingLesson: PracticalDrivingLesson
  PracticalDrivingLessonsInput: PracticalDrivingLessonsInput
  PregnancyStatus: PregnancyStatus
  PresignedPost: PresignedPost
  PresignedUrlResponse: PresignedUrlResponse
  ProcessEntry: ProcessEntry
  ProfessionRight: ProfessionRight
  ProfessionRightsResponse: ProfessionRightsResponse
  ProjectPage: Omit<ProjectPage, 'bottomSlices' | 'content' | 'slices'> & {
    bottomSlices: Array<ResolversParentTypes['Slice']>
    content?: Maybe<Array<ResolversParentTypes['Slice']>>
    slices: Array<ResolversParentTypes['Slice']>
  }
  ProjectPageThemeProperties: ProjectPageThemeProperties
  ProjectSubpage: Omit<
    ProjectSubpage,
    'bottomSlices' | 'content' | 'slices'
  > & {
    bottomSlices?: Maybe<Array<ResolversParentTypes['Slice']>>
    content?: Maybe<Array<ResolversParentTypes['Slice']>>
    slices: Array<ResolversParentTypes['Slice']>
  }
  Properties: Properties
  PropertyDetail: PropertyDetail
  PropertyLocation: PropertyLocation
  PropertyOverview: PropertyOverview
  PropertyOwner: PropertyOwner
  PropertyOwnersModel: PropertyOwnersModel
  Provider: Provider
  ProviderStatistics: ProviderStatistics
  PutVehicleMileageInput: PutVehicleMileageInput
  Query: {}
  QuestionAndAnswer: Omit<QuestionAndAnswer, 'answer'> & {
    answer: Array<ResolversParentTypes['Slice']>
  }
  RealEstateAgent: RealEstateAgent
  RealEstateDetail: RealEstateDetail
  ReferenceLink: ReferenceLink
  RegistryPerson: RegistryPerson
  RegulationAuthor: RegulationAuthor
  RegulationShippedAuthor: RegulationShippedAuthor
  RegulationSummaryAuthor: RegulationSummaryAuthor
  ReligiousOrganization: ReligiousOrganization
  ReligiousOrganizationsResponse: ReligiousOrganizationsResponse
  RequestCorrectionOnMortgageCertificateInput: RequestCorrectionOnMortgageCertificateInput
  RequestCorrectionOnMortgageCertificateModel: RequestCorrectionOnMortgageCertificateModel
  Response: Response
  RightsPortalAddress: RightsPortalAddress
  RightsPortalAidOrNutrition: RightsPortalAidOrNutrition
  RightsPortalAidOrNutritionRefund: RightsPortalAidOrNutritionRefund
  RightsPortalCalculatorRequest: RightsPortalCalculatorRequest
  RightsPortalCalculatorRequestInput: RightsPortalCalculatorRequestInput
  RightsPortalCopaymentBill: RightsPortalCopaymentBill
  RightsPortalCopaymentBillResponse: RightsPortalCopaymentBillResponse
  RightsPortalCopaymentBillsInput: RightsPortalCopaymentBillsInput
  RightsPortalCopaymentInsuranceStatus: RightsPortalCopaymentInsuranceStatus
  RightsPortalCopaymentPeriod: RightsPortalCopaymentPeriod
  RightsPortalCopaymentPeriodInput: RightsPortalCopaymentPeriodInput
  RightsPortalCopaymentPeriodResponse: RightsPortalCopaymentPeriodResponse
  RightsPortalCopaymentStatus: RightsPortalCopaymentStatus
  RightsPortalDentist: RightsPortalDentist
  RightsPortalDentistBill: RightsPortalDentistBill
  RightsPortalDentistBillsInput: RightsPortalDentistBillsInput
  RightsPortalDentistPractice: RightsPortalDentistPractice
  RightsPortalDentistRegisterInput: RightsPortalDentistRegisterInput
  RightsPortalDentistRegisterResponse: RightsPortalDentistRegisterResponse
  RightsPortalDentistStatus: RightsPortalDentistStatus
  RightsPortalDentistsInput: RightsPortalDentistsInput
  RightsPortalDrug: RightsPortalDrug
  RightsPortalDrugBill: RightsPortalDrugBill
  RightsPortalDrugBillInput: RightsPortalDrugBillInput
  RightsPortalDrugBillLine: RightsPortalDrugBillLine
  RightsPortalDrugCalculation: RightsPortalDrugCalculation
  RightsPortalDrugCalculatorInput: RightsPortalDrugCalculatorInput
  RightsPortalDrugCalculatorResponse: RightsPortalDrugCalculatorResponse
  RightsPortalDrugCertificate: RightsPortalDrugCertificate
  RightsPortalDrugCertificateInput: RightsPortalDrugCertificateInput
  RightsPortalDrugInput: RightsPortalDrugInput
  RightsPortalDrugPeriod: RightsPortalDrugPeriod
  RightsPortalDrugsBillLineInput: RightsPortalDrugsBillLineInput
  RightsPortalHealthCenter: RightsPortalHealthCenter
  RightsPortalHealthCenterDoctors: RightsPortalHealthCenterDoctors
  RightsPortalHealthCenterDoctorsInput: RightsPortalHealthCenterDoctorsInput
  RightsPortalHealthCenterHistoryInput: RightsPortalHealthCenterHistoryInput
  RightsPortalHealthCenterRecord: RightsPortalHealthCenterRecord
  RightsPortalHealthCenterRegisterInput: RightsPortalHealthCenterRegisterInput
  RightsPortalHealthCenterRegisterResponse: RightsPortalHealthCenterRegisterResponse
  RightsPortalHealthCenterRegistrationHistory: RightsPortalHealthCenterRegistrationHistory
  RightsPortalInsuranceConfirmation: RightsPortalInsuranceConfirmation
  RightsPortalInsuranceOverview: RightsPortalInsuranceOverview
  RightsPortalInsuranceStatus: RightsPortalInsuranceStatus
  RightsPortalMethylDoctor: RightsPortalMethylDoctor
  RightsPortalPaginatedAidsOrNutrition: RightsPortalPaginatedAidsOrNutrition
  RightsPortalPaginatedDentists: RightsPortalPaginatedDentists
  RightsPortalPaginatedDrug: RightsPortalPaginatedDrug
  RightsPortalPaginatedHealthCenters: RightsPortalPaginatedHealthCenters
  RightsPortalPaginatedTherapies: RightsPortalPaginatedTherapies
  RightsPortalPaymentError: RightsPortalPaymentError
  RightsPortalPaymentOverview: RightsPortalPaymentOverview
  RightsPortalPaymentOverviewBill: RightsPortalPaymentOverviewBill
  RightsPortalPaymentOverviewDocument: RightsPortalPaymentOverviewDocument
  RightsPortalPaymentOverviewDocumentInput: RightsPortalPaymentOverviewDocumentInput
  RightsPortalPaymentOverviewDocumentResponse: RightsPortalPaymentOverviewDocumentResponse
  RightsPortalPaymentOverviewInput: RightsPortalPaymentOverviewInput
  RightsPortalPaymentOverviewResponse: RightsPortalPaymentOverviewResponse
  RightsPortalPaymentOverviewServiceType: RightsPortalPaymentOverviewServiceType
  RightsPortalPaymentOverviewServiceTypeResponse: RightsPortalPaymentOverviewServiceTypeResponse
  RightsPortalTherapy: RightsPortalTherapy
  RightsPortalTherapyPeriod: RightsPortalTherapyPeriod
  RightsPortalTherapySession: RightsPortalTherapySession
  RightsPortalTherapyState: RightsPortalTherapyState
  RightsPortalUserDentistInformation: RightsPortalUserDentistInformation
  RightsPortalUserDentistRegistration: RightsPortalUserDentistRegistration
  RskCompany: RskCompany
  RskCompanyAddress: RskCompanyAddress
  RskCompanyClassification: RskCompanyClassification
  RskCompanyFormOfOperation: RskCompanyFormOfOperation
  RskCompanyInfo: RskCompanyInfo
  RskCompanyInfoInput: RskCompanyInfoInput
  RskCompanyInfoSearchInput: RskCompanyInfoSearchInput
  RskCompanyRelatedParty: RskCompanyRelatedParty
  RskCompanySearchItems: RskCompanySearchItems
  RskCompanyVat: RskCompanyVat
  RunEndpointTestsInput: RunEndpointTestsInput
  ScopeInput: ScopeInput
  ScopesInput: ScopesInput
  SearchForPropertyInput: SearchForPropertyInput
  SearchResult: Omit<SearchResult, 'items'> & {
    items: Array<ResolversParentTypes['Items']>
  }
  SearcherInput: SearcherInput
  SecondarySchoolProgram: SecondarySchoolProgram
  SectionWithImage: Omit<SectionWithImage, 'content'> & {
    content?: Maybe<Array<ResolversParentTypes['Slice']>>
  }
  SectionWithVideo: SectionWithVideo
  SeminarIndividual: SeminarIndividual
  SeminarsCompanyValidationItem: SeminarsCompanyValidationItem
  SeminarsIndividualValidationItem: SeminarsIndividualValidationItem
  Service: Service
  ServiceDetail: ServiceDetail
  ServiceEnvironment: ServiceEnvironment
  ServiceWebFormsInput: ServiceWebFormsInput
  ServiceWebPage: Omit<ServiceWebPage, 'contactFormDisclaimer' | 'slices'> & {
    contactFormDisclaimer?: Maybe<Array<ResolversParentTypes['Slice']>>
    slices: Array<ResolversParentTypes['Slice']>
  }
  ServiceWebPageEmailConfig: ServiceWebPageEmailConfig
  ServiceWebPageEmailConfigItem: ServiceWebPageEmailConfigItem
  SessionsInput: SessionsInput
  SessionsPaginatedSessionResponse: SessionsPaginatedSessionResponse
  SessionsSession: SessionsSession
  ShipDetail: ShipDetail
  ShipMeasurements: ShipMeasurements
  ShipRegistryShip: ShipRegistryShip
  ShipRegistryShipOwner: ShipRegistryShipOwner
  ShipRegistryShipSearch: ShipRegistryShipSearch
  ShipRegistryShipSearchInput: ShipRegistryShipSearchInput
  SidebarCard: SidebarCard
  SignatureCollection: SignatureCollection
  SignatureCollectionAddListsInput: SignatureCollectionAddListsInput
  SignatureCollectionArea: SignatureCollectionArea
  SignatureCollectionAreaBase: SignatureCollectionAreaBase
  SignatureCollectionAreaInput: SignatureCollectionAreaInput
  SignatureCollectionAreaSummaryReport: SignatureCollectionAreaSummaryReport
  SignatureCollectionAreaSummaryReportInput: SignatureCollectionAreaSummaryReportInput
  SignatureCollectionBulk: SignatureCollectionBulk
  SignatureCollectionCanSignFromPaperInput: SignatureCollectionCanSignFromPaperInput
  SignatureCollectionCancelListsInput: SignatureCollectionCancelListsInput
  SignatureCollectionCandidate: SignatureCollectionCandidate
  SignatureCollectionCandidateIdInput: SignatureCollectionCandidateIdInput
  SignatureCollectionCandidateLookUp: SignatureCollectionCandidateLookUp
  SignatureCollectionCollector: SignatureCollectionCollector
  SignatureCollectionExtendDeadlineInput: SignatureCollectionExtendDeadlineInput
  SignatureCollectionIdInput: SignatureCollectionIdInput
  SignatureCollectionList: SignatureCollectionList
  SignatureCollectionListBase: SignatureCollectionListBase
  SignatureCollectionListBulkUploadInput: SignatureCollectionListBulkUploadInput
  SignatureCollectionListIdInput: SignatureCollectionListIdInput
  SignatureCollectionListInput: SignatureCollectionListInput
  SignatureCollectionListNationalIdsInput: SignatureCollectionListNationalIdsInput
  SignatureCollectionListStatus: SignatureCollectionListStatus
  SignatureCollectionListSummary: SignatureCollectionListSummary
  SignatureCollectionNationalIdInput: SignatureCollectionNationalIdInput
  SignatureCollectionNationalIds: SignatureCollectionNationalIds
  SignatureCollectionNationalIdsInput: SignatureCollectionNationalIdsInput
  SignatureCollectionOwnedList: SignatureCollectionOwnedList
  SignatureCollectionOwnerInput: SignatureCollectionOwnerInput
  SignatureCollectionSignature: SignatureCollectionSignature
  SignatureCollectionSignatureIdInput: SignatureCollectionSignatureIdInput
  SignatureCollectionSignatureLookupInput: SignatureCollectionSignatureLookupInput
  SignatureCollectionSignatureUpdateInput: SignatureCollectionSignatureUpdateInput
  SignatureCollectionSignedList: SignatureCollectionSignedList
  SignatureCollectionSignee: SignatureCollectionSignee
  SignatureCollectionSigneeBase: SignatureCollectionSigneeBase
  SignatureCollectionSlug: SignatureCollectionSlug
  SignatureCollectionSuccess: SignatureCollectionSuccess
  SignatureCollectionUploadPaperSignatureInput: SignatureCollectionUploadPaperSignatureInput
  SimpleProperties: SimpleProperties
  Slice:
    | ResolversParentTypes['AccordionSlice']
    | ResolversParentTypes['AnchorPageListSlice']
    | ResolversParentTypes['Asset']
    | ResolversParentTypes['BulletListSlice']
    | ResolversParentTypes['Chart']
    | ResolversParentTypes['ChartComponent']
    | ResolversParentTypes['ChartNumberBox']
    | ResolversParentTypes['ConnectedComponent']
    | ResolversParentTypes['ContactUs']
    | ResolversParentTypes['Districts']
    | ResolversParentTypes['EmailSignup']
    | ResolversParentTypes['Embed']
    | ResolversParentTypes['EmbeddedVideo']
    | ResolversParentTypes['EventSlice']
    | ResolversParentTypes['FaqList']
    | ResolversParentTypes['FeaturedArticles']
    | ResolversParentTypes['FeaturedEvents']
    | ResolversParentTypes['FeaturedLinks']
    | ResolversParentTypes['FeaturedSupportQNAs']
    | ResolversParentTypes['Form']
    | ResolversParentTypes['GenericList']
    | ResolversParentTypes['GrantCardsList']
    | ResolversParentTypes['GraphCard']
    | ResolversParentTypes['HeadingSlice']
    | ResolversParentTypes['Html']
    | ResolversParentTypes['Image']
    | ResolversParentTypes['IntroLinkImage']
    | ResolversParentTypes['LatestEventsSlice']
    | ResolversParentTypes['LatestGenericListItems']
    | ResolversParentTypes['LatestNewsSlice']
    | ResolversParentTypes['LinkCard']
    | ResolversParentTypes['LinkCardSection']
    | ResolversParentTypes['LogoListSlice']
    | ResolversParentTypes['MultipleStatistics']
    | ResolversParentTypes['OneColumnText']
    | ResolversParentTypes['OrganizationParentSubpageList']
    | ResolversParentTypes['OverviewLinks']
    | ResolversParentTypes['PowerBiSlice']
    | ResolversParentTypes['ProcessEntry']
    | ResolversParentTypes['SectionWithImage']
    | ResolversParentTypes['SectionWithVideo']
    | ResolversParentTypes['SidebarCard']
    | ResolversParentTypes['SliceDropdown']
    | ResolversParentTypes['Statistics']
    | ResolversParentTypes['Stepper']
    | ResolversParentTypes['StorySlice']
    | ResolversParentTypes['TabSection']
    | ResolversParentTypes['TableSlice']
    | ResolversParentTypes['TeamList']
    | ResolversParentTypes['TellUsAStory']
    | ResolversParentTypes['TimelineSlice']
    | ResolversParentTypes['TwoColumnText']
  SliceDropdown: SliceDropdown
  SocialInsuranceIncomePlan: SocialInsuranceIncomePlan
  SocialInsuranceIncomePlanEligbility: SocialInsuranceIncomePlanEligbility
  SocialInsuranceIncomePlanIncomeCategory: SocialInsuranceIncomePlanIncomeCategory
  SocialInsuranceIncomeType: SocialInsuranceIncomeType
  SocialInsurancePayment: SocialInsurancePayment
  SocialInsurancePaymentGroup: SocialInsurancePaymentGroup
  SocialInsurancePaymentMonth: SocialInsurancePaymentMonth
  SocialInsurancePaymentPlan: SocialInsurancePaymentPlan
  SocialInsurancePayments: SocialInsurancePayments
  SocialInsurancePensionCalculationInput: SocialInsurancePensionCalculationInput
  SocialInsurancePensionCalculationResponse: SocialInsurancePensionCalculationResponse
  SocialInsurancePensionCalculationResponseItem: SocialInsurancePensionCalculationResponseItem
  SocialInsurancePensionCalculationResponseItemGroup: SocialInsurancePensionCalculationResponseItemGroup
  SocialInsuranceTemporaryCalculation: SocialInsuranceTemporaryCalculation
  SocialInsuranceTemporaryCalculationGroup: SocialInsuranceTemporaryCalculationGroup
  SocialInsuranceTemporaryCalculationInput: SocialInsuranceTemporaryCalculationInput
  SocialInsuranceTemporaryCalculationMonth: SocialInsuranceTemporaryCalculationMonth
  SocialInsuranceTemporaryCalculationRow: SocialInsuranceTemporaryCalculationRow
  Statistic: Statistic
  StatisticKeyValue: StatisticKeyValue
  Statistics: Statistics
  StatisticsCard: StatisticsCard
  StatisticsForHeader: StatisticsForHeader
  StatisticsInput: StatisticsInput
  StatisticsQueryInput: StatisticsQueryInput
  StatisticsQueryResponse: StatisticsQueryResponse
  Step: Omit<Step, 'subtitle'> & {
    subtitle?: Maybe<Array<ResolversParentTypes['Slice']>>
  }
  Stepper: Stepper
  Story: Story
  StorySlice: StorySlice
  String: Scalars['String']
  StudentAssessment: StudentAssessment
  StudentCanGetPracticePermit: StudentCanGetPracticePermit
  StudentCanGetPracticePermitInput: StudentCanGetPracticePermitInput
  StudentInformation: StudentInformation
  StudentInformationResult: StudentInformationResult
  SubArticle: Omit<SubArticle, 'body'> & {
    body: Array<ResolversParentTypes['Slice']>
  }
  SubmitApplicationInput: SubmitApplicationInput
  SubmitFormSystemScreenInput: SubmitFormSystemScreenInput
  SubpageHeader: Omit<SubpageHeader, 'body'> & {
    body?: Maybe<Array<ResolversParentTypes['Slice']>>
  }
  SupportCategory: SupportCategory
  SupportQNA: Omit<SupportQna, 'answer'> & {
    answer: Array<ResolversParentTypes['Slice']>
  }
  SupportSubCategory: SupportSubCategory
  SyslumennAuction: SyslumennAuction
  TabContent: Omit<TabContent, 'body'> & {
    body?: Maybe<Array<ResolversParentTypes['Slice']>>
  }
  TabSection: TabSection
  TableSlice: TableSlice
  Tag: Tag
  TagCount: TagCount
  TeacherV4: TeacherV4
  TeamList: TeamList
  TeamMember: Omit<TeamMember, 'intro'> & {
    intro?: Maybe<Array<ResolversParentTypes['Slice']>>
  }
  TeamMemberResponse: TeamMemberResponse
  TeamMemberResponseInput: TeamMemberResponseInput
  TeamMemberTagGroup: TeamMemberTagGroup
  TellUsAStory: TellUsAStory
  TellUsAStoryInput: TellUsAStoryInput
  TemporaryEventLicence: TemporaryEventLicence
  TestResult: TestResult
  TextFieldLocales: TextFieldLocales
  TimelineEvent: TimelineEvent
  TimelineSlice: TimelineSlice
  TwoColumnText: Omit<TwoColumnText, 'leftContent' | 'rightContent'> & {
    leftContent?: Maybe<Array<ResolversParentTypes['Slice']>>
    rightContent?: Maybe<Array<ResolversParentTypes['Slice']>>
  }
  TypeCount: TypeCount
  Tyres: Tyres
  Union: Union
  UnitOfUse: UnitOfUse
  UnitsOfUseModel: UnitsOfUseModel
  UniversityCareersInstitution: UniversityCareersInstitution
  UniversityCareersStudentFile: UniversityCareersStudentFile
  UniversityCareersStudentInfoByUniversityInput: UniversityCareersStudentInfoByUniversityInput
  UniversityCareersStudentInfoInput: UniversityCareersStudentInfoInput
  UniversityCareersStudentTrack: UniversityCareersStudentTrack
  UniversityCareersStudentTrackHistory: UniversityCareersStudentTrackHistory
  UniversityCareersStudentTrackMetadata: UniversityCareersStudentTrackMetadata
  UniversityCareersStudentTrackTranscript: UniversityCareersStudentTrackTranscript
  UniversityCareersStudentTrackTranscriptError: UniversityCareersStudentTrackTranscriptError
  UniversityGatewayApplication: UniversityGatewayApplication
  UniversityGatewayGetPogramInput: UniversityGatewayGetPogramInput
  UniversityGatewayProgram: UniversityGatewayProgram
  UniversityGatewayProgramDetails: UniversityGatewayProgramDetails
  UniversityGatewayProgramExtraApplicationField: UniversityGatewayProgramExtraApplicationField
  UniversityGatewayProgramFilter: UniversityGatewayProgramFilter
  UniversityGatewayProgramsPaginated: UniversityGatewayProgramsPaginated
  UniversityGatewayUniversity: UniversityGatewayUniversity
  UpdateApplicationExternalDataInput: UpdateApplicationExternalDataInput
  UpdateApplicationInput: UpdateApplicationInput
  UpdateAuthDelegationInput: UpdateAuthDelegationInput
  UpdateChangeAppendixInput: UpdateChangeAppendixInput
  UpdateContactInput: UpdateContactInput
  UpdateCurrentEmployerInput: UpdateCurrentEmployerInput
  UpdateCurrentEmployerResponse: UpdateCurrentEmployerResponse
  UpdateDraftRegulationCancelInput: UpdateDraftRegulationCancelInput
  UpdateDraftRegulationChangeInput: UpdateDraftRegulationChangeInput
  UpdateEndorsementListDto: UpdateEndorsementListDto
  UpdateEndorsementListInput: UpdateEndorsementListInput
  UpdateEndpointInput: UpdateEndpointInput
  UpdateFormSystemApplicantDtoInput: UpdateFormSystemApplicantDtoInput
  UpdateFormSystemApplicantInput: UpdateFormSystemApplicantInput
  UpdateFormSystemApplicationDependenciesInput: UpdateFormSystemApplicationDependenciesInput
  UpdateHelpdeskInput: UpdateHelpdeskInput
  UpdateIcelandicNameInput: UpdateIcelandicNameInput
  UpdateOrganisationInput: UpdateOrganisationInput
  UpdatePracticalDrivingLessonInput: UpdatePracticalDrivingLessonInput
  UpdateUserProfileInput: UpdateUserProfileInput
  Url: Url
  UserDeviceToken: UserDeviceToken
  UserDeviceTokenInput: UserDeviceTokenInput
  UserProfile: UserProfile
  UserProfileActorProfile: UserProfileActorProfile
  UserProfileActorProfileResponse: UserProfileActorProfileResponse
  UserProfileAdminProfile: UserProfileAdminProfile
  UserProfileAdminProfilesResponse: UserProfileAdminProfilesResponse
  UserProfileData: UserProfileData
  UserProfileLocale: UserProfileLocale
  UserProfileUpdateActorProfileInput: UserProfileUpdateActorProfileInput
  ValidateMortgageCertificateInput: ValidateMortgageCertificateInput
  ValidateSeminarIndividualsInput: ValidateSeminarIndividualsInput
  VehicleCurrentWithMileage: VehicleCurrentWithMileage
  VehicleDetail: VehicleDetail
  VehicleListed: VehicleListed
  VehicleMileageDetail: VehicleMileageDetail
  VehicleMileageOverview: VehicleMileageOverview
  VehicleMileagePostResponse:
    | ResolversParentTypes['VehicleMileageDetail']
    | ResolversParentTypes['VehiclesMileageUpdateError']
  VehicleMileagePutModel: VehicleMileagePutModel
  VehicleMileagePutResponse:
    | ResolversParentTypes['VehicleMileagePutModel']
    | ResolversParentTypes['VehiclesMileageUpdateError']
  VehicleOperatorChangeChecksByPermno: VehicleOperatorChangeChecksByPermno
  VehicleOwnerchangeChecksByPermno: VehicleOwnerchangeChecksByPermno
  VehiclePaging: VehiclePaging
  VehiclePlateOrderChecksByPermno: VehiclePlateOrderChecksByPermno
  VehicleRegistration: VehicleRegistration
  VehicleValidationErrorMessage: VehicleValidationErrorMessage
  VehiclesAxle: VehiclesAxle
  VehiclesBasicInfo: VehiclesBasicInfo
  VehiclesBulkMileageReadingResponse: VehiclesBulkMileageReadingResponse
  VehiclesBulkMileageRegistrationJob: VehiclesBulkMileageRegistrationJob
  VehiclesBulkMileageRegistrationJobHistory: VehiclesBulkMileageRegistrationJobHistory
  VehiclesBulkMileageRegistrationRequestDetail: VehiclesBulkMileageRegistrationRequestDetail
  VehiclesBulkMileageRegistrationRequestError: VehiclesBulkMileageRegistrationRequestError
  VehiclesBulkMileageRegistrationRequestOverview: VehiclesBulkMileageRegistrationRequestOverview
  VehiclesBulkMileageRegistrationRequestStatus: VehiclesBulkMileageRegistrationRequestStatus
  VehiclesCurrentListResponse: VehiclesCurrentListResponse
  VehiclesCurrentOwnerInfo: VehiclesCurrentOwnerInfo
  VehiclesDetail: VehiclesDetail
  VehiclesExcel: VehiclesExcel
  VehiclesInspectionInfo: VehiclesInspectionInfo
  VehiclesList: VehiclesList
  VehiclesListInputV3: VehiclesListInputV3
  VehiclesListV2: VehiclesListV2
  VehiclesMainInfo: VehiclesMainInfo
  VehiclesMileageDetails: VehiclesMileageDetails
  VehiclesMileageRegistration: VehiclesMileageRegistration
  VehiclesMileageRegistrationHistory: VehiclesMileageRegistrationHistory
  VehiclesMileageUpdateError: VehiclesMileageUpdateError
  VehiclesOperator: VehiclesOperator
  VehiclesOwners: VehiclesOwners
  VehiclesPublicVehicleSearch: VehiclesPublicVehicleSearch
  VehiclesRegistrationInfo: VehiclesRegistrationInfo
  VehiclesTechnicalInfo: VehiclesTechnicalInfo
  VehiclesVehicle: VehiclesVehicle
  VehiclesVehicleSearch: VehiclesVehicleSearch
  VehiclesVehicleSearchNextInspection: VehiclesVehicleSearchNextInspection
  VerifyLicenseBarcodeDataUnion: ResolversParentTypes['LicenseDriverLicenseData']
  VerifyLicenseBarcodeInput: VerifyLicenseBarcodeInput
  VerifyLicenseBarcodeResult: Omit<VerifyLicenseBarcodeResult, 'data'> & {
    data?: Maybe<ResolversParentTypes['VerifyLicenseBarcodeDataUnion']>
  }
  VerifyPkPassInput: VerifyPkPassInput
  WatsonAssistantChatIdentityTokenInput: WatsonAssistantChatIdentityTokenInput
  WatsonAssistantChatIdentityTokenResponse: WatsonAssistantChatIdentityTokenResponse
  WatsonAssistantChatSubmitFeedbackInput: WatsonAssistantChatSubmitFeedbackInput
  WatsonAssistantChatSubmitFeedbackResponse: WatsonAssistantChatSubmitFeedbackResponse
  WebSearchAutocomplete: WebSearchAutocomplete
  WebSearchAutocompleteInput: WebSearchAutocompleteInput
  WebVerdictByIdInput: WebVerdictByIdInput
  WebVerdictByIdItem: WebVerdictByIdItem
  WebVerdictByIdResponse: WebVerdictByIdResponse
  WebVerdictCaseCategoriesResponse: WebVerdictCaseCategoriesResponse
  WebVerdictCaseCategory: WebVerdictCaseCategory
  WebVerdictCaseType: WebVerdictCaseType
  WebVerdictCaseTypesResponse: WebVerdictCaseTypesResponse
  WebVerdictItem: WebVerdictItem
  WebVerdictJudge: WebVerdictJudge
  WebVerdictKeyword: WebVerdictKeyword
  WebVerdictKeywordsResponse: WebVerdictKeywordsResponse
  WebVerdictsInput: WebVerdictsInput
  WebVerdictsInputResponse: WebVerdictsInputResponse
  WebVerdictsResponse: WebVerdictsResponse
  WorkMachine: WorkMachine
  WorkMachinesCategory: WorkMachinesCategory
  WorkMachinesCollectionDocument: WorkMachinesCollectionDocument
  WorkMachinesCollectionDocumentInput: WorkMachinesCollectionDocumentInput
  WorkMachinesCollectionInput: WorkMachinesCollectionInput
  WorkMachinesCollectionLink: WorkMachinesCollectionLink
  WorkMachinesInput: WorkMachinesInput
  WorkMachinesLabel: WorkMachinesLabel
  WorkMachinesLink: WorkMachinesLink
  WorkMachinesMachineType: WorkMachinesMachineType
  WorkMachinesModel: WorkMachinesModel
  WorkMachinesPaginatedCollection: WorkMachinesPaginatedCollection
  WorkMachinesParentCategoryByTypeAndModelInput: WorkMachinesParentCategoryByTypeAndModelInput
  WorkMachinesSubCategory: WorkMachinesSubCategory
  WorkMachinesTechInfoItem: WorkMachinesTechInfoItem
  WorkMachinesTechInfoListItem: WorkMachinesTechInfoListItem
  XroadIdentifier: XroadIdentifier
  changeEndorsmentListClosedDateDto: ChangeEndorsmentListClosedDateDto
  officialJournalOfIcelandApplicationAdvertTemplateResponse: OfficialJournalOfIcelandApplicationAdvertTemplateResponse
  officialJournalOfIcelandApplicationAdvertTemplateType: OfficialJournalOfIcelandApplicationAdvertTemplateType
  officialJournalOfIcelandApplicationAdvertTemplateTypesResponse: OfficialJournalOfIcelandApplicationAdvertTemplateTypesResponse
  sendPdfEmailInput: SendPdfEmailInput
  sendPdfEmailResponse: SendPdfEmailResponse
}

export type AccidentNotificationAttachmentResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['AccidentNotificationAttachment'] = ResolversParentTypes['AccidentNotificationAttachment']
> = {
  InjuryCertificate?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  PoliceReport?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  ProxyDocument?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  Unknown?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type AccidentNotificationConfirmationResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['AccidentNotificationConfirmation'] = ResolversParentTypes['AccidentNotificationConfirmation']
> = {
  CompanyParty?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  InjuredOrRepresentativeParty?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  Unknown?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type AccidentNotificationStatusResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['AccidentNotificationStatus'] = ResolversParentTypes['AccidentNotificationStatus']
> = {
  numberIHI?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  receivedAttachments?: Resolver<
    Maybe<ResolversTypes['AccidentNotificationAttachment']>,
    ParentType,
    ContextType
  >
  receivedConfirmations?: Resolver<
    Maybe<ResolversTypes['AccidentNotificationConfirmation']>,
    ParentType,
    ContextType
  >
  status?: Resolver<
    ResolversTypes['HealthInsuranceAccidentNotificationStatusTypes'],
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type AccordionSliceResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['AccordionSlice'] = ResolversParentTypes['AccordionSlice']
> = {
  accordionItems?: Resolver<
    Maybe<Array<ResolversTypes['OneColumnText']>>,
    ParentType,
    ContextType
  >
  hasBorderAbove?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  showTitle?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  titleHeadingLevel?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  type?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ActionCardMetaDataResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ActionCardMetaData'] = ResolversParentTypes['ActionCardMetaData']
> = {
  deleteButton?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  description?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  draftFinishedSteps?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  draftTotalSteps?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  history?: Resolver<
    Maybe<Array<ResolversTypes['ApplicationHistory']>>,
    ParentType,
    ContextType
  >
  historyButton?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  pendingAction?: Resolver<
    Maybe<ResolversTypes['PendingAction']>,
    ParentType,
    ContextType
  >
  tag?: Resolver<
    Maybe<ResolversTypes['ActionCardTag']>,
    ParentType,
    ContextType
  >
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ActionCardTagResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ActionCardTag'] = ResolversParentTypes['ActionCardTag']
> = {
  label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  variant?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ActionMailBodyResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ActionMailBody'] = ResolversParentTypes['ActionMailBody']
> = {
  action?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  messageId?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  success?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type AdminNotificationResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['AdminNotification'] = ResolversParentTypes['AdminNotification']
> = {
  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>
  notificationId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  sender?: Resolver<
    ResolversTypes['NotificationSender'],
    ParentType,
    ContextType
  >
  sent?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type AdminNotificationsResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['AdminNotifications'] = ResolversParentTypes['AdminNotifications']
> = {
  data?: Resolver<
    Array<ResolversTypes['AdminNotification']>,
    ParentType,
    ContextType
  >
  pageInfo?: Resolver<ResolversTypes['PageInfoDto'], ParentType, ContextType>
  totalCount?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type AdministrationofOccupationalSafetyandHealthCourseModelResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['AdministrationofOccupationalSafetyandHealthCourseModel'] = ResolversParentTypes['AdministrationofOccupationalSafetyandHealthCourseModel']
> = {
  alwaysOpen?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  category?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  dateFrom?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  dateTo?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  description?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  id?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  location?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  price?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  registrationUrl?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  status?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  subCategory?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  time?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type AdministrationofOccupationalSafetyandHealthCoursesResponseModelResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['AdministrationofOccupationalSafetyandHealthCoursesResponseModel'] = ResolversParentTypes['AdministrationofOccupationalSafetyandHealthCoursesResponseModel']
> = {
  courses?: Resolver<
    Array<
      ResolversTypes['AdministrationofOccupationalSafetyandHealthCourseModel']
    >,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type AirDiscountSchemeConnectionDiscountCodeResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['AirDiscountSchemeConnectionDiscountCode'] = ResolversParentTypes['AirDiscountSchemeConnectionDiscountCode']
> = {
  code?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  flightDesc?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  flightId?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  validUntil?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type AirDiscountSchemeDiscountResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['AirDiscountSchemeDiscount'] = ResolversParentTypes['AirDiscountSchemeDiscount']
> = {
  connectionDiscountCodes?: Resolver<
    Array<ResolversTypes['AirDiscountSchemeConnectionDiscountCode']>,
    ParentType,
    ContextType
  >
  discountCode?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  expiresIn?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  nationalId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  user?: Resolver<
    ResolversTypes['AirDiscountSchemeUser'],
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type AirDiscountSchemeFlightResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['AirDiscountSchemeFlight'] = ResolversParentTypes['AirDiscountSchemeFlight']
> = {
  bookingDate?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>
  flightLegs?: Resolver<
    Array<ResolversTypes['AirDiscountSchemeFlightLeg']>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  user?: Resolver<
    ResolversTypes['AirDiscountSchemeUser'],
    ParentType,
    ContextType
  >
  userInfo?: Resolver<
    ResolversTypes['AirDiscountSchemeUserInfo'],
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type AirDiscountSchemeFlightLegResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['AirDiscountSchemeFlightLeg'] = ResolversParentTypes['AirDiscountSchemeFlightLeg']
> = {
  airline?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  cooperation?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  discountPrice?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  financialState?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  flight?: Resolver<
    ResolversTypes['AirDiscountSchemeFlight'],
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  originalPrice?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  travel?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type AirDiscountSchemeFundResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['AirDiscountSchemeFund'] = ResolversParentTypes['AirDiscountSchemeFund']
> = {
  credit?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  total?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  used?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type AirDiscountSchemeUserResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['AirDiscountSchemeUser'] = ResolversParentTypes['AirDiscountSchemeUser']
> = {
  flightLegs?: Resolver<
    Maybe<Array<ResolversTypes['AirDiscountSchemeFlightLeg']>>,
    ParentType,
    ContextType
  >
  fund?: Resolver<
    Maybe<ResolversTypes['AirDiscountSchemeFund']>,
    ParentType,
    ContextType
  >
  meetsADSRequirements?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType
  >
  mobile?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  nationalId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  role?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type AirDiscountSchemeUserInfoResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['AirDiscountSchemeUserInfo'] = ResolversParentTypes['AirDiscountSchemeUserInfo']
> = {
  age?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  gender?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  postalCode?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type AircraftRegistryAircraftResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['AircraftRegistryAircraft'] = ResolversParentTypes['AircraftRegistryAircraft']
> = {
  identifiers?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  maxWeight?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  operator?: Resolver<
    Maybe<ResolversTypes['AircraftRegistryPerson']>,
    ParentType,
    ContextType
  >
  owners?: Resolver<
    Maybe<Array<ResolversTypes['AircraftRegistryPerson']>>,
    ParentType,
    ContextType
  >
  productionYear?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  registrationNumber?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  serialNumber?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  unregistered?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  unregisteredDate?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type AircraftRegistryAllAircraftsResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['AircraftRegistryAllAircraftsResponse'] = ResolversParentTypes['AircraftRegistryAllAircraftsResponse']
> = {
  aircrafts?: Resolver<
    Maybe<Array<ResolversTypes['AircraftRegistryAircraft']>>,
    ParentType,
    ContextType
  >
  pageNumber?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  pageSize?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  totalCount?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type AircraftRegistryPersonResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['AircraftRegistryPerson'] = ResolversParentTypes['AircraftRegistryPerson']
> = {
  address?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  city?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  country?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  email?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  phone?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  postcode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  ssn?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type AlcoholLicenceResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['AlcoholLicence'] = ResolversParentTypes['AlcoholLicence']
> = {
  issuedBy?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  licenceSubType?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  licenceType?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  licenseHolder?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  licenseNumber?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  licenseResponsible?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  location?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  office?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  validFrom?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  validTo?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>
  year?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type AlertBannerResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['AlertBanner'] = ResolversParentTypes['AlertBanner']
> = {
  bannerVariant?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  description?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  dismissedForDays?: Resolver<ResolversTypes['Int'], ParentType, ContextType>
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  isDismissable?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  link?: Resolver<
    Maybe<ResolversTypes['ReferenceLink']>,
    ParentType,
    ContextType
  >
  linkTitle?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  servicePortalPaths?: Resolver<
    Maybe<Array<ResolversTypes['String']>>,
    ParentType,
    ContextType
  >
  showAlertBanner?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type AnchorPageResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['AnchorPage'] = ResolversParentTypes['AnchorPage']
> = {
  category?: Resolver<
    Maybe<ResolversTypes['ArticleCategory']>,
    ParentType,
    ContextType
  >
  content?: Resolver<Array<ResolversTypes['Slice']>, ParentType, ContextType>
  featuredImage?: Resolver<
    Maybe<ResolversTypes['Image']>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  image?: Resolver<Maybe<ResolversTypes['Image']>, ParentType, ContextType>
  intro?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  pageType?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  seeMoreText?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  shortIntro?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  shortTitle?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  slug?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  thumbnail?: Resolver<Maybe<ResolversTypes['Image']>, ParentType, ContextType>
  tinyThumbnail?: Resolver<
    Maybe<ResolversTypes['Image']>,
    ParentType,
    ContextType
  >
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type AnchorPageListSliceResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['AnchorPageListSlice'] = ResolversParentTypes['AnchorPageListSlice']
> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  pages?: Resolver<Array<ResolversTypes['AnchorPage']>, ParentType, ContextType>
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ApiCatalogueResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ApiCatalogue'] = ResolversParentTypes['ApiCatalogue']
> = {
  pageInfo?: Resolver<
    Maybe<ResolversTypes['PageInfo']>,
    ParentType,
    ContextType
  >
  services?: Resolver<Array<ResolversTypes['Service']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type AppendixResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Appendix'] = ResolversParentTypes['Appendix']
> = {
  text?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ApplicationResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Application'] = ResolversParentTypes['Application']
> = {
  actionCard?: Resolver<
    Maybe<ResolversTypes['ActionCardMetaData']>,
    ParentType,
    ContextType
  >
  answers?: Resolver<ResolversTypes['JSON'], ParentType, ContextType>
  applicant?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  applicantActors?: Resolver<
    Array<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  assignees?: Resolver<Array<ResolversTypes['String']>, ParentType, ContextType>
  created?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>
  externalData?: Resolver<ResolversTypes['JSON'], ParentType, ContextType>
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  institution?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  modified?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  progress?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  pruned?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>
  state?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  status?: Resolver<
    ResolversTypes['ApplicationResponseDtoStatusEnum'],
    ParentType,
    ContextType
  >
  typeId?: Resolver<
    ResolversTypes['ApplicationResponseDtoTypeIdEnum'],
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ApplicationAdminResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ApplicationAdmin'] = ResolversParentTypes['ApplicationAdmin']
> = {
  actionCard?: Resolver<
    Maybe<ResolversTypes['ActionCardMetaData']>,
    ParentType,
    ContextType
  >
  applicant?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  applicantActors?: Resolver<
    Array<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  applicantName?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  assignees?: Resolver<Array<ResolversTypes['String']>, ParentType, ContextType>
  created?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  institution?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  modified?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  paymentStatus?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  progress?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  pruneAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>
  pruned?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>
  state?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  status?: Resolver<
    ResolversTypes['ApplicationListAdminResponseDtoStatusEnum'],
    ParentType,
    ContextType
  >
  typeId?: Resolver<
    ResolversTypes['ApplicationListAdminResponseDtoTypeIdEnum'],
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ApplicationAdminPaginatedResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ApplicationAdminPaginatedResponse'] = ResolversParentTypes['ApplicationAdminPaginatedResponse']
> = {
  count?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  rows?: Resolver<
    Array<ResolversTypes['ApplicationAdmin']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ApplicationEligibilityResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ApplicationEligibility'] = ResolversParentTypes['ApplicationEligibility']
> = {
  isEligible?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  requirements?: Resolver<
    Array<ResolversTypes['ApplicationEligibilityRequirement']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ApplicationEligibilityRequirementResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ApplicationEligibilityRequirement'] = ResolversParentTypes['ApplicationEligibilityRequirement']
> = {
  daysOfResidency?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  key?: Resolver<ResolversTypes['RequirementKey'], ParentType, ContextType>
  requirementMet?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ApplicationHistoryResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ApplicationHistory'] = ResolversParentTypes['ApplicationHistory']
> = {
  date?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>
  log?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ApplicationInformationResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ApplicationInformation'] = ResolversParentTypes['ApplicationInformation']
> = {
  applicantId?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  applicationFundId?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >
  applicationId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  applicationRights?: Resolver<
    Array<ResolversTypes['ApplicationRights']>,
    ParentType,
    ContextType
  >
  children?: Resolver<
    Array<ResolversTypes['ApplicationInformationChildren']>,
    ParentType,
    ContextType
  >
  dateOfBirth?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  email?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  employers?: Resolver<
    Array<ResolversTypes['ApplicationInformationEmployer']>,
    ParentType,
    ContextType
  >
  expectedDateOfBirth?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >
  nationalRegisteryId?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >
  otherParentId?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  otherParentName?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  paymentInfo?: Resolver<
    ResolversTypes['ParentalLeavePaymentInfo'],
    ParentType,
    ContextType
  >
  periods?: Resolver<
    Array<ResolversTypes['ApplicationInformationPeriod']>,
    ParentType,
    ContextType
  >
  phoneNumber?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  result?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  status?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  testData?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ApplicationInformationChildrenResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ApplicationInformationChildren'] = ResolversParentTypes['ApplicationInformationChildren']
> = {
  dateOfBirth?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  expectedDateOfBirth?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  nationalRegistryId?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ApplicationInformationEmployerResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ApplicationInformationEmployer'] = ResolversParentTypes['ApplicationInformationEmployer']
> = {
  email?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  employerId?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  nationalRegistryId?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ApplicationInformationPeriodResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ApplicationInformationPeriod'] = ResolversParentTypes['ApplicationInformationPeriod']
> = {
  approved?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  days?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  firstPeriodStart?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  from?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  paid?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  ratio?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  rightsCodePeriod?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  to?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ApplicationPaymentResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ApplicationPayment'] = ResolversParentTypes['ApplicationPayment']
> = {
  fulfilled?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  paymentUrl?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ApplicationRightsResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ApplicationRights'] = ResolversParentTypes['ApplicationRights']
> = {
  days?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  daysLeft?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  months?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  rightsDescription?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >
  rightsUnit?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ApplicationStatisticsResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ApplicationStatistics'] = ResolversParentTypes['ApplicationStatistics']
> = {
  approved?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  completed?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  count?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  draft?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  inprogress?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  rejected?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  typeid?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type AppraisalResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Appraisal'] = ResolversParentTypes['Appraisal']
> = {
  activeAppraisal?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  activePlotAssessment?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  activeStructureAppraisal?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  activeYear?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  plannedAppraisal?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  plannedPlotAssessment?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  plannedStructureAppraisal?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  plannedYear?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ArticleResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Article'] = ResolversParentTypes['Article']
> = {
  activeTranslations?: Resolver<
    Maybe<ResolversTypes['JSON']>,
    ParentType,
    ContextType
  >
  alertBanner?: Resolver<
    Maybe<ResolversTypes['AlertBanner']>,
    ParentType,
    ContextType
  >
  body?: Resolver<Array<ResolversTypes['Slice']>, ParentType, ContextType>
  category?: Resolver<
    Maybe<ResolversTypes['ArticleCategory']>,
    ParentType,
    ContextType
  >
  featuredImage?: Resolver<
    Maybe<ResolversTypes['Image']>,
    ParentType,
    ContextType
  >
  group?: Resolver<
    Maybe<ResolversTypes['ArticleGroup']>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  importance?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  intro?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  keywords?: Resolver<
    Maybe<Array<ResolversTypes['String']>>,
    ParentType,
    ContextType
  >
  organization?: Resolver<
    Maybe<Array<ResolversTypes['Organization']>>,
    ParentType,
    ContextType
  >
  otherCategories?: Resolver<
    Maybe<Array<ResolversTypes['ArticleCategory']>>,
    ParentType,
    ContextType
  >
  otherGroups?: Resolver<
    Maybe<Array<ResolversTypes['ArticleGroup']>>,
    ParentType,
    ContextType
  >
  otherSubgroups?: Resolver<
    Maybe<Array<ResolversTypes['ArticleSubgroup']>>,
    ParentType,
    ContextType
  >
  processEntry?: Resolver<
    Maybe<ResolversTypes['ProcessEntry']>,
    ParentType,
    ContextType
  >
  processEntryButtonText?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  relatedArticles?: Resolver<
    Maybe<Array<ResolversTypes['Article']>>,
    ParentType,
    ContextType
  >
  relatedContent?: Resolver<
    Maybe<Array<ResolversTypes['Link']>>,
    ParentType,
    ContextType
  >
  relatedOrganization?: Resolver<
    Maybe<Array<ResolversTypes['Organization']>>,
    ParentType,
    ContextType
  >
  responsibleParty?: Resolver<
    Maybe<Array<ResolversTypes['Organization']>>,
    ParentType,
    ContextType
  >
  shortTitle?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  showTableOfContents?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  signLanguageVideo?: Resolver<
    Maybe<ResolversTypes['EmbeddedVideo']>,
    ParentType,
    ContextType
  >
  slug?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  stepper?: Resolver<Maybe<ResolversTypes['Stepper']>, ParentType, ContextType>
  subArticles?: Resolver<
    Array<ResolversTypes['SubArticle']>,
    ParentType,
    ContextType
  >
  subgroup?: Resolver<
    Maybe<ResolversTypes['ArticleSubgroup']>,
    ParentType,
    ContextType
  >
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ArticleCategoryResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ArticleCategory'] = ResolversParentTypes['ArticleCategory']
> = {
  description?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  slug?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ArticleGroupResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ArticleGroup'] = ResolversParentTypes['ArticleGroup']
> = {
  description?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  importance?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  slug?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ArticleReferenceResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ArticleReference'] = ResolversParentTypes['ArticleReference']
> = {
  category?: Resolver<
    Maybe<ResolversTypes['ArticleCategory']>,
    ParentType,
    ContextType
  >
  group?: Resolver<
    Maybe<ResolversTypes['ArticleGroup']>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  intro?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  organization?: Resolver<
    Maybe<Array<ResolversTypes['Organization']>>,
    ParentType,
    ContextType
  >
  processEntry?: Resolver<
    Maybe<ResolversTypes['ProcessEntry']>,
    ParentType,
    ContextType
  >
  processEntryButtonText?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >
  slug?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ArticleSubgroupResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ArticleSubgroup'] = ResolversParentTypes['ArticleSubgroup']
> = {
  importance?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  slug?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type AssetResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Asset'] = ResolversParentTypes['Asset']
> = {
  contentType?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  typename?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type AssetNameResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['AssetName'] = ResolversParentTypes['AssetName']
> = {
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type AuctionResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Auction'] = ResolversParentTypes['Auction']
> = {
  content?: Resolver<
    Maybe<Array<ResolversTypes['Slice']>>,
    ParentType,
    ContextType
  >
  date?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  organization?: Resolver<
    ResolversTypes['Organization'],
    ParentType,
    ContextType
  >
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  type?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  updatedAt?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type AudienceAndScopeResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['AudienceAndScope'] = ResolversParentTypes['AudienceAndScope']
> = {
  audience?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  scope?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type AuthAdminClientResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['AuthAdminClient'] = ResolversParentTypes['AuthAdminClient']
> = {
  availableEnvironments?: Resolver<
    Array<ResolversTypes['AuthAdminEnvironment']>,
    ParentType,
    ContextType
  >
  clientId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  clientType?: Resolver<
    ResolversTypes['AuthAdminClientType'],
    ParentType,
    ContextType
  >
  defaultEnvironment?: Resolver<
    ResolversTypes['AuthAdminClientEnvironment'],
    ParentType,
    ContextType
  >
  environments?: Resolver<
    Array<ResolversTypes['AuthAdminClientEnvironment']>,
    ParentType,
    ContextType
  >
  sso?: Resolver<ResolversTypes['AuthAdminClientSso'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type AuthAdminClientAllowedScopeResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['AuthAdminClientAllowedScope'] = ResolversParentTypes['AuthAdminClientAllowedScope']
> = {
  description?: Resolver<
    Maybe<Array<ResolversTypes['AuthAdminTranslatedValue']>>,
    ParentType,
    ContextType
  >
  displayName?: Resolver<
    Array<ResolversTypes['AuthAdminTranslatedValue']>,
    ParentType,
    ContextType
  >
  domainName?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  name?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type AuthAdminClientClaimResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['AuthAdminClientClaim'] = ResolversParentTypes['AuthAdminClientClaim']
> = {
  type?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  value?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type AuthAdminClientEnvironmentResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['AuthAdminClientEnvironment'] = ResolversParentTypes['AuthAdminClientEnvironment']
> = {
  absoluteRefreshTokenLifetime?: Resolver<
    ResolversTypes['Int'],
    ParentType,
    ContextType
  >
  accessTokenLifetime?: Resolver<ResolversTypes['Int'], ParentType, ContextType>
  allowOfflineAccess?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType
  >
  allowedScopes?: Resolver<
    Maybe<Array<ResolversTypes['AuthAdminClientAllowedScope']>>,
    ParentType,
    ContextType
  >
  clientId?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  clientType?: Resolver<
    ResolversTypes['AuthAdminClientType'],
    ParentType,
    ContextType
  >
  customClaims?: Resolver<
    Maybe<Array<ResolversTypes['AuthAdminClientClaim']>>,
    ParentType,
    ContextType
  >
  displayName?: Resolver<
    Array<ResolversTypes['AuthAdminTranslatedValue']>,
    ParentType,
    ContextType
  >
  environment?: Resolver<
    ResolversTypes['AuthAdminEnvironment'],
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  postLogoutRedirectUris?: Resolver<
    Array<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  promptDelegations?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType
  >
  redirectUris?: Resolver<
    Array<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  refreshTokenExpiration?: Resolver<
    ResolversTypes['AuthAdminRefreshTokenExpiration'],
    ParentType,
    ContextType
  >
  requireApiScopes?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType
  >
  requireConsent?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  requirePkce?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  secrets?: Resolver<
    Array<ResolversTypes['AuthAdminClientSecret']>,
    ParentType,
    ContextType
  >
  singleSession?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  slidingRefreshTokenLifetime?: Resolver<
    ResolversTypes['Int'],
    ParentType,
    ContextType
  >
  sso?: Resolver<ResolversTypes['AuthAdminClientSso'], ParentType, ContextType>
  supportTokenExchange?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType
  >
  supportedDelegationTypes?: Resolver<
    Maybe<Array<ResolversTypes['String']>>,
    ParentType,
    ContextType
  >
  supportsCustomDelegation?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType
  >
  supportsLegalGuardians?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType
  >
  supportsPersonalRepresentatives?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType
  >
  supportsProcuringHolders?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType
  >
  tenantId?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type AuthAdminClientSecretResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['AuthAdminClientSecret'] = ResolversParentTypes['AuthAdminClientSecret']
> = {
  clientId?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  decryptedValue?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  secretId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type AuthAdminClientsPayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['AuthAdminClientsPayload'] = ResolversParentTypes['AuthAdminClientsPayload']
> = {
  data?: Resolver<
    Array<ResolversTypes['AuthAdminClient']>,
    ParentType,
    ContextType
  >
  pageInfo?: Resolver<ResolversTypes['PageInfoDto'], ParentType, ContextType>
  totalCount?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type AuthAdminCreateClientResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['AuthAdminCreateClientResponse'] = ResolversParentTypes['AuthAdminCreateClientResponse']
> = {
  clientId?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  environment?: Resolver<
    ResolversTypes['AuthAdminEnvironment'],
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type AuthAdminCreateScopeResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['AuthAdminCreateScopeResponse'] = ResolversParentTypes['AuthAdminCreateScopeResponse']
> = {
  environment?: Resolver<
    ResolversTypes['AuthAdminEnvironment'],
    ParentType,
    ContextType
  >
  scopeName?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type AuthAdminDelegationProviderResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['AuthAdminDelegationProvider'] = ResolversParentTypes['AuthAdminDelegationProvider']
> = {
  delegationTypes?: Resolver<
    Array<ResolversTypes['AuthAdminDelegationType']>,
    ParentType,
    ContextType
  >
  description?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type AuthAdminDelegationTypeResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['AuthAdminDelegationType'] = ResolversParentTypes['AuthAdminDelegationType']
> = {
  description?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  providerId?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type AuthAdminScopeResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['AuthAdminScope'] = ResolversParentTypes['AuthAdminScope']
> = {
  availableEnvironments?: Resolver<
    Array<ResolversTypes['AuthAdminEnvironment']>,
    ParentType,
    ContextType
  >
  defaultEnvironment?: Resolver<
    ResolversTypes['AuthAdminScopeEnvironment'],
    ParentType,
    ContextType
  >
  environments?: Resolver<
    Array<ResolversTypes['AuthAdminScopeEnvironment']>,
    ParentType,
    ContextType
  >
  scopeName?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type AuthAdminScopeEnvironmentResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['AuthAdminScopeEnvironment'] = ResolversParentTypes['AuthAdminScopeEnvironment']
> = {
  allowExplicitDelegationGrant?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType
  >
  alsoForDelegatedUser?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType
  >
  automaticDelegationGrant?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType
  >
  description?: Resolver<
    Array<ResolversTypes['AuthAdminTranslatedValue']>,
    ParentType,
    ContextType
  >
  displayName?: Resolver<
    Array<ResolversTypes['AuthAdminTranslatedValue']>,
    ParentType,
    ContextType
  >
  domainName?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  emphasize?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  environment?: Resolver<
    ResolversTypes['AuthAdminEnvironment'],
    ParentType,
    ContextType
  >
  grantToAuthenticatedUser?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType
  >
  grantToLegalGuardians?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType
  >
  grantToPersonalRepresentatives?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType
  >
  grantToProcuringHolders?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType
  >
  groupId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  isAccessControlled?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType
  >
  name?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  order?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  required?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  showInDiscoveryDocument?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType
  >
  supportedDelegationTypes?: Resolver<
    Array<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type AuthAdminScopesPayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['AuthAdminScopesPayload'] = ResolversParentTypes['AuthAdminScopesPayload']
> = {
  data?: Resolver<
    Array<ResolversTypes['AuthAdminScope']>,
    ParentType,
    ContextType
  >
  pageInfo?: Resolver<ResolversTypes['PageInfoDto'], ParentType, ContextType>
  totalCount?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type AuthAdminTenantResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['AuthAdminTenant'] = ResolversParentTypes['AuthAdminTenant']
> = {
  availableEnvironments?: Resolver<
    Array<ResolversTypes['AuthAdminEnvironment']>,
    ParentType,
    ContextType
  >
  defaultEnvironment?: Resolver<
    ResolversTypes['AuthAdminTenantEnvironment'],
    ParentType,
    ContextType
  >
  environments?: Resolver<
    Array<ResolversTypes['AuthAdminTenantEnvironment']>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type AuthAdminTenantEnvironmentResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['AuthAdminTenantEnvironment'] = ResolversParentTypes['AuthAdminTenantEnvironment']
> = {
  displayName?: Resolver<
    Array<ResolversTypes['AuthAdminTranslatedValue']>,
    ParentType,
    ContextType
  >
  environment?: Resolver<
    ResolversTypes['AuthAdminEnvironment'],
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type AuthAdminTenantsPayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['AuthAdminTenantsPayload'] = ResolversParentTypes['AuthAdminTenantsPayload']
> = {
  data?: Resolver<
    Array<ResolversTypes['AuthAdminTenant']>,
    ParentType,
    ContextType
  >
  pageInfo?: Resolver<ResolversTypes['PageInfoDto'], ParentType, ContextType>
  totalCount?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type AuthAdminTranslatedValueResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['AuthAdminTranslatedValue'] = ResolversParentTypes['AuthAdminTranslatedValue']
> = {
  locale?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  value?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type AuthApiScopeResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['AuthApiScope'] = ResolversParentTypes['AuthApiScope']
> = {
  description?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  displayName?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  group?: Resolver<
    Maybe<ResolversTypes['AuthApiScopeGroup']>,
    ParentType,
    ContextType
  >
  name?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type AuthApiScopeGroupResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['AuthApiScopeGroup'] = ResolversParentTypes['AuthApiScopeGroup']
> = {
  children?: Resolver<
    Maybe<Array<ResolversTypes['AuthApiScope']>>,
    ParentType,
    ContextType
  >
  description?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  displayName?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  name?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type AuthClientResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['AuthClient'] = ResolversParentTypes['AuthClient']
> = {
  clientId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  clientName?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  domain?: Resolver<
    Maybe<ResolversTypes['AuthDomain']>,
    ParentType,
    ContextType,
    RequireFields<AuthClientDomainArgs, 'lang'>
  >
  domainName?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type AuthConsentResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['AuthConsent'] = ResolversParentTypes['AuthConsent']
> = {
  client?: Resolver<
    ResolversTypes['AuthClient'],
    ParentType,
    ContextType,
    RequireFields<AuthConsentClientArgs, 'lang'>
  >
  tenants?: Resolver<
    Array<ResolversTypes['AuthConsentTenant']>,
    ParentType,
    ContextType,
    RequireFields<AuthConsentTenantsArgs, 'lang'>
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type AuthConsentScopeNodeResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['AuthConsentScopeNode'] = ResolversParentTypes['AuthConsentScopeNode']
> = {
  children?: Resolver<
    Maybe<Array<ResolversTypes['AuthConsentScopeNode']>>,
    ParentType,
    ContextType
  >
  description?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  displayName?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  hasConsent?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  name?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type AuthConsentTenantResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['AuthConsentTenant'] = ResolversParentTypes['AuthConsentTenant']
> = {
  scopes?: Resolver<
    Maybe<Array<ResolversTypes['AuthConsentScopeNode']>>,
    ParentType,
    ContextType
  >
  tenant?: Resolver<
    ResolversTypes['AuthDomain'],
    ParentType,
    ContextType,
    RequireFields<AuthConsentTenantTenantArgs, 'lang'>
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type AuthConsentsPaginatedResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['AuthConsentsPaginated'] = ResolversParentTypes['AuthConsentsPaginated']
> = {
  data?: Resolver<Array<ResolversTypes['AuthConsent']>, ParentType, ContextType>
  pageInfo?: Resolver<ResolversTypes['PageInfoDto'], ParentType, ContextType>
  totalCount?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type AuthCustomDelegationResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['AuthCustomDelegation'] = ResolversParentTypes['AuthCustomDelegation']
> = {
  createdBy?: Resolver<
    Maybe<ResolversTypes['Identity']>,
    ParentType,
    ContextType
  >
  domain?: Resolver<
    ResolversTypes['AuthDomain'],
    ParentType,
    ContextType,
    RequireFields<AuthCustomDelegationDomainArgs, 'lang'>
  >
  from?: Resolver<ResolversTypes['Identity'], ParentType, ContextType>
  id?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>
  provider?: Resolver<
    ResolversTypes['AuthDelegationProvider'],
    ParentType,
    ContextType
  >
  referenceId?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  scopes?: Resolver<
    Array<ResolversTypes['AuthDelegationScope']>,
    ParentType,
    ContextType
  >
  to?: Resolver<ResolversTypes['Identity'], ParentType, ContextType>
  type?: Resolver<ResolversTypes['AuthDelegationType'], ParentType, ContextType>
  validTo?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type AuthDelegationResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['AuthDelegation'] = ResolversParentTypes['AuthDelegation']
> = {
  __resolveType: TypeResolveFn<
    | 'AuthCustomDelegation'
    | 'AuthGeneralMandate'
    | 'AuthLegalGuardianDelegation'
    | 'AuthLegalGuardianMinorDelegation'
    | 'AuthLegalRepresentativeDelegation'
    | 'AuthPersonalRepresentativeDelegation'
    | 'AuthProcuringHolderDelegation',
    ParentType,
    ContextType
  >
  createdBy?: Resolver<
    Maybe<ResolversTypes['Identity']>,
    ParentType,
    ContextType
  >
  from?: Resolver<ResolversTypes['Identity'], ParentType, ContextType>
  id?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>
  provider?: Resolver<
    ResolversTypes['AuthDelegationProvider'],
    ParentType,
    ContextType
  >
  referenceId?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  to?: Resolver<Maybe<ResolversTypes['Identity']>, ParentType, ContextType>
  type?: Resolver<ResolversTypes['AuthDelegationType'], ParentType, ContextType>
  validTo?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>
}

export type AuthDelegationProviderEnvironmentResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['AuthDelegationProviderEnvironment'] = ResolversParentTypes['AuthDelegationProviderEnvironment']
> = {
  environment?: Resolver<
    ResolversTypes['AuthAdminEnvironment'],
    ParentType,
    ContextType
  >
  providers?: Resolver<
    Array<ResolversTypes['AuthAdminDelegationProvider']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type AuthDelegationProviderPayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['AuthDelegationProviderPayload'] = ResolversParentTypes['AuthDelegationProviderPayload']
> = {
  environments?: Resolver<
    Array<ResolversTypes['AuthDelegationProviderEnvironment']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type AuthDelegationScopeResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['AuthDelegationScope'] = ResolversParentTypes['AuthDelegationScope']
> = {
  apiScope?: Resolver<
    Maybe<ResolversTypes['AuthApiScope']>,
    ParentType,
    ContextType,
    RequireFields<AuthDelegationScopeApiScopeArgs, 'lang'>
  >
  displayName?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  validTo?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type AuthDomainResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['AuthDomain'] = ResolversParentTypes['AuthDomain']
> = {
  description?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  displayName?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  nationalId?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  organisationLogoKey?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >
  organisationLogoUrl?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type AuthGeneralMandateResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['AuthGeneralMandate'] = ResolversParentTypes['AuthGeneralMandate']
> = {
  createdBy?: Resolver<
    Maybe<ResolversTypes['Identity']>,
    ParentType,
    ContextType
  >
  from?: Resolver<ResolversTypes['Identity'], ParentType, ContextType>
  id?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>
  provider?: Resolver<
    ResolversTypes['AuthDelegationProvider'],
    ParentType,
    ContextType
  >
  referenceId?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  to?: Resolver<Maybe<ResolversTypes['Identity']>, ParentType, ContextType>
  type?: Resolver<ResolversTypes['AuthDelegationType'], ParentType, ContextType>
  validTo?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type AuthLegalGuardianDelegationResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['AuthLegalGuardianDelegation'] = ResolversParentTypes['AuthLegalGuardianDelegation']
> = {
  createdBy?: Resolver<
    Maybe<ResolversTypes['Identity']>,
    ParentType,
    ContextType
  >
  from?: Resolver<ResolversTypes['Identity'], ParentType, ContextType>
  id?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>
  provider?: Resolver<
    ResolversTypes['AuthDelegationProvider'],
    ParentType,
    ContextType
  >
  referenceId?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  to?: Resolver<Maybe<ResolversTypes['Identity']>, ParentType, ContextType>
  type?: Resolver<ResolversTypes['AuthDelegationType'], ParentType, ContextType>
  validTo?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type AuthLegalGuardianMinorDelegationResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['AuthLegalGuardianMinorDelegation'] = ResolversParentTypes['AuthLegalGuardianMinorDelegation']
> = {
  createdBy?: Resolver<
    Maybe<ResolversTypes['Identity']>,
    ParentType,
    ContextType
  >
  from?: Resolver<ResolversTypes['Identity'], ParentType, ContextType>
  id?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>
  provider?: Resolver<
    ResolversTypes['AuthDelegationProvider'],
    ParentType,
    ContextType
  >
  referenceId?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  to?: Resolver<Maybe<ResolversTypes['Identity']>, ParentType, ContextType>
  type?: Resolver<ResolversTypes['AuthDelegationType'], ParentType, ContextType>
  validTo?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type AuthLegalRepresentativeDelegationResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['AuthLegalRepresentativeDelegation'] = ResolversParentTypes['AuthLegalRepresentativeDelegation']
> = {
  createdBy?: Resolver<
    Maybe<ResolversTypes['Identity']>,
    ParentType,
    ContextType
  >
  from?: Resolver<ResolversTypes['Identity'], ParentType, ContextType>
  id?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>
  provider?: Resolver<
    ResolversTypes['AuthDelegationProvider'],
    ParentType,
    ContextType
  >
  referenceId?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  to?: Resolver<Maybe<ResolversTypes['Identity']>, ParentType, ContextType>
  type?: Resolver<ResolversTypes['AuthDelegationType'], ParentType, ContextType>
  validTo?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type AuthLoginRestrictionResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['AuthLoginRestriction'] = ResolversParentTypes['AuthLoginRestriction']
> = {
  restricted?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  until?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type AuthMergedDelegationResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['AuthMergedDelegation'] = ResolversParentTypes['AuthMergedDelegation']
> = {
  from?: Resolver<ResolversTypes['Identity'], ParentType, ContextType>
  to?: Resolver<ResolversTypes['Identity'], ParentType, ContextType>
  type?: Resolver<ResolversTypes['AuthDelegationType'], ParentType, ContextType>
  types?: Resolver<
    Array<ResolversTypes['AuthDelegationType']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type AuthPasskeyAuthenticationOptionsResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['AuthPasskeyAuthenticationOptions'] = ResolversParentTypes['AuthPasskeyAuthenticationOptions']
> = {
  allowCredentials?: Resolver<
    Array<ResolversTypes['AuthPasskeyAuthenticationOptionsCredentials']>,
    ParentType,
    ContextType
  >
  challenge?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  rpId?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  timeout?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  userVerification?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type AuthPasskeyAuthenticationOptionsCredentialsResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['AuthPasskeyAuthenticationOptionsCredentials'] = ResolversParentTypes['AuthPasskeyAuthenticationOptionsCredentials']
> = {
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  transports?: Resolver<
    Array<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  type?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type AuthPasskeyRegistrationOptionsResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['AuthPasskeyRegistrationOptions'] = ResolversParentTypes['AuthPasskeyRegistrationOptions']
> = {
  attestation?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  authenticatorSelection?: Resolver<
    Maybe<ResolversTypes['AuthRegistrationOptionsAuthenticatorSelection']>,
    ParentType,
    ContextType
  >
  challenge?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  excludeCredentials?: Resolver<
    Maybe<
      Array<
        ResolversTypes['AuthRegistrationOptionsPublicKeyCredentialDescriptorJSON']
      >
    >,
    ParentType,
    ContextType
  >
  extensions?: Resolver<
    Maybe<ResolversTypes['AuthRegistrationOptionsExtensions']>,
    ParentType,
    ContextType
  >
  pubKeyCredParams?: Resolver<
    Array<ResolversTypes['AuthRegistrationOptionsPublicKeyCredentialOption']>,
    ParentType,
    ContextType
  >
  rp?: Resolver<
    ResolversTypes['AuthRegistrationOptionsRp'],
    ParentType,
    ContextType
  >
  timeout?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  user?: Resolver<
    ResolversTypes['AuthRegistrationOptionsUser'],
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type AuthPasskeyRegistrationVerificationResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['AuthPasskeyRegistrationVerification'] = ResolversParentTypes['AuthPasskeyRegistrationVerification']
> = {
  verified?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type AuthPersonalRepresentativeDelegationResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['AuthPersonalRepresentativeDelegation'] = ResolversParentTypes['AuthPersonalRepresentativeDelegation']
> = {
  createdBy?: Resolver<
    Maybe<ResolversTypes['Identity']>,
    ParentType,
    ContextType
  >
  from?: Resolver<ResolversTypes['Identity'], ParentType, ContextType>
  id?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>
  provider?: Resolver<
    ResolversTypes['AuthDelegationProvider'],
    ParentType,
    ContextType
  >
  referenceId?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  to?: Resolver<Maybe<ResolversTypes['Identity']>, ParentType, ContextType>
  type?: Resolver<ResolversTypes['AuthDelegationType'], ParentType, ContextType>
  validTo?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type AuthProcuringHolderDelegationResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['AuthProcuringHolderDelegation'] = ResolversParentTypes['AuthProcuringHolderDelegation']
> = {
  createdBy?: Resolver<
    Maybe<ResolversTypes['Identity']>,
    ParentType,
    ContextType
  >
  from?: Resolver<ResolversTypes['Identity'], ParentType, ContextType>
  id?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>
  provider?: Resolver<
    ResolversTypes['AuthDelegationProvider'],
    ParentType,
    ContextType
  >
  referenceId?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  to?: Resolver<Maybe<ResolversTypes['Identity']>, ParentType, ContextType>
  type?: Resolver<ResolversTypes['AuthDelegationType'], ParentType, ContextType>
  validTo?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type AuthRegistrationOptionsAuthenticatorSelectionResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['AuthRegistrationOptionsAuthenticatorSelection'] = ResolversParentTypes['AuthRegistrationOptionsAuthenticatorSelection']
> = {
  authenticatorAttachment?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  requireResidentKey?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  residentKey?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  userVerification?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type AuthRegistrationOptionsExtensionsResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['AuthRegistrationOptionsExtensions'] = ResolversParentTypes['AuthRegistrationOptionsExtensions']
> = {
  appid?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  credProps?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  hmacCreateSecret?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type AuthRegistrationOptionsPublicKeyCredentialDescriptorJsonResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['AuthRegistrationOptionsPublicKeyCredentialDescriptorJSON'] = ResolversParentTypes['AuthRegistrationOptionsPublicKeyCredentialDescriptorJSON']
> = {
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  transports?: Resolver<
    Array<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  type?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type AuthRegistrationOptionsPublicKeyCredentialOptionResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['AuthRegistrationOptionsPublicKeyCredentialOption'] = ResolversParentTypes['AuthRegistrationOptionsPublicKeyCredentialOption']
> = {
  alg?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  type?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type AuthRegistrationOptionsRpResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['AuthRegistrationOptionsRp'] = ResolversParentTypes['AuthRegistrationOptionsRp']
> = {
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type AuthRegistrationOptionsUserResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['AuthRegistrationOptionsUser'] = ResolversParentTypes['AuthRegistrationOptionsUser']
> = {
  displayName?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type AuthScopeTreeNodeResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['AuthScopeTreeNode'] = ResolversParentTypes['AuthScopeTreeNode']
> = {
  __resolveType: TypeResolveFn<
    'AuthApiScope' | 'AuthApiScopeGroup',
    ParentType,
    ContextType
  >
}

export type BasicVehicleInformationResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['BasicVehicleInformation'] = ResolversParentTypes['BasicVehicleInformation']
> = {
  color?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  make?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  mileageReading?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  permno?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  requireMileage?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  role?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type BloodDonationRestrictionDetailsResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['BloodDonationRestrictionDetails'] = ResolversParentTypes['BloodDonationRestrictionDetails']
> = {
  cardText?: Resolver<Array<ResolversTypes['Slice']>, ParentType, ContextType>
  description?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  detailedText?: Resolver<
    Array<ResolversTypes['Slice']>,
    ParentType,
    ContextType
  >
  hasCardText?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  hasDetailedText?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  keywordsText?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type BloodDonationRestrictionGenericTagResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['BloodDonationRestrictionGenericTag'] = ResolversParentTypes['BloodDonationRestrictionGenericTag']
> = {
  key?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  label?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type BloodDonationRestrictionGenericTagListResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['BloodDonationRestrictionGenericTagList'] = ResolversParentTypes['BloodDonationRestrictionGenericTagList']
> = {
  items?: Resolver<
    Array<ResolversTypes['BloodDonationRestrictionGenericTag']>,
    ParentType,
    ContextType
  >
  total?: Resolver<ResolversTypes['Int'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type BloodDonationRestrictionListResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['BloodDonationRestrictionList'] = ResolversParentTypes['BloodDonationRestrictionList']
> = {
  input?: Resolver<
    ResolversTypes['GetBloodDonationRestrictionsInputModel'],
    ParentType,
    ContextType
  >
  items?: Resolver<
    Array<ResolversTypes['BloodDonationRestrictionListItem']>,
    ParentType,
    ContextType
  >
  total?: Resolver<ResolversTypes['Int'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type BloodDonationRestrictionListItemResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['BloodDonationRestrictionListItem'] = ResolversParentTypes['BloodDonationRestrictionListItem']
> = {
  cardText?: Resolver<Array<ResolversTypes['Slice']>, ParentType, ContextType>
  description?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  hasCardText?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  hasDetailedText?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  keywordsText?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type BrokerResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Broker'] = ResolversParentTypes['Broker']
> = {
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  nationalId?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type BulkMailActionResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['BulkMailAction'] = ResolversParentTypes['BulkMailAction']
> = {
  messageId?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  success?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type BulletEntryResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['BulletEntry'] = ResolversParentTypes['BulletEntry']
> = {
  __resolveType: TypeResolveFn<
    'IconBullet' | 'NumberBulletGroup',
    ParentType,
    ContextType
  >
}

export type BulletListSliceResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['BulletListSlice'] = ResolversParentTypes['BulletListSlice']
> = {
  bullets?: Resolver<
    Array<ResolversTypes['BulletEntry']>,
    ParentType,
    ContextType
  >
  dividerOnTop?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type BurningPermitResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['BurningPermit'] = ResolversParentTypes['BurningPermit']
> = {
  dateFrom?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  dateTo?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>
  licensee?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  office?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  place?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  responsibleParty?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  size?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  subtype?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  timeFrom?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  timeTo?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type BurningPermitsResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['BurningPermitsResponse'] = ResolversParentTypes['BurningPermitsResponse']
> = {
  list?: Resolver<
    Array<ResolversTypes['BurningPermit']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type CategoryPageResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['CategoryPage'] = ResolversParentTypes['CategoryPage']
> = {
  __resolveType: TypeResolveFn<'Article' | 'Manual', ParentType, ContextType>
}

export type CertificateInfoResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['CertificateInfoResponse'] = ResolversParentTypes['CertificateInfoResponse']
> = {
  expirationDate?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  nationalId?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  releaseDate?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ChangeAppendixResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ChangeAppendix'] = ResolversParentTypes['ChangeAppendix']
> = {
  diff?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  text?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ChartResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Chart'] = ResolversParentTypes['Chart']
> = {
  alternativeDescription?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >
  chartDescription?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  components?: Resolver<
    Array<ResolversTypes['ChartComponent']>,
    ParentType,
    ContextType
  >
  customStyleConfig?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  dateFrom?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  dateTo?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  displayAsCard?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  flipAxis?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  numberOfDataPoints?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  reduceAndRoundValue?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  sourceData?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  startExpanded?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  xAxisFormat?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  xAxisKey?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  xAxisValueType?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  yAxisLabel?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ChartComponentResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ChartComponent'] = ResolversParentTypes['ChartComponent']
> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  interval?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  label?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  sourceDataKey?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  stackId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  type?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  values?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ChartNumberBoxResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ChartNumberBox'] = ResolversParentTypes['ChartNumberBox']
> = {
  displayChangeMonthOverMonth?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType
  >
  displayChangeYearOverYear?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType
  >
  displayTimestamp?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  numberBoxDate?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  numberBoxDescription?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >
  reduceAndRoundValue?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  sourceDataKey?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  valueType?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type CheckTachoNetExistsResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['CheckTachoNetExists'] = ResolversParentTypes['CheckTachoNetExists']
> = {
  exists?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ClientCredentialsResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ClientCredentials'] = ResolversParentTypes['ClientCredentials']
> = {
  clientId?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  clientSecret?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  providerId?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type CommunicationResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['CommunicationResponse'] = ResolversParentTypes['CommunicationResponse']
> = {
  sent?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ConnectedComponentResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ConnectedComponent'] = ResolversParentTypes['ConnectedComponent']
> = {
  configJson?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  json?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  translationStrings?: Resolver<
    Maybe<ResolversTypes['JSONObject']>,
    ParentType,
    ContextType
  >
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ConsultationPortalAdviceResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ConsultationPortalAdviceResult'] = ResolversParentTypes['ConsultationPortalAdviceResult']
> = {
  adviceDocuments?: Resolver<
    Maybe<Array<ResolversTypes['ConsultationPortalDocumentInfoResult']>>,
    ParentType,
    ContextType
  >
  content?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  created?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  isHidden?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>
  isPrivate?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  number?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  participantEmail?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  participantName?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ConsultationPortalAllTypesResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ConsultationPortalAllTypesResult'] = ResolversParentTypes['ConsultationPortalAllTypesResult']
> = {
  caseStatuses?: Resolver<
    Maybe<ResolversTypes['JSONObject']>,
    ParentType,
    ContextType
  >
  caseTypes?: Resolver<
    Maybe<ResolversTypes['JSONObject']>,
    ParentType,
    ContextType
  >
  institutions?: Resolver<
    Maybe<ResolversTypes['JSONObject']>,
    ParentType,
    ContextType
  >
  policyAreas?: Resolver<
    Maybe<ResolversTypes['JSONObject']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ConsultationPortalCaseItemResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ConsultationPortalCaseItemResult'] = ResolversParentTypes['ConsultationPortalCaseItemResult']
> = {
  adviceCount?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  caseNumber?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  created?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>
  id?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  institutionName?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  policyAreaName?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  processBegins?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  processEnds?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  publishOnWeb?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  shortDescription?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  statusName?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  typeName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ConsultationPortalCaseResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ConsultationPortalCaseResult'] = ResolversParentTypes['ConsultationPortalCaseResult']
> = {
  additionalDocuments?: Resolver<
    Maybe<Array<ResolversTypes['ConsultationPortalDocumentInfoResult']>>,
    ParentType,
    ContextType
  >
  adviceCount?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  advicePublishTypeId?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  advicePublishTypeName?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  allowUsersToSendPrivateAdvices?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  announcementText?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  caseNumber?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  changed?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>
  contactEmail?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  contactName?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  created?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>
  detailedDescription?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  documents?: Resolver<
    Maybe<Array<ResolversTypes['ConsultationPortalDocumentInfoResult']>>,
    ParentType,
    ContextType
  >
  extraStakeholderList?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  id?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  institutionName?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  oldInstitutionName?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  policyAreaName?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  processBegins?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  processEnds?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  publishOnWeb?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  relatedCases?: Resolver<
    Maybe<Array<ResolversTypes['ConsultationPortalRelatedCaseResult']>>,
    ParentType,
    ContextType
  >
  shortDescription?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  stakeholders?: Resolver<
    Maybe<Array<ResolversTypes['ConsultationPortalCaseStakeholderResult']>>,
    ParentType,
    ContextType
  >
  statusName?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  summaryDate?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  summaryDocumentId?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  summaryLink?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  summaryText?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  typeName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ConsultationPortalCaseStakeholderResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ConsultationPortalCaseStakeholderResult'] = ResolversParentTypes['ConsultationPortalCaseStakeholderResult']
> = {
  email?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ConsultationPortalCaseSubscriptionResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ConsultationPortalCaseSubscriptionResult'] = ResolversParentTypes['ConsultationPortalCaseSubscriptionResult']
> = {
  type?: Resolver<
    Maybe<ResolversTypes['CaseSubscriptionType']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ConsultationPortalCasesAggregateResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ConsultationPortalCasesAggregateResult'] = ResolversParentTypes['ConsultationPortalCasesAggregateResult']
> = {
  cases?: Resolver<
    Maybe<Array<ResolversTypes['ConsultationPortalCaseItemResult']>>,
    ParentType,
    ContextType
  >
  filterGroups?: Resolver<
    Maybe<ResolversTypes['JSONObject']>,
    ParentType,
    ContextType
  >
  total?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ConsultationPortalDocumentInfoResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ConsultationPortalDocumentInfoResult'] = ResolversParentTypes['ConsultationPortalDocumentInfoResult']
> = {
  description?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  fileName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  fileType?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  link?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  size?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ConsultationPortalRelatedCaseResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ConsultationPortalRelatedCaseResult'] = ResolversParentTypes['ConsultationPortalRelatedCaseResult']
> = {
  caseNumber?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  id?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ConsultationPortalStatisticsResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ConsultationPortalStatisticsResult'] = ResolversParentTypes['ConsultationPortalStatisticsResult']
> = {
  casesInReview?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  totalAdvices?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  totalCases?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ConsultationPortalUserAdviceAggregateResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ConsultationPortalUserAdviceAggregate'] = ResolversParentTypes['ConsultationPortalUserAdviceAggregate']
> = {
  advices?: Resolver<
    Maybe<Array<ResolversTypes['ConsultationPortalUserAdviceResult']>>,
    ParentType,
    ContextType
  >
  total?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ConsultationPortalUserAdviceCaseResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ConsultationPortalUserAdviceCaseResult'] = ResolversParentTypes['ConsultationPortalUserAdviceCaseResult']
> = {
  caseNumber?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  institutionName?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  policyAreaName?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  processBegins?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  processEnds?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  statusName?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  typeName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ConsultationPortalUserAdviceResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ConsultationPortalUserAdviceResult'] = ResolversParentTypes['ConsultationPortalUserAdviceResult']
> = {
  _case?: Resolver<
    Maybe<ResolversTypes['ConsultationPortalUserAdviceCaseResult']>,
    ParentType,
    ContextType
  >
  adviceDocuments?: Resolver<
    Maybe<Array<ResolversTypes['ConsultationPortalDocumentInfoResult']>>,
    ParentType,
    ContextType
  >
  caseId?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  content?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  created?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  participantEmail?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  participantName?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ConsultationPortalUserCaseSubscriptionResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ConsultationPortalUserCaseSubscriptionResult'] = ResolversParentTypes['ConsultationPortalUserCaseSubscriptionResult']
> = {
  id?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  subscriptionType?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ConsultationPortalUserEmailResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ConsultationPortalUserEmailResult'] = ResolversParentTypes['ConsultationPortalUserEmailResult']
> = {
  email?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  emailVerified?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ConsultationPortalUserSubscriptionResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ConsultationPortalUserSubscriptionResult'] = ResolversParentTypes['ConsultationPortalUserSubscriptionResult']
> = {
  id?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  subscriptionType?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ConsultationPortalUserSubscriptionsAggregateResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ConsultationPortalUserSubscriptionsAggregate'] = ResolversParentTypes['ConsultationPortalUserSubscriptionsAggregate']
> = {
  cases?: Resolver<
    Maybe<
      Array<ResolversTypes['ConsultationPortalUserCaseSubscriptionResult']>
    >,
    ParentType,
    ContextType
  >
  institutions?: Resolver<
    Maybe<Array<ResolversTypes['ConsultationPortalUserSubscriptionResult']>>,
    ParentType,
    ContextType
  >
  policyAreas?: Resolver<
    Maybe<Array<ResolversTypes['ConsultationPortalUserSubscriptionResult']>>,
    ParentType,
    ContextType
  >
  subscribedToAll?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  subscribedToAllType?: Resolver<
    Maybe<ResolversTypes['SubscriptionType']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ContactResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Contact'] = ResolversParentTypes['Contact']
> = {
  created?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>
  email?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  modified?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  phoneNumber?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ContactUsResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ContactUs'] = ResolversParentTypes['ContactUs']
> = {
  errorMessage?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  invalidEmail?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  invalidPhone?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  labelEmail?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  labelMessage?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  labelName?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  labelPhone?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  labelSubject?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  required?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  submitButtonText?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  successMessage?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ContentSlugResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ContentSlug'] = ResolversParentTypes['ContentSlug']
> = {
  activeTranslations?: Resolver<
    Maybe<ResolversTypes['JSON']>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  slug?: Resolver<
    Maybe<ResolversTypes['TextFieldLocales']>,
    ParentType,
    ContextType
  >
  title?: Resolver<
    Maybe<ResolversTypes['TextFieldLocales']>,
    ParentType,
    ContextType
  >
  type?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  url?: Resolver<
    Maybe<ResolversTypes['TextFieldLocales']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type CostOfLivingCalculatorModelResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['CostOfLivingCalculatorModel'] = ResolversParentTypes['CostOfLivingCalculatorModel']
> = {
  clothes?: Resolver<ResolversTypes['Int'], ParentType, ContextType>
  communication?: Resolver<ResolversTypes['Int'], ParentType, ContextType>
  food?: Resolver<ResolversTypes['Int'], ParentType, ContextType>
  hobby?: Resolver<ResolversTypes['Int'], ParentType, ContextType>
  medicalCost?: Resolver<ResolversTypes['Int'], ParentType, ContextType>
  numberOf?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  otherServices?: Resolver<ResolversTypes['Int'], ParentType, ContextType>
  text?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  total?: Resolver<ResolversTypes['Int'], ParentType, ContextType>
  transport?: Resolver<ResolversTypes['Int'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type CostOfLivingCalculatorResponseModelResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['CostOfLivingCalculatorResponseModel'] = ResolversParentTypes['CostOfLivingCalculatorResponseModel']
> = {
  items?: Resolver<
    Array<ResolversTypes['CostOfLivingCalculatorModel']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type CoursesModelResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['CoursesModel'] = ResolversParentTypes['CoursesModel']
> = {
  courseId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  courseName?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  finalgrade?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  stage?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  status?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  units?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type CreateBarcodeResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['CreateBarcodeResult'] = ResolversParentTypes['CreateBarcodeResult']
> = {
  expiresIn?: Resolver<ResolversTypes['Int'], ParentType, ContextType>
  token?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type CustomPageResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['CustomPage'] = ResolversParentTypes['CustomPage']
> = {
  alertBanner?: Resolver<
    Maybe<ResolversTypes['AlertBanner']>,
    ParentType,
    ContextType
  >
  configJson?: Resolver<
    Maybe<ResolversTypes['JSONObject']>,
    ParentType,
    ContextType
  >
  content?: Resolver<
    Maybe<Array<ResolversTypes['Slice']>>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  ogDescription?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  ogImage?: Resolver<Maybe<ResolversTypes['Image']>, ParentType, ContextType>
  ogTitle?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  translationStrings?: Resolver<
    ResolversTypes['JSONObject'],
    ParentType,
    ContextType
  >
  uniqueIdentifier?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export interface DateTimeScalarConfig
  extends GraphQLScalarTypeConfig<ResolversTypes['DateTime'], any> {
  name: 'DateTime'
}

export type DelegationAdminCustomModelResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['DelegationAdminCustomModel'] = ResolversParentTypes['DelegationAdminCustomModel']
> = {
  incoming?: Resolver<
    Array<ResolversTypes['AuthCustomDelegation']>,
    ParentType,
    ContextType
  >
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  nationalId?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  outgoing?: Resolver<
    Array<ResolversTypes['AuthCustomDelegation']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type DeleteDraftRegulationModelResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['DeleteDraftRegulationModel'] = ResolversParentTypes['DeleteDraftRegulationModel']
> = {
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type DeleteNameResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['DeleteNameResponse'] = ResolversParentTypes['DeleteNameResponse']
> = {
  id?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type DeleteTokenResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['DeleteTokenResponse'] = ResolversParentTypes['DeleteTokenResponse']
> = {
  success?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type DetailedScheduleResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['DetailedSchedule'] = ResolversParentTypes['DetailedSchedule']
> = {
  paidAmount?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  paidDate?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  payExplanation?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  paymentNumber?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  unpaidAmount?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type DiplomaItemsResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['DiplomaItems'] = ResolversParentTypes['DiplomaItems']
> = {
  diplomaCode?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  diplomaCredits?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  diplomaCreditsTotal?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  diplomaDate?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  diplomaId?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  diplomaLongName?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  diplomaName?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  organisation?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  organisationId?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  organisationShort?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type DiplomaModelResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['DiplomaModel'] = ResolversParentTypes['DiplomaModel']
> = {
  items?: Resolver<
    Maybe<Array<ResolversTypes['DiplomaItems']>>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type DirectTaxPaymentModelResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['DirectTaxPaymentModel'] = ResolversParentTypes['DirectTaxPaymentModel']
> = {
  month?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  payerNationalId?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  personalAllowance?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  totalSalary?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  withheldAtSource?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  year?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type DisqualificationResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Disqualification'] = ResolversParentTypes['Disqualification']
> = {
  to?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type DistrictCommissionerAgenciesResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['DistrictCommissionerAgencies'] = ResolversParentTypes['DistrictCommissionerAgencies']
> = {
  address?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  place?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type DistrictsResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Districts'] = ResolversParentTypes['Districts']
> = {
  description?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  hasBorderAbove?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  image?: Resolver<Maybe<ResolversTypes['Image']>, ParentType, ContextType>
  links?: Resolver<Array<ResolversTypes['Link']>, ParentType, ContextType>
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type DocumentResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Document'] = ResolversParentTypes['Document']
> = {
  bookmarked?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  categoryId?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  date?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>
  fileType?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  opened?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  senderName?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  senderNatReg?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  subject?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type DocumentCategoryResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['DocumentCategory'] = ResolversParentTypes['DocumentCategory']
> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type DocumentConfirmActionsResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['DocumentConfirmActions'] = ResolversParentTypes['DocumentConfirmActions']
> = {
  confirmed?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type DocumentDetailsResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['DocumentDetails'] = ResolversParentTypes['DocumentDetails']
> = {
  archived?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>
  bookmarked?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  categoryId?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  content?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  fileType?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  html?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  publicationDate?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  senderKennitala?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  senderName?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  subject?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type DocumentListResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['DocumentListResponse'] = ResolversParentTypes['DocumentListResponse']
> = {
  data?: Resolver<Array<ResolversTypes['Document']>, ParentType, ContextType>
  totalCount?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  unreadCount?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type DocumentMailActionResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['DocumentMailAction'] = ResolversParentTypes['DocumentMailAction']
> = {
  messageIds?: Resolver<
    Array<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  success?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type DocumentPageNumberResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['DocumentPageNumber'] = ResolversParentTypes['DocumentPageNumber']
> = {
  pageNumber?: Resolver<ResolversTypes['Int'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type DocumentPageResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['DocumentPageResponse'] = ResolversParentTypes['DocumentPageResponse']
> = {
  messagePage?: Resolver<ResolversTypes['Int'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type DocumentPdfRendererResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['DocumentPdfRenderer'] = ResolversParentTypes['DocumentPdfRenderer']
> = {
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  success?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type DocumentProviderCategoryResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['DocumentProviderCategory'] = ResolversParentTypes['DocumentProviderCategory']
> = {
  active?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>
  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type DocumentProviderPaperMailResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['DocumentProviderPaperMail'] = ResolversParentTypes['DocumentProviderPaperMail']
> = {
  dateAdded?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  dateUpdated?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  nationalId?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  origin?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  wantsPaper?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type DocumentProviderPaperMailResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['DocumentProviderPaperMailResponse'] = ResolversParentTypes['DocumentProviderPaperMailResponse']
> = {
  paperMail?: Resolver<
    Array<ResolversTypes['DocumentProviderPaperMail']>,
    ParentType,
    ContextType
  >
  totalCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type DocumentProviderTypeResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['DocumentProviderType'] = ResolversParentTypes['DocumentProviderType']
> = {
  active?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>
  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type DocumentSenderResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['DocumentSender'] = ResolversParentTypes['DocumentSender']
> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type DocumentTypeResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['DocumentType'] = ResolversParentTypes['DocumentType']
> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type DocumentV2Resolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['DocumentV2'] = ResolversParentTypes['DocumentV2']
> = {
  actions?: Resolver<
    Maybe<Array<ResolversTypes['DocumentV2Action']>>,
    ParentType,
    ContextType
  >
  alert?: Resolver<
    Maybe<ResolversTypes['DocumentV2Action']>,
    ParentType,
    ContextType
  >
  archived?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>
  bookmarked?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  categoryId?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  confirmation?: Resolver<
    Maybe<ResolversTypes['DocumentV2Action']>,
    ParentType,
    ContextType
  >
  content?: Resolver<
    Maybe<ResolversTypes['DocumentV2Content']>,
    ParentType,
    ContextType
  >
  documentDate?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  downloadUrl?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  isUrgent?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  opened?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>
  publicationDate?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  sender?: Resolver<
    ResolversTypes['DocumentsV2Sender'],
    ParentType,
    ContextType
  >
  subject?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type DocumentV2ActionResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['DocumentV2Action'] = ResolversParentTypes['DocumentV2Action']
> = {
  data?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  icon?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type DocumentV2ContentResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['DocumentV2Content'] = ResolversParentTypes['DocumentV2Content']
> = {
  type?: Resolver<
    ResolversTypes['DocumentsV2FileType'],
    ParentType,
    ContextType
  >
  value?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type DocumentV2MarkAllMailAsReadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['DocumentV2MarkAllMailAsRead'] = ResolversParentTypes['DocumentV2MarkAllMailAsRead']
> = {
  success?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type DocumentV2PaperMailPreferencesResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['DocumentV2PaperMailPreferences'] = ResolversParentTypes['DocumentV2PaperMailPreferences']
> = {
  nationalId?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  wantsPaper?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type DocumentsV2Resolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['DocumentsV2'] = ResolversParentTypes['DocumentsV2']
> = {
  categories?: Resolver<
    Array<ResolversTypes['DocumentsV2Category']>,
    ParentType,
    ContextType
  >
  data?: Resolver<Array<ResolversTypes['DocumentV2']>, ParentType, ContextType>
  pageInfo?: Resolver<ResolversTypes['PageInfoDto'], ParentType, ContextType>
  senders?: Resolver<
    Array<ResolversTypes['DocumentsV2Sender']>,
    ParentType,
    ContextType
  >
  totalCount?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  types?: Resolver<
    Array<ResolversTypes['DocumentsV2Type']>,
    ParentType,
    ContextType
  >
  unreadCount?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type DocumentsV2BaseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['DocumentsV2Base'] = ResolversParentTypes['DocumentsV2Base']
> = {
  __resolveType: TypeResolveFn<
    'DocumentsV2Category' | 'DocumentsV2Type',
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
}

export type DocumentsV2CategoryResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['DocumentsV2Category'] = ResolversParentTypes['DocumentsV2Category']
> = {
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type DocumentsV2SenderResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['DocumentsV2Sender'] = ResolversParentTypes['DocumentsV2Sender']
> = {
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type DocumentsV2TypeResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['DocumentsV2Type'] = ResolversParentTypes['DocumentsV2Type']
> = {
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type DraftRegulationCancelModelResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['DraftRegulationCancelModel'] = ResolversParentTypes['DraftRegulationCancelModel']
> = {
  date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  dropped?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  regTitle?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type DraftRegulationChangeModelResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['DraftRegulationChangeModel'] = ResolversParentTypes['DraftRegulationChangeModel']
> = {
  appendixes?: Resolver<
    Maybe<Array<ResolversTypes['ChangeAppendix']>>,
    ParentType,
    ContextType
  >
  comments?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  diff?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  dropped?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  regTitle?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  text?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type DraftRegulationPagingModelResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['DraftRegulationPagingModel'] = ResolversParentTypes['DraftRegulationPagingModel']
> = {
  page?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  pages?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type DraftRegulationPdfDownloadModelResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['DraftRegulationPdfDownloadModel'] = ResolversParentTypes['DraftRegulationPdfDownloadModel']
> = {
  downloadService?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type DraftRegulationShippedModelResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['DraftRegulationShippedModel'] = ResolversParentTypes['DraftRegulationShippedModel']
> = {
  authors?: Resolver<
    Array<ResolversTypes['RegulationShippedAuthor']>,
    ParentType,
    ContextType
  >
  draftingStatus?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  fastTrack?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  idealPublishDate?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type DraftRegulationSummaryResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['DraftRegulationSummary'] = ResolversParentTypes['DraftRegulationSummary']
> = {
  authors?: Resolver<
    Array<ResolversTypes['RegulationSummaryAuthor']>,
    ParentType,
    ContextType
  >
  draftingStatus?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  fastTrack?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  idealPublishDate?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type DrivingBookLessonResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['DrivingBookLesson'] = ResolversParentTypes['DrivingBookLesson']
> = {
  comments?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  lessonTime?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  registerDate?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  teacherName?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  teacherNationalId?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type DrivingLicenceTestResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['DrivingLicenceTestResult'] = ResolversParentTypes['DrivingLicenceTestResult']
> = {
  comments?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  examDate?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  hasPassed?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  score?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  scorePart1?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  scorePart2?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  testCenterName?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  testCenterNationalId?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >
  testExaminerName?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  testExaminerNationalId?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >
  testTypeCode?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  testTypeId?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  testTypeName?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type DrivingLicenceTestResultIdResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['DrivingLicenceTestResultId'] = ResolversParentTypes['DrivingLicenceTestResultId']
> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type DrivingLicenseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['DrivingLicense'] = ResolversParentTypes['DrivingLicense']
> = {
  birthCountry?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  categories?: Resolver<
    Array<ResolversTypes['Eligibility']>,
    ParentType,
    ContextType
  >
  disqualification?: Resolver<
    Maybe<ResolversTypes['Disqualification']>,
    ParentType,
    ContextType
  >
  expires?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  issued?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  remarks?: Resolver<Array<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type DrivingLicenseBookResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['DrivingLicenseBook'] = ResolversParentTypes['DrivingLicenseBook']
> = {
  createdOn?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  drivingSchoolExams?: Resolver<
    Array<ResolversTypes['DrivingSchoolExam']>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  isDigital?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  licenseCategory?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  practiceDriving?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  schoolName?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  schoolNationalId?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  status?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  statusName?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  teacherName?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  teacherNationalId?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >
  teachersAndLessons?: Resolver<
    Array<ResolversTypes['DrivingBookLesson']>,
    ParentType,
    ContextType
  >
  testResults?: Resolver<
    Array<ResolversTypes['DrivingLicenceTestResult']>,
    ParentType,
    ContextType
  >
  totalLessonCount?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  totalLessonTime?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type DrivingLicenseBookSchoolResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['DrivingLicenseBookSchool'] = ResolversParentTypes['DrivingLicenseBookSchool']
> = {
  address?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  allowedDrivingSchoolTypes?: Resolver<
    Array<ResolversTypes['DrivingSchoolType']>,
    ParentType,
    ContextType
  >
  email?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  nationalId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  phoneNumber?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  website?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  zipCode?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type DrivingLicenseBookStudentResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['DrivingLicenseBookStudent'] = ResolversParentTypes['DrivingLicenseBookStudent']
> = {
  active?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  address?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  bookLicenseCategories?: Resolver<
    Array<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  email?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  nationalId?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  primaryPhoneNumber?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >
  secondaryPhoneNumber?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >
  zipCode?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type DrivingLicenseBookStudentForTeacherResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['DrivingLicenseBookStudentForTeacher'] = ResolversParentTypes['DrivingLicenseBookStudentForTeacher']
> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  nationalId?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  totalLessonCount?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type DrivingLicenseBookStudentOverviewResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['DrivingLicenseBookStudentOverview'] = ResolversParentTypes['DrivingLicenseBookStudentOverview']
> = {
  active?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  address?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  book?: Resolver<ResolversTypes['DrivingLicenseBook'], ParentType, ContextType>
  bookLicenseCategories?: Resolver<
    Array<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  email?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  nationalId?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  primaryPhoneNumber?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >
  secondaryPhoneNumber?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >
  zipCode?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type DrivingLicenseBookSuccessResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['DrivingLicenseBookSuccess'] = ResolversParentTypes['DrivingLicenseBookSuccess']
> = {
  success?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type DrivingLicenseQualityPhotoResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['DrivingLicenseQualityPhoto'] = ResolversParentTypes['DrivingLicenseQualityPhoto']
> = {
  dataUri?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  hasQualityPhoto?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type DrivingLicenseQualitySignatureResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['DrivingLicenseQualitySignature'] = ResolversParentTypes['DrivingLicenseQualitySignature']
> = {
  dataUri?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  hasQualitySignature?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type DrivingSchoolExamResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['DrivingSchoolExam'] = ResolversParentTypes['DrivingSchoolExam']
> = {
  comments?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  examDate?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  schoolEmployeeName?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >
  schoolEmployeeNationalId?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >
  schoolName?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  schoolNationalId?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  schoolTypeCode?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  schoolTypeId?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  schoolTypeName?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  status?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  statusName?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type DrivingSchoolTypeResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['DrivingSchoolType'] = ResolversParentTypes['DrivingSchoolType']
> = {
  licenseCategory?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  schoolTypeCode?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  schoolTypeId?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  schoolTypeName?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type EducationCompulsorySchoolCourseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['EducationCompulsorySchoolCourse'] = ResolversParentTypes['EducationCompulsorySchoolCourse']
> = {
  competence?: Resolver<
    ResolversTypes['EducationCompulsorySchoolCourseCompetence'],
    ParentType,
    ContextType
  >
  gradeCategories?: Resolver<
    Maybe<Array<ResolversTypes['EducationCompulsorySchoolGradeCategory']>>,
    ParentType,
    ContextType
  >
  label?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  totalGrade?: Resolver<
    Maybe<ResolversTypes['EducationCompulsorySchoolGrade']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type EducationCompulsorySchoolCourseCompetenceResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['EducationCompulsorySchoolCourseCompetence'] = ResolversParentTypes['EducationCompulsorySchoolCourseCompetence']
> = {
  competenceStatus?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  competencyGrade?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type EducationCompulsorySchoolGradeResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['EducationCompulsorySchoolGrade'] = ResolversParentTypes['EducationCompulsorySchoolGrade']
> = {
  compulsorySchoolGrade?: Resolver<
    ResolversTypes['EducationCompulsorySchoolGradeDetail'],
    ParentType,
    ContextType
  >
  serialGrade?: Resolver<
    ResolversTypes['EducationCompulsorySchoolGradeDetail'],
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type EducationCompulsorySchoolGradeCategoryResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['EducationCompulsorySchoolGradeCategory'] = ResolversParentTypes['EducationCompulsorySchoolGradeCategory']
> = {
  __resolveType: TypeResolveFn<
    | 'EducationCompulsorySchoolGradeCategoryText'
    | 'EducationCompulsorySchoolGradeCategoryWeighted',
    ParentType,
    ContextType
  >
  label?: Resolver<ResolversTypes['String'], ParentType, ContextType>
}

export type EducationCompulsorySchoolGradeCategoryTextResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['EducationCompulsorySchoolGradeCategoryText'] = ResolversParentTypes['EducationCompulsorySchoolGradeCategoryText']
> = {
  label?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  text?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type EducationCompulsorySchoolGradeCategoryWeightedResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['EducationCompulsorySchoolGradeCategoryWeighted'] = ResolversParentTypes['EducationCompulsorySchoolGradeCategoryWeighted']
> = {
  grade?: Resolver<
    ResolversTypes['EducationCompulsorySchoolGrade'],
    ParentType,
    ContextType
  >
  label?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type EducationCompulsorySchoolGradeDetailResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['EducationCompulsorySchoolGradeDetail'] = ResolversParentTypes['EducationCompulsorySchoolGradeDetail']
> = {
  grade?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  weight?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type EducationCompulsorySchoolGradeLevelExamResultsResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['EducationCompulsorySchoolGradeLevelExamResults'] = ResolversParentTypes['EducationCompulsorySchoolGradeLevelExamResults']
> = {
  coursesExamResults?: Resolver<
    Maybe<Array<ResolversTypes['EducationCompulsorySchoolCourse']>>,
    ParentType,
    ContextType
  >
  gradeLevel?: Resolver<ResolversTypes['Int'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type EducationCompulsorySchoolStudentCareerResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['EducationCompulsorySchoolStudentCareer'] = ResolversParentTypes['EducationCompulsorySchoolStudentCareer']
> = {
  examDateSpan?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  examResults?: Resolver<
    Maybe<
      Array<ResolversTypes['EducationCompulsorySchoolGradeLevelExamResults']>
    >,
    ParentType,
    ContextType
  >
  isChildOfUser?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  nationalId?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type EducationCourseGradeResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['EducationCourseGrade'] = ResolversParentTypes['EducationCourseGrade']
> = {
  competence?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  competenceStatus?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  gradeSum?: Resolver<
    Maybe<ResolversTypes['GradeType']>,
    ParentType,
    ContextType
  >
  grades?: Resolver<Array<ResolversTypes['GradeType']>, ParentType, ContextType>
  label?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  progressText?: Resolver<
    Maybe<ResolversTypes['Grade']>,
    ParentType,
    ContextType
  >
  wordAndNumbers?: Resolver<
    Maybe<ResolversTypes['Grade']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type EducationExamFamilyOverviewResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['EducationExamFamilyOverview'] = ResolversParentTypes['EducationExamFamilyOverview']
> = {
  familyIndex?: Resolver<ResolversTypes['Int'], ParentType, ContextType>
  isChild?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  nationalId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  organizationName?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  organizationType?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  yearInterval?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type EducationExamResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['EducationExamResult'] = ResolversParentTypes['EducationExamResult']
> = {
  fullName?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  grades?: Resolver<
    Array<ResolversTypes['EducationGradeResult']>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type EducationFriggAddressModelResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['EducationFriggAddressModel'] = ResolversParentTypes['EducationFriggAddressModel']
> = {
  address?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  country?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  municipality?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  postCode?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type EducationFriggKeyOptionModelResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['EducationFriggKeyOptionModel'] = ResolversParentTypes['EducationFriggKeyOptionModel']
> = {
  options?: Resolver<
    Array<ResolversTypes['EducationFriggOptionModel']>,
    ParentType,
    ContextType
  >
  type?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type EducationFriggOptionModelResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['EducationFriggOptionModel'] = ResolversParentTypes['EducationFriggOptionModel']
> = {
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  key?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  value?: Resolver<
    Array<ResolversTypes['EducationFriggValueModel']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type EducationFriggOrganizationModelResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['EducationFriggOrganizationModel'] = ResolversParentTypes['EducationFriggOrganizationModel']
> = {
  address?: Resolver<
    Maybe<ResolversTypes['EducationFriggAddressModel']>,
    ParentType,
    ContextType
  >
  children?: Resolver<
    Maybe<Array<ResolversTypes['EducationFriggOrganizationModel']>>,
    ParentType,
    ContextType
  >
  email?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  gradeLevels?: Resolver<
    Maybe<Array<ResolversTypes['String']>>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  nationalId?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  phone?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  type?: Resolver<
    ResolversTypes['OrganizationModelTypeEnum'],
    ParentType,
    ContextType
  >
  unitId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  website?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type EducationFriggValueModelResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['EducationFriggValueModel'] = ResolversParentTypes['EducationFriggValueModel']
> = {
  content?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  language?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type EducationGradeResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['EducationGradeResult'] = ResolversParentTypes['EducationGradeResult']
> = {
  courses?: Resolver<
    Array<ResolversTypes['EducationCourseGrade']>,
    ParentType,
    ContextType
  >
  studentYear?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type EducationLicenseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['EducationLicense'] = ResolversParentTypes['EducationLicense']
> = {
  date?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  programme?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  school?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type EducationSignedLicenseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['EducationSignedLicense'] = ResolversParentTypes['EducationSignedLicense']
> = {
  url?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type EducationUserFamilyCompulsorySchoolCareerResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['EducationUserFamilyCompulsorySchoolCareer'] = ResolversParentTypes['EducationUserFamilyCompulsorySchoolCareer']
> = {
  familyMemberCareers?: Resolver<
    Maybe<Array<ResolversTypes['EducationCompulsorySchoolStudentCareer']>>,
    ParentType,
    ContextType
  >
  userCareer?: Resolver<
    Maybe<ResolversTypes['EducationCompulsorySchoolStudentCareer']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type EligibilityResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Eligibility'] = ResolversParentTypes['Eligibility']
> = {
  comment?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  expires?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>
  issued?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>
  name?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type EmailSignupResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['EmailSignup'] = ResolversParentTypes['EmailSignup']
> = {
  configuration?: Resolver<
    Maybe<ResolversTypes['JSON']>,
    ParentType,
    ContextType
  >
  description?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  formFields?: Resolver<
    Maybe<Array<ResolversTypes['FormField']>>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  signupType?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  translations?: Resolver<
    Maybe<ResolversTypes['JSON']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type EmailSignupResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['EmailSignupResponse'] = ResolversParentTypes['EmailSignupResponse']
> = {
  subscribed?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type EmbedResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Embed'] = ResolversParentTypes['Embed']
> = {
  altText?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  aspectRatio?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  embedUrl?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type EmbeddedVideoResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['EmbeddedVideo'] = ResolversParentTypes['EmbeddedVideo']
> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  thumbnailImageUrl?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type EndorsementResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Endorsement'] = ResolversParentTypes['Endorsement']
> = {
  created?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  endorsementList?: Resolver<
    Maybe<ResolversTypes['EndorsementListOpen']>,
    ParentType,
    ContextType
  >
  endorsementListId?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >
  endorser?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  meta?: Resolver<
    ResolversTypes['EndorsementMetadata'],
    ParentType,
    ContextType
  >
  modified?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type EndorsementListResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['EndorsementList'] = ResolversParentTypes['EndorsementList']
> = {
  adminLock?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  closedDate?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>
  created?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  description?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  endorsementCounter?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  meta?: Resolver<ResolversTypes['JSON'], ParentType, ContextType>
  modified?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  openedDate?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>
  owner?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  ownerName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  tags?: Resolver<
    Array<ResolversTypes['EndorsementListTagsEnum']>,
    ParentType,
    ContextType
  >
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type EndorsementListOpenResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['EndorsementListOpen'] = ResolversParentTypes['EndorsementListOpen']
> = {
  adminLock?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  closedDate?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>
  description?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  id?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>
  openedDate?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>
  tags?: Resolver<
    Maybe<Array<ResolversTypes['EndorsementListOpenTagsEnum']>>,
    ParentType,
    ContextType
  >
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type EndorsementMetadataResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['EndorsementMetadata'] = ResolversParentTypes['EndorsementMetadata']
> = {
  fullName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  locality?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type EnergyFundVehicleDetailsWithGrantResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['EnergyFundVehicleDetailsWithGrant'] = ResolversParentTypes['EnergyFundVehicleDetailsWithGrant']
> = {
  color?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  firstRegistrationDate?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  hasReceivedSubsidy?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  make?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  newRegistrationDate?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  permno?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  requireMileage?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  vehicleGrant?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  vehicleGrantItemCode?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  vin?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type EnergyFundVehicleGrantResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['EnergyFundVehicleGrant'] = ResolversParentTypes['EnergyFundVehicleGrant']
> = {
  hasReceivedSubsidy?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  vehicleGrant?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  vehicleGrantItemCode?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type EnhancedAssetResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['EnhancedAsset'] = ResolversParentTypes['EnhancedAsset']
> = {
  description?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  file?: Resolver<Maybe<ResolversTypes['Asset']>, ParentType, ContextType>
  genericTags?: Resolver<
    Array<ResolversTypes['GenericTag']>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  organization?: Resolver<
    ResolversTypes['Organization'],
    ParentType,
    ContextType
  >
  releaseDate?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type EnhancedAssetSearchResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['EnhancedAssetSearchResult'] = ResolversParentTypes['EnhancedAssetSearchResult']
> = {
  items?: Resolver<
    Array<ResolversTypes['EnhancedAsset']>,
    ParentType,
    ContextType
  >
  total?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type EntryTitleResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['EntryTitle'] = ResolversParentTypes['EntryTitle']
> = {
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ErrorPageResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ErrorPage'] = ResolversParentTypes['ErrorPage']
> = {
  description?: Resolver<Maybe<ResolversTypes['Html']>, ParentType, ContextType>
  errorCode?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type EstateRelationsResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['EstateRelations'] = ResolversParentTypes['EstateRelations']
> = {
  relations?: Resolver<Array<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type EventResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Event'] = ResolversParentTypes['Event']
> = {
  content?: Resolver<
    Maybe<Array<ResolversTypes['Slice']>>,
    ParentType,
    ContextType
  >
  contentImage?: Resolver<
    Maybe<ResolversTypes['Image']>,
    ParentType,
    ContextType
  >
  endDate?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  featuredImage?: Resolver<
    Maybe<ResolversTypes['Image']>,
    ParentType,
    ContextType
  >
  firstPublishedAt?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  fullWidthImageInContent?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  location?: Resolver<ResolversTypes['EventLocation'], ParentType, ContextType>
  organization?: Resolver<
    Maybe<ResolversTypes['Organization']>,
    ParentType,
    ContextType
  >
  slug?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  startDate?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  thumbnailImage?: Resolver<
    Maybe<ResolversTypes['Image']>,
    ParentType,
    ContextType
  >
  time?: Resolver<ResolversTypes['EventTime'], ParentType, ContextType>
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  video?: Resolver<
    Maybe<ResolversTypes['EmbeddedVideo']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type EventListResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['EventList'] = ResolversParentTypes['EventList']
> = {
  items?: Resolver<Array<ResolversTypes['Event']>, ParentType, ContextType>
  total?: Resolver<ResolversTypes['Int'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type EventLocationResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['EventLocation'] = ResolversParentTypes['EventLocation']
> = {
  floor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  freeText?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  postalCode?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  streetAddress?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  useFreeText?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type EventSliceResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['EventSlice'] = ResolversParentTypes['EventSlice']
> = {
  backgroundImage?: Resolver<
    Maybe<ResolversTypes['Image']>,
    ParentType,
    ContextType
  >
  date?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  link?: Resolver<Maybe<ResolversTypes['Link']>, ParentType, ContextType>
  subtitle?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type EventTimeResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['EventTime'] = ResolversParentTypes['EventTime']
> = {
  endTime?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  startTime?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ExistsEndorsementResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ExistsEndorsementResponse'] = ResolversParentTypes['ExistsEndorsementResponse']
> = {
  hasEndorsed?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ExportUrlResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ExportUrlResponse'] = ResolversParentTypes['ExportUrlResponse']
> = {
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ExternalLinksResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ExternalLinks'] = ResolversParentTypes['ExternalLinks']
> = {
  bugReport?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  documentation?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  featureRequest?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  responsibleParty?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FaqListResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FaqList'] = ResolversParentTypes['FaqList']
> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  questions?: Resolver<
    Array<ResolversTypes['QuestionAndAnswer']>,
    ParentType,
    ContextType
  >
  showTitle?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FeaturedResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Featured'] = ResolversParentTypes['Featured']
> = {
  attention?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  thing?: Resolver<
    Maybe<ResolversTypes['ReferenceLink']>,
    ParentType,
    ContextType
  >
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FeaturedArticlesResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FeaturedArticles'] = ResolversParentTypes['FeaturedArticles']
> = {
  articles?: Resolver<
    Array<ResolversTypes['ArticleReference']>,
    ParentType,
    ContextType
  >
  automaticallyFetchArticles?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  hasBorderAbove?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  image?: Resolver<Maybe<ResolversTypes['Image']>, ParentType, ContextType>
  introText?: Resolver<
    Maybe<Array<ResolversTypes['Slice']>>,
    ParentType,
    ContextType
  >
  link?: Resolver<Maybe<ResolversTypes['Link']>, ParentType, ContextType>
  resolvedArticles?: Resolver<
    Array<ResolversTypes['Article']>,
    ParentType,
    ContextType
  >
  sortBy?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FeaturedEventsResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FeaturedEvents'] = ResolversParentTypes['FeaturedEvents']
> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  namespace?: Resolver<ResolversTypes['JSONObject'], ParentType, ContextType>
  noEventsFoundText?: Resolver<
    Maybe<Array<ResolversTypes['Slice']>>,
    ParentType,
    ContextType
  >
  organization?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  resolvedEventList?: Resolver<
    ResolversTypes['EventList'],
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FeaturedLinksResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FeaturedLinks'] = ResolversParentTypes['FeaturedLinks']
> = {
  featuredLinks?: Resolver<
    Maybe<Array<ResolversTypes['Featured']>>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FeaturedSupportQnAsResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FeaturedSupportQNAs'] = ResolversParentTypes['FeaturedSupportQNAs']
> = {
  automaticallyFetchSupportQNAs?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  link?: Resolver<Maybe<ResolversTypes['Link']>, ParentType, ContextType>
  renderedTitle?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  resolvedSupportQNAs?: Resolver<
    Array<ResolversTypes['SupportQNA']>,
    ParentType,
    ContextType
  >
  supportQNAs?: Resolver<
    Maybe<Array<ResolversTypes['SupportQNA']>>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FinanceAssessmentYearsResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FinanceAssessmentYears'] = ResolversParentTypes['FinanceAssessmentYears']
> = {
  year?: Resolver<
    Maybe<Array<ResolversTypes['String']>>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FinanceChargeItemSubjectsByYearResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FinanceChargeItemSubjectsByYear'] = ResolversParentTypes['FinanceChargeItemSubjectsByYear']
> = {
  chargeItemSubjects?: Resolver<
    Array<ResolversTypes['FinanceChargeItemSubjectsByYearData']>,
    ParentType,
    ContextType
  >
  more?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>
  nextKey?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FinanceChargeItemSubjectsByYearDataResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FinanceChargeItemSubjectsByYearData'] = ResolversParentTypes['FinanceChargeItemSubjectsByYearData']
> = {
  chargeItemSubject?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >
  lastMoveDate?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  periods?: Resolver<
    Array<ResolversTypes['FinanceChargeItemSubjectsByYearPeriodData']>,
    ParentType,
    ContextType
  >
  totalAmount?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FinanceChargeItemSubjectsByYearPeriodDataResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FinanceChargeItemSubjectsByYearPeriodData'] = ResolversParentTypes['FinanceChargeItemSubjectsByYearPeriodData']
> = {
  amount?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  description?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  lastMoveDate?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  period?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FinanceChargeTypeDetailsResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FinanceChargeTypeDetails'] = ResolversParentTypes['FinanceChargeTypeDetails']
> = {
  chargeType?: Resolver<
    Array<ResolversTypes['FinanceChargeTypeDetailsData']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FinanceChargeTypeDetailsDataResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FinanceChargeTypeDetailsData'] = ResolversParentTypes['FinanceChargeTypeDetailsData']
> = {
  chargeItemSubjectDescription?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >
  chargeItemSubjects?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >
  iD?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  lastMovementDate?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FinanceChargeTypePeriodSubjectResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FinanceChargeTypePeriodSubject'] = ResolversParentTypes['FinanceChargeTypePeriodSubject']
> = {
  message?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  more?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>
  nextKey?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  records?: Resolver<
    Array<ResolversTypes['FinanceChargeTypePeriodSubjectData']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FinanceChargeTypePeriodSubjectDataResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FinanceChargeTypePeriodSubjectData'] = ResolversParentTypes['FinanceChargeTypePeriodSubjectData']
> = {
  accountReference?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  actionCategory?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  amount?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  category?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  chargeItemSubject?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >
  chargeType?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  collectingOrganization?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >
  createDate?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  createTime?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  itemCode?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  performingOrganization?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >
  period?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  periodType?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  reference?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  referenceToLevy?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  subCategory?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  valueDate?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FinanceChargeTypesByYearResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FinanceChargeTypesByYear'] = ResolversParentTypes['FinanceChargeTypesByYear']
> = {
  chargeType?: Resolver<
    Maybe<Array<ResolversTypes['FinanceChargeTypesByYearData']>>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FinanceChargeTypesByYearDataResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FinanceChargeTypesByYearData'] = ResolversParentTypes['FinanceChargeTypesByYearData']
> = {
  iD?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FinanceCustomerChargeTypeResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FinanceCustomerChargeType'] = ResolversParentTypes['FinanceCustomerChargeType']
> = {
  chargeType?: Resolver<
    Array<ResolversTypes['FinanceCustomerChargeTypeItem']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FinanceCustomerChargeTypeItemResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FinanceCustomerChargeTypeItem'] = ResolversParentTypes['FinanceCustomerChargeTypeItem']
> = {
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FinanceCustomerRecordsResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FinanceCustomerRecords'] = ResolversParentTypes['FinanceCustomerRecords']
> = {
  records?: Resolver<
    Maybe<Array<ResolversTypes['FinanceCustomerRecordsItem']>>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FinanceCustomerRecordsItemResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FinanceCustomerRecordsItem'] = ResolversParentTypes['FinanceCustomerRecordsItem']
> = {
  accountReference?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  actionCategory?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  amount?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  category?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  chargeItemSubject?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >
  chargeType?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  collectingOrganization?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >
  createDate?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  createTime?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  itemCode?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  performingOrganization?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >
  period?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  periodType?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  reference?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  referenceToLevy?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  subCategory?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  valueDate?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FinanceCustomerTapsControlModelResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FinanceCustomerTapsControlModel'] = ResolversParentTypes['FinanceCustomerTapsControlModel']
> = {
  RecordsTap?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  employeeClaimsTap?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType
  >
  localTaxTap?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  schedulesTap?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FinanceDebtStatusResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FinanceDebtStatus'] = ResolversParentTypes['FinanceDebtStatus']
> = {
  approvedSchedule?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  notPossibleToSchedule?: Resolver<
    ResolversTypes['Float'],
    ParentType,
    ContextType
  >
  possibleToSchedule?: Resolver<
    ResolversTypes['Float'],
    ParentType,
    ContextType
  >
  totalAmount?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FinanceDebtStatusModelResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FinanceDebtStatusModel'] = ResolversParentTypes['FinanceDebtStatusModel']
> = {
  myDebtStatus?: Resolver<
    Array<ResolversTypes['FinanceDebtStatus']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FinanceDocumentDataResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FinanceDocumentData'] = ResolversParentTypes['FinanceDocumentData']
> = {
  document?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  type?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FinanceDocumentModelResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FinanceDocumentModel'] = ResolversParentTypes['FinanceDocumentModel']
> = {
  docment?: Resolver<
    ResolversTypes['FinanceDocumentData'],
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FinanceDocumentsListItemResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FinanceDocumentsListItem'] = ResolversParentTypes['FinanceDocumentsListItem']
> = {
  amount?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  date?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  dateOpen?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  note?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  sender?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  type?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FinanceDocumentsListModelResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FinanceDocumentsListModel'] = ResolversParentTypes['FinanceDocumentsListModel']
> = {
  documentsList?: Resolver<
    Array<ResolversTypes['FinanceDocumentsListItem']>,
    ParentType,
    ContextType
  >
  downloadServiceURL?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FinancialStatementsInaoClientTypeResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FinancialStatementsInaoClientType'] = ResolversParentTypes['FinancialStatementsInaoClientType']
> = {
  label?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  value?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FinancialStatementsInaoConfigResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FinancialStatementsInaoConfig'] = ResolversParentTypes['FinancialStatementsInaoConfig']
> = {
  key?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  value?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FinancialStatementsInaoElectionResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FinancialStatementsInaoElection'] = ResolversParentTypes['FinancialStatementsInaoElection']
> = {
  electionDate?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>
  electionId?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  genitiveName?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FinancialStatementsInaoTaxInfoResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FinancialStatementsInaoTaxInfo'] = ResolversParentTypes['FinancialStatementsInaoTaxInfo']
> = {
  key?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  value?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FishingLicenseDateRestrictionResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FishingLicenseDateRestriction'] = ResolversParentTypes['FishingLicenseDateRestriction']
> = {
  dateFrom?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  dateTo?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FishingLicenseDeprivationResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FishingLicenseDeprivation'] = ResolversParentTypes['FishingLicenseDeprivation']
> = {
  explanation?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  invalidFrom?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  validFrom?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FishingLicenseInfoResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FishingLicenseInfo'] = ResolversParentTypes['FishingLicenseInfo']
> = {
  chargeType?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  code?: Resolver<
    ResolversTypes['FishingLicenseCodeType'],
    ParentType,
    ContextType
  >
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FishingLicenseLicenseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FishingLicenseLicense'] = ResolversParentTypes['FishingLicenseLicense']
> = {
  answer?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  areas?: Resolver<
    Maybe<Array<ResolversTypes['FishingLicenseListOptions']>>,
    ParentType,
    ContextType
  >
  attachmentInfo?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  dateRestriction?: Resolver<
    Maybe<ResolversTypes['FishingLicenseDateRestriction']>,
    ParentType,
    ContextType
  >
  fishingLicenseInfo?: Resolver<
    ResolversTypes['FishingLicenseInfo'],
    ParentType,
    ContextType
  >
  reasons?: Resolver<
    Array<ResolversTypes['FishingLicenseReason']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FishingLicenseListOptionsResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FishingLicenseListOptions'] = ResolversParentTypes['FishingLicenseListOptions']
> = {
  dateRestriction?: Resolver<
    Maybe<ResolversTypes['FishingLicenseDateRestriction']>,
    ParentType,
    ContextType
  >
  description?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  disabled?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  invalidOption?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  key?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FishingLicenseReasonResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FishingLicenseReason'] = ResolversParentTypes['FishingLicenseReason']
> = {
  description?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  directions?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FishingLicenseSeaworthinessResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FishingLicenseSeaworthiness'] = ResolversParentTypes['FishingLicenseSeaworthiness']
> = {
  validTo?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FishingLicenseShipResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FishingLicenseShip'] = ResolversParentTypes['FishingLicenseShip']
> = {
  deprivations?: Resolver<
    Array<ResolversTypes['FishingLicenseDeprivation']>,
    ParentType,
    ContextType
  >
  features?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  fishingLicenses?: Resolver<
    Array<ResolversTypes['FishingLicenseInfo']>,
    ParentType,
    ContextType
  >
  grossTons?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  homePort?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  length?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  registrationNumber?: Resolver<
    ResolversTypes['Float'],
    ParentType,
    ContextType
  >
  seaworthiness?: Resolver<
    ResolversTypes['FishingLicenseSeaworthiness'],
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FiskistofaCatchQuotaCategoryResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FiskistofaCatchQuotaCategory'] = ResolversParentTypes['FiskistofaCatchQuotaCategory']
> = {
  allocation?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  betweenShips?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  betweenYears?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  catch?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  catchQuota?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  codEquivalent?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  displacement?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  excessCatch?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  id?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  newStatus?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  nextYear?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  specialAlloction?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  status?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  unused?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FiskistofaExtendedCatchQuotaCategoryResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FiskistofaExtendedCatchQuotaCategory'] = ResolversParentTypes['FiskistofaExtendedCatchQuotaCategory']
> = {
  allocatedCatchQuota?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  allocation?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  betweenShips?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  betweenYears?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  catch?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  catchQuota?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  codEquivalent?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  displacement?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  excessCatch?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  id?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  newStatus?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  nextYear?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  nextYearFromQuota?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  nextYearQuota?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  percentNextYearFromQuota?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  percentNextYearQuota?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  quotaShare?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  specialAlloction?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  status?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  totalCatchQuota?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  unused?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FiskistofaExtendedShipStatusInformationResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FiskistofaExtendedShipStatusInformation'] = ResolversParentTypes['FiskistofaExtendedShipStatusInformation']
> = {
  catchQuotaCategories?: Resolver<
    Maybe<Array<ResolversTypes['FiskistofaExtendedCatchQuotaCategory']>>,
    ParentType,
    ContextType
  >
  shipInformation?: Resolver<
    Maybe<ResolversTypes['FiskistofaShip']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FiskistofaExtendedShipStatusInformationResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FiskistofaExtendedShipStatusInformationResponse'] = ResolversParentTypes['FiskistofaExtendedShipStatusInformationResponse']
> = {
  fiskistofaShipStatus?: Resolver<
    Maybe<ResolversTypes['FiskistofaExtendedShipStatusInformation']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FiskistofaExtendedShipStatusInformationUpdateResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FiskistofaExtendedShipStatusInformationUpdate'] = ResolversParentTypes['FiskistofaExtendedShipStatusInformationUpdate']
> = {
  catchQuotaCategories?: Resolver<
    Maybe<Array<ResolversTypes['FiskistofaCatchQuotaCategory']>>,
    ParentType,
    ContextType
  >
  shipInformation?: Resolver<
    Maybe<ResolversTypes['FiskistofaShip']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FiskistofaExtendedShipStatusInformationUpdateResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FiskistofaExtendedShipStatusInformationUpdateResponse'] = ResolversParentTypes['FiskistofaExtendedShipStatusInformationUpdateResponse']
> = {
  fiskistofaShipStatus?: Resolver<
    Maybe<ResolversTypes['FiskistofaExtendedShipStatusInformationUpdate']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FiskistofaQuotaStatusResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FiskistofaQuotaStatus'] = ResolversParentTypes['FiskistofaQuotaStatus']
> = {
  allocatedCatchQuota?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  excessCatch?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  id?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  newStatus?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  nextYearCatchQuota?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  nextYearFromQuota?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  nextYearQuota?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  percentCatchQuotaFrom?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  percentCatchQuotaTo?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  quotaShare?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  totalCatchQuota?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  unused?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FiskistofaQuotaStatusResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FiskistofaQuotaStatusResponse'] = ResolversParentTypes['FiskistofaQuotaStatusResponse']
> = {
  fiskistofaShipQuotaStatus?: Resolver<
    Maybe<ResolversTypes['FiskistofaQuotaStatus']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FiskistofaQuotaTypeResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FiskistofaQuotaType'] = ResolversParentTypes['FiskistofaQuotaType']
> = {
  codEquivalent?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  totalCatchQuota?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FiskistofaQuotaTypeResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FiskistofaQuotaTypeResponse'] = ResolversParentTypes['FiskistofaQuotaTypeResponse']
> = {
  fiskistofaQuotaTypes?: Resolver<
    Maybe<Array<ResolversTypes['FiskistofaQuotaType']>>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FiskistofaShipResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FiskistofaShip'] = ResolversParentTypes['FiskistofaShip']
> = {
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  shipNumber?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  timePeriod?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FiskistofaShipBasicInfoResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FiskistofaShipBasicInfo'] = ResolversParentTypes['FiskistofaShipBasicInfo']
> = {
  homePort?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  id?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  operator?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  typeOfVessel?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FiskistofaShipBasicInfoResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FiskistofaShipBasicInfoResponse'] = ResolversParentTypes['FiskistofaShipBasicInfoResponse']
> = {
  fiskistofaShips?: Resolver<
    Maybe<Array<ResolversTypes['FiskistofaShipBasicInfo']>>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FiskistofaShipStatusInformationResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FiskistofaShipStatusInformation'] = ResolversParentTypes['FiskistofaShipStatusInformation']
> = {
  catchQuotaCategories?: Resolver<
    Maybe<Array<ResolversTypes['FiskistofaCatchQuotaCategory']>>,
    ParentType,
    ContextType
  >
  shipInformation?: Resolver<
    Maybe<ResolversTypes['FiskistofaShip']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FiskistofaShipStatusInformationResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FiskistofaShipStatusInformationResponse'] = ResolversParentTypes['FiskistofaShipStatusInformationResponse']
> = {
  fiskistofaShipStatus?: Resolver<
    Maybe<ResolversTypes['FiskistofaShipStatusInformation']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FiskistofaSingleShipResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FiskistofaSingleShip'] = ResolversParentTypes['FiskistofaSingleShip']
> = {
  grossTons?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  operatingCategory?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >
  operatorName?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  operatorSsn?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  ownerName?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  ownerSsn?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  shipNumber?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FiskistofaSingleShipResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FiskistofaSingleShipResponse'] = ResolversParentTypes['FiskistofaSingleShipResponse']
> = {
  fiskistofaSingleShip?: Resolver<
    Maybe<ResolversTypes['FiskistofaSingleShip']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FooterItemResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FooterItem'] = ResolversParentTypes['FooterItem']
> = {
  content?: Resolver<
    Maybe<Array<ResolversTypes['Slice']>>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  link?: Resolver<Maybe<ResolversTypes['Link']>, ParentType, ContextType>
  serviceWebContent?: Resolver<
    Maybe<Array<ResolversTypes['Slice']>>,
    ParentType,
    ContextType
  >
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FormResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Form'] = ResolversParentTypes['Form']
> = {
  aboutYouHeadingText?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >
  defaultFieldNamespace?: Resolver<
    Maybe<ResolversTypes['JSON']>,
    ParentType,
    ContextType
  >
  fields?: Resolver<Array<ResolversTypes['FormField']>, ParentType, ContextType>
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  intro?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  questionsHeadingText?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >
  recipientFormFieldDecider?: Resolver<
    Maybe<ResolversTypes['FormField']>,
    ParentType,
    ContextType
  >
  recipientList?: Resolver<
    Maybe<Array<ResolversTypes['String']>>,
    ParentType,
    ContextType
  >
  successText?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FormFieldResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FormField'] = ResolversParentTypes['FormField']
> = {
  emailConfig?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  informationText?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  options?: Resolver<Array<ResolversTypes['String']>, ParentType, ContextType>
  placeholder?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  required?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  type?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FormSystemApplicantResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FormSystemApplicant'] = ResolversParentTypes['FormSystemApplicant']
> = {
  applicantTypeId?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  description?: Resolver<
    Maybe<ResolversTypes['FormSystemLanguageType']>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  name?: Resolver<
    Maybe<ResolversTypes['FormSystemLanguageType']>,
    ParentType,
    ContextType
  >
  nameSuggestions?: Resolver<
    Maybe<Array<ResolversTypes['FormSystemLanguageType']>>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FormSystemApplicationResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FormSystemApplication'] = ResolversParentTypes['FormSystemApplication']
> = {
  completed?: Resolver<
    Maybe<Array<Maybe<ResolversTypes['String']>>>,
    ParentType,
    ContextType
  >
  created?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>
  dependencies?: Resolver<
    Maybe<Array<Maybe<ResolversTypes['FormSystemDependency']>>>,
    ParentType,
    ContextType
  >
  events?: Resolver<
    Maybe<Array<Maybe<ResolversTypes['FormSystemApplicationEventDto']>>>,
    ParentType,
    ContextType
  >
  formId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  formName?: Resolver<
    Maybe<ResolversTypes['FormSystemLanguageType']>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  isTest?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>
  modified?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  organizationName?: Resolver<
    Maybe<ResolversTypes['FormSystemLanguageType']>,
    ParentType,
    ContextType
  >
  sections?: Resolver<
    Maybe<Array<Maybe<ResolversTypes['FormSystemSection']>>>,
    ParentType,
    ContextType
  >
  slug?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  status?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  submittedAt?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FormSystemApplicationEventDtoResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FormSystemApplicationEventDto'] = ResolversParentTypes['FormSystemApplicationEventDto']
> = {
  created?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>
  eventType?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  isFileEvent?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FormSystemDependencyResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FormSystemDependency'] = ResolversParentTypes['FormSystemDependency']
> = {
  childProps?: Resolver<
    Maybe<Array<Maybe<ResolversTypes['String']>>>,
    ParentType,
    ContextType
  >
  isSelected?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  parentProp?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FormSystemFieldResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FormSystemField'] = ResolversParentTypes['FormSystemField']
> = {
  description?: Resolver<
    Maybe<ResolversTypes['FormSystemLanguageType']>,
    ParentType,
    ContextType
  >
  displayOrder?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>
  fieldSettings?: Resolver<
    Maybe<ResolversTypes['FormSystemFieldSettings']>,
    ParentType,
    ContextType
  >
  fieldType?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  isHidden?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>
  isPartOfMultiset?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType
  >
  isRequired?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  list?: Resolver<
    Maybe<Array<Maybe<ResolversTypes['FormSystemListItem']>>>,
    ParentType,
    ContextType
  >
  name?: Resolver<
    ResolversTypes['FormSystemLanguageType'],
    ParentType,
    ContextType
  >
  screenId?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  values?: Resolver<
    Maybe<Array<Maybe<ResolversTypes['FormSystemValueDto']>>>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FormSystemFieldSettingsResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FormSystemFieldSettings'] = ResolversParentTypes['FormSystemFieldSettings']
> = {
  buttonText?: Resolver<
    Maybe<ResolversTypes['FormSystemLanguageType']>,
    ParentType,
    ContextType
  >
  fileMaxSize?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>
  fileTypes?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  hasLink?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>
  hasPropertyInput?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  hasPropertyList?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  isLarge?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>
  list?: Resolver<
    Maybe<Array<Maybe<ResolversTypes['FormSystemListItem']>>>,
    ParentType,
    ContextType
  >
  listType?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  maxAmount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>
  maxDate?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>
  maxFiles?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>
  maxLength?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>
  maxValue?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>
  minAmount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>
  minDate?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>
  minLength?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>
  minValue?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>
  timeInterval?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  year?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FormSystemFieldTypeResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FormSystemFieldType'] = ResolversParentTypes['FormSystemFieldType']
> = {
  description?: Resolver<
    ResolversTypes['FormSystemLanguageType'],
    ParentType,
    ContextType
  >
  fieldSettings?: Resolver<
    Maybe<ResolversTypes['FormSystemFieldSettings']>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  isCommon?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  name?: Resolver<
    ResolversTypes['FormSystemLanguageType'],
    ParentType,
    ContextType
  >
  values?: Resolver<
    Maybe<Array<Maybe<ResolversTypes['FormSystemValue']>>>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FormSystemFormResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FormSystemForm'] = ResolversParentTypes['FormSystemForm']
> = {
  applicantTypes?: Resolver<
    Maybe<Array<Maybe<ResolversTypes['FormSystemFormApplicant']>>>,
    ParentType,
    ContextType
  >
  applicationDaysToRemove?: Resolver<
    ResolversTypes['Int'],
    ParentType,
    ContextType
  >
  beenPublished?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  certificationTypes?: Resolver<
    Maybe<Array<Maybe<ResolversTypes['FormSystemFormCertificationTypeDto']>>>,
    ParentType,
    ContextType
  >
  completedMessage?: Resolver<
    Maybe<ResolversTypes['FormSystemLanguageType']>,
    ParentType,
    ContextType
  >
  created?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>
  dependencies?: Resolver<
    Maybe<Array<Maybe<ResolversTypes['FormSystemDependency']>>>,
    ParentType,
    ContextType
  >
  derivedFrom?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>
  fields?: Resolver<
    Maybe<Array<Maybe<ResolversTypes['FormSystemField']>>>,
    ParentType,
    ContextType
  >
  hasPayment?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  invalidationDate?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  isTranslated?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  modified?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>
  name?: Resolver<
    ResolversTypes['FormSystemLanguageType'],
    ParentType,
    ContextType
  >
  organizationDisplayName?: Resolver<
    Maybe<ResolversTypes['FormSystemLanguageType']>,
    ParentType,
    ContextType
  >
  organizationId?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  organizationNationalId?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  organizationTitle?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  organizationTitleEn?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  screens?: Resolver<
    Maybe<Array<Maybe<ResolversTypes['FormSystemScreen']>>>,
    ParentType,
    ContextType
  >
  sections?: Resolver<
    Maybe<Array<Maybe<ResolversTypes['FormSystemSection']>>>,
    ParentType,
    ContextType
  >
  slug?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  status?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  stopProgressOnValidatingScreen?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType
  >
  urls?: Resolver<
    Maybe<Array<Maybe<ResolversTypes['FormSystemFormUrl']>>>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FormSystemFormApplicantResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FormSystemFormApplicant'] = ResolversParentTypes['FormSystemFormApplicant']
> = {
  applicantTypeId?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  description?: Resolver<
    Maybe<ResolversTypes['FormSystemLanguageType']>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  name?: Resolver<
    Maybe<ResolversTypes['FormSystemLanguageType']>,
    ParentType,
    ContextType
  >
  nameSuggestions?: Resolver<
    Maybe<Array<ResolversTypes['FormSystemLanguageType']>>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FormSystemFormCertificationTypeResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FormSystemFormCertificationType'] = ResolversParentTypes['FormSystemFormCertificationType']
> = {
  certificationTypeId?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  description?: Resolver<
    Maybe<ResolversTypes['FormSystemLanguageType']>,
    ParentType,
    ContextType
  >
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  isCommon?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>
  name?: Resolver<
    Maybe<ResolversTypes['FormSystemLanguageType']>,
    ParentType,
    ContextType
  >
  organizationCertificationId?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FormSystemFormCertificationTypeDtoResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FormSystemFormCertificationTypeDto'] = ResolversParentTypes['FormSystemFormCertificationTypeDto']
> = {
  certificationTypeId?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FormSystemFormResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FormSystemFormResponse'] = ResolversParentTypes['FormSystemFormResponse']
> = {
  applicantTypes?: Resolver<
    Maybe<Array<Maybe<ResolversTypes['FormSystemFormApplicant']>>>,
    ParentType,
    ContextType
  >
  certificationTypes?: Resolver<
    Maybe<Array<Maybe<ResolversTypes['FormSystemFormCertificationType']>>>,
    ParentType,
    ContextType
  >
  fieldTypes?: Resolver<
    Maybe<Array<Maybe<ResolversTypes['FormSystemFieldType']>>>,
    ParentType,
    ContextType
  >
  form?: Resolver<
    Maybe<ResolversTypes['FormSystemForm']>,
    ParentType,
    ContextType
  >
  forms?: Resolver<
    Maybe<Array<Maybe<ResolversTypes['FormSystemForm']>>>,
    ParentType,
    ContextType
  >
  listTypes?: Resolver<
    Maybe<Array<Maybe<ResolversTypes['FormSystemListType']>>>,
    ParentType,
    ContextType
  >
  organizations?: Resolver<
    Maybe<Array<Maybe<ResolversTypes['FormSystemOption']>>>,
    ParentType,
    ContextType
  >
  urls?: Resolver<
    Maybe<Array<Maybe<ResolversTypes['FormSystemOrganizationUrl']>>>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FormSystemFormUrlResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FormSystemFormUrl'] = ResolversParentTypes['FormSystemFormUrl']
> = {
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  isTest?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>
  isXroad?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>
  method?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  organizationUrlId?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FormSystemLanguageTypeResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FormSystemLanguageType'] = ResolversParentTypes['FormSystemLanguageType']
> = {
  en?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  is?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FormSystemListItemResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FormSystemListItem'] = ResolversParentTypes['FormSystemListItem']
> = {
  description?: Resolver<
    Maybe<ResolversTypes['FormSystemLanguageType']>,
    ParentType,
    ContextType
  >
  displayOrder?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  isSelected?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  label?: Resolver<
    Maybe<ResolversTypes['FormSystemLanguageType']>,
    ParentType,
    ContextType
  >
  value?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FormSystemListTypeResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FormSystemListType'] = ResolversParentTypes['FormSystemListType']
> = {
  description?: Resolver<
    Maybe<ResolversTypes['FormSystemLanguageType']>,
    ParentType,
    ContextType
  >
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  isCommon?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>
  name?: Resolver<
    Maybe<ResolversTypes['FormSystemLanguageType']>,
    ParentType,
    ContextType
  >
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FormSystemMonthResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FormSystemMonth'] = ResolversParentTypes['FormSystemMonth']
> = {
  amount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>
  days?: Resolver<Maybe<Array<ResolversTypes['Int']>>, ParentType, ContextType>
  month?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FormSystemOptionResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FormSystemOption'] = ResolversParentTypes['FormSystemOption']
> = {
  isSelected?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  label?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  value?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FormSystemOrganizationResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FormSystemOrganization'] = ResolversParentTypes['FormSystemOrganization']
> = {
  forms?: Resolver<
    Maybe<Array<Maybe<ResolversTypes['FormSystemForm']>>>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  name?: Resolver<
    Maybe<ResolversTypes['FormSystemLanguageType']>,
    ParentType,
    ContextType
  >
  nationalId?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FormSystemOrganizationAdminResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FormSystemOrganizationAdmin'] = ResolversParentTypes['FormSystemOrganizationAdmin']
> = {
  certificationTypes?: Resolver<
    Maybe<Array<Maybe<ResolversTypes['FormSystemPermissionType']>>>,
    ParentType,
    ContextType
  >
  fieldTypes?: Resolver<
    Maybe<Array<Maybe<ResolversTypes['FormSystemPermissionType']>>>,
    ParentType,
    ContextType
  >
  listTypes?: Resolver<
    Maybe<Array<Maybe<ResolversTypes['FormSystemPermissionType']>>>,
    ParentType,
    ContextType
  >
  organizationId?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  organizations?: Resolver<
    Maybe<Array<Maybe<ResolversTypes['FormSystemOption']>>>,
    ParentType,
    ContextType
  >
  selectedCertificationTypes?: Resolver<
    Maybe<Array<Maybe<ResolversTypes['String']>>>,
    ParentType,
    ContextType
  >
  selectedFieldTypes?: Resolver<
    Maybe<Array<Maybe<ResolversTypes['String']>>>,
    ParentType,
    ContextType
  >
  selectedListTypes?: Resolver<
    Maybe<Array<Maybe<ResolversTypes['String']>>>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FormSystemOrganizationPermissionDtoResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FormSystemOrganizationPermissionDto'] = ResolversParentTypes['FormSystemOrganizationPermissionDto']
> = {
  permission?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FormSystemOrganizationUrlResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FormSystemOrganizationUrl'] = ResolversParentTypes['FormSystemOrganizationUrl']
> = {
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  isTest?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>
  isXroad?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>
  method?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FormSystemPermissionTypeResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FormSystemPermissionType'] = ResolversParentTypes['FormSystemPermissionType']
> = {
  description?: Resolver<
    Maybe<ResolversTypes['FormSystemLanguageType']>,
    ParentType,
    ContextType
  >
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  isCommon?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>
  name?: Resolver<
    Maybe<ResolversTypes['FormSystemLanguageType']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FormSystemScreenResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FormSystemScreen'] = ResolversParentTypes['FormSystemScreen']
> = {
  callRuleset?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  displayOrder?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>
  fields?: Resolver<
    Maybe<Array<Maybe<ResolversTypes['FormSystemField']>>>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  isHidden?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>
  multiset?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>
  name?: Resolver<
    Maybe<ResolversTypes['FormSystemLanguageType']>,
    ParentType,
    ContextType
  >
  sectionId?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FormSystemSectionResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FormSystemSection'] = ResolversParentTypes['FormSystemSection']
> = {
  displayOrder?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  isCompleted?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  isHidden?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>
  name?: Resolver<
    Maybe<ResolversTypes['FormSystemLanguageType']>,
    ParentType,
    ContextType
  >
  screens?: Resolver<
    Maybe<Array<Maybe<ResolversTypes['FormSystemScreen']>>>,
    ParentType,
    ContextType
  >
  sectionType?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  waitingText?: Resolver<
    Maybe<ResolversTypes['FormSystemLanguageType']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FormSystemTranslationResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FormSystemTranslation'] = ResolversParentTypes['FormSystemTranslation']
> = {
  model?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  sourceLanguageCode?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >
  targetLanguageCode?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >
  translations?: Resolver<
    Array<ResolversTypes['JSON']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FormSystemValueResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FormSystemValue'] = ResolversParentTypes['FormSystemValue']
> = {
  address?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  altName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  bankAccount?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  checkboxValue?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  date?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>
  email?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  homestayNumber?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  isNullReport?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  iskNumber?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  jobTitle?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  listValue?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  months?: Resolver<
    Maybe<Array<Maybe<ResolversTypes['FormSystemMonth']>>>,
    ParentType,
    ContextType
  >
  municipality?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  nationalId?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  number?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>
  phoneNumber?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  postalCode?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  propertyNumber?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  s3Key?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  text?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  time?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  totalAmount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>
  totalDays?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>
  year?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FormSystemValueDtoResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FormSystemValueDto'] = ResolversParentTypes['FormSystemValueDto']
> = {
  events?: Resolver<
    Maybe<Array<Maybe<ResolversTypes['FormSystemApplicationEventDto']>>>,
    ParentType,
    ContextType
  >
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  json?: Resolver<
    Maybe<ResolversTypes['FormSystemValue']>,
    ParentType,
    ContextType
  >
  order?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FrontpageResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Frontpage'] = ResolversParentTypes['Frontpage']
> = {
  featured?: Resolver<
    Array<ResolversTypes['Featured']>,
    ParentType,
    ContextType
  >
  heading?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  image?: Resolver<Maybe<ResolversTypes['Image']>, ParentType, ContextType>
  imageAlternativeText?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  imageMobile?: Resolver<
    Maybe<ResolversTypes['Image']>,
    ParentType,
    ContextType
  >
  lifeEvents?: Resolver<
    Array<ResolversTypes['LifeEventPage']>,
    ParentType,
    ContextType
  >
  linkList?: Resolver<
    Maybe<ResolversTypes['LinkList']>,
    ParentType,
    ContextType
  >
  namespace?: Resolver<
    Maybe<ResolversTypes['Namespace']>,
    ParentType,
    ContextType
  >
  slides?: Resolver<
    Array<ResolversTypes['FrontpageSlider']>,
    ParentType,
    ContextType
  >
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  videos?: Resolver<
    Maybe<Array<ResolversTypes['Image']>>,
    ParentType,
    ContextType
  >
  videosMobile?: Resolver<
    Maybe<Array<ResolversTypes['Image']>>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type FrontpageSliderResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['FrontpageSlider'] = ResolversParentTypes['FrontpageSlider']
> = {
  animationJsonAsset?: Resolver<
    Maybe<ResolversTypes['Asset']>,
    ParentType,
    ContextType
  >
  content?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  intro?: Resolver<Maybe<ResolversTypes['Html']>, ParentType, ContextType>
  link?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  subtitle?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type GenericLicenseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['GenericLicense'] = ResolversParentTypes['GenericLicense']
> = {
  pkpass?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  pkpassStatus?: Resolver<
    ResolversTypes['GenericUserLicensePkPassStatus'],
    ParentType,
    ContextType
  >
  pkpassVerify?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  provider?: Resolver<
    ResolversTypes['GenericLicenseProvider'],
    ParentType,
    ContextType
  >
  status?: Resolver<
    ResolversTypes['GenericUserLicenseStatus'],
    ParentType,
    ContextType
  >
  timeout?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>
  type?: Resolver<ResolversTypes['GenericLicenseType'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type GenericLicenseCollectionResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['GenericLicenseCollection'] = ResolversParentTypes['GenericLicenseCollection']
> = {
  errors?: Resolver<
    Maybe<Array<ResolversTypes['GenericLicenseError']>>,
    ParentType,
    ContextType
  >
  licenses?: Resolver<
    Maybe<Array<ResolversTypes['GenericUserLicense']>>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type GenericLicenseDataFieldResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['GenericLicenseDataField'] = ResolversParentTypes['GenericLicenseDataField']
> = {
  description?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  fields?: Resolver<
    Maybe<Array<ResolversTypes['GenericLicenseDataField']>>,
    ParentType,
    ContextType
  >
  hideFromServicePortal?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  link?: Resolver<
    Maybe<ResolversTypes['GenericUserLicenseMetaLinks']>,
    ParentType,
    ContextType
  >
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  tag?: Resolver<
    Maybe<ResolversTypes['GenericUserLicenseMetaTag']>,
    ParentType,
    ContextType
  >
  type?: Resolver<
    ResolversTypes['GenericLicenseDataFieldType'],
    ParentType,
    ContextType
  >
  value?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type GenericLicenseErrorResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['GenericLicenseError'] = ResolversParentTypes['GenericLicenseError']
> = {
  code?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>
  extraData?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  fetch?: Resolver<
    ResolversTypes['GenericLicenseFetch'],
    ParentType,
    ContextType
  >
  message?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  provider?: Resolver<
    Maybe<ResolversTypes['GenericLicenseProvider']>,
    ParentType,
    ContextType
  >
  type?: Resolver<ResolversTypes['GenericLicenseType'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type GenericLicenseFetchResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['GenericLicenseFetch'] = ResolversParentTypes['GenericLicenseFetch']
> = {
  status?: Resolver<
    ResolversTypes['GenericUserLicenseFetchStatus'],
    ParentType,
    ContextType
  >
  updated?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type GenericLicenseProviderResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['GenericLicenseProvider'] = ResolversParentTypes['GenericLicenseProvider']
> = {
  entryId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  id?: Resolver<
    ResolversTypes['GenericLicenseProviderId'],
    ParentType,
    ContextType
  >
  providerLogo?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  providerName?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  referenceId?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type GenericListResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['GenericList'] = ResolversParentTypes['GenericList']
> = {
  defaultOrder?: Resolver<
    Maybe<ResolversTypes['GetGenericListItemsInputOrderBy']>,
    ParentType,
    ContextType
  >
  filterTags?: Resolver<
    Maybe<Array<ResolversTypes['GenericTag']>>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  itemType?: Resolver<
    Maybe<ResolversTypes['GenericListItemType']>,
    ParentType,
    ContextType
  >
  searchInputPlaceholder?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  showSearchInput?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type GenericListItemResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['GenericListItem'] = ResolversParentTypes['GenericListItem']
> = {
  assetUrl?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  cardIntro?: Resolver<Array<ResolversTypes['Slice']>, ParentType, ContextType>
  content?: Resolver<
    Maybe<Array<ResolversTypes['Slice']>>,
    ParentType,
    ContextType
  >
  date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  externalUrl?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  filterTags?: Resolver<
    Maybe<Array<ResolversTypes['GenericTag']>>,
    ParentType,
    ContextType
  >
  fullWidthImageInContent?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  genericList?: Resolver<
    Maybe<ResolversTypes['GenericList']>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  image?: Resolver<Maybe<ResolversTypes['Image']>, ParentType, ContextType>
  slug?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type GenericListItemResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['GenericListItemResponse'] = ResolversParentTypes['GenericListItemResponse']
> = {
  input?: Resolver<
    ResolversTypes['GenericListItemResponseInput'],
    ParentType,
    ContextType
  >
  items?: Resolver<
    Array<ResolversTypes['GenericListItem']>,
    ParentType,
    ContextType
  >
  total?: Resolver<ResolversTypes['Int'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type GenericListItemResponseInputResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['GenericListItemResponseInput'] = ResolversParentTypes['GenericListItemResponseInput']
> = {
  genericListId?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  lang?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  orderBy?: Resolver<
    Maybe<ResolversTypes['GetGenericListItemsInputOrderBy']>,
    ParentType,
    ContextType
  >
  page?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>
  queryString?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  size?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>
  tagGroups?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>
  tags?: Resolver<
    Maybe<Array<ResolversTypes['String']>>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type GenericOverviewPageResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['GenericOverviewPage'] = ResolversParentTypes['GenericOverviewPage']
> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  intro?: Resolver<Maybe<ResolversTypes['Html']>, ParentType, ContextType>
  navigation?: Resolver<ResolversTypes['Menu'], ParentType, ContextType>
  overviewLinks?: Resolver<
    Array<ResolversTypes['IntroLinkImage']>,
    ParentType,
    ContextType
  >
  pageIdentifier?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type GenericPageResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['GenericPage'] = ResolversParentTypes['GenericPage']
> = {
  intro?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  mainContent?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  misc?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  sidebar?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  slug?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type GenericPkPassResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['GenericPkPass'] = ResolversParentTypes['GenericPkPass']
> = {
  pkpassUrl?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type GenericPkPassQrCodeResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['GenericPkPassQrCode'] = ResolversParentTypes['GenericPkPassQrCode']
> = {
  pkpassQRCode?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type GenericPkPassVerificationResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['GenericPkPassVerification'] = ResolversParentTypes['GenericPkPassVerification']
> = {
  data?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  error?: Resolver<
    Maybe<ResolversTypes['GenericPkPassVerificationError']>,
    ParentType,
    ContextType
  >
  valid?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type GenericPkPassVerificationErrorResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['GenericPkPassVerificationError'] = ResolversParentTypes['GenericPkPassVerificationError']
> = {
  data?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  message?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  status?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type GenericTagResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['GenericTag'] = ResolversParentTypes['GenericTag']
> = {
  genericTagGroup?: Resolver<
    Maybe<ResolversTypes['GenericTagGroup']>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  slug?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type GenericTagGroupResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['GenericTagGroup'] = ResolversParentTypes['GenericTagGroup']
> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  slug?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type GenericUserLicenseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['GenericUserLicense'] = ResolversParentTypes['GenericUserLicense']
> = {
  barcode?: Resolver<
    Maybe<ResolversTypes['CreateBarcodeResult']>,
    ParentType,
    ContextType
  >
  fetch?: Resolver<
    ResolversTypes['GenericLicenseFetch'],
    ParentType,
    ContextType
  >
  isOwnerChildOfUser?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  license?: Resolver<ResolversTypes['GenericLicense'], ParentType, ContextType>
  nationalId?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  payload?: Resolver<Maybe<ResolversTypes['Payload']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type GenericUserLicenseAlertResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['GenericUserLicenseAlert'] = ResolversParentTypes['GenericUserLicenseAlert']
> = {
  message?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  type?: Resolver<
    ResolversTypes['GenericUserLicenseAlertType'],
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type GenericUserLicenseMetaLinksResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['GenericUserLicenseMetaLinks'] = ResolversParentTypes['GenericUserLicenseMetaLinks']
> = {
  label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  type?: Resolver<
    Maybe<ResolversTypes['GenericUserLicenseMetaLinksType']>,
    ParentType,
    ContextType
  >
  value?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type GenericUserLicenseMetaTagResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['GenericUserLicenseMetaTag'] = ResolversParentTypes['GenericUserLicenseMetaTag']
> = {
  color?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  icon?: Resolver<
    Maybe<ResolversTypes['GenericUserLicenseDataFieldTagType']>,
    ParentType,
    ContextType
  >
  iconColor?: Resolver<
    Maybe<ResolversTypes['GenericUserLicenseDataFieldTagColor']>,
    ParentType,
    ContextType
  >
  iconText?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  text?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type GenericUserLicenseMetadataResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['GenericUserLicenseMetadata'] = ResolversParentTypes['GenericUserLicenseMetadata']
> = {
  alert?: Resolver<
    Maybe<ResolversTypes['GenericUserLicenseAlert']>,
    ParentType,
    ContextType
  >
  ctaLink?: Resolver<
    Maybe<ResolversTypes['GenericUserLicenseMetaLinks']>,
    ParentType,
    ContextType
  >
  description?: Resolver<
    Maybe<Array<ResolversTypes['GenericUserLicenseMetadataDescription']>>,
    ParentType,
    ContextType
  >
  displayTag?: Resolver<
    Maybe<ResolversTypes['GenericUserLicenseMetaTag']>,
    ParentType,
    ContextType
  >
  expireDate?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  expired?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>
  expiryStatus?: Resolver<
    Maybe<ResolversTypes['GenericUserLicenseExpiryStatus']>,
    ParentType,
    ContextType
  >
  licenseId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  licenseNumber?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  links?: Resolver<
    Maybe<Array<ResolversTypes['GenericUserLicenseMetaLinks']>>,
    ParentType,
    ContextType
  >
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  photo?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  subtitle?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type GenericUserLicenseMetadataDescriptionResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['GenericUserLicenseMetadataDescription'] = ResolversParentTypes['GenericUserLicenseMetadataDescription']
> = {
  linkIconType?: Resolver<
    Maybe<ResolversTypes['GenericUserLicenseMetaLinksType']>,
    ParentType,
    ContextType
  >
  linkInText?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  text?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type GetBloodDonationRestrictionsInputModelResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['GetBloodDonationRestrictionsInputModel'] = ResolversParentTypes['GetBloodDonationRestrictionsInputModel']
> = {
  lang?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  page?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>
  queryString?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  tagKeys?: Resolver<
    Maybe<Array<ResolversTypes['String']>>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type GetPowerBiEmbedPropsFromServerResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['GetPowerBiEmbedPropsFromServerResponse'] = ResolversParentTypes['GetPowerBiEmbedPropsFromServerResponse']
> = {
  accessToken?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  embedUrl?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type GradeResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Grade'] = ResolversParentTypes['Grade']
> = {
  grade?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  label?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  weight?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type GradeTypeResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['GradeType'] = ResolversParentTypes['GradeType']
> = {
  elementaryGrade?: Resolver<
    Maybe<ResolversTypes['Grade']>,
    ParentType,
    ContextType
  >
  label?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  serialGrade?: Resolver<
    Maybe<ResolversTypes['Grade']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type GrantResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Grant'] = ResolversParentTypes['Grant']
> = {
  answeringQuestions?: Resolver<
    Array<ResolversTypes['Slice']>,
    ParentType,
    ContextType
  >
  applicationButtonLabel?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  applicationHints?: Resolver<
    Array<ResolversTypes['Slice']>,
    ParentType,
    ContextType
  >
  applicationId?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  applicationUrl?: Resolver<
    Maybe<ResolversTypes['ReferenceLink']>,
    ParentType,
    ContextType
  >
  categoryTags?: Resolver<
    Maybe<Array<ResolversTypes['GenericTag']>>,
    ParentType,
    ContextType
  >
  dateFrom?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  dateTo?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  description?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  files?: Resolver<
    Maybe<Array<ResolversTypes['Asset']>>,
    ParentType,
    ContextType
  >
  fund?: Resolver<
    Maybe<ResolversTypes['OrganizationFund']>,
    ParentType,
    ContextType
  >
  howToApply?: Resolver<Array<ResolversTypes['Slice']>, ParentType, ContextType>
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  lastUpdateTimestamp?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  specialEmphasis?: Resolver<
    Array<ResolversTypes['Slice']>,
    ParentType,
    ContextType
  >
  status?: Resolver<
    Maybe<ResolversTypes['GrantStatus']>,
    ParentType,
    ContextType
  >
  statusText?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  supportLinks?: Resolver<
    Maybe<Array<ResolversTypes['Link']>>,
    ParentType,
    ContextType
  >
  typeTag?: Resolver<
    Maybe<ResolversTypes['GenericTag']>,
    ParentType,
    ContextType
  >
  whoCanApply?: Resolver<
    Array<ResolversTypes['Slice']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type GrantCardsListResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['GrantCardsList'] = ResolversParentTypes['GrantCardsList']
> = {
  displayTitle?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  maxNumberOfCards?: Resolver<
    Maybe<ResolversTypes['Int']>,
    ParentType,
    ContextType
  >
  namespace?: Resolver<ResolversTypes['JSONObject'], ParentType, ContextType>
  resolvedGrantsList?: Resolver<
    Maybe<ResolversTypes['GrantList']>,
    ParentType,
    ContextType
  >
  sorting?: Resolver<
    Maybe<ResolversTypes['GrantCardsListSorting']>,
    ParentType,
    ContextType
  >
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type GrantListResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['GrantList'] = ResolversParentTypes['GrantList']
> = {
  items?: Resolver<Array<ResolversTypes['Grant']>, ParentType, ContextType>
  total?: Resolver<ResolversTypes['Int'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type GraphCardResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['GraphCard'] = ResolversParentTypes['GraphCard']
> = {
  data?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  datakeys?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  displayAsCard?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  graphDescription?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  graphTitle?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  organization?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  organizationLogo?: Resolver<
    Maybe<ResolversTypes['Image']>,
    ParentType,
    ContextType
  >
  type?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type GroupedMenuResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['GroupedMenu'] = ResolversParentTypes['GroupedMenu']
> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  menus?: Resolver<Array<ResolversTypes['Menu']>, ParentType, ContextType>
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type HasTeachingRightsResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['HasTeachingRights'] = ResolversParentTypes['HasTeachingRights']
> = {
  hasTeachingRights?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType
  >
  nationalId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type HeadingSliceResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['HeadingSlice'] = ResolversParentTypes['HeadingSlice']
> = {
  body?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type HealthDirectorateDispensationResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['HealthDirectorateDispensation'] = ResolversParentTypes['HealthDirectorateDispensation']
> = {
  agentName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  count?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  date?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>
  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>
  items?: Resolver<
    Array<ResolversTypes['HealthDirectorateDispensedItem']>,
    ParentType,
    ContextType
  >
  lastDispensationDate?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type HealthDirectorateDispensedItemResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['HealthDirectorateDispensedItem'] = ResolversParentTypes['HealthDirectorateDispensedItem']
> = {
  amount?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  dosageInstructions?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  isExpired?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  numberOfPackages?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  quantity?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  strength?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type HealthDirectorateOrganDonationResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['HealthDirectorateOrganDonation'] = ResolversParentTypes['HealthDirectorateOrganDonation']
> = {
  donor?: Resolver<
    Maybe<ResolversTypes['HealthDirectorateOrganDonor']>,
    ParentType,
    ContextType
  >
  locale?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  organList?: Resolver<
    Maybe<Array<ResolversTypes['HealthDirectorateOrganDonationOrgan']>>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type HealthDirectorateOrganDonationLimitationsResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['HealthDirectorateOrganDonationLimitations'] = ResolversParentTypes['HealthDirectorateOrganDonationLimitations']
> = {
  comment?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  hasLimitations?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  limitedOrgansList?: Resolver<
    Maybe<Array<ResolversTypes['HealthDirectorateOrganDonationOrgan']>>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type HealthDirectorateOrganDonationOrganResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['HealthDirectorateOrganDonationOrgan'] = ResolversParentTypes['HealthDirectorateOrganDonationOrgan']
> = {
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type HealthDirectorateOrganDonorResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['HealthDirectorateOrganDonor'] = ResolversParentTypes['HealthDirectorateOrganDonor']
> = {
  isDonor?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  isMinor?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  isTemporaryResident?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType
  >
  limitations?: Resolver<
    Maybe<ResolversTypes['HealthDirectorateOrganDonationLimitations']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type HealthDirectoratePrescriptionResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['HealthDirectoratePrescription'] = ResolversParentTypes['HealthDirectoratePrescription']
> = {
  amountRemaining?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  category?: Resolver<
    Maybe<ResolversTypes['HealthDirectoratePrescribedItemCategory']>,
    ParentType,
    ContextType
  >
  dispensations?: Resolver<
    Array<ResolversTypes['HealthDirectorateDispensation']>,
    ParentType,
    ContextType
  >
  dosageInstructions?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  expiryDate?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>
  form?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  indication?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  isRenewable?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  issueDate?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  prescriberName?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  quantity?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  renewalBlockedReason?: Resolver<
    Maybe<ResolversTypes['HealthDirectoratePrescriptionRenewalBlockedReason']>,
    ParentType,
    ContextType
  >
  renewalStatus?: Resolver<
    Maybe<ResolversTypes['HealthDirectoratePrescriptionRenewalStatus']>,
    ParentType,
    ContextType
  >
  totalPrescribedAmount?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type HealthDirectoratePrescriptionsResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['HealthDirectoratePrescriptions'] = ResolversParentTypes['HealthDirectoratePrescriptions']
> = {
  prescriptions?: Resolver<
    Array<ResolversTypes['HealthDirectoratePrescription']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type HealthDirectorateReferralResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['HealthDirectorateReferral'] = ResolversParentTypes['HealthDirectorateReferral']
> = {
  createdDate?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  fromContactInfo?: Resolver<
    ResolversTypes['HealthDirectorateReferralContact'],
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  reason?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  serviceName?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  stateDisplay?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  toContactInfo?: Resolver<
    ResolversTypes['HealthDirectorateReferralContact'],
    ParentType,
    ContextType
  >
  validUntilDate?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type HealthDirectorateReferralContactResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['HealthDirectorateReferralContact'] = ResolversParentTypes['HealthDirectorateReferralContact']
> = {
  department?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  profession?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type HealthDirectorateReferralsResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['HealthDirectorateReferrals'] = ResolversParentTypes['HealthDirectorateReferrals']
> = {
  referrals?: Resolver<
    Array<ResolversTypes['HealthDirectorateReferral']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type HealthDirectorateVaccinationResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['HealthDirectorateVaccination'] = ResolversParentTypes['HealthDirectorateVaccination']
> = {
  comments?: Resolver<
    Maybe<Array<ResolversTypes['String']>>,
    ParentType,
    ContextType
  >
  description?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  isFeatured?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  lastVaccinationDate?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  status?: Resolver<
    Maybe<ResolversTypes['HealthDirectorateVaccinationStatusEnum']>,
    ParentType,
    ContextType
  >
  statusColor?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  statusName?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  vaccinationsInfo?: Resolver<
    Maybe<Array<ResolversTypes['HealthDirectorateVaccinationsInfo']>>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type HealthDirectorateVaccinationsResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['HealthDirectorateVaccinations'] = ResolversParentTypes['HealthDirectorateVaccinations']
> = {
  vaccinations?: Resolver<
    Array<ResolversTypes['HealthDirectorateVaccination']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type HealthDirectorateVaccinationsAgeResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['HealthDirectorateVaccinationsAge'] = ResolversParentTypes['HealthDirectorateVaccinationsAge']
> = {
  months?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>
  years?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type HealthDirectorateVaccinationsInfoResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['HealthDirectorateVaccinationsInfo'] = ResolversParentTypes['HealthDirectorateVaccinationsInfo']
> = {
  age?: Resolver<
    Maybe<ResolversTypes['HealthDirectorateVaccinationsAge']>,
    ParentType,
    ContextType
  >
  comment?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  date?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>
  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>
  location?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  rejected?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>
  url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type HealthDirectorateWaitlistResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['HealthDirectorateWaitlist'] = ResolversParentTypes['HealthDirectorateWaitlist']
> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  lastUpdated?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  organization?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  status?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  waitBegan?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type HealthDirectorateWaitlistsResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['HealthDirectorateWaitlists'] = ResolversParentTypes['HealthDirectorateWaitlists']
> = {
  waitlists?: Resolver<
    Array<ResolversTypes['HealthDirectorateWaitlist']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type HelpdeskResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Helpdesk'] = ResolversParentTypes['Helpdesk']
> = {
  created?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>
  email?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  modified?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>
  phoneNumber?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type HmsLoansCoPayerResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['HmsLoansCoPayer'] = ResolversParentTypes['HmsLoansCoPayer']
> = {
  coPayerName?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  coPayerNationalId?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type HmsLoansHistoryResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['HmsLoansHistory'] = ResolversParentTypes['HmsLoansHistory']
> = {
  accruedInterestPriceImprovements?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  affiliateLoan?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  balancePayment?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  balanceWithoutInterestPriceImprovements?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  baseIndex?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  coPayerName?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  coPayerNationalId?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  coPayers?: Resolver<
    Maybe<Array<ResolversTypes['HmsLoansCoPayer']>>,
    ParentType,
    ContextType
  >
  creditor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  epilog?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  firstInterestDate?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  firstPaymentDate?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  homeAddress?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  installments?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  interest?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  lastPaymentAmount?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  lastPaymentDate?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  lastUnpaidInvoiceDate?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  loanAmountWithRepayment?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  loanId?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  loanStatus?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  loanType?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  municipality?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  municipalityNumber?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  nationalId?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  nextPaymentDate?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  numberOfPaymentDatesRemaining?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  numberOfPaymentPerYear?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  originalLoanAmount?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  paymentDelayment?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  paymentFee?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  postNumber?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  priceIndexType?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  properties?: Resolver<
    Maybe<Array<ResolversTypes['HmsLoansProperty']>>,
    ParentType,
    ContextType
  >
  propertyAddress?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  propertyId?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  propertyMunicipality?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  remainingBalanceWithoutDebt?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  repaymentFee?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  statusSettlementPayment?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  temporaryPaymentDelayment?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  totalDueAmount?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  totalNumberOfPayments?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  variableInterest?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type HmsLoansHistoryPdfResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['HmsLoansHistoryPdf'] = ResolversParentTypes['HmsLoansHistoryPdf']
> = {
  data?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  mime?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type HmsLoansPaymentHistoryResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['HmsLoansPaymentHistory'] = ResolversParentTypes['HmsLoansPaymentHistory']
> = {
  costPayment?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  defaultInterest?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  interest?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  loanId?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  paymentAmount?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  paymentDate?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  priceImprovementInterest?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  priceImprovementPayment?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  totalPayment?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  transactionDate?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type HmsLoansPropertyResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['HmsLoansProperty'] = ResolversParentTypes['HmsLoansProperty']
> = {
  epilog?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  municipalityNumber?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  propertyAddress?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  propertyId?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  propertyMunicipality?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type HomestayResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Homestay'] = ResolversParentTypes['Homestay']
> = {
  address?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  apartmentId?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  city?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  guests?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  manager?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  propertyId?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  registrationNumber?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  rooms?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  year?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type HousingBenefitCalculationModelResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['HousingBenefitCalculationModel'] = ResolversParentTypes['HousingBenefitCalculationModel']
> = {
  estimatedHousingBenefits?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  maximumHousingBenefits?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  reductionsDueToAssets?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  reductionsDueToHousingCosts?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  reductionsDueToIncome?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type HousingBenefitsPageInfoResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['HousingBenefitsPageInfo'] = ResolversParentTypes['HousingBenefitsPageInfo']
> = {
  hasNextPage?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  hasPreviousPage?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type HousingBenefitsPaymentResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['HousingBenefitsPayment'] = ResolversParentTypes['HousingBenefitsPayment']
> = {
  address?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  bankAccountMerged?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  benefit?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>
  calculationType?: Resolver<
    Maybe<ResolversTypes['CalculationType']>,
    ParentType,
    ContextType
  >
  dateCalculation?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  dateTransfer?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  month?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  nationalId?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  noDays?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>
  nr?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>
  paidOfDebt?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>
  paymentActual?: Resolver<
    Maybe<ResolversTypes['Int']>,
    ParentType,
    ContextType
  >
  paymentBeforeDebt?: Resolver<
    Maybe<ResolversTypes['Int']>,
    ParentType,
    ContextType
  >
  paymentOrigin?: Resolver<
    Maybe<ResolversTypes['Int']>,
    ParentType,
    ContextType
  >
  reductionAssets?: Resolver<
    Maybe<ResolversTypes['Int']>,
    ParentType,
    ContextType
  >
  reductionHousingCost?: Resolver<
    Maybe<ResolversTypes['Int']>,
    ParentType,
    ContextType
  >
  reductionIncome?: Resolver<
    Maybe<ResolversTypes['Int']>,
    ParentType,
    ContextType
  >
  remainDebt?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>
  totalIncome?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>
  transactionType?: Resolver<
    Maybe<ResolversTypes['TransactionType']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type HousingBenefitsPaymentsResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['HousingBenefitsPayments'] = ResolversParentTypes['HousingBenefitsPayments']
> = {
  data?: Resolver<
    Array<ResolversTypes['HousingBenefitsPayment']>,
    ParentType,
    ContextType
  >
  pageInfo?: Resolver<
    ResolversTypes['HousingBenefitsPageInfo'],
    ParentType,
    ContextType
  >
  totalCount?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type HtmlResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Html'] = ResolversParentTypes['Html']
> = {
  document?: Resolver<ResolversTypes['JSON'], ParentType, ContextType>
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  typename?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type IcelandicGovernmentInstitutionVacanciesResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['IcelandicGovernmentInstitutionVacanciesResponse'] = ResolversParentTypes['IcelandicGovernmentInstitutionVacanciesResponse']
> = {
  fetchErrorOccurred?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  vacancies?: Resolver<
    Array<ResolversTypes['IcelandicGovernmentInstitutionVacancyListItem']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type IcelandicGovernmentInstitutionVacancyResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['IcelandicGovernmentInstitutionVacancy'] = ResolversParentTypes['IcelandicGovernmentInstitutionVacancy']
> = {
  applicationDeadlineFrom?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  applicationDeadlineTo?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  applicationHref?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  contacts?: Resolver<
    Maybe<
      Array<ResolversTypes['IcelandicGovernmentInstitutionVacancyContact']>
    >,
    ParentType,
    ContextType
  >
  description?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>
  fieldOfWork?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  institutionName?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  institutionReferenceIdentifier?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  intro?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>
  jobPercentage?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  locations?: Resolver<
    Maybe<
      Array<ResolversTypes['IcelandicGovernmentInstitutionVacancyLocation']>
    >,
    ParentType,
    ContextType
  >
  logoUrl?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  plainTextIntro?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  qualificationRequirements?: Resolver<
    Maybe<ResolversTypes['JSON']>,
    ParentType,
    ContextType
  >
  salaryTerms?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>
  tasksAndResponsibilities?: Resolver<
    Maybe<ResolversTypes['JSON']>,
    ParentType,
    ContextType
  >
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type IcelandicGovernmentInstitutionVacancyByIdResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['IcelandicGovernmentInstitutionVacancyByIdResponse'] = ResolversParentTypes['IcelandicGovernmentInstitutionVacancyByIdResponse']
> = {
  vacancy?: Resolver<
    Maybe<ResolversTypes['IcelandicGovernmentInstitutionVacancy']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type IcelandicGovernmentInstitutionVacancyContactResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['IcelandicGovernmentInstitutionVacancyContact'] = ResolversParentTypes['IcelandicGovernmentInstitutionVacancyContact']
> = {
  email?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  phone?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type IcelandicGovernmentInstitutionVacancyListItemResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['IcelandicGovernmentInstitutionVacancyListItem'] = ResolversParentTypes['IcelandicGovernmentInstitutionVacancyListItem']
> = {
  applicationDeadlineFrom?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  applicationDeadlineTo?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  fieldOfWork?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  institutionName?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  institutionReferenceIdentifier?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  intro?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  locations?: Resolver<
    Maybe<
      Array<ResolversTypes['IcelandicGovernmentInstitutionVacancyLocation']>
    >,
    ParentType,
    ContextType
  >
  logoUrl?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type IcelandicGovernmentInstitutionVacancyLocationResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['IcelandicGovernmentInstitutionVacancyLocation'] = ResolversParentTypes['IcelandicGovernmentInstitutionVacancyLocation']
> = {
  postalCode?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type IcelandicNameResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['IcelandicName'] = ResolversParentTypes['IcelandicName']
> = {
  created?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>
  description?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  icelandicName?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  id?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  modified?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>
  status?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  verdict?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  visible?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type IconBulletResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['IconBullet'] = ResolversParentTypes['IconBullet']
> = {
  body?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  icon?: Resolver<ResolversTypes['Image'], ParentType, ContextType>
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  linkText?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type IdentityResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Identity'] = ResolversParentTypes['Identity']
> = {
  __resolveType: TypeResolveFn<
    'IdentityCompany' | 'IdentityPerson',
    ParentType,
    ContextType
  >
  address?: Resolver<
    Maybe<ResolversTypes['IdentityAddress']>,
    ParentType,
    ContextType
  >
  familyName?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  givenName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  nationalId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  type?: Resolver<ResolversTypes['IdentityType'], ParentType, ContextType>
}

export type IdentityAddressResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['IdentityAddress'] = ResolversParentTypes['IdentityAddress']
> = {
  city?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  postalCode?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  streetAddress?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type IdentityCompanyResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['IdentityCompany'] = ResolversParentTypes['IdentityCompany']
> = {
  address?: Resolver<
    Maybe<ResolversTypes['IdentityAddress']>,
    ParentType,
    ContextType
  >
  familyName?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  givenName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  nationalId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  type?: Resolver<ResolversTypes['IdentityType'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type IdentityDocumentModelResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['IdentityDocumentModel'] = ResolversParentTypes['IdentityDocumentModel']
> = {
  displayFirstName?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  displayLastName?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  expirationDate?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  expiresWithinNoticeTime?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  expiryStatus?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  issuingDate?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  mrzFirstName?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  mrzLastName?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  number?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  numberWithType?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  sex?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  status?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  subType?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  verboseType?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type IdentityDocumentModelChildResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['IdentityDocumentModelChild'] = ResolversParentTypes['IdentityDocumentModelChild']
> = {
  childName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  childNationalId?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  passports?: Resolver<
    Maybe<Array<ResolversTypes['IdentityDocumentModel']>>,
    ParentType,
    ContextType
  >
  secondParent?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  secondParentName?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type IdentityPersonResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['IdentityPerson'] = ResolversParentTypes['IdentityPerson']
> = {
  address?: Resolver<
    Maybe<ResolversTypes['IdentityAddress']>,
    ParentType,
    ContextType
  >
  age?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  banMarking?: Resolver<
    Maybe<ResolversTypes['NationalRegistryBanMarking']>,
    ParentType,
    ContextType
  >
  birthPlace?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  birthday?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>
  citizenship?: Resolver<
    Maybe<ResolversTypes['NationalRegistryCitizenship']>,
    ParentType,
    ContextType
  >
  familyName?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  familyNr?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  firstName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  fullName?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  gender?: Resolver<
    Maybe<ResolversTypes['NationalRegistryGender']>,
    ParentType,
    ContextType
  >
  givenName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  lastName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  legalResidence?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  maritalStatus?: Resolver<
    Maybe<ResolversTypes['NationalRegistryMaritalStatus']>,
    ParentType,
    ContextType
  >
  middleName?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  nationalId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  religion?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  spouse?: Resolver<
    Maybe<ResolversTypes['NationalRegistrySpouse']>,
    ParentType,
    ContextType
  >
  type?: Resolver<ResolversTypes['IdentityType'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ImageResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Image'] = ResolversParentTypes['Image']
> = {
  contentType?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  description?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  height?: Resolver<ResolversTypes['Int'], ParentType, ContextType>
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  width?: Resolver<ResolversTypes['Int'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type IntellectualPropertiesAnnualFeeResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['IntellectualPropertiesAnnualFee'] = ResolversParentTypes['IntellectualPropertiesAnnualFee']
> = {
  amount?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  paymentDate?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  paymentDueDate?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  payor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  surcharge?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type IntellectualPropertiesAnnualFeesInfoResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['IntellectualPropertiesAnnualFeesInfo'] = ResolversParentTypes['IntellectualPropertiesAnnualFeesInfo']
> = {
  history?: Resolver<
    Maybe<Array<ResolversTypes['IntellectualPropertiesAnnualFee']>>,
    ParentType,
    ContextType
  >
  nextPaymentDate?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type IntellectualPropertiesApplicationLifecycleResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['IntellectualPropertiesApplicationLifecycle'] = ResolversParentTypes['IntellectualPropertiesApplicationLifecycle']
> = {
  announcementDate?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  applicationDate?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  applicationDateAvailable?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  applicationDatePublishedAsAvailable?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  applicationDeadlineDate?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  createDate?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  expiryDate?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  internationalRegistrationDate?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  lastModified?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  maxValidDate?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  maxValidObjectionDate?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  publishDate?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  registrationDate?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  renewalDate?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  unregistrationDate?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type IntellectualPropertiesCategoryResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['IntellectualPropertiesCategory'] = ResolversParentTypes['IntellectualPropertiesCategory']
> = {
  categoryDescription?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  categoryNumber?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type IntellectualPropertiesClassificationResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['IntellectualPropertiesClassification'] = ResolversParentTypes['IntellectualPropertiesClassification']
> = {
  category?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  creationDate?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  publicationDate?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  sequence?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type IntellectualPropertiesCountryResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['IntellectualPropertiesCountry'] = ResolversParentTypes['IntellectualPropertiesCountry']
> = {
  code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type IntellectualPropertiesDesignResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['IntellectualPropertiesDesign'] = ResolversParentTypes['IntellectualPropertiesDesign']
> = {
  agent?: Resolver<
    Maybe<ResolversTypes['IntellectualPropertiesPerson']>,
    ParentType,
    ContextType
  >
  applicationNumber?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  canRenew?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>
  classification?: Resolver<
    Maybe<Array<ResolversTypes['IntellectualPropertiesClassification']>>,
    ParentType,
    ContextType
  >
  classifications?: Resolver<
    Maybe<Array<ResolversTypes['IntellectualPropertiesClassification']>>,
    ParentType,
    ContextType
  >
  designers?: Resolver<
    Maybe<Array<ResolversTypes['IntellectualPropertiesPerson']>>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  lifecycle?: Resolver<
    ResolversTypes['IntellectualPropertiesApplicationLifecycle'],
    ParentType,
    ContextType
  >
  owners?: Resolver<
    Maybe<Array<ResolversTypes['IntellectualPropertiesPerson']>>,
    ParentType,
    ContextType
  >
  specification?: Resolver<
    Maybe<ResolversTypes['IntellectualPropertiesSpecification']>,
    ParentType,
    ContextType
  >
  status?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type IntellectualPropertiesEpApplicationLifecycleResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['IntellectualPropertiesEPApplicationLifecycle'] = ResolversParentTypes['IntellectualPropertiesEPApplicationLifecycle']
> = {
  applicationDate?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  provisionDatePublishedInGazette?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  publishDate?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  translationSubmissionDate?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type IntellectualPropertiesImageResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['IntellectualPropertiesImage'] = ResolversParentTypes['IntellectualPropertiesImage']
> = {
  designNumber?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>
  image?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  imageNumber?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type IntellectualPropertiesImageListResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['IntellectualPropertiesImageList'] = ResolversParentTypes['IntellectualPropertiesImageList']
> = {
  count?: Resolver<ResolversTypes['Int'], ParentType, ContextType>
  images?: Resolver<
    Array<ResolversTypes['IntellectualPropertiesImage']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type IntellectualPropertiesMarketingAuthorizationResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['IntellectualPropertiesMarketingAuthorization'] = ResolversParentTypes['IntellectualPropertiesMarketingAuthorization']
> = {
  foreignAuthorizationDate?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  foreignAuthorizationNumber?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  icelandicAuthorizationDate?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  icelandicAuthorizationNumber?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type IntellectualPropertiesMediaResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['IntellectualPropertiesMedia'] = ResolversParentTypes['IntellectualPropertiesMedia']
> = {
  mediaPath?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  mediaType?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type IntellectualPropertiesPctResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['IntellectualPropertiesPCT'] = ResolversParentTypes['IntellectualPropertiesPCT']
> = {
  date?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>
  number?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type IntellectualPropertiesPatentResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['IntellectualPropertiesPatent'] = ResolversParentTypes['IntellectualPropertiesPatent']
> = {
  __resolveType: TypeResolveFn<
    | 'IntellectualPropertiesPatentEP'
    | 'IntellectualPropertiesPatentIS'
    | 'IntellectualPropertiesSPC',
    ParentType,
    ContextType
  >
  agent?: Resolver<
    Maybe<ResolversTypes['IntellectualPropertiesPerson']>,
    ParentType,
    ContextType
  >
  annualFeesInfo?: Resolver<
    Maybe<ResolversTypes['IntellectualPropertiesAnnualFeesInfo']>,
    ParentType,
    ContextType
  >
  applicationNumber?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  canRenew?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>
  classifications?: Resolver<
    Maybe<Array<ResolversTypes['IntellectualPropertiesClassification']>>,
    ParentType,
    ContextType
  >
  designers?: Resolver<
    Maybe<Array<ResolversTypes['IntellectualPropertiesPerson']>>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  inventors?: Resolver<
    Maybe<Array<ResolversTypes['IntellectualPropertiesPerson']>>,
    ParentType,
    ContextType
  >
  lifecycle?: Resolver<
    Maybe<ResolversTypes['IntellectualPropertiesApplicationLifecycle']>,
    ParentType,
    ContextType
  >
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  nameInOrgLanguage?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  owners?: Resolver<
    Maybe<Array<ResolversTypes['IntellectualPropertiesPerson']>>,
    ParentType,
    ContextType
  >
  priorities?: Resolver<
    Maybe<Array<ResolversTypes['IntellectualPropertiesPriority']>>,
    ParentType,
    ContextType
  >
  specification?: Resolver<
    Maybe<ResolversTypes['IntellectualPropertiesSpecification']>,
    ParentType,
    ContextType
  >
  status?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  statusDate?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  statusText?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
}

export type IntellectualPropertiesPatentEpResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['IntellectualPropertiesPatentEP'] = ResolversParentTypes['IntellectualPropertiesPatentEP']
> = {
  agent?: Resolver<
    Maybe<ResolversTypes['IntellectualPropertiesPerson']>,
    ParentType,
    ContextType
  >
  alive?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>
  annualFeesInfo?: Resolver<
    Maybe<ResolversTypes['IntellectualPropertiesAnnualFeesInfo']>,
    ParentType,
    ContextType
  >
  applicationNumber?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  canRenew?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>
  classificationType?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  classifications?: Resolver<
    Maybe<Array<ResolversTypes['IntellectualPropertiesClassification']>>,
    ParentType,
    ContextType
  >
  designers?: Resolver<
    Maybe<Array<ResolversTypes['IntellectualPropertiesPerson']>>,
    ParentType,
    ContextType
  >
  epApplicationNumber?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  epLifecycle?: Resolver<
    Maybe<ResolversTypes['IntellectualPropertiesEPApplicationLifecycle']>,
    ParentType,
    ContextType
  >
  epoStatus?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  error?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  inventors?: Resolver<
    Maybe<Array<ResolversTypes['IntellectualPropertiesPerson']>>,
    ParentType,
    ContextType
  >
  language?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  lifecycle?: Resolver<
    Maybe<ResolversTypes['IntellectualPropertiesApplicationLifecycle']>,
    ParentType,
    ContextType
  >
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  nameInIcelandic?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  nameInOrgLanguage?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  owners?: Resolver<
    Maybe<Array<ResolversTypes['IntellectualPropertiesPerson']>>,
    ParentType,
    ContextType
  >
  pct?: Resolver<
    Maybe<ResolversTypes['IntellectualPropertiesPCT']>,
    ParentType,
    ContextType
  >
  priorities?: Resolver<
    Maybe<Array<ResolversTypes['IntellectualPropertiesPriority']>>,
    ParentType,
    ContextType
  >
  registrationNumber?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  spcNumbers?: Resolver<
    Maybe<Array<ResolversTypes['String']>>,
    ParentType,
    ContextType
  >
  specification?: Resolver<
    Maybe<ResolversTypes['IntellectualPropertiesSpecification']>,
    ParentType,
    ContextType
  >
  status?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  statusDate?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  statusText?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type IntellectualPropertiesPatentIsResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['IntellectualPropertiesPatentIS'] = ResolversParentTypes['IntellectualPropertiesPatentIS']
> = {
  agent?: Resolver<
    Maybe<ResolversTypes['IntellectualPropertiesPerson']>,
    ParentType,
    ContextType
  >
  alive?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>
  annualFeesInfo?: Resolver<
    Maybe<ResolversTypes['IntellectualPropertiesAnnualFeesInfo']>,
    ParentType,
    ContextType
  >
  applicationNumber?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  canRenew?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>
  classifications?: Resolver<
    Maybe<Array<ResolversTypes['IntellectualPropertiesClassification']>>,
    ParentType,
    ContextType
  >
  designers?: Resolver<
    Maybe<Array<ResolversTypes['IntellectualPropertiesPerson']>>,
    ParentType,
    ContextType
  >
  error?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  inventors?: Resolver<
    Maybe<Array<ResolversTypes['IntellectualPropertiesPerson']>>,
    ParentType,
    ContextType
  >
  lifecycle?: Resolver<
    Maybe<ResolversTypes['IntellectualPropertiesApplicationLifecycle']>,
    ParentType,
    ContextType
  >
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  nameInOrgLanguage?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  owners?: Resolver<
    Maybe<Array<ResolversTypes['IntellectualPropertiesPerson']>>,
    ParentType,
    ContextType
  >
  pct?: Resolver<
    Maybe<ResolversTypes['IntellectualPropertiesPCT']>,
    ParentType,
    ContextType
  >
  priorities?: Resolver<
    Maybe<Array<ResolversTypes['IntellectualPropertiesPriority']>>,
    ParentType,
    ContextType
  >
  registrationNumber?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  spcNumbers?: Resolver<
    Maybe<Array<ResolversTypes['String']>>,
    ParentType,
    ContextType
  >
  specification?: Resolver<
    Maybe<ResolversTypes['IntellectualPropertiesSpecification']>,
    ParentType,
    ContextType
  >
  status?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  statusDate?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  statusText?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type IntellectualPropertiesPersonResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['IntellectualPropertiesPerson'] = ResolversParentTypes['IntellectualPropertiesPerson']
> = {
  address?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  addressFull?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  city?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  country?: Resolver<
    Maybe<ResolversTypes['IntellectualPropertiesCountry']>,
    ParentType,
    ContextType
  >
  county?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  email?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  isForeign?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  mobilePhone?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  nationalId?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  postalCode?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  telephone?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type IntellectualPropertiesPriorityResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['IntellectualPropertiesPriority'] = ResolversParentTypes['IntellectualPropertiesPriority']
> = {
  applicationDate?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  countryCode?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  countryName?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  creationDate?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  number?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type IntellectualPropertiesResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['IntellectualPropertiesResponse'] = ResolversParentTypes['IntellectualPropertiesResponse']
> = {
  items?: Resolver<
    Maybe<Array<ResolversTypes['IntellectualProperty']>>,
    ParentType,
    ContextType
  >
  totalCount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type IntellectualPropertiesSpcResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['IntellectualPropertiesSPC'] = ResolversParentTypes['IntellectualPropertiesSPC']
> = {
  agent?: Resolver<
    Maybe<ResolversTypes['IntellectualPropertiesPerson']>,
    ParentType,
    ContextType
  >
  annualFeesInfo?: Resolver<
    Maybe<ResolversTypes['IntellectualPropertiesAnnualFeesInfo']>,
    ParentType,
    ContextType
  >
  applicationNumber?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  canRenew?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>
  classifications?: Resolver<
    Maybe<Array<ResolversTypes['IntellectualPropertiesClassification']>>,
    ParentType,
    ContextType
  >
  designers?: Resolver<
    Maybe<Array<ResolversTypes['IntellectualPropertiesPerson']>>,
    ParentType,
    ContextType
  >
  grantPublishedInGazetteDate?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  inventors?: Resolver<
    Maybe<Array<ResolversTypes['IntellectualPropertiesPerson']>>,
    ParentType,
    ContextType
  >
  lifecycle?: Resolver<
    Maybe<ResolversTypes['IntellectualPropertiesApplicationLifecycle']>,
    ParentType,
    ContextType
  >
  marketingAuthorization?: Resolver<
    Maybe<ResolversTypes['IntellectualPropertiesMarketingAuthorization']>,
    ParentType,
    ContextType
  >
  medicine?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  medicineForChildren?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  message?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  nameInOrgLanguage?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  number?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  owners?: Resolver<
    Maybe<Array<ResolversTypes['IntellectualPropertiesPerson']>>,
    ParentType,
    ContextType
  >
  priorities?: Resolver<
    Maybe<Array<ResolversTypes['IntellectualPropertiesPriority']>>,
    ParentType,
    ContextType
  >
  publishedInGazetteDate?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  specification?: Resolver<
    Maybe<ResolversTypes['IntellectualPropertiesSpecification']>,
    ParentType,
    ContextType
  >
  status?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  statusDate?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  statusText?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type IntellectualPropertiesSpecificationResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['IntellectualPropertiesSpecification'] = ResolversParentTypes['IntellectualPropertiesSpecification']
> = {
  description?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  designIsDecoration?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  designShouldBeProtectedInColors?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  number?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  specificationCount?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  specificationText?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type IntellectualPropertiesTrademarkResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['IntellectualPropertiesTrademark'] = ResolversParentTypes['IntellectualPropertiesTrademark']
> = {
  agent?: Resolver<
    Maybe<ResolversTypes['IntellectualPropertiesPerson']>,
    ParentType,
    ContextType
  >
  applicationNumber?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  canRenew?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>
  classifications?: Resolver<
    Maybe<Array<ResolversTypes['IntellectualPropertiesClassification']>>,
    ParentType,
    ContextType
  >
  deleted?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>
  designers?: Resolver<
    Maybe<Array<ResolversTypes['IntellectualPropertiesPerson']>>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  imageCategories?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  isColorMark?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  lifecycle?: Resolver<
    ResolversTypes['IntellectualPropertiesApplicationLifecycle'],
    ParentType,
    ContextType
  >
  markAgent?: Resolver<
    Maybe<ResolversTypes['IntellectualPropertiesPerson']>,
    ParentType,
    ContextType
  >
  markCategories?: Resolver<
    Maybe<Array<ResolversTypes['IntellectualPropertiesCategory']>>,
    ParentType,
    ContextType
  >
  markOwners?: Resolver<
    Maybe<Array<ResolversTypes['IntellectualPropertiesPerson']>>,
    ParentType,
    ContextType
  >
  media?: Resolver<
    Maybe<ResolversTypes['IntellectualPropertiesMedia']>,
    ParentType,
    ContextType
  >
  owners?: Resolver<
    Maybe<Array<ResolversTypes['IntellectualPropertiesPerson']>>,
    ParentType,
    ContextType
  >
  registrationNumber?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  specification?: Resolver<
    Maybe<ResolversTypes['IntellectualPropertiesSpecification']>,
    ParentType,
    ContextType
  >
  status?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  subType?: Resolver<
    Maybe<ResolversTypes['TrademarkSubType']>,
    ParentType,
    ContextType
  >
  text?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  type?: Resolver<
    Maybe<ResolversTypes['TrademarkType']>,
    ParentType,
    ContextType
  >
  typeReadable?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type IntellectualPropertyResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['IntellectualProperty'] = ResolversParentTypes['IntellectualProperty']
> = {
  __resolveType: TypeResolveFn<
    | 'IntellectualPropertiesDesign'
    | 'IntellectualPropertiesPatentEP'
    | 'IntellectualPropertiesPatentIS'
    | 'IntellectualPropertiesSPC'
    | 'IntellectualPropertiesTrademark',
    ParentType,
    ContextType
  >
  agent?: Resolver<
    Maybe<ResolversTypes['IntellectualPropertiesPerson']>,
    ParentType,
    ContextType
  >
  applicationNumber?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  canRenew?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>
  classifications?: Resolver<
    Maybe<Array<ResolversTypes['IntellectualPropertiesClassification']>>,
    ParentType,
    ContextType
  >
  designers?: Resolver<
    Maybe<Array<ResolversTypes['IntellectualPropertiesPerson']>>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  lifecycle?: Resolver<
    Maybe<ResolversTypes['IntellectualPropertiesApplicationLifecycle']>,
    ParentType,
    ContextType
  >
  owners?: Resolver<
    Maybe<Array<ResolversTypes['IntellectualPropertiesPerson']>>,
    ParentType,
    ContextType
  >
  specification?: Resolver<
    Maybe<ResolversTypes['IntellectualPropertiesSpecification']>,
    ParentType,
    ContextType
  >
  status?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
}

export type IntroLinkImageResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['IntroLinkImage'] = ResolversParentTypes['IntroLinkImage']
> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  image?: Resolver<Maybe<ResolversTypes['Image']>, ParentType, ContextType>
  intro?: Resolver<Maybe<ResolversTypes['Html']>, ParentType, ContextType>
  introHtml?: Resolver<Maybe<ResolversTypes['Html']>, ParentType, ContextType>
  leftImage?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  link?: Resolver<
    Maybe<ResolversTypes['ReferenceLink']>,
    ParentType,
    ContextType
  >
  linkTitle?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  openLinkInNewTab?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType
  >
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ItemsResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Items'] = ResolversParentTypes['Items']
> = {
  __resolveType: TypeResolveFn<
    | 'AnchorPage'
    | 'Article'
    | 'LifeEventPage'
    | 'Link'
    | 'Manual'
    | 'ManualChapterItem'
    | 'News'
    | 'OrganizationPage'
    | 'OrganizationSubpage'
    | 'ProjectPage'
    | 'SubArticle'
    | 'SupportQNA',
    ParentType,
    ContextType
  >
}

export interface JsonScalarConfig
  extends GraphQLScalarTypeConfig<ResolversTypes['JSON'], any> {
  name: 'JSON'
}

export interface JsonObjectScalarConfig
  extends GraphQLScalarTypeConfig<ResolversTypes['JSONObject'], any> {
  name: 'JSONObject'
}

export type JourneymanLicenceResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['JourneymanLicence'] = ResolversParentTypes['JourneymanLicence']
> = {
  dateOfPublication?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  nationalId?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  profession?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type JourneymanLicencesResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['JourneymanLicencesResponse'] = ResolversParentTypes['JourneymanLicencesResponse']
> = {
  licences?: Resolver<
    Array<ResolversTypes['JourneymanLicence']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type LandModelResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['LandModel'] = ResolversParentTypes['LandModel']
> = {
  area?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  areaUnit?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  landAppraisal?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  landNumber?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  registeredOwners?: Resolver<
    Maybe<ResolversTypes['PropertyOwnersModel']>,
    ParentType,
    ContextType
  >
  useDisplay?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type LatestEventsSliceResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['LatestEventsSlice'] = ResolversParentTypes['LatestEventsSlice']
> = {
  events?: Resolver<Array<ResolversTypes['Event']>, ParentType, ContextType>
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type LatestGenericListItemsResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['LatestGenericListItems'] = ResolversParentTypes['LatestGenericListItems']
> = {
  genericList?: Resolver<
    Maybe<ResolversTypes['GenericList']>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  itemResponse?: Resolver<
    Maybe<ResolversTypes['GenericListItemResponse']>,
    ParentType,
    ContextType
  >
  seeMoreLinkText?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  seeMorePage?: Resolver<Maybe<ResolversTypes['Page']>, ParentType, ContextType>
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type LatestNewsSliceResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['LatestNewsSlice'] = ResolversParentTypes['LatestNewsSlice']
> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  news?: Resolver<Array<ResolversTypes['News']>, ParentType, ContextType>
  readMoreLink?: Resolver<
    Maybe<ResolversTypes['Link']>,
    ParentType,
    ContextType
  >
  readMoreText?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  tag?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type LawAndOrderActionResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['LawAndOrderAction'] = ResolversParentTypes['LawAndOrderAction']
> = {
  data?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  type?: Resolver<
    Maybe<ResolversTypes['LawAndOrderActionTypeEnum']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type LawAndOrderCourtCaseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['LawAndOrderCourtCase'] = ResolversParentTypes['LawAndOrderCourtCase']
> = {
  actions?: Resolver<
    Maybe<Array<ResolversTypes['LawAndOrderAction']>>,
    ParentType,
    ContextType
  >
  data?: Resolver<
    Maybe<ResolversTypes['LawAndOrderCourtCaseData']>,
    ParentType,
    ContextType
  >
  texts?: Resolver<
    Maybe<ResolversTypes['LawAndOrderCourtCaseText']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type LawAndOrderCourtCaseDataResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['LawAndOrderCourtCaseData'] = ResolversParentTypes['LawAndOrderCourtCaseData']
> = {
  caseNumberTitle?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  groups?: Resolver<
    Maybe<Array<ResolversTypes['LawAndOrderGroup']>>,
    ParentType,
    ContextType
  >
  hasBeenServed?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type LawAndOrderCourtCaseTextResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['LawAndOrderCourtCaseText'] = ResolversParentTypes['LawAndOrderCourtCaseText']
> = {
  footnote?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  intro?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type LawAndOrderCourtCasesResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['LawAndOrderCourtCases'] = ResolversParentTypes['LawAndOrderCourtCases']
> = {
  cases?: Resolver<
    Maybe<Array<ResolversTypes['LawAndOrderCourtCasesCase']>>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type LawAndOrderCourtCasesCaseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['LawAndOrderCourtCasesCase'] = ResolversParentTypes['LawAndOrderCourtCasesCase']
> = {
  caseNumberTitle?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  state?: Resolver<
    Maybe<ResolversTypes['LawAndOrderCourtCasesState']>,
    ParentType,
    ContextType
  >
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type LawAndOrderCourtCasesStateResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['LawAndOrderCourtCasesState'] = ResolversParentTypes['LawAndOrderCourtCasesState']
> = {
  color?: Resolver<
    Maybe<ResolversTypes['LawAndOrderCourtCaseStateTagColorEnum']>,
    ParentType,
    ContextType
  >
  label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type LawAndOrderDefenseChoiceResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['LawAndOrderDefenseChoice'] = ResolversParentTypes['LawAndOrderDefenseChoice']
> = {
  caseId?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  choice?: Resolver<
    Maybe<ResolversTypes['LawAndOrderDefenseChoice']>,
    ParentType,
    ContextType
  >
  lawyersNationalId?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type LawAndOrderGroupResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['LawAndOrderGroup'] = ResolversParentTypes['LawAndOrderGroup']
> = {
  items?: Resolver<
    Maybe<Array<ResolversTypes['LawAndOrderSubpoenaItem']>>,
    ParentType,
    ContextType
  >
  label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type LawAndOrderLawyerResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['LawAndOrderLawyer'] = ResolversParentTypes['LawAndOrderLawyer']
> = {
  nationalId?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type LawAndOrderLawyerChoicesResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['LawAndOrderLawyerChoices'] = ResolversParentTypes['LawAndOrderLawyerChoices']
> = {
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type LawAndOrderLawyersResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['LawAndOrderLawyers'] = ResolversParentTypes['LawAndOrderLawyers']
> = {
  choices?: Resolver<
    Maybe<Array<ResolversTypes['LawAndOrderLawyerChoices']>>,
    ParentType,
    ContextType
  >
  lawyers?: Resolver<
    Maybe<Array<ResolversTypes['LawAndOrderLawyer']>>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type LawAndOrderSubpoenaResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['LawAndOrderSubpoena'] = ResolversParentTypes['LawAndOrderSubpoena']
> = {
  actions?: Resolver<
    Maybe<Array<ResolversTypes['LawAndOrderAction']>>,
    ParentType,
    ContextType
  >
  data?: Resolver<
    Maybe<ResolversTypes['LawAndOrderSubpoenaData']>,
    ParentType,
    ContextType
  >
  texts?: Resolver<
    Maybe<ResolversTypes['LawAndOrderSubpoenaTexts']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type LawAndOrderSubpoenaDataResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['LawAndOrderSubpoenaData'] = ResolversParentTypes['LawAndOrderSubpoenaData']
> = {
  canEditDefenderChoice?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  chosenDefender?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  courtContactInfo?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  defaultChoice?: Resolver<
    ResolversTypes['LawAndOrderDefenseChoiceEnum'],
    ParentType,
    ContextType
  >
  defenderChoice?: Resolver<
    Maybe<ResolversTypes['LawAndOrderDefenseChoiceEnum']>,
    ParentType,
    ContextType
  >
  groups?: Resolver<
    Maybe<Array<ResolversTypes['LawAndOrderGroup']>>,
    ParentType,
    ContextType
  >
  hasBeenServed?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  hasChosen?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type LawAndOrderSubpoenaItemResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['LawAndOrderSubpoenaItem'] = ResolversParentTypes['LawAndOrderSubpoenaItem']
> = {
  action?: Resolver<
    Maybe<ResolversTypes['LawAndOrderAction']>,
    ParentType,
    ContextType
  >
  label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  link?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  value?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type LawAndOrderSubpoenaTextsResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['LawAndOrderSubpoenaTexts'] = ResolversParentTypes['LawAndOrderSubpoenaTexts']
> = {
  confirmation?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  deadline?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  description?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  information?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type LawyerResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Lawyer'] = ResolversParentTypes['Lawyer']
> = {
  licenceType?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type LicenseDriverLicenseDataResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['LicenseDriverLicenseData'] = ResolversParentTypes['LicenseDriverLicenseData']
> = {
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  nationalId?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  picture?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type LifeEventPageResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['LifeEventPage'] = ResolversParentTypes['LifeEventPage']
> = {
  category?: Resolver<
    Maybe<ResolversTypes['ArticleCategory']>,
    ParentType,
    ContextType
  >
  content?: Resolver<Array<ResolversTypes['Slice']>, ParentType, ContextType>
  featured?: Resolver<
    Array<ResolversTypes['Featured']>,
    ParentType,
    ContextType
  >
  featuredImage?: Resolver<
    Maybe<ResolversTypes['Image']>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  image?: Resolver<Maybe<ResolversTypes['Image']>, ParentType, ContextType>
  intro?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  organizations?: Resolver<
    Array<ResolversTypes['Organization']>,
    ParentType,
    ContextType
  >
  relatedLifeEvents?: Resolver<
    Array<ResolversTypes['LifeEventPage']>,
    ParentType,
    ContextType
  >
  seeMoreText?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  shortIntro?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  shortTitle?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  slug?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  thumbnail?: Resolver<Maybe<ResolversTypes['Image']>, ParentType, ContextType>
  tinyThumbnail?: Resolver<
    Maybe<ResolversTypes['Image']>,
    ParentType,
    ContextType
  >
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type LinkResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Link'] = ResolversParentTypes['Link']
> = {
  date?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  intro?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  labels?: Resolver<
    Maybe<Array<ResolversTypes['String']>>,
    ParentType,
    ContextType
  >
  text?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type LinkCardResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['LinkCard'] = ResolversParentTypes['LinkCard']
> = {
  body?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  linkText?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  linkUrl?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type LinkCardSectionResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['LinkCardSection'] = ResolversParentTypes['LinkCardSection']
> = {
  cards?: Resolver<Array<ResolversTypes['LinkCard']>, ParentType, ContextType>
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type LinkGroupResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['LinkGroup'] = ResolversParentTypes['LinkGroup']
> = {
  childrenLinks?: Resolver<
    Array<ResolversTypes['Link']>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  primaryLink?: Resolver<Maybe<ResolversTypes['Link']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type LinkListResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['LinkList'] = ResolversParentTypes['LinkList']
> = {
  links?: Resolver<Array<ResolversTypes['Link']>, ParentType, ContextType>
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type LogoListSliceResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['LogoListSlice'] = ResolversParentTypes['LogoListSlice']
> = {
  body?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  images?: Resolver<Array<ResolversTypes['Image']>, ParentType, ContextType>
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type MachineDetailsResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['MachineDetails'] = ResolversParentTypes['MachineDetails']
> = {
  category?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  disabled?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  ownerNumber?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  paymentRequiredForOwnerChange?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  plate?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  regNumber?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  status?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  subType?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  supervisorName?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ManualResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Manual'] = ResolversParentTypes['Manual']
> = {
  category?: Resolver<
    Maybe<ResolversTypes['ArticleCategory']>,
    ParentType,
    ContextType
  >
  chapters?: Resolver<
    Array<ResolversTypes['ManualChapter']>,
    ParentType,
    ContextType
  >
  description?: Resolver<
    Maybe<Array<ResolversTypes['Slice']>>,
    ParentType,
    ContextType
  >
  group?: Resolver<
    Maybe<ResolversTypes['ArticleGroup']>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  importance?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  info?: Resolver<
    Maybe<Array<ResolversTypes['Slice']>>,
    ParentType,
    ContextType
  >
  organization?: Resolver<
    Maybe<ResolversTypes['Organization']>,
    ParentType,
    ContextType
  >
  otherCategories?: Resolver<
    Maybe<Array<ResolversTypes['ArticleCategory']>>,
    ParentType,
    ContextType
  >
  otherGroups?: Resolver<
    Maybe<Array<ResolversTypes['ArticleGroup']>>,
    ParentType,
    ContextType
  >
  otherSubgroups?: Resolver<
    Maybe<Array<ResolversTypes['ArticleSubgroup']>>,
    ParentType,
    ContextType
  >
  slug?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  subgroup?: Resolver<
    Maybe<ResolversTypes['ArticleSubgroup']>,
    ParentType,
    ContextType
  >
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ManualChapterResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ManualChapter'] = ResolversParentTypes['ManualChapter']
> = {
  changelog?: Resolver<
    Maybe<ResolversTypes['ManualChapterChangelog']>,
    ParentType,
    ContextType
  >
  chapterItems?: Resolver<
    Array<ResolversTypes['ManualChapterItem']>,
    ParentType,
    ContextType
  >
  description?: Resolver<
    Maybe<Array<ResolversTypes['Slice']>>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  intro?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  slug?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ManualChapterChangelogResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ManualChapterChangelog'] = ResolversParentTypes['ManualChapterChangelog']
> = {
  items?: Resolver<
    Array<ResolversTypes['ManualChapterChangelogItem']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ManualChapterChangelogItemResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ManualChapterChangelogItem'] = ResolversParentTypes['ManualChapterChangelogItem']
> = {
  dateOfChange?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  textualDescription?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ManualChapterItemResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ManualChapterItem'] = ResolversParentTypes['ManualChapterItem']
> = {
  content?: Resolver<
    Maybe<Array<ResolversTypes['Slice']>>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  manual?: Resolver<ResolversTypes['ManualPageData'], ParentType, ContextType>
  manualChapter?: Resolver<
    ResolversTypes['ManualPageData'],
    ParentType,
    ContextType
  >
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ManualPageDataResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ManualPageData'] = ResolversParentTypes['ManualPageData']
> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  slug?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ManyPropertyDetailResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ManyPropertyDetail'] = ResolversParentTypes['ManyPropertyDetail']
> = {
  propertyNumber?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  propertyType?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  realEstate?: Resolver<
    Maybe<Array<ResolversTypes['RealEstateDetail']>>,
    ParentType,
    ContextType
  >
  ship?: Resolver<Maybe<ResolversTypes['ShipDetail']>, ParentType, ContextType>
  vehicle?: Resolver<
    Maybe<ResolversTypes['VehicleDetail']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type MarkNotificationReadResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['MarkNotificationReadResponse'] = ResolversParentTypes['MarkNotificationReadResponse']
> = {
  data?: Resolver<ResolversTypes['Notification'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type MasterLicenceResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['MasterLicence'] = ResolversParentTypes['MasterLicence']
> = {
  dateOfPublication?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  nationalId?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  office?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  profession?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type MasterLicencesResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['MasterLicencesResponse'] = ResolversParentTypes['MasterLicencesResponse']
> = {
  licences?: Resolver<
    Array<ResolversTypes['MasterLicence']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type MenuResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Menu'] = ResolversParentTypes['Menu']
> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  links?: Resolver<Array<ResolversTypes['Link']>, ParentType, ContextType>
  menuLinks?: Resolver<
    Array<ResolversTypes['MenuLinkWithChildren']>,
    ParentType,
    ContextType
  >
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type MenuLinkResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['MenuLink'] = ResolversParentTypes['MenuLink']
> = {
  link?: Resolver<ResolversTypes['ReferenceLink'], ParentType, ContextType>
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type MenuLinkWithChildrenResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['MenuLinkWithChildren'] = ResolversParentTypes['MenuLinkWithChildren']
> = {
  childLinks?: Resolver<
    Array<ResolversTypes['MenuLink']>,
    ParentType,
    ContextType
  >
  link?: Resolver<
    Maybe<ResolversTypes['ReferenceLink']>,
    ParentType,
    ContextType
  >
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type MortgageCertificateValidationModelResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['MortgageCertificateValidationModel'] = ResolversParentTypes['MortgageCertificateValidationModel']
> = {
  exists?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  hasKMarking?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  propertyNumber?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type MultipleStatisticsResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['MultipleStatistics'] = ResolversParentTypes['MultipleStatistics']
> = {
  hasBorderAbove?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  link?: Resolver<Maybe<ResolversTypes['Link']>, ParentType, ContextType>
  statistics?: Resolver<
    Array<ResolversTypes['Statistics']>,
    ParentType,
    ContextType
  >
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type MunicipalitiesFinancialAidAmountModelResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['MunicipalitiesFinancialAidAmountModel'] = ResolversParentTypes['MunicipalitiesFinancialAidAmountModel']
> = {
  aidAmount?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  applicationId?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  childrenAidAmount?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  deductionFactors?: Resolver<
    Maybe<
      Array<ResolversTypes['MunicipalitiesFinancialAidDeductionFactorsModel']>
    >,
    ParentType,
    ContextType
  >
  finalAmount?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  income?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  personalTaxCredit?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  spousePersonalTaxCredit?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  tax?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type MunicipalitiesFinancialAidApplicationChildrenResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['MunicipalitiesFinancialAidApplicationChildren'] = ResolversParentTypes['MunicipalitiesFinancialAidApplicationChildren']
> = {
  applicationId?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  nationalId?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  school?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type MunicipalitiesFinancialAidApplicationEventModelResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['MunicipalitiesFinancialAidApplicationEventModel'] = ResolversParentTypes['MunicipalitiesFinancialAidApplicationEventModel']
> = {
  applicationId?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  comment?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  created?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>
  eventType?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  staffName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  staffNationalId?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type MunicipalitiesFinancialAidApplicationFileModelResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['MunicipalitiesFinancialAidApplicationFileModel'] = ResolversParentTypes['MunicipalitiesFinancialAidApplicationFileModel']
> = {
  applicationId?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  created?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  key?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  size?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  type?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type MunicipalitiesFinancialAidApplicationModelResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['MunicipalitiesFinancialAidApplicationModel'] = ResolversParentTypes['MunicipalitiesFinancialAidApplicationModel']
> = {
  accountNumber?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  amount?: Resolver<
    Maybe<ResolversTypes['MunicipalitiesFinancialAidAmountModel']>,
    ParentType,
    ContextType
  >
  applicationEvents?: Resolver<
    Maybe<
      Array<ResolversTypes['MunicipalitiesFinancialAidApplicationEventModel']>
    >,
    ParentType,
    ContextType
  >
  applicationSystemId?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  bankNumber?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  children?: Resolver<
    Maybe<
      Array<ResolversTypes['MunicipalitiesFinancialAidApplicationChildren']>
    >,
    ParentType,
    ContextType
  >
  city?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  created?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>
  directTaxPayments?: Resolver<
    Array<ResolversTypes['DirectTaxPaymentModel']>,
    ParentType,
    ContextType
  >
  email?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  employment?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  employmentCustom?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  familyStatus?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  files?: Resolver<
    Maybe<
      Array<ResolversTypes['MunicipalitiesFinancialAidApplicationFileModel']>
    >,
    ParentType,
    ContextType
  >
  formComment?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  hasIncome?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  homeCircumstances?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >
  homeCircumstancesCustom?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  interview?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  ledger?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  modified?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>
  municipalityCode?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  nationalId?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  phoneNumber?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  postalCode?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  rejection?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  spouseEmail?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  spouseFormComment?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  spouseName?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  spouseNationalId?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  spousePhoneNumber?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  state?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  streetName?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  student?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  studentCustom?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  usePersonalTaxCredit?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type MunicipalitiesFinancialAidCreateFilesModelResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['MunicipalitiesFinancialAidCreateFilesModel'] = ResolversParentTypes['MunicipalitiesFinancialAidCreateFilesModel']
> = {
  files?: Resolver<
    Array<ResolversTypes['MunicipalitiesFinancialAidApplicationFileModel']>,
    ParentType,
    ContextType
  >
  success?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type MunicipalitiesFinancialAidDeductionFactorsModelResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['MunicipalitiesFinancialAidDeductionFactorsModel'] = ResolversParentTypes['MunicipalitiesFinancialAidDeductionFactorsModel']
> = {
  amount?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  amountId?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  description?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type MunicipalitiesFinancialAidSignedUrlModelResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['MunicipalitiesFinancialAidSignedUrlModel'] = ResolversParentTypes['MunicipalitiesFinancialAidSignedUrlModel']
> = {
  key?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type MutationResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Mutation'] = ResolversParentTypes['Mutation']
> = {
  OJOIAPostApplication?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType,
    RequireFields<MutationOjoiaPostApplicationArgs, 'input'>
  >
  OJOIAPostComment?: Resolver<
    ResolversTypes['OfficialJournalOfIcelandApplicationPostCommentResponse'],
    ParentType,
    ContextType,
    RequireFields<MutationOjoiaPostCommentArgs, 'input'>
  >
  UserProfileAdminUpdateProfile?: Resolver<
    ResolversTypes['UserProfileAdminProfile'],
    ParentType,
    ContextType,
    RequireFields<
      MutationUserProfileAdminUpdateProfileArgs,
      'input' | 'nationalId'
    >
  >
  addAttachment?: Resolver<
    Maybe<ResolversTypes['Application']>,
    ParentType,
    ContextType,
    RequireFields<MutationAddAttachmentArgs, 'input'>
  >
  addUserProfileDeviceToken?: Resolver<
    ResolversTypes['UserDeviceToken'],
    ParentType,
    ContextType,
    RequireFields<MutationAddUserProfileDeviceTokenArgs, 'input'>
  >
  assignApplication?: Resolver<
    Maybe<ResolversTypes['Application']>,
    ParentType,
    ContextType,
    RequireFields<MutationAssignApplicationArgs, 'input'>
  >
  authCreateDelegation?: Resolver<
    ResolversTypes['AuthCustomDelegation'],
    ParentType,
    ContextType,
    RequireFields<MutationAuthCreateDelegationArgs, 'input'>
  >
  authDeleteAdminDelegation?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType,
    RequireFields<MutationAuthDeleteAdminDelegationArgs, 'id'>
  >
  authDeletePasskey?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType
  >
  authPasskeyVerifyRegistration?: Resolver<
    ResolversTypes['AuthPasskeyRegistrationVerification'],
    ParentType,
    ContextType,
    RequireFields<MutationAuthPasskeyVerifyRegistrationArgs, 'input'>
  >
  confirmAirDiscountSchemeInvoice?: Resolver<
    Array<ResolversTypes['AirDiscountSchemeFlightLeg']>,
    ParentType,
    ContextType,
    RequireFields<MutationConfirmAirDiscountSchemeInvoiceArgs, 'input'>
  >
  consultationPortalDeleteSubscriptionType?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType,
    RequireFields<MutationConsultationPortalDeleteSubscriptionTypeArgs, 'input'>
  >
  consultationPortalPostAdvice?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType,
    RequireFields<MutationConsultationPortalPostAdviceArgs, 'input'>
  >
  consultationPortalPostSubscriptionType?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType,
    RequireFields<MutationConsultationPortalPostSubscriptionTypeArgs, 'input'>
  >
  consultationPortalPostSubscriptions?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType,
    RequireFields<MutationConsultationPortalPostSubscriptionsArgs, 'input'>
  >
  consultationPortalPostUserEmail?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType,
    RequireFields<MutationConsultationPortalPostUserEmailArgs, 'input'>
  >
  contactUs?: Resolver<
    ResolversTypes['CommunicationResponse'],
    ParentType,
    ContextType,
    RequireFields<MutationContactUsArgs, 'input'>
  >
  contactUsZendeskTicket?: Resolver<
    ResolversTypes['CommunicationResponse'],
    ParentType,
    ContextType,
    RequireFields<MutationContactUsZendeskTicketArgs, 'input'>
  >
  createAdministrativeContact?: Resolver<
    Maybe<ResolversTypes['Contact']>,
    ParentType,
    ContextType,
    RequireFields<
      MutationCreateAdministrativeContactArgs,
      'input' | 'organisationId'
    >
  >
  createAirDiscountSchemeExplicitDiscountCode?: Resolver<
    Maybe<Array<ResolversTypes['AirDiscountSchemeDiscount']>>,
    ParentType,
    ContextType,
    RequireFields<
      MutationCreateAirDiscountSchemeExplicitDiscountCodeArgs,
      'input'
    >
  >
  createAirDiscountSchemeSuperExplicitDiscountCode?: Resolver<
    Maybe<Array<ResolversTypes['AirDiscountSchemeDiscount']>>,
    ParentType,
    ContextType,
    RequireFields<
      MutationCreateAirDiscountSchemeSuperExplicitDiscountCodeArgs,
      'input'
    >
  >
  createApplication?: Resolver<
    Maybe<ResolversTypes['Application']>,
    ParentType,
    ContextType,
    RequireFields<MutationCreateApplicationArgs, 'input'>
  >
  createAuthAdminClient?: Resolver<
    Array<ResolversTypes['AuthAdminCreateClientResponse']>,
    ParentType,
    ContextType,
    RequireFields<MutationCreateAuthAdminClientArgs, 'input'>
  >
  createAuthAdminScope?: Resolver<
    Array<ResolversTypes['AuthAdminCreateScopeResponse']>,
    ParentType,
    ContextType,
    RequireFields<MutationCreateAuthAdminScopeArgs, 'input'>
  >
  createAuthDelegation?: Resolver<
    ResolversTypes['AuthDelegation'],
    ParentType,
    ContextType,
    RequireFields<MutationCreateAuthDelegationArgs, 'input'>
  >
  createAuthLoginRestriction?: Resolver<
    ResolversTypes['AuthLoginRestriction'],
    ParentType,
    ContextType,
    RequireFields<MutationCreateAuthLoginRestrictionArgs, 'input'>
  >
  createDraftRegulation?: Resolver<
    ResolversTypes['JSON'],
    ParentType,
    ContextType,
    RequireFields<MutationCreateDraftRegulationArgs, 'input'>
  >
  createDraftRegulationCancel?: Resolver<
    ResolversTypes['DraftRegulationCancelModel'],
    ParentType,
    ContextType,
    RequireFields<MutationCreateDraftRegulationCancelArgs, 'input'>
  >
  createDraftRegulationChange?: Resolver<
    ResolversTypes['DraftRegulationChangeModel'],
    ParentType,
    ContextType,
    RequireFields<MutationCreateDraftRegulationChangeArgs, 'input'>
  >
  createEmailVerification?: Resolver<
    Maybe<ResolversTypes['Response']>,
    ParentType,
    ContextType,
    RequireFields<MutationCreateEmailVerificationArgs, 'input'>
  >
  createFormSystemApplicant?: Resolver<
    ResolversTypes['FormSystemApplicant'],
    ParentType,
    ContextType,
    RequireFields<MutationCreateFormSystemApplicantArgs, 'input'>
  >
  createFormSystemApplication?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType,
    RequireFields<MutationCreateFormSystemApplicationArgs, 'input'>
  >
  createFormSystemCertification?: Resolver<
    ResolversTypes['FormSystemFormCertificationTypeDto'],
    ParentType,
    ContextType,
    RequireFields<MutationCreateFormSystemCertificationArgs, 'input'>
  >
  createFormSystemField?: Resolver<
    ResolversTypes['FormSystemField'],
    ParentType,
    ContextType,
    RequireFields<MutationCreateFormSystemFieldArgs, 'input'>
  >
  createFormSystemForm?: Resolver<
    ResolversTypes['FormSystemFormResponse'],
    ParentType,
    ContextType,
    RequireFields<MutationCreateFormSystemFormArgs, 'input'>
  >
  createFormSystemListItem?: Resolver<
    ResolversTypes['FormSystemListItem'],
    ParentType,
    ContextType,
    RequireFields<MutationCreateFormSystemListItemArgs, 'input'>
  >
  createFormSystemOrganization?: Resolver<
    ResolversTypes['FormSystemOrganization'],
    ParentType,
    ContextType,
    RequireFields<MutationCreateFormSystemOrganizationArgs, 'input'>
  >
  createFormSystemOrganizationPermission?: Resolver<
    ResolversTypes['FormSystemOrganizationPermissionDto'],
    ParentType,
    ContextType,
    RequireFields<MutationCreateFormSystemOrganizationPermissionArgs, 'input'>
  >
  createFormSystemScreen?: Resolver<
    ResolversTypes['FormSystemScreen'],
    ParentType,
    ContextType,
    RequireFields<MutationCreateFormSystemScreenArgs, 'input'>
  >
  createFormSystemSection?: Resolver<
    ResolversTypes['FormSystemSection'],
    ParentType,
    ContextType,
    RequireFields<MutationCreateFormSystemSectionArgs, 'input'>
  >
  createHelpdesk?: Resolver<
    Maybe<ResolversTypes['Helpdesk']>,
    ParentType,
    ContextType,
    RequireFields<MutationCreateHelpdeskArgs, 'input' | 'organisationId'>
  >
  createIcelandicName?: Resolver<
    ResolversTypes['IcelandicName'],
    ParentType,
    ContextType,
    RequireFields<MutationCreateIcelandicNameArgs, 'input'>
  >
  createMunicipalitiesFinancialAidApplicationFiles?: Resolver<
    ResolversTypes['MunicipalitiesFinancialAidCreateFilesModel'],
    ParentType,
    ContextType,
    RequireFields<
      MutationCreateMunicipalitiesFinancialAidApplicationFilesArgs,
      'input'
    >
  >
  createMunicipalitiesFinancialAidSignedUrl?: Resolver<
    ResolversTypes['MunicipalitiesFinancialAidSignedUrlModel'],
    ParentType,
    ContextType,
    RequireFields<
      MutationCreateMunicipalitiesFinancialAidSignedUrlArgs,
      'input'
    >
  >
  createProfile?: Resolver<
    Maybe<ResolversTypes['UserProfile']>,
    ParentType,
    ContextType,
    RequireFields<MutationCreateProfileArgs, 'input'>
  >
  createProvider?: Resolver<
    ResolversTypes['ClientCredentials'],
    ParentType,
    ContextType,
    RequireFields<MutationCreateProviderArgs, 'input'>
  >
  createSmsVerification?: Resolver<
    Maybe<ResolversTypes['Response']>,
    ParentType,
    ContextType,
    RequireFields<MutationCreateSmsVerificationArgs, 'input'>
  >
  createTechnicalContact?: Resolver<
    Maybe<ResolversTypes['Contact']>,
    ParentType,
    ContextType,
    RequireFields<
      MutationCreateTechnicalContactArgs,
      'input' | 'organisationId'
    >
  >
  createTestProvider?: Resolver<
    ResolversTypes['ClientCredentials'],
    ParentType,
    ContextType,
    RequireFields<MutationCreateTestProviderArgs, 'input'>
  >
  createUploadUrl?: Resolver<
    ResolversTypes['PresignedPost'],
    ParentType,
    ContextType,
    RequireFields<MutationCreateUploadUrlArgs, 'filename'>
  >
  deleteApplication?: Resolver<
    Maybe<ResolversTypes['Application']>,
    ParentType,
    ContextType,
    RequireFields<MutationDeleteApplicationArgs, 'input'>
  >
  deleteAttachment?: Resolver<
    Maybe<ResolversTypes['Application']>,
    ParentType,
    ContextType,
    RequireFields<MutationDeleteAttachmentArgs, 'input'>
  >
  deleteAuthAdminClient?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType,
    RequireFields<MutationDeleteAuthAdminClientArgs, 'input'>
  >
  deleteAuthDelegation?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType,
    RequireFields<MutationDeleteAuthDelegationArgs, 'input'>
  >
  deleteDraftRegulation?: Resolver<
    ResolversTypes['DeleteDraftRegulationModel'],
    ParentType,
    ContextType,
    RequireFields<MutationDeleteDraftRegulationArgs, 'input'>
  >
  deleteDraftRegulationCancel?: Resolver<
    ResolversTypes['DeleteDraftRegulationModel'],
    ParentType,
    ContextType,
    RequireFields<MutationDeleteDraftRegulationCancelArgs, 'input'>
  >
  deleteDraftRegulationChange?: Resolver<
    ResolversTypes['DeleteDraftRegulationModel'],
    ParentType,
    ContextType,
    RequireFields<MutationDeleteDraftRegulationChangeArgs, 'input'>
  >
  deleteFormSystemApplicant?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType,
    RequireFields<MutationDeleteFormSystemApplicantArgs, 'input'>
  >
  deleteFormSystemCertification?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType,
    RequireFields<MutationDeleteFormSystemCertificationArgs, 'input'>
  >
  deleteFormSystemField?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType,
    RequireFields<MutationDeleteFormSystemFieldArgs, 'input'>
  >
  deleteFormSystemForm?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType,
    RequireFields<MutationDeleteFormSystemFormArgs, 'input'>
  >
  deleteFormSystemListItem?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType,
    RequireFields<MutationDeleteFormSystemListItemArgs, 'input'>
  >
  deleteFormSystemOrganizationPermission?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType,
    RequireFields<MutationDeleteFormSystemOrganizationPermissionArgs, 'input'>
  >
  deleteFormSystemScreen?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType,
    RequireFields<MutationDeleteFormSystemScreenArgs, 'input'>
  >
  deleteFormSystemSection?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType,
    RequireFields<MutationDeleteFormSystemSectionArgs, 'input'>
  >
  deleteIcelandicNameById?: Resolver<
    ResolversTypes['DeleteNameResponse'],
    ParentType,
    ContextType,
    RequireFields<MutationDeleteIcelandicNameByIdArgs, 'input'>
  >
  deleteIslykillValue?: Resolver<
    Maybe<ResolversTypes['UserProfile']>,
    ParentType,
    ContextType,
    RequireFields<MutationDeleteIslykillValueArgs, 'input'>
  >
  deleteUserProfileDeviceToken?: Resolver<
    ResolversTypes['DeleteTokenResponse'],
    ParentType,
    ContextType,
    RequireFields<MutationDeleteUserProfileDeviceTokenArgs, 'input'>
  >
  documentProviderPostProvidedCategory?: Resolver<
    ResolversTypes['DocumentProviderCategory'],
    ParentType,
    ContextType,
    RequireFields<MutationDocumentProviderPostProvidedCategoryArgs, 'input'>
  >
  documentProviderPostProvidedType?: Resolver<
    ResolversTypes['DocumentProviderType'],
    ParentType,
    ContextType,
    RequireFields<MutationDocumentProviderPostProvidedTypeArgs, 'input'>
  >
  documentProviderPutProvidedCategory?: Resolver<
    ResolversTypes['DocumentProviderCategory'],
    ParentType,
    ContextType,
    RequireFields<MutationDocumentProviderPutProvidedCategoryArgs, 'input'>
  >
  documentProviderPutProvidedType?: Resolver<
    ResolversTypes['DocumentProviderType'],
    ParentType,
    ContextType,
    RequireFields<MutationDocumentProviderPutProvidedTypeArgs, 'input'>
  >
  documentsV2MarkAllAsRead?: Resolver<
    Maybe<ResolversTypes['DocumentV2MarkAllMailAsRead']>,
    ParentType,
    ContextType
  >
  drivingLicenseBookAllowPracticeDriving?: Resolver<
    ResolversTypes['DrivingLicenseBookSuccess'],
    ParentType,
    ContextType,
    RequireFields<MutationDrivingLicenseBookAllowPracticeDrivingArgs, 'input'>
  >
  drivingLicenseBookCreateDrivingSchoolTestResult?: Resolver<
    ResolversTypes['DrivingLicenceTestResultId'],
    ParentType,
    ContextType,
    RequireFields<
      MutationDrivingLicenseBookCreateDrivingSchoolTestResultArgs,
      'input'
    >
  >
  drivingLicenseBookCreatePracticalDrivingLesson?: Resolver<
    ResolversTypes['PracticalDrivingLesson'],
    ParentType,
    ContextType,
    RequireFields<
      MutationDrivingLicenseBookCreatePracticalDrivingLessonArgs,
      'input'
    >
  >
  drivingLicenseBookDeletePracticalDrivingLesson?: Resolver<
    ResolversTypes['DrivingLicenseBookSuccess'],
    ParentType,
    ContextType,
    RequireFields<
      MutationDrivingLicenseBookDeletePracticalDrivingLessonArgs,
      'input'
    >
  >
  drivingLicenseBookUpdatePracticalDrivingLesson?: Resolver<
    ResolversTypes['DrivingLicenseBookSuccess'],
    ParentType,
    ContextType,
    RequireFields<
      MutationDrivingLicenseBookUpdatePracticalDrivingLessonArgs,
      'input'
    >
  >
  emailSignupSubscription?: Resolver<
    ResolversTypes['EmailSignupResponse'],
    ParentType,
    ContextType,
    RequireFields<MutationEmailSignupSubscriptionArgs, 'input'>
  >
  endorsementSystemCloseEndorsementList?: Resolver<
    ResolversTypes['EndorsementList'],
    ParentType,
    ContextType,
    RequireFields<MutationEndorsementSystemCloseEndorsementListArgs, 'input'>
  >
  endorsementSystemCreateEndorsementList?: Resolver<
    ResolversTypes['EndorsementList'],
    ParentType,
    ContextType,
    RequireFields<MutationEndorsementSystemCreateEndorsementListArgs, 'input'>
  >
  endorsementSystemEndorseList?: Resolver<
    ResolversTypes['Endorsement'],
    ParentType,
    ContextType,
    RequireFields<MutationEndorsementSystemEndorseListArgs, 'input'>
  >
  endorsementSystemExportList?: Resolver<
    ResolversTypes['ExportUrlResponse'],
    ParentType,
    ContextType,
    RequireFields<MutationEndorsementSystemExportListArgs, 'input'>
  >
  endorsementSystemLockEndorsementList?: Resolver<
    ResolversTypes['EndorsementList'],
    ParentType,
    ContextType,
    RequireFields<MutationEndorsementSystemLockEndorsementListArgs, 'input'>
  >
  endorsementSystemOpenEndorsementList?: Resolver<
    ResolversTypes['EndorsementList'],
    ParentType,
    ContextType,
    RequireFields<MutationEndorsementSystemOpenEndorsementListArgs, 'input'>
  >
  endorsementSystemUnendorseList?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType,
    RequireFields<MutationEndorsementSystemUnendorseListArgs, 'input'>
  >
  endorsementSystemUnlockEndorsementList?: Resolver<
    ResolversTypes['EndorsementList'],
    ParentType,
    ContextType,
    RequireFields<MutationEndorsementSystemUnlockEndorsementListArgs, 'input'>
  >
  endorsementSystemUpdateEndorsementList?: Resolver<
    ResolversTypes['EndorsementList'],
    ParentType,
    ContextType,
    RequireFields<MutationEndorsementSystemUpdateEndorsementListArgs, 'input'>
  >
  endorsementSystemsendPdfEmail?: Resolver<
    ResolversTypes['sendPdfEmailResponse'],
    ParentType,
    ContextType,
    RequireFields<MutationEndorsementSystemsendPdfEmailArgs, 'input'>
  >
  fetchEducationSignedLicenseUrl?: Resolver<
    Maybe<ResolversTypes['EducationSignedLicense']>,
    ParentType,
    ContextType,
    RequireFields<MutationFetchEducationSignedLicenseUrlArgs, 'input'>
  >
  formSystemTranslation?: Resolver<
    ResolversTypes['FormSystemTranslation'],
    ParentType,
    ContextType,
    RequireFields<MutationFormSystemTranslationArgs, 'input'>
  >
  generatePkPass?: Resolver<
    ResolversTypes['GenericPkPass'],
    ParentType,
    ContextType,
    RequireFields<MutationGeneratePkPassArgs, 'input'>
  >
  generatePkPassQrCode?: Resolver<
    ResolversTypes['GenericPkPassQrCode'],
    ParentType,
    ContextType,
    RequireFields<MutationGeneratePkPassQrCodeArgs, 'input'>
  >
  genericForm?: Resolver<
    ResolversTypes['CommunicationResponse'],
    ParentType,
    ContextType,
    RequireFields<MutationGenericFormArgs, 'input'>
  >
  healthDirectorateOrganDonationUpdateDonorStatus?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType,
    RequireFields<
      MutationHealthDirectorateOrganDonationUpdateDonorStatusArgs,
      'input'
    >
  >
  lawAndOrderDefenseChoicePost?: Resolver<
    Maybe<ResolversTypes['LawAndOrderDefenseChoice']>,
    ParentType,
    ContextType,
    RequireFields<MutationLawAndOrderDefenseChoicePostArgs, 'input'>
  >
  markAllNotificationsRead?: Resolver<
    Maybe<ResolversTypes['NotificationsMarkAllAsReadResponse']>,
    ParentType,
    ContextType
  >
  markAllNotificationsSeen?: Resolver<
    Maybe<ResolversTypes['NotificationsMarkAllAsSeenResponse']>,
    ParentType,
    ContextType
  >
  markNotificationAsRead?: Resolver<
    Maybe<ResolversTypes['MarkNotificationReadResponse']>,
    ParentType,
    ContextType,
    RequireFields<MutationMarkNotificationAsReadArgs, 'id'>
  >
  officialJournalOfIcelandApplicationAddAttachment?: Resolver<
    ResolversTypes['OfficialJournalOfIcelandApplicationAddApplicationAttachmentResponse'],
    ParentType,
    ContextType,
    RequireFields<
      MutationOfficialJournalOfIcelandApplicationAddAttachmentArgs,
      'input'
    >
  >
  officialJournalOfIcelandApplicationDeleteAttachment?: Resolver<
    ResolversTypes['OfficialJournalOfIcelandApplicationAddApplicationAttachmentResponse'],
    ParentType,
    ContextType,
    RequireFields<
      MutationOfficialJournalOfIcelandApplicationDeleteAttachmentArgs,
      'input'
    >
  >
  officialJournalOfIcelandApplicationGetPresignedUrl?: Resolver<
    ResolversTypes['OfficialJournalOfIcelandApplicationGetPresignedUrlResponse'],
    ParentType,
    ContextType,
    RequireFields<
      MutationOfficialJournalOfIcelandApplicationGetPresignedUrlArgs,
      'input'
    >
  >
  patchAuthAdminClient?: Resolver<
    Array<ResolversTypes['AuthAdminClientEnvironment']>,
    ParentType,
    ContextType,
    RequireFields<MutationPatchAuthAdminClientArgs, 'input'>
  >
  patchAuthAdminScope?: Resolver<
    Array<ResolversTypes['AuthAdminScopeEnvironment']>,
    ParentType,
    ContextType,
    RequireFields<MutationPatchAuthAdminScopeArgs, 'input'>
  >
  patchAuthConsent?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType,
    RequireFields<MutationPatchAuthConsentArgs, 'input'>
  >
  patchAuthDelegation?: Resolver<
    ResolversTypes['AuthDelegation'],
    ParentType,
    ContextType,
    RequireFields<MutationPatchAuthDelegationArgs, 'input'>
  >
  paymentsChargeCard?: Resolver<
    ResolversTypes['PaymentsChargeCardResponse'],
    ParentType,
    ContextType,
    RequireFields<MutationPaymentsChargeCardArgs, 'input'>
  >
  paymentsCreateInvoice?: Resolver<
    ResolversTypes['PaymentsCreateInvoiceResponse'],
    ParentType,
    ContextType,
    RequireFields<MutationPaymentsCreateInvoiceArgs, 'input'>
  >
  paymentsVerificationCallback?: Resolver<
    ResolversTypes['PaymentsCardVerificationResponse'],
    ParentType,
    ContextType,
    RequireFields<MutationPaymentsVerificationCallbackArgs, 'input'>
  >
  paymentsVerifyCard?: Resolver<
    ResolversTypes['PaymentsVerifyCardResponse'],
    ParentType,
    ContextType,
    RequireFields<MutationPaymentsVerifyCardArgs, 'input'>
  >
  postBulkMailAction?: Resolver<
    Maybe<ResolversTypes['BulkMailAction']>,
    ParentType,
    ContextType,
    RequireFields<MutationPostBulkMailActionArgs, 'input'>
  >
  postMailAction?: Resolver<
    Maybe<ResolversTypes['ActionMailBody']>,
    ParentType,
    ContextType,
    RequireFields<MutationPostMailActionArgs, 'input'>
  >
  postMailActionV2?: Resolver<
    Maybe<ResolversTypes['DocumentMailAction']>,
    ParentType,
    ContextType,
    RequireFields<MutationPostMailActionV2Args, 'input'>
  >
  postPaperMailInfo?: Resolver<
    Maybe<ResolversTypes['PaperMailBody']>,
    ParentType,
    ContextType,
    RequireFields<MutationPostPaperMailInfoArgs, 'input'>
  >
  publishAuthAdminClient?: Resolver<
    ResolversTypes['AuthAdminClientEnvironment'],
    ParentType,
    ContextType,
    RequireFields<MutationPublishAuthAdminClientArgs, 'input'>
  >
  publishAuthAdminScope?: Resolver<
    ResolversTypes['AuthAdminScopeEnvironment'],
    ParentType,
    ContextType,
    RequireFields<MutationPublishAuthAdminScopeArgs, 'input'>
  >
  regulationCreatePresignedPost?: Resolver<
    ResolversTypes['JSON'],
    ParentType,
    ContextType,
    RequireFields<MutationRegulationCreatePresignedPostArgs, 'input'>
  >
  removeAuthLoginRestriction?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType
  >
  revokeAuthAdminClientSecrets?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType,
    RequireFields<MutationRevokeAuthAdminClientSecretsArgs, 'input'>
  >
  rightsPortalDrugsCalculator?: Resolver<
    ResolversTypes['RightsPortalDrugCalculatorResponse'],
    ParentType,
    ContextType,
    RequireFields<MutationRightsPortalDrugsCalculatorArgs, 'input'>
  >
  rightsPortalRegisterDentist?: Resolver<
    ResolversTypes['RightsPortalDentistRegisterResponse'],
    ParentType,
    ContextType,
    RequireFields<MutationRightsPortalRegisterDentistArgs, 'input'>
  >
  rightsPortalRegisterHealthCenter?: Resolver<
    ResolversTypes['RightsPortalHealthCenterRegisterResponse'],
    ParentType,
    ContextType,
    RequireFields<MutationRightsPortalRegisterHealthCenterArgs, 'input'>
  >
  rotateAuthAdminClientSecret?: Resolver<
    ResolversTypes['AuthAdminClientSecret'],
    ParentType,
    ContextType,
    RequireFields<MutationRotateAuthAdminClientSecretArgs, 'input'>
  >
  runEndpointTests?: Resolver<
    Array<ResolversTypes['TestResult']>,
    ParentType,
    ContextType,
    RequireFields<MutationRunEndpointTestsArgs, 'input'>
  >
  serviceWebForms?: Resolver<
    ResolversTypes['CommunicationResponse'],
    ParentType,
    ContextType,
    RequireFields<MutationServiceWebFormsArgs, 'input'>
  >
  signatureCollectionAddAreas?: Resolver<
    ResolversTypes['SignatureCollectionSuccess'],
    ParentType,
    ContextType,
    RequireFields<MutationSignatureCollectionAddAreasArgs, 'input'>
  >
  signatureCollectionAdminBulkCompareSignaturesAllLists?: Resolver<
    Array<ResolversTypes['SignatureCollectionSignature']>,
    ParentType,
    ContextType,
    RequireFields<
      MutationSignatureCollectionAdminBulkCompareSignaturesAllListsArgs,
      'input'
    >
  >
  signatureCollectionAdminBulkUploadSignatures?: Resolver<
    ResolversTypes['SignatureCollectionBulk'],
    ParentType,
    ContextType,
    RequireFields<
      MutationSignatureCollectionAdminBulkUploadSignaturesArgs,
      'input'
    >
  >
  signatureCollectionAdminCompareList?: Resolver<
    Array<ResolversTypes['SignatureCollectionSignature']>,
    ParentType,
    ContextType,
    RequireFields<MutationSignatureCollectionAdminCompareListArgs, 'input'>
  >
  signatureCollectionAdminCreate?: Resolver<
    ResolversTypes['SignatureCollectionSlug'],
    ParentType,
    ContextType,
    RequireFields<MutationSignatureCollectionAdminCreateArgs, 'input'>
  >
  signatureCollectionAdminExtendDeadline?: Resolver<
    ResolversTypes['SignatureCollectionSuccess'],
    ParentType,
    ContextType,
    RequireFields<MutationSignatureCollectionAdminExtendDeadlineArgs, 'input'>
  >
  signatureCollectionAdminProcess?: Resolver<
    ResolversTypes['SignatureCollectionSuccess'],
    ParentType,
    ContextType,
    RequireFields<MutationSignatureCollectionAdminProcessArgs, 'input'>
  >
  signatureCollectionAdminRemoveCandidate?: Resolver<
    ResolversTypes['SignatureCollectionSuccess'],
    ParentType,
    ContextType,
    RequireFields<MutationSignatureCollectionAdminRemoveCandidateArgs, 'input'>
  >
  signatureCollectionAdminRemoveList?: Resolver<
    ResolversTypes['SignatureCollectionSuccess'],
    ParentType,
    ContextType,
    RequireFields<MutationSignatureCollectionAdminRemoveListArgs, 'input'>
  >
  signatureCollectionAdminToggleListReview?: Resolver<
    ResolversTypes['SignatureCollectionSuccess'],
    ParentType,
    ContextType,
    RequireFields<MutationSignatureCollectionAdminToggleListReviewArgs, 'input'>
  >
  signatureCollectionAdminUnsign?: Resolver<
    ResolversTypes['SignatureCollectionSuccess'],
    ParentType,
    ContextType,
    RequireFields<MutationSignatureCollectionAdminUnsignArgs, 'input'>
  >
  signatureCollectionAdminUpdatePaperSignaturePageNumber?: Resolver<
    ResolversTypes['SignatureCollectionSuccess'],
    ParentType,
    ContextType,
    RequireFields<
      MutationSignatureCollectionAdminUpdatePaperSignaturePageNumberArgs,
      'input'
    >
  >
  signatureCollectionAdminUploadPaperSignature?: Resolver<
    ResolversTypes['SignatureCollectionSuccess'],
    ParentType,
    ContextType,
    RequireFields<
      MutationSignatureCollectionAdminUploadPaperSignatureArgs,
      'input'
    >
  >
  signatureCollectionCancel?: Resolver<
    ResolversTypes['SignatureCollectionSuccess'],
    ParentType,
    ContextType,
    RequireFields<MutationSignatureCollectionCancelArgs, 'input'>
  >
  signatureCollectionLockList?: Resolver<
    ResolversTypes['SignatureCollectionSuccess'],
    ParentType,
    ContextType,
    RequireFields<MutationSignatureCollectionLockListArgs, 'input'>
  >
  signatureCollectionUnsign?: Resolver<
    ResolversTypes['SignatureCollectionSuccess'],
    ParentType,
    ContextType,
    RequireFields<MutationSignatureCollectionUnsignArgs, 'input'>
  >
  signatureCollectionUpdatePaperSignaturePageNumber?: Resolver<
    ResolversTypes['SignatureCollectionSuccess'],
    ParentType,
    ContextType,
    RequireFields<
      MutationSignatureCollectionUpdatePaperSignaturePageNumberArgs,
      'input'
    >
  >
  signatureCollectionUploadPaperSignature?: Resolver<
    ResolversTypes['SignatureCollectionSuccess'],
    ParentType,
    ContextType,
    RequireFields<MutationSignatureCollectionUploadPaperSignatureArgs, 'input'>
  >
  submitApplication?: Resolver<
    Maybe<ResolversTypes['Application']>,
    ParentType,
    ContextType,
    RequireFields<MutationSubmitApplicationArgs, 'input'>
  >
  submitFormSystemApplication?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType,
    RequireFields<MutationSubmitFormSystemApplicationArgs, 'input'>
  >
  submitFormSystemScreen?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType,
    RequireFields<MutationSubmitFormSystemScreenArgs, 'input'>
  >
  tellUsAStory?: Resolver<
    ResolversTypes['CommunicationResponse'],
    ParentType,
    ContextType,
    RequireFields<MutationTellUsAStoryArgs, 'input'>
  >
  updateAdministrativeContact?: Resolver<
    ResolversTypes['Contact'],
    ParentType,
    ContextType,
    RequireFields<
      MutationUpdateAdministrativeContactArgs,
      'administrativeContactId' | 'contact' | 'organisationId'
    >
  >
  updateApplication?: Resolver<
    Maybe<ResolversTypes['Application']>,
    ParentType,
    ContextType,
    RequireFields<MutationUpdateApplicationArgs, 'input'>
  >
  updateApplicationExternalData?: Resolver<
    Maybe<ResolversTypes['Application']>,
    ParentType,
    ContextType,
    RequireFields<MutationUpdateApplicationExternalDataArgs, 'input'>
  >
  updateAuthDelegation?: Resolver<
    ResolversTypes['AuthDelegation'],
    ParentType,
    ContextType,
    RequireFields<MutationUpdateAuthDelegationArgs, 'input'>
  >
  updateCurrentEmployer?: Resolver<
    ResolversTypes['UpdateCurrentEmployerResponse'],
    ParentType,
    ContextType,
    RequireFields<MutationUpdateCurrentEmployerArgs, 'input'>
  >
  updateDraftRegulationById?: Resolver<
    ResolversTypes['JSON'],
    ParentType,
    ContextType,
    RequireFields<MutationUpdateDraftRegulationByIdArgs, 'input'>
  >
  updateDraftRegulationCancel?: Resolver<
    ResolversTypes['DraftRegulationCancelModel'],
    ParentType,
    ContextType,
    RequireFields<MutationUpdateDraftRegulationCancelArgs, 'input'>
  >
  updateDraftRegulationChange?: Resolver<
    ResolversTypes['DraftRegulationChangeModel'],
    ParentType,
    ContextType,
    RequireFields<MutationUpdateDraftRegulationChangeArgs, 'input'>
  >
  updateEndpoint?: Resolver<
    ResolversTypes['AudienceAndScope'],
    ParentType,
    ContextType,
    RequireFields<MutationUpdateEndpointArgs, 'input'>
  >
  updateFormSystemApplicant?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType,
    RequireFields<MutationUpdateFormSystemApplicantArgs, 'input'>
  >
  updateFormSystemApplicationDependencies?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType,
    RequireFields<MutationUpdateFormSystemApplicationDependenciesArgs, 'input'>
  >
  updateFormSystemField?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType,
    RequireFields<MutationUpdateFormSystemFieldArgs, 'input'>
  >
  updateFormSystemFieldsDisplayOrder?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType,
    RequireFields<MutationUpdateFormSystemFieldsDisplayOrderArgs, 'input'>
  >
  updateFormSystemForm?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType,
    RequireFields<MutationUpdateFormSystemFormArgs, 'input'>
  >
  updateFormSystemListItem?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType,
    RequireFields<MutationUpdateFormSystemListItemArgs, 'input'>
  >
  updateFormSystemListItemsDisplayOrder?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType,
    RequireFields<MutationUpdateFormSystemListItemsDisplayOrderArgs, 'input'>
  >
  updateFormSystemScreen?: Resolver<
    Maybe<ResolversTypes['FormSystemScreen']>,
    ParentType,
    ContextType,
    RequireFields<MutationUpdateFormSystemScreenArgs, 'input'>
  >
  updateFormSystemScreensDisplayOrder?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType,
    RequireFields<MutationUpdateFormSystemScreensDisplayOrderArgs, 'input'>
  >
  updateFormSystemSection?: Resolver<
    Maybe<ResolversTypes['FormSystemSection']>,
    ParentType,
    ContextType,
    RequireFields<MutationUpdateFormSystemSectionArgs, 'input'>
  >
  updateFormSystemSectionsDisplayOrder?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType,
    RequireFields<MutationUpdateFormSystemSectionsDisplayOrderArgs, 'input'>
  >
  updateHelpdesk?: Resolver<
    ResolversTypes['Helpdesk'],
    ParentType,
    ContextType,
    RequireFields<
      MutationUpdateHelpdeskArgs,
      'helpdesk' | 'helpdeskId' | 'organisationId'
    >
  >
  updateIcelandicNameById?: Resolver<
    ResolversTypes['IcelandicName'],
    ParentType,
    ContextType,
    RequireFields<MutationUpdateIcelandicNameByIdArgs, 'input'>
  >
  updateMunicipalitiesFinancialAidApplication?: Resolver<
    Maybe<ResolversTypes['MunicipalitiesFinancialAidApplicationModel']>,
    ParentType,
    ContextType,
    RequireFields<
      MutationUpdateMunicipalitiesFinancialAidApplicationArgs,
      'input'
    >
  >
  updateOrganisation?: Resolver<
    ResolversTypes['Organisation'],
    ParentType,
    ContextType,
    RequireFields<MutationUpdateOrganisationArgs, 'id' | 'input'>
  >
  updateProfile?: Resolver<
    Maybe<ResolversTypes['UserProfile']>,
    ParentType,
    ContextType,
    RequireFields<MutationUpdateProfileArgs, 'input'>
  >
  updateTechnicalContact?: Resolver<
    ResolversTypes['Contact'],
    ParentType,
    ContextType,
    RequireFields<
      MutationUpdateTechnicalContactArgs,
      'contact' | 'organisationId' | 'technicalContactId'
    >
  >
  updateTestEndpoint?: Resolver<
    ResolversTypes['AudienceAndScope'],
    ParentType,
    ContextType,
    RequireFields<MutationUpdateTestEndpointArgs, 'input'>
  >
  userProfileConfirmNudge?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType
  >
  userProfileUpdateActorProfile?: Resolver<
    ResolversTypes['UserProfileActorProfile'],
    ParentType,
    ContextType,
    RequireFields<MutationUserProfileUpdateActorProfileArgs, 'input'>
  >
  vehicleBulkMileagePost?: Resolver<
    Maybe<ResolversTypes['VehiclesBulkMileageReadingResponse']>,
    ParentType,
    ContextType,
    RequireFields<MutationVehicleBulkMileagePostArgs, 'input'>
  >
  vehicleMileagePost?: Resolver<
    Maybe<ResolversTypes['VehicleMileageDetail']>,
    ParentType,
    ContextType,
    RequireFields<MutationVehicleMileagePostArgs, 'input'>
  >
  vehicleMileagePostV2?: Resolver<
    Maybe<ResolversTypes['VehicleMileagePostResponse']>,
    ParentType,
    ContextType,
    RequireFields<MutationVehicleMileagePostV2Args, 'input'>
  >
  vehicleMileagePut?: Resolver<
    Maybe<ResolversTypes['VehicleMileagePutModel']>,
    ParentType,
    ContextType,
    RequireFields<MutationVehicleMileagePutArgs, 'input'>
  >
  vehicleMileagePutV2?: Resolver<
    Maybe<ResolversTypes['VehicleMileagePutResponse']>,
    ParentType,
    ContextType,
    RequireFields<MutationVehicleMileagePutV2Args, 'input'>
  >
  verifyLicenseBarcode?: Resolver<
    ResolversTypes['VerifyLicenseBarcodeResult'],
    ParentType,
    ContextType,
    RequireFields<MutationVerifyLicenseBarcodeArgs, 'input'>
  >
  verifyPkPass?: Resolver<
    ResolversTypes['GenericPkPassVerification'],
    ParentType,
    ContextType,
    RequireFields<MutationVerifyPkPassArgs, 'input'>
  >
  watsonAssistantChatSubmitFeedback?: Resolver<
    ResolversTypes['WatsonAssistantChatSubmitFeedbackResponse'],
    ParentType,
    ContextType,
    RequireFields<MutationWatsonAssistantChatSubmitFeedbackArgs, 'input'>
  >
}

export type MyPlateOwnershipChecksByRegnoResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['MyPlateOwnershipChecksByRegno'] = ResolversParentTypes['MyPlateOwnershipChecksByRegno']
> = {
  validationErrorMessages?: Resolver<
    Maybe<Array<ResolversTypes['VehicleValidationErrorMessage']>>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type NamespaceResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Namespace'] = ResolversParentTypes['Namespace']
> = {
  fields?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  namespace?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type NationalRegistryAddressResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['NationalRegistryAddress'] = ResolversParentTypes['NationalRegistryAddress']
> = {
  apartment?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  city?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  code?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>
  lastUpdated?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  municipalityText?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  postalCode?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  streetAddress?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type NationalRegistryBanMarkingResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['NationalRegistryBanMarking'] = ResolversParentTypes['NationalRegistryBanMarking']
> = {
  banMarked?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  startDate?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type NationalRegistryBirthplaceResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['NationalRegistryBirthplace'] = ResolversParentTypes['NationalRegistryBirthplace']
> = {
  dateOfBirth?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  location?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  municipalityCode?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  municipalityText?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type NationalRegistryChildResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['NationalRegistryChild'] = ResolversParentTypes['NationalRegistryChild']
> = {
  birthday?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  birthplace?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  custody1?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  custody2?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  custodyText1?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  custodyText2?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  displayName?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  fate?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  firstName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  fullName?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  gender?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  genderDisplay?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  homeAddress?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  lastName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  legalResidence?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  middleName?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  municipality?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  nameCustody1?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  nameCustody2?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  nameParent1?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  nameParent2?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  nationalId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  nationality?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  parent1?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  parent2?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  postal?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  religion?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  surname?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type NationalRegistryChildCustodyResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['NationalRegistryChildCustody'] = ResolversParentTypes['NationalRegistryChildCustody']
> = {
  details?: Resolver<
    Maybe<ResolversTypes['NationalRegistryPerson']>,
    ParentType,
    ContextType
  >
  fullName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  nationalId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type NationalRegistryCitizenshipResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['NationalRegistryCitizenship'] = ResolversParentTypes['NationalRegistryCitizenship']
> = {
  code?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type NationalRegistryCustodianResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['NationalRegistryCustodian'] = ResolversParentTypes['NationalRegistryCustodian']
> = {
  code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  fate?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  fullName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  livesWithChild?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  nationalId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  text?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type NationalRegistryHousingResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['NationalRegistryHousing'] = ResolversParentTypes['NationalRegistryHousing']
> = {
  address?: Resolver<
    Maybe<ResolversTypes['NationalRegistryAddress']>,
    ParentType,
    ContextType
  >
  domicileId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  domicileIdLast1stOfDecember?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  domicileIdPreviousIcelandResidence?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  domicileInhabitants?: Resolver<
    Maybe<Array<ResolversTypes['NationalRegistryPersonBase']>>,
    ParentType,
    ContextType
  >
  residence?: Resolver<
    Maybe<ResolversTypes['NationalRegistryAddress']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type NationalRegistryNameResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['NationalRegistryName'] = ResolversParentTypes['NationalRegistryName']
> = {
  displayName?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  firstName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  fullName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  lastName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  middleName?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type NationalRegistryPersonResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['NationalRegistryPerson'] = ResolversParentTypes['NationalRegistryPerson']
> = {
  address?: Resolver<
    Maybe<ResolversTypes['NationalRegistryAddress']>,
    ParentType,
    ContextType
  >
  age?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  banMarking?: Resolver<
    Maybe<ResolversTypes['NationalRegistryBanMarking']>,
    ParentType,
    ContextType
  >
  baseId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  biologicalChildren?: Resolver<
    Maybe<Array<ResolversTypes['NationalRegistryChildCustody']>>,
    ParentType,
    ContextType,
    Partial<NationalRegistryPersonBiologicalChildrenArgs>
  >
  birthParents?: Resolver<
    Maybe<Array<ResolversTypes['NationalRegistryPersonBase']>>,
    ParentType,
    ContextType
  >
  birthPlace?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  birthday?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  birthplace?: Resolver<
    Maybe<ResolversTypes['NationalRegistryBirthplace']>,
    ParentType,
    ContextType
  >
  childCustody?: Resolver<
    Maybe<Array<ResolversTypes['NationalRegistryChildCustody']>>,
    ParentType,
    ContextType,
    Partial<NationalRegistryPersonChildCustodyArgs>
  >
  citizenship?: Resolver<
    Maybe<ResolversTypes['NationalRegistryCitizenship']>,
    ParentType,
    ContextType
  >
  custodians?: Resolver<
    Maybe<Array<ResolversTypes['NationalRegistryCustodian']>>,
    ParentType,
    ContextType
  >
  exceptionFromDirectMarketing?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  familyNr?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  fate?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  firstName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  fullName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  gender?: Resolver<
    Maybe<ResolversTypes['NationalRegistryGender']>,
    ParentType,
    ContextType
  >
  housing?: Resolver<
    Maybe<ResolversTypes['NationalRegistryHousing']>,
    ParentType,
    ContextType
  >
  lastName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  legalResidence?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  maritalStatus?: Resolver<
    Maybe<ResolversTypes['NationalRegistryMaritalStatus']>,
    ParentType,
    ContextType
  >
  middleName?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  name?: Resolver<
    Maybe<ResolversTypes['NationalRegistryName']>,
    ParentType,
    ContextType
  >
  nationalId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  nationalIdType?: Resolver<
    Maybe<ResolversTypes['NationalRegistryNationalIdType']>,
    ParentType,
    ContextType
  >
  religion?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  spouse?: Resolver<
    Maybe<ResolversTypes['NationalRegistrySpouse']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type NationalRegistryPersonBaseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['NationalRegistryPersonBase'] = ResolversParentTypes['NationalRegistryPersonBase']
> = {
  fate?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  fullName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  nationalId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type NationalRegistryReligionResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['NationalRegistryReligion'] = ResolversParentTypes['NationalRegistryReligion']
> = {
  code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type NationalRegistryResidenceResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['NationalRegistryResidence'] = ResolversParentTypes['NationalRegistryResidence']
> = {
  address?: Resolver<
    ResolversTypes['NationalRegistryXRoadAddress'],
    ParentType,
    ContextType
  >
  country?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  dateOfChange?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  houseIdentificationCode?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  realEstateNumber?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type NationalRegistrySpouseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['NationalRegistrySpouse'] = ResolversParentTypes['NationalRegistrySpouse']
> = {
  cohabitant?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  cohabitationWithSpouse?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  fate?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  fullName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  maritalStatus?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  nationalId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type NationalRegistryUserResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['NationalRegistryUser'] = ResolversParentTypes['NationalRegistryUser']
> = {
  address?: Resolver<
    Maybe<ResolversTypes['NationalRegistryAddress']>,
    ParentType,
    ContextType
  >
  age?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  banMarking?: Resolver<
    Maybe<ResolversTypes['NationalRegistryBanMarking']>,
    ParentType,
    ContextType
  >
  birthPlace?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  birthday?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>
  citizenship?: Resolver<
    Maybe<ResolversTypes['NationalRegistryCitizenship']>,
    ParentType,
    ContextType
  >
  familyNr?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  firstName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  fullName?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  gender?: Resolver<
    Maybe<ResolversTypes['NationalRegistryGender']>,
    ParentType,
    ContextType
  >
  lastName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  legalResidence?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  maritalStatus?: Resolver<
    Maybe<ResolversTypes['NationalRegistryMaritalStatus']>,
    ParentType,
    ContextType
  >
  middleName?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  nationalId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  religion?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  spouse?: Resolver<
    Maybe<ResolversTypes['NationalRegistrySpouse']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type NationalRegistryXRoadAddressResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['NationalRegistryXRoadAddress'] = ResolversParentTypes['NationalRegistryXRoadAddress']
> = {
  city?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  municipalityCode?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  postalCode?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  streetName?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type NationalRegistryXRoadBirthplaceResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['NationalRegistryXRoadBirthplace'] = ResolversParentTypes['NationalRegistryXRoadBirthplace']
> = {
  dateOfBirth?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>
  location?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  municipalityCode?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type NationalRegistryXRoadChildGuardianshipResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['NationalRegistryXRoadChildGuardianship'] = ResolversParentTypes['NationalRegistryXRoadChildGuardianship']
> = {
  childNationalId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  legalDomicileParent?: Resolver<
    Maybe<Array<ResolversTypes['String']>>,
    ParentType,
    ContextType
  >
  residenceParent?: Resolver<
    Maybe<Array<ResolversTypes['String']>>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type NationalRegistryXRoadCitizenshipResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['NationalRegistryXRoadCitizenship'] = ResolversParentTypes['NationalRegistryXRoadCitizenship']
> = {
  code?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type NationalRegistryXRoadPersonResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['NationalRegistryXRoadPerson'] = ResolversParentTypes['NationalRegistryXRoadPerson']
> = {
  address?: Resolver<
    Maybe<ResolversTypes['NationalRegistryXRoadAddress']>,
    ParentType,
    ContextType
  >
  birthplace?: Resolver<
    Maybe<ResolversTypes['NationalRegistryXRoadBirthplace']>,
    ParentType,
    ContextType
  >
  children?: Resolver<
    Maybe<Array<ResolversTypes['NationalRegistryXRoadPerson']>>,
    ParentType,
    ContextType
  >
  citizenship?: Resolver<
    Maybe<ResolversTypes['NationalRegistryXRoadCitizenship']>,
    ParentType,
    ContextType
  >
  fullName?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  genderCode?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  livesWithApplicant?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  livesWithBothParents?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  nationalId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  otherParent?: Resolver<
    Maybe<ResolversTypes['NationalRegistryXRoadPerson']>,
    ParentType,
    ContextType
  >
  residenceHistory?: Resolver<
    Maybe<Array<ResolversTypes['NationalRegistryResidence']>>,
    ParentType,
    ContextType
  >
  spouse?: Resolver<
    Maybe<ResolversTypes['NationalRegistryXRoadSpouse']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type NationalRegistryXRoadSpouseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['NationalRegistryXRoadSpouse'] = ResolversParentTypes['NationalRegistryXRoadSpouse']
> = {
  maritalStatus?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  nationalId?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type NewsResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['News'] = ResolversParentTypes['News']
> = {
  content?: Resolver<
    Maybe<Array<ResolversTypes['Slice']>>,
    ParentType,
    ContextType
  >
  date?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  featuredImage?: Resolver<
    Maybe<ResolversTypes['Image']>,
    ParentType,
    ContextType
  >
  fullWidthImageInContent?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  genericTags?: Resolver<
    Array<ResolversTypes['GenericTag']>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  image?: Resolver<Maybe<ResolversTypes['Image']>, ParentType, ContextType>
  initialPublishDate?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  intro?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  organization?: Resolver<
    Maybe<ResolversTypes['Organization']>,
    ParentType,
    ContextType
  >
  signLanguageVideo?: Resolver<
    Maybe<ResolversTypes['EmbeddedVideo']>,
    ParentType,
    ContextType
  >
  slug?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  subtitle?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type NewsListResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['NewsList'] = ResolversParentTypes['NewsList']
> = {
  items?: Resolver<Array<ResolversTypes['News']>, ParentType, ContextType>
  total?: Resolver<ResolversTypes['Int'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type NextInspectionResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['NextInspection'] = ResolversParentTypes['NextInspection']
> = {
  nextInspectionDate?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  nextInspectionDateIfPassedInspectionToday?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type NotificationResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Notification'] = ResolversParentTypes['Notification']
> = {
  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>
  message?: Resolver<
    ResolversTypes['NotificationMessage'],
    ParentType,
    ContextType
  >
  metadata?: Resolver<
    ResolversTypes['NotificationMetadata'],
    ParentType,
    ContextType
  >
  notificationId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  recipient?: Resolver<
    ResolversTypes['NotificationRecipient'],
    ParentType,
    ContextType
  >
  sender?: Resolver<
    ResolversTypes['NotificationSender'],
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type NotificationLinkResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['NotificationLink'] = ResolversParentTypes['NotificationLink']
> = {
  url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type NotificationMessageResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['NotificationMessage'] = ResolversParentTypes['NotificationMessage']
> = {
  body?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  dataCopy?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  displayBody?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  link?: Resolver<ResolversTypes['NotificationLink'], ParentType, ContextType>
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type NotificationMetadataResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['NotificationMetadata'] = ResolversParentTypes['NotificationMetadata']
> = {
  created?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>
  read?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>
  seen?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>
  sent?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>
  updated?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type NotificationRecipientResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['NotificationRecipient'] = ResolversParentTypes['NotificationRecipient']
> = {
  nationalId?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type NotificationResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['NotificationResponse'] = ResolversParentTypes['NotificationResponse']
> = {
  data?: Resolver<ResolversTypes['Notification'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type NotificationSenderResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['NotificationSender'] = ResolversParentTypes['NotificationSender']
> = {
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  logoUrl?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type NotificationsResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Notifications'] = ResolversParentTypes['Notifications']
> = {
  data?: Resolver<
    Array<ResolversTypes['Notification']>,
    ParentType,
    ContextType
  >
  pageInfo?: Resolver<ResolversTypes['PageInfoDto'], ParentType, ContextType>
  totalCount?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  unreadCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>
  unseenCount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type NotificationsMarkAllAsReadResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['NotificationsMarkAllAsReadResponse'] = ResolversParentTypes['NotificationsMarkAllAsReadResponse']
> = {
  success?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type NotificationsMarkAllAsSeenResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['NotificationsMarkAllAsSeenResponse'] = ResolversParentTypes['NotificationsMarkAllAsSeenResponse']
> = {
  success?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type NumberBulletResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['NumberBullet'] = ResolversParentTypes['NumberBullet']
> = {
  body?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type NumberBulletGroupResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['NumberBulletGroup'] = ResolversParentTypes['NumberBulletGroup']
> = {
  bullets?: Resolver<
    Array<ResolversTypes['NumberBullet']>,
    ParentType,
    ContextType
  >
  defaultVisible?: Resolver<ResolversTypes['Int'], ParentType, ContextType>
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type OjoiaApplicationCaseResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['OJOIAApplicationCaseResponse'] = ResolversParentTypes['OJOIAApplicationCaseResponse']
> = {
  categories?: Resolver<
    Array<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  communicationStatus?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >
  department?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  html?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  status?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  type?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type OjoiaCommentResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['OJOIAComment'] = ResolversParentTypes['OJOIAComment']
> = {
  action?: Resolver<
    ResolversTypes['OJOICommentActionEnum'],
    ParentType,
    ContextType
  >
  age?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  comment?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  creator?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  direction?: Resolver<
    ResolversTypes['OJOICommentDirection'],
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  receiver?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type OjoiaGetCommentsResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['OJOIAGetCommentsResponse'] = ResolversParentTypes['OJOIAGetCommentsResponse']
> = {
  comments?: Resolver<
    Array<ResolversTypes['OJOIAComment']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type OjoiaGetPdfResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['OJOIAGetPdfResponse'] = ResolversParentTypes['OJOIAGetPdfResponse']
> = {
  pdf?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type OccupationalLicenseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['OccupationalLicense'] = ResolversParentTypes['OccupationalLicense']
> = {
  dateOfBirth?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  genericFields?: Resolver<
    Maybe<Array<ResolversTypes['OccupationalLicensesGenericField']>>,
    ParentType,
    ContextType
  >
  issuer?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  issuerTitle?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  legalEntityId?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  licenseHolderName?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  licenseHolderNationalId?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  licenseId?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  licenseNumber?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  permit?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  profession?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  status?: Resolver<
    ResolversTypes['OccupationalLicenseStatus'],
    ParentType,
    ContextType
  >
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  type?: Resolver<
    ResolversTypes['occupationalLicenseLicenseType'],
    ParentType,
    ContextType
  >
  validFrom?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type OccupationalLicensesErrorResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['OccupationalLicensesError'] = ResolversParentTypes['OccupationalLicensesError']
> = {
  error?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  type?: Resolver<
    ResolversTypes['occupationalLicenseLicenseType'],
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type OccupationalLicensesGenericFieldResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['OccupationalLicensesGenericField'] = ResolversParentTypes['OccupationalLicensesGenericField']
> = {
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  value?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type OccupationalLicensesLicenseResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['OccupationalLicensesLicenseResponse'] = ResolversParentTypes['OccupationalLicensesLicenseResponse']
> = {
  actions?: Resolver<
    Maybe<Array<ResolversTypes['OccupationalLicensesLink']>>,
    ParentType,
    ContextType
  >
  footerText?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  headerText?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  license?: Resolver<
    ResolversTypes['OccupationalLicense'],
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type OccupationalLicensesLicenseResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['OccupationalLicensesLicenseResult'] = ResolversParentTypes['OccupationalLicensesLicenseResult']
> = {
  __resolveType: TypeResolveFn<
    'OccupationalLicense' | 'OccupationalLicensesError',
    ParentType,
    ContextType
  >
}

export type OccupationalLicensesLicensesResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['OccupationalLicensesLicenses'] = ResolversParentTypes['OccupationalLicensesLicenses']
> = {
  licenses?: Resolver<
    Array<ResolversTypes['OccupationalLicensesLicenseResult']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type OccupationalLicensesLinkResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['OccupationalLicensesLink'] = ResolversParentTypes['OccupationalLicensesLink']
> = {
  text?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  type?: Resolver<
    ResolversTypes['OccupationalLicensesLinkType'],
    ParentType,
    ContextType
  >
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type OfficialJournalOfIcelandAdvertResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['OfficialJournalOfIcelandAdvert'] = ResolversParentTypes['OfficialJournalOfIcelandAdvert']
> = {
  categories?: Resolver<
    Array<ResolversTypes['OfficialJournalOfIcelandAdvertEntity']>,
    ParentType,
    ContextType
  >
  corrections?: Resolver<
    Maybe<Array<ResolversTypes['OfficialJournalOfIcelandAdvertCorrections']>>,
    ParentType,
    ContextType
  >
  createdDate?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  department?: Resolver<
    ResolversTypes['OfficialJournalOfIcelandAdvertEntity'],
    ParentType,
    ContextType
  >
  document?: Resolver<
    ResolversTypes['OfficialJournalOfIcelandAdvertDocument'],
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  involvedParty?: Resolver<
    ResolversTypes['OfficialJournalOfIcelandAdvertEntity'],
    ParentType,
    ContextType
  >
  publicationDate?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  publicationNumber?: Resolver<
    ResolversTypes['OfficialJournalOfIcelandAdvertPublicationNumber'],
    ParentType,
    ContextType
  >
  signatureDate?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  status?: Resolver<
    ResolversTypes['OfficialJournalOfIcelandAdvertStatus'],
    ParentType,
    ContextType
  >
  subject?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  type?: Resolver<
    ResolversTypes['OfficialJournalOfIcelandAdvertType'],
    ParentType,
    ContextType
  >
  updatedDate?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type OfficialJournalOfIcelandAdvertCategoryResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['OfficialJournalOfIcelandAdvertCategory'] = ResolversParentTypes['OfficialJournalOfIcelandAdvertCategory']
> = {
  department?: Resolver<
    Maybe<ResolversTypes['OfficialJournalOfIcelandAdvertEntity']>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  mainCategory?: Resolver<
    Maybe<ResolversTypes['OfficialJournalOfIcelandAdvertMainCategory']>,
    ParentType,
    ContextType
  >
  slug?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type OfficialJournalOfIcelandAdvertCorrectionsResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['OfficialJournalOfIcelandAdvertCorrections'] = ResolversParentTypes['OfficialJournalOfIcelandAdvertCorrections']
> = {
  advertId?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  createdDate?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  description?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  documentPdfUrl?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  isLegacy?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>
  legacyDate?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  updatedDate?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type OfficialJournalOfIcelandAdvertDocumentResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['OfficialJournalOfIcelandAdvertDocument'] = ResolversParentTypes['OfficialJournalOfIcelandAdvertDocument']
> = {
  html?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  isLegacy?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  pdfUrl?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type OfficialJournalOfIcelandAdvertEntityResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['OfficialJournalOfIcelandAdvertEntity'] = ResolversParentTypes['OfficialJournalOfIcelandAdvertEntity']
> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  slug?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type OfficialJournalOfIcelandAdvertMainCategoryResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['OfficialJournalOfIcelandAdvertMainCategory'] = ResolversParentTypes['OfficialJournalOfIcelandAdvertMainCategory']
> = {
  categories?: Resolver<
    Array<ResolversTypes['OfficialJournalOfIcelandAdvertCategory']>,
    ParentType,
    ContextType
  >
  departmentId?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  description?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  slug?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type OfficialJournalOfIcelandAdvertPublicationNumberResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['OfficialJournalOfIcelandAdvertPublicationNumber'] = ResolversParentTypes['OfficialJournalOfIcelandAdvertPublicationNumber']
> = {
  full?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  number?: Resolver<ResolversTypes['Int'], ParentType, ContextType>
  year?: Resolver<ResolversTypes['Int'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type OfficialJournalOfIcelandAdvertResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['OfficialJournalOfIcelandAdvertResponse'] = ResolversParentTypes['OfficialJournalOfIcelandAdvertResponse']
> = {
  advert?: Resolver<
    ResolversTypes['OfficialJournalOfIcelandAdvert'],
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type OfficialJournalOfIcelandAdvertSimilarResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['OfficialJournalOfIcelandAdvertSimilar'] = ResolversParentTypes['OfficialJournalOfIcelandAdvertSimilar']
> = {
  categories?: Resolver<
    Array<ResolversTypes['OfficialJournalOfIcelandAdvertEntity']>,
    ParentType,
    ContextType
  >
  department?: Resolver<
    ResolversTypes['OfficialJournalOfIcelandAdvertEntity'],
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  involvedParty?: Resolver<
    ResolversTypes['OfficialJournalOfIcelandAdvertEntity'],
    ParentType,
    ContextType
  >
  publicationDate?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  publicationNumber?: Resolver<
    ResolversTypes['OfficialJournalOfIcelandAdvertPublicationNumber'],
    ParentType,
    ContextType
  >
  subject?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type OfficialJournalOfIcelandAdvertSimilarResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['OfficialJournalOfIcelandAdvertSimilarResponse'] = ResolversParentTypes['OfficialJournalOfIcelandAdvertSimilarResponse']
> = {
  adverts?: Resolver<
    Array<ResolversTypes['OfficialJournalOfIcelandAdvertSimilar']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type OfficialJournalOfIcelandAdvertTypeResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['OfficialJournalOfIcelandAdvertType'] = ResolversParentTypes['OfficialJournalOfIcelandAdvertType']
> = {
  department?: Resolver<
    Maybe<ResolversTypes['OfficialJournalOfIcelandAdvertEntity']>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  slug?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type OfficialJournalOfIcelandAdvertsCategoryResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['OfficialJournalOfIcelandAdvertsCategoryResponse'] = ResolversParentTypes['OfficialJournalOfIcelandAdvertsCategoryResponse']
> = {
  categories?: Resolver<
    Array<ResolversTypes['OfficialJournalOfIcelandAdvertCategory']>,
    ParentType,
    ContextType
  >
  paging?: Resolver<
    ResolversTypes['OfficialJournalOfIcelandPaging'],
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type OfficialJournalOfIcelandAdvertsDepartmentResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['OfficialJournalOfIcelandAdvertsDepartmentResponse'] = ResolversParentTypes['OfficialJournalOfIcelandAdvertsDepartmentResponse']
> = {
  department?: Resolver<
    ResolversTypes['OfficialJournalOfIcelandAdvertEntity'],
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type OfficialJournalOfIcelandAdvertsDepartmentsResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['OfficialJournalOfIcelandAdvertsDepartmentsResponse'] = ResolversParentTypes['OfficialJournalOfIcelandAdvertsDepartmentsResponse']
> = {
  departments?: Resolver<
    Array<ResolversTypes['OfficialJournalOfIcelandAdvertEntity']>,
    ParentType,
    ContextType
  >
  paging?: Resolver<
    ResolversTypes['OfficialJournalOfIcelandPaging'],
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type OfficialJournalOfIcelandAdvertsInstitutionsResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['OfficialJournalOfIcelandAdvertsInstitutionsResponse'] = ResolversParentTypes['OfficialJournalOfIcelandAdvertsInstitutionsResponse']
> = {
  institutions?: Resolver<
    Array<ResolversTypes['OfficialJournalOfIcelandAdvertEntity']>,
    ParentType,
    ContextType
  >
  paging?: Resolver<
    ResolversTypes['OfficialJournalOfIcelandPaging'],
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type OfficialJournalOfIcelandAdvertsMainCategoriesResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['OfficialJournalOfIcelandAdvertsMainCategoriesResponse'] = ResolversParentTypes['OfficialJournalOfIcelandAdvertsMainCategoriesResponse']
> = {
  mainCategories?: Resolver<
    Array<ResolversTypes['OfficialJournalOfIcelandAdvertMainCategory']>,
    ParentType,
    ContextType
  >
  paging?: Resolver<
    ResolversTypes['OfficialJournalOfIcelandPaging'],
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type OfficialJournalOfIcelandAdvertsMainTypeResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['OfficialJournalOfIcelandAdvertsMainType'] = ResolversParentTypes['OfficialJournalOfIcelandAdvertsMainType']
> = {
  department?: Resolver<
    ResolversTypes['OfficialJournalOfIcelandAdvertEntity'],
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  slug?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  types?: Resolver<
    Array<ResolversTypes['OfficialJournalOfIcelandAdvertType']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type OfficialJournalOfIcelandAdvertsResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['OfficialJournalOfIcelandAdvertsResponse'] = ResolversParentTypes['OfficialJournalOfIcelandAdvertsResponse']
> = {
  adverts?: Resolver<
    Array<ResolversTypes['OfficialJournalOfIcelandAdvert']>,
    ParentType,
    ContextType
  >
  paging?: Resolver<
    ResolversTypes['OfficialJournalOfIcelandPaging'],
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type OfficialJournalOfIcelandAdvertsTypeResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['OfficialJournalOfIcelandAdvertsTypeResponse'] = ResolversParentTypes['OfficialJournalOfIcelandAdvertsTypeResponse']
> = {
  type?: Resolver<
    ResolversTypes['OfficialJournalOfIcelandAdvertType'],
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type OfficialJournalOfIcelandAdvertsTypesResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['OfficialJournalOfIcelandAdvertsTypesResponse'] = ResolversParentTypes['OfficialJournalOfIcelandAdvertsTypesResponse']
> = {
  paging?: Resolver<
    ResolversTypes['OfficialJournalOfIcelandPaging'],
    ParentType,
    ContextType
  >
  types?: Resolver<
    Array<ResolversTypes['OfficialJournalOfIcelandAdvertType']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type OfficialJournalOfIcelandApplicationAddApplicationAttachmentResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['OfficialJournalOfIcelandApplicationAddApplicationAttachmentResponse'] = ResolversParentTypes['OfficialJournalOfIcelandApplicationAddApplicationAttachmentResponse']
> = {
  success?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type OfficialJournalOfIcelandApplicationGetApplicationAttachmentResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['OfficialJournalOfIcelandApplicationGetApplicationAttachmentResponse'] = ResolversParentTypes['OfficialJournalOfIcelandApplicationGetApplicationAttachmentResponse']
> = {
  fileExtension?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  fileFormat?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  fileLocation?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  fileName?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  fileSize?: Resolver<ResolversTypes['Int'], ParentType, ContextType>
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  originalFileName?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type OfficialJournalOfIcelandApplicationGetApplicationAttachmentsResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['OfficialJournalOfIcelandApplicationGetApplicationAttachments'] = ResolversParentTypes['OfficialJournalOfIcelandApplicationGetApplicationAttachments']
> = {
  attachments?: Resolver<
    Array<
      ResolversTypes['OfficialJournalOfIcelandApplicationGetApplicationAttachmentResponse']
    >,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type OfficialJournalOfIcelandApplicationGetMyUserInfoResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['OfficialJournalOfIcelandApplicationGetMyUserInfoResponse'] = ResolversParentTypes['OfficialJournalOfIcelandApplicationGetMyUserInfoResponse']
> = {
  email?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  firstName?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  lastName?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type OfficialJournalOfIcelandApplicationGetPdfUrlResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['OfficialJournalOfIcelandApplicationGetPdfUrlResponse'] = ResolversParentTypes['OfficialJournalOfIcelandApplicationGetPdfUrlResponse']
> = {
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type OfficialJournalOfIcelandApplicationGetPresignedUrlResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['OfficialJournalOfIcelandApplicationGetPresignedUrlResponse'] = ResolversParentTypes['OfficialJournalOfIcelandApplicationGetPresignedUrlResponse']
> = {
  cdn?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  key?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type OfficialJournalOfIcelandApplicationGetPriceResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['OfficialJournalOfIcelandApplicationGetPriceResponse'] = ResolversParentTypes['OfficialJournalOfIcelandApplicationGetPriceResponse']
> = {
  price?: Resolver<ResolversTypes['Int'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type OfficialJournalOfIcelandApplicationGetUserInvolvedPartiesResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['OfficialJournalOfIcelandApplicationGetUserInvolvedPartiesResponse'] = ResolversParentTypes['OfficialJournalOfIcelandApplicationGetUserInvolvedPartiesResponse']
> = {
  involvedParties?: Resolver<
    Array<
      ResolversTypes['OfficialJournalOfIcelandApplicationGetUserInvolvedParty']
    >,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type OfficialJournalOfIcelandApplicationGetUserInvolvedPartyResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['OfficialJournalOfIcelandApplicationGetUserInvolvedParty'] = ResolversParentTypes['OfficialJournalOfIcelandApplicationGetUserInvolvedParty']
> = {
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  slug?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type OfficialJournalOfIcelandApplicationInvolvedPartySignatureResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['OfficialJournalOfIcelandApplicationInvolvedPartySignature'] = ResolversParentTypes['OfficialJournalOfIcelandApplicationInvolvedPartySignature']
> = {
  additionalSignature?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  chairman?: Resolver<
    Maybe<ResolversTypes['OfficialJournalOfIcelandApplicationSignatureMember']>,
    ParentType,
    ContextType
  >
  institution?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  members?: Resolver<
    Array<ResolversTypes['OfficialJournalOfIcelandApplicationSignatureMember']>,
    ParentType,
    ContextType
  >
  signatureDate?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type OfficialJournalOfIcelandApplicationInvolvedPartySignatureResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['OfficialJournalOfIcelandApplicationInvolvedPartySignatureResponse'] = ResolversParentTypes['OfficialJournalOfIcelandApplicationInvolvedPartySignatureResponse']
> = {
  records?: Resolver<
    Array<
      ResolversTypes['OfficialJournalOfIcelandApplicationInvolvedPartySignature']
    >,
    ParentType,
    ContextType
  >
  type?: Resolver<
    ResolversTypes['OfficialJournalOfIcelandApplicationSignatureType'],
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type OfficialJournalOfIcelandApplicationPostCommentResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['OfficialJournalOfIcelandApplicationPostCommentResponse'] = ResolversParentTypes['OfficialJournalOfIcelandApplicationPostCommentResponse']
> = {
  success?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type OfficialJournalOfIcelandApplicationSignatureMemberResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['OfficialJournalOfIcelandApplicationSignatureMember'] = ResolversParentTypes['OfficialJournalOfIcelandApplicationSignatureMember']
> = {
  above?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  after?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  before?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  below?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type OfficialJournalOfIcelandCaseInProgressResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['OfficialJournalOfIcelandCaseInProgress'] = ResolversParentTypes['OfficialJournalOfIcelandCaseInProgress']
> = {
  createdAt?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  fastTrack?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  involvedParty?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  requestedPublicationDate?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >
  status?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type OfficialJournalOfIcelandCasesInProgressResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['OfficialJournalOfIcelandCasesInProgressResponse'] = ResolversParentTypes['OfficialJournalOfIcelandCasesInProgressResponse']
> = {
  cases?: Resolver<
    Array<ResolversTypes['OfficialJournalOfIcelandCaseInProgress']>,
    ParentType,
    ContextType
  >
  paging?: Resolver<
    ResolversTypes['OfficialJournalOfIcelandPaging'],
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type OfficialJournalOfIcelandMainTypesResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['OfficialJournalOfIcelandMainTypesResponse'] = ResolversParentTypes['OfficialJournalOfIcelandMainTypesResponse']
> = {
  mainTypes?: Resolver<
    Array<ResolversTypes['OfficialJournalOfIcelandAdvertsMainType']>,
    ParentType,
    ContextType
  >
  paging?: Resolver<
    ResolversTypes['OfficialJournalOfIcelandPaging'],
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type OfficialJournalOfIcelandPagingResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['OfficialJournalOfIcelandPaging'] = ResolversParentTypes['OfficialJournalOfIcelandPaging']
> = {
  hasNextPage?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  hasPreviousPage?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  nextPage?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  page?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  pageSize?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  previousPage?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  totalItems?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  totalPages?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type OneColumnTextResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['OneColumnText'] = ResolversParentTypes['OneColumnText']
> = {
  content?: Resolver<
    Maybe<Array<ResolversTypes['Slice']>>,
    ParentType,
    ContextType
  >
  dividerOnTop?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  link?: Resolver<Maybe<ResolversTypes['Link']>, ParentType, ContextType>
  showTitle?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type OpenApiResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['OpenApi'] = ResolversParentTypes['OpenApi']
> = {
  spec?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type OpenDataPageResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['OpenDataPage'] = ResolversParentTypes['OpenDataPage']
> = {
  chartSectionTitle?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >
  externalLinkCardSelection?: Resolver<
    ResolversTypes['LinkCardSection'],
    ParentType,
    ContextType
  >
  externalLinkSectionDescription?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >
  externalLinkSectionImage?: Resolver<
    Maybe<ResolversTypes['Image']>,
    ParentType,
    ContextType
  >
  externalLinkSectionTitle?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >
  graphCards?: Resolver<
    Array<ResolversTypes['GraphCard']>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  link?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  linkTitle?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  pageDescription?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  pageHeaderGraph?: Resolver<
    ResolversTypes['GraphCard'],
    ParentType,
    ContextType
  >
  pageTitle?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  statisticsCardsSection?: Resolver<
    Array<ResolversTypes['StatisticsCard']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type OpenDataSubpageResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['OpenDataSubpage'] = ResolversParentTypes['OpenDataSubpage']
> = {
  fundDescription?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  fundTitle?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  graphCards?: Resolver<
    Array<ResolversTypes['GraphCard']>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  organizationLogo?: Resolver<
    Maybe<ResolversTypes['Image']>,
    ParentType,
    ContextType
  >
  pageTitle?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  statisticsCards?: Resolver<
    Array<ResolversTypes['StatisticsCard']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type OperatingLicenseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['OperatingLicense'] = ResolversParentTypes['OperatingLicense']
> = {
  alcoholWeekdayLicense?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  alcoholWeekdayOutdoorLicense?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  alcoholWeekendLicense?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  alcoholWeekendOutdoorLicense?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  category?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  id?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  issuedBy?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  licenseHolder?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  licenseNumber?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  licenseResponsible?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  location?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  maximumNumberOfGuests?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  numberOfDiningGuests?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  outdoorLicense?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  postalCode?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  restaurantType?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  street?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  type2?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  validFrom?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  validTo?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type OperatingLicensesCsvResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['OperatingLicensesCSV'] = ResolversParentTypes['OperatingLicensesCSV']
> = {
  value?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type OperatorChangeValidationResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['OperatorChangeValidation'] = ResolversParentTypes['OperatorChangeValidation']
> = {
  errorMessages?: Resolver<
    Maybe<Array<ResolversTypes['OperatorChangeValidationMessage']>>,
    ParentType,
    ContextType
  >
  hasError?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type OperatorChangeValidationMessageResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['OperatorChangeValidationMessage'] = ResolversParentTypes['OperatorChangeValidationMessage']
> = {
  defaultMessage?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  errorNo?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type OrganisationResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Organisation'] = ResolversParentTypes['Organisation']
> = {
  address?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  administrativeContact?: Resolver<
    Maybe<ResolversTypes['Contact']>,
    ParentType,
    ContextType
  >
  created?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>
  email?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  helpdesk?: Resolver<
    Maybe<ResolversTypes['Helpdesk']>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  modified?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  nationalId?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  phoneNumber?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  providers?: Resolver<
    Maybe<Array<ResolversTypes['Provider']>>,
    ParentType,
    ContextType
  >
  technicalContact?: Resolver<
    Maybe<ResolversTypes['Contact']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type OrganizationResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Organization'] = ResolversParentTypes['Organization']
> = {
  description?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  email?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  footerConfig?: Resolver<
    Maybe<ResolversTypes['JSON']>,
    ParentType,
    ContextType
  >
  footerItems?: Resolver<
    Array<ResolversTypes['FooterItem']>,
    ParentType,
    ContextType
  >
  hasALandingPage?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  link?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  logo?: Resolver<Maybe<ResolversTypes['Image']>, ParentType, ContextType>
  namespace?: Resolver<
    Maybe<ResolversTypes['Namespace']>,
    ParentType,
    ContextType
  >
  newsBottomSlices?: Resolver<
    Maybe<Array<ResolversTypes['EmailSignup']>>,
    ParentType,
    ContextType
  >
  phone?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  publishedMaterialSearchFilterGenericTags?: Resolver<
    Array<ResolversTypes['GenericTag']>,
    ParentType,
    ContextType
  >
  referenceIdentifier?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  serviceWebEnabled?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  serviceWebFeaturedImage?: Resolver<
    Maybe<ResolversTypes['Image']>,
    ParentType,
    ContextType
  >
  serviceWebPopularQuestionCount?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  serviceWebTitle?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  shortTitle?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  showsUpOnTheOrganizationsPage?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  slug?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  tag?: Resolver<
    Array<ResolversTypes['OrganizationTag']>,
    ParentType,
    ContextType
  >
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  trackingDomain?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type OrganizationFundResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['OrganizationFund'] = ResolversParentTypes['OrganizationFund']
> = {
  featuredImage?: Resolver<
    Maybe<ResolversTypes['Image']>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  link?: Resolver<
    Maybe<ResolversTypes['ReferenceLink']>,
    ParentType,
    ContextType
  >
  parentOrganization?: Resolver<
    ResolversTypes['Organization'],
    ParentType,
    ContextType
  >
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type OrganizationPageResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['OrganizationPage'] = ResolversParentTypes['OrganizationPage']
> = {
  alertBanner?: Resolver<
    Maybe<ResolversTypes['AlertBanner']>,
    ParentType,
    ContextType
  >
  bottomSlices?: Resolver<
    Array<ResolversTypes['Slice']>,
    ParentType,
    ContextType
  >
  canBeFoundInSearchResults?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  defaultHeaderImage?: Resolver<
    Maybe<ResolversTypes['Image']>,
    ParentType,
    ContextType
  >
  description?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  externalLinks?: Resolver<
    Maybe<Array<ResolversTypes['Link']>>,
    ParentType,
    ContextType
  >
  featuredImage?: Resolver<
    Maybe<ResolversTypes['Image']>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  menuLinks?: Resolver<
    Array<ResolversTypes['LinkGroup']>,
    ParentType,
    ContextType
  >
  organization?: Resolver<
    Maybe<ResolversTypes['Organization']>,
    ParentType,
    ContextType
  >
  secondaryMenu?: Resolver<
    Maybe<ResolversTypes['LinkGroup']>,
    ParentType,
    ContextType
  >
  secondaryNewsTags?: Resolver<
    Maybe<Array<ResolversTypes['GenericTag']>>,
    ParentType,
    ContextType
  >
  showPastEventsOption?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  sidebarCards?: Resolver<
    Maybe<Array<ResolversTypes['Slice']>>,
    ParentType,
    ContextType
  >
  slices?: Resolver<Array<ResolversTypes['Slice']>, ParentType, ContextType>
  slug?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  theme?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  themeProperties?: Resolver<
    ResolversTypes['OrganizationTheme'],
    ParentType,
    ContextType
  >
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  topLevelNavigation?: Resolver<
    Maybe<ResolversTypes['OrganizationPageTopLevelNavigation']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type OrganizationPageStandaloneSitemapResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['OrganizationPageStandaloneSitemap'] = ResolversParentTypes['OrganizationPageStandaloneSitemap']
> = {
  childLinks?: Resolver<
    Array<ResolversTypes['OrganizationPageStandaloneSitemapLink']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type OrganizationPageStandaloneSitemapLevel2Resolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['OrganizationPageStandaloneSitemapLevel2'] = ResolversParentTypes['OrganizationPageStandaloneSitemapLevel2']
> = {
  childCategories?: Resolver<
    Array<ResolversTypes['OrganizationPageStandaloneSitemapLevel2Category']>,
    ParentType,
    ContextType
  >
  label?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type OrganizationPageStandaloneSitemapLevel2CategoryResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['OrganizationPageStandaloneSitemapLevel2Category'] = ResolversParentTypes['OrganizationPageStandaloneSitemapLevel2Category']
> = {
  childLinks?: Resolver<
    Array<ResolversTypes['OrganizationPageStandaloneSitemapLevel2Link']>,
    ParentType,
    ContextType
  >
  href?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  label?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type OrganizationPageStandaloneSitemapLevel2LinkResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['OrganizationPageStandaloneSitemapLevel2Link'] = ResolversParentTypes['OrganizationPageStandaloneSitemapLevel2Link']
> = {
  href?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  label?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type OrganizationPageStandaloneSitemapLinkResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['OrganizationPageStandaloneSitemapLink'] = ResolversParentTypes['OrganizationPageStandaloneSitemapLink']
> = {
  description?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  href?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  label?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type OrganizationPageTopLevelNavigationResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['OrganizationPageTopLevelNavigation'] = ResolversParentTypes['OrganizationPageTopLevelNavigation']
> = {
  links?: Resolver<
    Array<ResolversTypes['OrganizationPageTopLevelNavigationLink']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type OrganizationPageTopLevelNavigationLinkResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['OrganizationPageTopLevelNavigationLink'] = ResolversParentTypes['OrganizationPageTopLevelNavigationLink']
> = {
  href?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  label?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type OrganizationParentSubpageResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['OrganizationParentSubpage'] = ResolversParentTypes['OrganizationParentSubpage']
> = {
  childLinks?: Resolver<
    Array<ResolversTypes['OrganizationSubpageLink']>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type OrganizationParentSubpageListResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['OrganizationParentSubpageList'] = ResolversParentTypes['OrganizationParentSubpageList']
> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  pageLinkVariant?: Resolver<
    ResolversTypes['OrganizationParentSubpageListVariant'],
    ParentType,
    ContextType
  >
  pageLinks?: Resolver<
    Array<ResolversTypes['OrganizationParentSubpageListPageLink']>,
    ParentType,
    ContextType
  >
  seeMoreLink?: Resolver<Maybe<ResolversTypes['Link']>, ParentType, ContextType>
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type OrganizationParentSubpageListPageLinkResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['OrganizationParentSubpageListPageLink'] = ResolversParentTypes['OrganizationParentSubpageListPageLink']
> = {
  href?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  label?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  pageLinkIntro?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  thumbnailImageHref?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  tinyThumbnailImageHref?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type OrganizationSubpageResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['OrganizationSubpage'] = ResolversParentTypes['OrganizationSubpage']
> = {
  bottomSlices?: Resolver<
    Maybe<Array<ResolversTypes['Slice']>>,
    ParentType,
    ContextType
  >
  description?: Resolver<
    Maybe<Array<ResolversTypes['Slice']>>,
    ParentType,
    ContextType
  >
  featuredImage?: Resolver<
    Maybe<ResolversTypes['Image']>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  intro?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  links?: Resolver<
    Maybe<Array<ResolversTypes['Link']>>,
    ParentType,
    ContextType
  >
  organizationPage?: Resolver<
    ResolversTypes['OrganizationPage'],
    ParentType,
    ContextType
  >
  shortTitle?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  showTableOfContents?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType
  >
  signLanguageVideo?: Resolver<
    Maybe<ResolversTypes['EmbeddedVideo']>,
    ParentType,
    ContextType
  >
  sliceCustomRenderer?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  sliceExtraText?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  slices?: Resolver<
    Maybe<Array<ResolversTypes['Slice']>>,
    ParentType,
    ContextType
  >
  slug?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  url?: Resolver<Array<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type OrganizationSubpageLinkResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['OrganizationSubpageLink'] = ResolversParentTypes['OrganizationSubpageLink']
> = {
  href?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  label?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type OrganizationTagResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['OrganizationTag'] = ResolversParentTypes['OrganizationTag']
> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type OrganizationTagsResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['OrganizationTags'] = ResolversParentTypes['OrganizationTags']
> = {
  items?: Resolver<
    Array<ResolversTypes['OrganizationTag']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type OrganizationThemeResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['OrganizationTheme'] = ResolversParentTypes['OrganizationTheme']
> = {
  backgroundColor?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  fullWidth?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  gradientEndColor?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  gradientStartColor?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >
  imageIsFullHeight?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  imageObjectFit?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  imageObjectPosition?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  imagePadding?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  mobileBackgroundColor?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  textColor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  titleSectionPaddingLeft?: Resolver<
    Maybe<ResolversTypes['Int']>,
    ParentType,
    ContextType
  >
  useGradientColor?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type OrganizationsResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Organizations'] = ResolversParentTypes['Organizations']
> = {
  items?: Resolver<
    Array<ResolversTypes['Organization']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type OverviewLinksResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['OverviewLinks'] = ResolversParentTypes['OverviewLinks']
> = {
  hasBorderAbove?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  link?: Resolver<Maybe<ResolversTypes['Link']>, ParentType, ContextType>
  linkData?: Resolver<
    Maybe<ResolversTypes['OverviewLinksLinkData']>,
    ParentType,
    ContextType
  >
  overviewLinks?: Resolver<
    Array<ResolversTypes['IntroLinkImage']>,
    ParentType,
    ContextType
  >
  titleAbove?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type OverviewLinksLinkDataResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['OverviewLinksLinkData'] = ResolversParentTypes['OverviewLinksLinkData']
> = {
  categoryCardItems?: Resolver<
    Array<ResolversTypes['OverviewLinksLinkDataCategoryCardItem']>,
    ParentType,
    ContextType
  >
  variant?: Resolver<
    ResolversTypes['OverviewLinksLinkDataVariant'],
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type OverviewLinksLinkDataCategoryCardItemResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['OverviewLinksLinkDataCategoryCardItem'] = ResolversParentTypes['OverviewLinksLinkDataCategoryCardItem']
> = {
  description?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  href?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type OwnerChangeValidationResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['OwnerChangeValidation'] = ResolversParentTypes['OwnerChangeValidation']
> = {
  errorMessages?: Resolver<
    Maybe<Array<ResolversTypes['OwnerChangeValidationMessage']>>,
    ParentType,
    ContextType
  >
  hasError?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type OwnerChangeValidationMessageResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['OwnerChangeValidationMessage'] = ResolversParentTypes['OwnerChangeValidationMessage']
> = {
  defaultMessage?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  errorNo?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type PageResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Page'] = ResolversParentTypes['Page']
> = {
  __resolveType: TypeResolveFn<
    | 'AnchorPage'
    | 'Article'
    | 'ArticleCategory'
    | 'LifeEventPage'
    | 'News'
    | 'OrganizationPage'
    | 'OrganizationSubpage'
    | 'ProjectPage'
    | 'SubArticle',
    ParentType,
    ContextType
  >
}

export type PageInfoResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['PageInfo'] = ResolversParentTypes['PageInfo']
> = {
  nextCursor?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type PageInfoDtoResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['PageInfoDto'] = ResolversParentTypes['PageInfoDto']
> = {
  endCursor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  hasNextPage?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  hasPreviousPage?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  startCursor?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type PageInfoResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['PageInfoResponse'] = ResolversParentTypes['PageInfoResponse']
> = {
  endCursor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  hasNextPage?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  hasPreviousPage?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  startCursor?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type PaginatedEndorsementListResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['PaginatedEndorsementListResponse'] = ResolversParentTypes['PaginatedEndorsementListResponse']
> = {
  data?: Resolver<
    Array<ResolversTypes['EndorsementList']>,
    ParentType,
    ContextType
  >
  pageInfo?: Resolver<
    ResolversTypes['PageInfoResponse'],
    ParentType,
    ContextType
  >
  totalCount?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type PaginatedEndorsementResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['PaginatedEndorsementResponse'] = ResolversParentTypes['PaginatedEndorsementResponse']
> = {
  data?: Resolver<Array<ResolversTypes['Endorsement']>, ParentType, ContextType>
  pageInfo?: Resolver<
    ResolversTypes['PageInfoResponse'],
    ParentType,
    ContextType
  >
  totalCount?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type PaginatedOperatingLicensesResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['PaginatedOperatingLicenses'] = ResolversParentTypes['PaginatedOperatingLicenses']
> = {
  paginationInfo?: Resolver<
    ResolversTypes['PaginationInfo'],
    ParentType,
    ContextType
  >
  results?: Resolver<
    Array<ResolversTypes['OperatingLicense']>,
    ParentType,
    ContextType
  >
  searchQuery?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type PaginationInfoResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['PaginationInfo'] = ResolversParentTypes['PaginationInfo']
> = {
  currentPage?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  hasNext?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>
  hasPrevious?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  pageNumber?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  pageSize?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  totalCount?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  totalPages?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type PagingDataResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['PagingData'] = ResolversParentTypes['PagingData']
> = {
  hasNextPage?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  hasPreviousPage?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  offset?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  page?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  pageSize?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  total?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  totalPages?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type PaperMailBodyResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['PaperMailBody'] = ResolversParentTypes['PaperMailBody']
> = {
  nationalId?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  wantsPaper?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ParentalLeaveResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ParentalLeave'] = ResolversParentTypes['ParentalLeave']
> = {
  adoptionDate?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  applicant?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  applicationFundId?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  applicationId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  attachments?: Resolver<
    Maybe<Array<ResolversTypes['ParentalLeaveAttachment']>>,
    ParentType,
    ContextType
  >
  dateOfBirth?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  email?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  employers?: Resolver<
    Array<ResolversTypes['ParentalLeaveEmployer']>,
    ParentType,
    ContextType
  >
  expectedDateOfBirth?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  language?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  noOfChildren?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  otherParentId?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  paymentInfo?: Resolver<
    ResolversTypes['ParentalLeavePaymentInfo'],
    ParentType,
    ContextType
  >
  periods?: Resolver<
    Array<ResolversTypes['ParentalLeavePeriod']>,
    ParentType,
    ContextType
  >
  phoneNumber?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  rightsCode?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  status?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  testData?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ParentalLeaveAttachmentResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ParentalLeaveAttachment'] = ResolversParentTypes['ParentalLeaveAttachment']
> = {
  attachmentBytes?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  attachmentType?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ParentalLeaveEmployerResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ParentalLeaveEmployer'] = ResolversParentTypes['ParentalLeaveEmployer']
> = {
  email?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  nationalRegistryId?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ParentalLeaveEntitlementResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ParentalLeaveEntitlement'] = ResolversParentTypes['ParentalLeaveEntitlement']
> = {
  independentMonths?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  transferableMonths?: Resolver<
    ResolversTypes['Float'],
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ParentalLeavePaymentInfoResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ParentalLeavePaymentInfo'] = ResolversParentTypes['ParentalLeavePaymentInfo']
> = {
  bankAccount?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  pensionFund?: Resolver<
    ResolversTypes['ParentalLeavePensionFund'],
    ParentType,
    ContextType
  >
  personalAllowance?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  personalAllowanceFromSpouse?: Resolver<
    ResolversTypes['Float'],
    ParentType,
    ContextType
  >
  privatePensionFund?: Resolver<
    ResolversTypes['ParentalLeavePensionFund'],
    ParentType,
    ContextType
  >
  privatePensionFundRatio?: Resolver<
    ResolversTypes['Float'],
    ParentType,
    ContextType
  >
  union?: Resolver<
    ResolversTypes['ParentalLeaveUnion'],
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ParentalLeavePaymentPlanResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ParentalLeavePaymentPlan'] = ResolversParentTypes['ParentalLeavePaymentPlan']
> = {
  estimatePayment?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  estimatedAmount?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  pensionAmount?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  period?: Resolver<
    ResolversTypes['ParentalLeavePeriod'],
    ParentType,
    ContextType
  >
  privatePensionAmount?: Resolver<
    ResolversTypes['Float'],
    ParentType,
    ContextType
  >
  taxAmount?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  unionAmount?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ParentalLeavePensionFundResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ParentalLeavePensionFund'] = ResolversParentTypes['ParentalLeavePensionFund']
> = {
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ParentalLeavePeriodResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ParentalLeavePeriod'] = ResolversParentTypes['ParentalLeavePeriod']
> = {
  approved?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  from?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  paid?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  ratio?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  rightsCodePeriod?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  to?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ParentalLeavePeriodEndDateResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ParentalLeavePeriodEndDate'] = ResolversParentTypes['ParentalLeavePeriodEndDate']
> = {
  periodEndDate?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ParentalLeavePeriodLengthResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ParentalLeavePeriodLength'] = ResolversParentTypes['ParentalLeavePeriodLength']
> = {
  periodLength?: Resolver<ResolversTypes['Int'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ParentalLeaveUnionResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ParentalLeaveUnion'] = ResolversParentTypes['ParentalLeaveUnion']
> = {
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type PassportResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Passport'] = ResolversParentTypes['Passport']
> = {
  childPassports?: Resolver<
    Maybe<Array<ResolversTypes['IdentityDocumentModelChild']>>,
    ParentType,
    ContextType
  >
  userPassport?: Resolver<
    Maybe<ResolversTypes['IdentityDocumentModel']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type PayloadResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Payload'] = ResolversParentTypes['Payload']
> = {
  data?: Resolver<
    Array<ResolversTypes['GenericLicenseDataField']>,
    ParentType,
    ContextType
  >
  metadata?: Resolver<
    ResolversTypes['GenericUserLicenseMetadata'],
    ParentType,
    ContextType
  >
  rawData?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type PaymentCatalogItemResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['PaymentCatalogItem'] = ResolversParentTypes['PaymentCatalogItem']
> = {
  chargeItemCode?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  chargeItemName?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  chargeType?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  performingOrgID?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  priceAmount?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type PaymentCatalogResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['PaymentCatalogResponse'] = ResolversParentTypes['PaymentCatalogResponse']
> = {
  items?: Resolver<
    Array<ResolversTypes['PaymentCatalogItem']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type PaymentScheduleResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['PaymentSchedule'] = ResolversParentTypes['PaymentSchedule']
> = {
  approvalDate?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  documentID?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  downloadServiceURL?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >
  paymentCount?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  scheduleName?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  scheduleNumber?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  scheduleStatus?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  scheduleType?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  totalAmount?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  unpaidAmount?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  unpaidCount?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  unpaidWithInterest?: Resolver<
    ResolversTypes['Float'],
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type PaymentScheduleChargeResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['PaymentScheduleCharge'] = ResolversParentTypes['PaymentScheduleCharge']
> = {
  expenses?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  intrest?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  principal?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  total?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type PaymentScheduleCompanyConditionsResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['PaymentScheduleCompanyConditions'] = ResolversParentTypes['PaymentScheduleCompanyConditions']
> = {
  accommodationTaxReturns?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType
  >
  citReturns?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  collectionActions?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType
  >
  doNotOwe?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  financialStatement?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType
  >
  maxDebt?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  maxDebtAmount?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  maxPayment?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  minPayment?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  nationalId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  taxReturns?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  totalDebtAmount?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  vatReturns?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  withholdingTaxReturns?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type PaymentScheduleConditionsResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['PaymentScheduleConditions'] = ResolversParentTypes['PaymentScheduleConditions']
> = {
  accommodationTaxReturns?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType
  >
  alimony?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  citReturns?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  collectionActions?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType
  >
  disposableIncome?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  doNotOwe?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  maxDebt?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  maxDebtAmount?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  maxPayment?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  minPayment?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  minWagePayment?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  nationalId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  oweTaxes?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  percent?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  taxReturns?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  totalDebtAmount?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  vatReturns?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  wageReturns?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  withholdingTaxReturns?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type PaymentScheduleDataResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['PaymentScheduleData'] = ResolversParentTypes['PaymentScheduleData']
> = {
  nationalId?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  paymentSchedules?: Resolver<
    Array<ResolversTypes['PaymentSchedule']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type PaymentScheduleDebtsResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['PaymentScheduleDebts'] = ResolversParentTypes['PaymentScheduleDebts']
> = {
  chargetypes?: Resolver<
    Array<ResolversTypes['PaymentScheduleCharge']>,
    ParentType,
    ContextType
  >
  explanation?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  nationalId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  organization?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  paymentSchedule?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  totalAmount?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  type?: Resolver<
    ResolversTypes['PaymentScheduleType'],
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type PaymentScheduleDetailDataResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['PaymentScheduleDetailData'] = ResolversParentTypes['PaymentScheduleDetailData']
> = {
  myDetailedSchedule?: Resolver<
    Array<ResolversTypes['DetailedSchedule']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type PaymentScheduleDetailModelResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['PaymentScheduleDetailModel'] = ResolversParentTypes['PaymentScheduleDetailModel']
> = {
  myDetailedSchedules?: Resolver<
    ResolversTypes['PaymentScheduleDetailData'],
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type PaymentScheduleDistributionResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['PaymentScheduleDistribution'] = ResolversParentTypes['PaymentScheduleDistribution']
> = {
  nationalId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  payments?: Resolver<
    Array<ResolversTypes['PaymentSchedulePayment']>,
    ParentType,
    ContextType
  >
  scheduleType?: Resolver<
    ResolversTypes['PaymentScheduleType'],
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type PaymentScheduleEmployerResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['PaymentScheduleEmployer'] = ResolversParentTypes['PaymentScheduleEmployer']
> = {
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  nationalId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type PaymentScheduleInitialScheduleResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['PaymentScheduleInitialSchedule'] = ResolversParentTypes['PaymentScheduleInitialSchedule']
> = {
  maxCountMonth?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  maxPayment?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  minCountMonth?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  minPayment?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  nationalId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  scheduleType?: Resolver<
    ResolversTypes['PaymentScheduleType'],
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type PaymentScheduleModelResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['PaymentScheduleModel'] = ResolversParentTypes['PaymentScheduleModel']
> = {
  myPaymentSchedule?: Resolver<
    Maybe<ResolversTypes['PaymentScheduleData']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type PaymentSchedulePaymentResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['PaymentSchedulePayment'] = ResolversParentTypes['PaymentSchedulePayment']
> = {
  accumulated?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  dueDate?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>
  payment?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type PaymentsCardInformationResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['PaymentsCardInformation'] = ResolversParentTypes['PaymentsCardInformation']
> = {
  cardCategory?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  cardProductCategory?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >
  cardScheme?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  cardUsage?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  issuingCountry?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  outOfScaScope?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type PaymentsCardVerificationFieldResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['PaymentsCardVerificationField'] = ResolversParentTypes['PaymentsCardVerificationField']
> = {
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  value?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type PaymentsCardVerificationResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['PaymentsCardVerificationResponse'] = ResolversParentTypes['PaymentsCardVerificationResponse']
> = {
  paymentFlowId?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type PaymentsChargeCardResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['PaymentsChargeCardResponse'] = ResolversParentTypes['PaymentsChargeCardResponse']
> = {
  isSuccess?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  responseCode?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type PaymentsCreateInvoiceResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['PaymentsCreateInvoiceResponse'] = ResolversParentTypes['PaymentsCreateInvoiceResponse']
> = {
  correlationId?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  isSuccess?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  responseCode?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type PaymentsGetPaymentFlowResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['PaymentsGetPaymentFlowResponse'] = ResolversParentTypes['PaymentsGetPaymentFlowResponse']
> = {
  availablePaymentMethods?: Resolver<
    Array<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  existingInvoiceId?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  metadata?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>
  organisationId?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  payerName?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  payerNationalId?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  paymentStatus?: Resolver<
    ResolversTypes['PaymentsGetFlowPaymentStatus'],
    ParentType,
    ContextType
  >
  productPrice?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  productTitle?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  redirectToReturnUrlOnSuccess?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  returnUrl?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type PaymentsGetVerificationStatusResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['PaymentsGetVerificationStatus'] = ResolversParentTypes['PaymentsGetVerificationStatus']
> = {
  isVerified?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type PaymentsVerifyCardResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['PaymentsVerifyCardResponse'] = ResolversParentTypes['PaymentsVerifyCardResponse']
> = {
  additionalFields?: Resolver<
    Array<ResolversTypes['PaymentsCardVerificationField']>,
    ParentType,
    ContextType
  >
  cardInformation?: Resolver<
    ResolversTypes['PaymentsCardInformation'],
    ParentType,
    ContextType
  >
  cardVerificationRawResponse?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >
  isSuccess?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  postUrl?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  responseCode?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  responseDescription?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >
  responseTime?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  scriptPath?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  verificationFields?: Resolver<
    Array<ResolversTypes['PaymentsCardVerificationField']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type PendingActionResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['PendingAction'] = ResolversParentTypes['PendingAction']
> = {
  button?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  content?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  displayStatus?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type PensionFundResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['PensionFund'] = ResolversParentTypes['PensionFund']
> = {
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type PeriodItemsResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['PeriodItems'] = ResolversParentTypes['PeriodItems']
> = {
  courses?: Resolver<
    Maybe<Array<ResolversTypes['CoursesModel']>>,
    ParentType,
    ContextType
  >
  diplomaId?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  division?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  divisionShort?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  organisation?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  organisationShort?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  periodFrom?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  periodId?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  periodName?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  periodShort?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  periodTo?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  studentId?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type PeriodsModelResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['PeriodsModel'] = ResolversParentTypes['PeriodsModel']
> = {
  items?: Resolver<
    Maybe<Array<ResolversTypes['PeriodItems']>>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type PlateAvailabilityResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['PlateAvailability'] = ResolversParentTypes['PlateAvailability']
> = {
  available?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  regno?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type PlateOrderValidationResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['PlateOrderValidation'] = ResolversParentTypes['PlateOrderValidation']
> = {
  errorMessages?: Resolver<
    Maybe<Array<ResolversTypes['PlateOrderValidationMessage']>>,
    ParentType,
    ContextType
  >
  hasError?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type PlateOrderValidationMessageResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['PlateOrderValidationMessage'] = ResolversParentTypes['PlateOrderValidationMessage']
> = {
  defaultMessage?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  errorNo?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type PowerBiSliceResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['PowerBiSlice'] = ResolversParentTypes['PowerBiSlice']
> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  owner?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  powerBiEmbedProps?: Resolver<
    Maybe<ResolversTypes['JSON']>,
    ParentType,
    ContextType
  >
  powerBiEmbedPropsFromServer?: Resolver<
    Maybe<ResolversTypes['GetPowerBiEmbedPropsFromServerResponse']>,
    ParentType,
    ContextType
  >
  reportId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  workspaceId?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type PracticalDrivingLessonResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['PracticalDrivingLesson'] = ResolversParentTypes['PracticalDrivingLesson']
> = {
  bookId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  comments?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  createdOn?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  licenseCategory?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  minutes?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  studentName?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  studentNationalId?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >
  teacherName?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  teacherNationalId?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type PregnancyStatusResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['PregnancyStatus'] = ResolversParentTypes['PregnancyStatus']
> = {
  expectedDateOfBirth?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >
  hasActivePregnancy?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type PresignedPostResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['PresignedPost'] = ResolversParentTypes['PresignedPost']
> = {
  fields?: Resolver<ResolversTypes['JSON'], ParentType, ContextType>
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type PresignedUrlResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['PresignedUrlResponse'] = ResolversParentTypes['PresignedUrlResponse']
> = {
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ProcessEntryResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ProcessEntry'] = ResolversParentTypes['ProcessEntry']
> = {
  buttonText?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  openLinkInModal?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  processLink?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  processTitle?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ProfessionRightResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ProfessionRight'] = ResolversParentTypes['ProfessionRight']
> = {
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  nationalId?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  profession?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ProfessionRightsResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ProfessionRightsResponse'] = ResolversParentTypes['ProfessionRightsResponse']
> = {
  list?: Resolver<
    Array<ResolversTypes['ProfessionRight']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ProjectPageResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ProjectPage'] = ResolversParentTypes['ProjectPage']
> = {
  alertBanner?: Resolver<
    Maybe<ResolversTypes['AlertBanner']>,
    ParentType,
    ContextType
  >
  backLink?: Resolver<Maybe<ResolversTypes['Link']>, ParentType, ContextType>
  bottomSlices?: Resolver<
    Array<ResolversTypes['Slice']>,
    ParentType,
    ContextType
  >
  content?: Resolver<
    Maybe<Array<ResolversTypes['Slice']>>,
    ParentType,
    ContextType
  >
  contentIsFullWidth?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  defaultHeaderBackgroundColor?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >
  defaultHeaderImage?: Resolver<
    Maybe<ResolversTypes['Image']>,
    ParentType,
    ContextType
  >
  featuredDescription?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >
  featuredImage?: Resolver<
    Maybe<ResolversTypes['Image']>,
    ParentType,
    ContextType
  >
  footerConfig?: Resolver<
    Maybe<ResolversTypes['JSON']>,
    ParentType,
    ContextType
  >
  footerItems?: Resolver<
    Maybe<Array<ResolversTypes['FooterItem']>>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  intro?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  namespace?: Resolver<
    Maybe<ResolversTypes['Namespace']>,
    ParentType,
    ContextType
  >
  newsTag?: Resolver<
    Maybe<ResolversTypes['GenericTag']>,
    ParentType,
    ContextType
  >
  projectSubpages?: Resolver<
    Array<ResolversTypes['ProjectSubpage']>,
    ParentType,
    ContextType
  >
  secondarySidebar?: Resolver<
    Maybe<ResolversTypes['LinkGroup']>,
    ParentType,
    ContextType
  >
  sidebar?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  sidebarLinks?: Resolver<
    Array<ResolversTypes['LinkGroup']>,
    ParentType,
    ContextType
  >
  slices?: Resolver<Array<ResolversTypes['Slice']>, ParentType, ContextType>
  slug?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  stepper?: Resolver<Maybe<ResolversTypes['Stepper']>, ParentType, ContextType>
  subtitle?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  theme?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  themeProperties?: Resolver<
    Maybe<ResolversTypes['ProjectPageThemeProperties']>,
    ParentType,
    ContextType
  >
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ProjectPageThemePropertiesResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ProjectPageThemeProperties'] = ResolversParentTypes['ProjectPageThemeProperties']
> = {
  backgroundColor?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  fullWidth?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  gradientEndColor?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  gradientStartColor?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >
  imageIsFullHeight?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  imageObjectFit?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  imageObjectPosition?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  imagePadding?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  mobileBackgroundColor?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  textColor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  titleSectionPaddingLeft?: Resolver<
    Maybe<ResolversTypes['Int']>,
    ParentType,
    ContextType
  >
  useGradientColor?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ProjectSubpageResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ProjectSubpage'] = ResolversParentTypes['ProjectSubpage']
> = {
  bottomSlices?: Resolver<
    Maybe<Array<ResolversTypes['Slice']>>,
    ParentType,
    ContextType
  >
  content?: Resolver<
    Maybe<Array<ResolversTypes['Slice']>>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  renderSlicesAsTabs?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType
  >
  shortTitle?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  showTableOfContents?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType
  >
  slices?: Resolver<Array<ResolversTypes['Slice']>, ParentType, ContextType>
  slug?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type PropertyDetailResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['PropertyDetail'] = ResolversParentTypes['PropertyDetail']
> = {
  appraisal?: Resolver<
    Maybe<ResolversTypes['Appraisal']>,
    ParentType,
    ContextType
  >
  defaultAddress?: Resolver<
    Maybe<ResolversTypes['PropertyLocation']>,
    ParentType,
    ContextType
  >
  land?: Resolver<Maybe<ResolversTypes['LandModel']>, ParentType, ContextType>
  propertyNumber?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  registeredOwners?: Resolver<
    Maybe<ResolversTypes['PropertyOwnersModel']>,
    ParentType,
    ContextType
  >
  unitsOfUse?: Resolver<
    Maybe<ResolversTypes['UnitsOfUseModel']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type PropertyLocationResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['PropertyLocation'] = ResolversParentTypes['PropertyLocation']
> = {
  display?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  displayShort?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  locationNumber?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  municipality?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  postNumber?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  propertyNumber?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type PropertyOverviewResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['PropertyOverview'] = ResolversParentTypes['PropertyOverview']
> = {
  paging?: Resolver<
    Maybe<ResolversTypes['PagingData']>,
    ParentType,
    ContextType
  >
  properties?: Resolver<
    Maybe<Array<ResolversTypes['SimpleProperties']>>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type PropertyOwnerResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['PropertyOwner'] = ResolversParentTypes['PropertyOwner']
> = {
  grantDisplay?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  ownership?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  purchaseDate?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  ssn?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type PropertyOwnersModelResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['PropertyOwnersModel'] = ResolversParentTypes['PropertyOwnersModel']
> = {
  paging?: Resolver<
    Maybe<ResolversTypes['PagingData']>,
    ParentType,
    ContextType
  >
  registeredOwners?: Resolver<
    Maybe<Array<ResolversTypes['PropertyOwner']>>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ProviderResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Provider'] = ResolversParentTypes['Provider']
> = {
  apiScope?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  created?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>
  endpoint?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  endpointType?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  modified?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>
  organisationId?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  xroad?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ProviderStatisticsResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ProviderStatistics'] = ResolversParentTypes['ProviderStatistics']
> = {
  notifications?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  opened?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  published?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type QueryResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Query'] = ResolversParentTypes['Query']
> = {
  HealthInsuranceAccidentStatus?: Resolver<
    Maybe<ResolversTypes['AccidentNotificationStatus']>,
    ParentType,
    ContextType,
    RequireFields<QueryHealthInsuranceAccidentStatusArgs, 'input'>
  >
  OJOIAGetApplicationCase?: Resolver<
    ResolversTypes['OJOIAApplicationCaseResponse'],
    ParentType,
    ContextType,
    RequireFields<QueryOjoiaGetApplicationCaseArgs, 'input'>
  >
  OJOIAGetComments?: Resolver<
    ResolversTypes['OJOIAGetCommentsResponse'],
    ParentType,
    ContextType,
    RequireFields<QueryOjoiaGetCommentsArgs, 'input'>
  >
  OJOIAGetPdf?: Resolver<
    ResolversTypes['OJOIAGetPdfResponse'],
    ParentType,
    ContextType,
    RequireFields<QueryOjoiaGetPdfArgs, 'input'>
  >
  UserProfileAdminProfile?: Resolver<
    Maybe<ResolversTypes['UserProfileAdminProfile']>,
    ParentType,
    ContextType,
    RequireFields<QueryUserProfileAdminProfileArgs, 'nationalId'>
  >
  UserProfileAdminProfiles?: Resolver<
    ResolversTypes['UserProfileAdminProfilesResponse'],
    ParentType,
    ContextType,
    RequireFields<QueryUserProfileAdminProfilesArgs, 'query'>
  >
  adminNotifications?: Resolver<
    Maybe<ResolversTypes['AdminNotifications']>,
    ParentType,
    ContextType,
    RequireFields<QueryAdminNotificationsArgs, 'nationalId'>
  >
  administrationOfOccupationalSafetyAndHealthCourses?: Resolver<
    ResolversTypes['AdministrationofOccupationalSafetyandHealthCoursesResponseModel'],
    ParentType,
    ContextType
  >
  airDiscountSchemeDiscounts?: Resolver<
    Array<ResolversTypes['AirDiscountSchemeDiscount']>,
    ParentType,
    ContextType
  >
  airDiscountSchemeFlightLegs?: Resolver<
    Array<ResolversTypes['AirDiscountSchemeFlightLeg']>,
    ParentType,
    ContextType,
    RequireFields<QueryAirDiscountSchemeFlightLegsArgs, 'input'>
  >
  airDiscountSchemeUserAndRelationsFlights?: Resolver<
    Array<ResolversTypes['AirDiscountSchemeFlightLeg']>,
    ParentType,
    ContextType
  >
  aircraftRegistryAllAircrafts?: Resolver<
    ResolversTypes['AircraftRegistryAllAircraftsResponse'],
    ParentType,
    ContextType,
    RequireFields<QueryAircraftRegistryAllAircraftsArgs, 'input'>
  >
  applicationApplication?: Resolver<
    Maybe<ResolversTypes['Application']>,
    ParentType,
    ContextType,
    RequireFields<QueryApplicationApplicationArgs, 'input'>
  >
  applicationApplications?: Resolver<
    Maybe<Array<ResolversTypes['Application']>>,
    ParentType,
    ContextType,
    Partial<QueryApplicationApplicationsArgs>
  >
  applicationApplicationsAdmin?: Resolver<
    Maybe<Array<ResolversTypes['ApplicationAdmin']>>,
    ParentType,
    ContextType,
    RequireFields<QueryApplicationApplicationsAdminArgs, 'input'>
  >
  applicationApplicationsAdminStatistics?: Resolver<
    Maybe<Array<ResolversTypes['ApplicationStatistics']>>,
    ParentType,
    ContextType,
    RequireFields<QueryApplicationApplicationsAdminStatisticsArgs, 'input'>
  >
  applicationApplicationsInstitutionAdmin?: Resolver<
    Maybe<ResolversTypes['ApplicationAdminPaginatedResponse']>,
    ParentType,
    ContextType,
    RequireFields<QueryApplicationApplicationsInstitutionAdminArgs, 'input'>
  >
  applicationPaymentStatus?: Resolver<
    Maybe<ResolversTypes['ApplicationPayment']>,
    ParentType,
    ContextType,
    RequireFields<QueryApplicationPaymentStatusArgs, 'applicationId'>
  >
  areIndividualsValid?: Resolver<
    Array<ResolversTypes['SeminarsIndividualValidationItem']>,
    ParentType,
    ContextType,
    RequireFields<QueryAreIndividualsValidArgs, 'courseID' | 'input'>
  >
  assetsDetail?: Resolver<
    Maybe<ResolversTypes['PropertyDetail']>,
    ParentType,
    ContextType,
    RequireFields<QueryAssetsDetailArgs, 'input'>
  >
  assetsOverview?: Resolver<
    Maybe<ResolversTypes['PropertyOverview']>,
    ParentType,
    ContextType,
    RequireFields<QueryAssetsOverviewArgs, 'input'>
  >
  assetsPropertyOwners?: Resolver<
    Maybe<ResolversTypes['PropertyOwnersModel']>,
    ParentType,
    ContextType,
    RequireFields<QueryAssetsPropertyOwnersArgs, 'input'>
  >
  assetsUnitsOfUse?: Resolver<
    Maybe<ResolversTypes['UnitsOfUseModel']>,
    ParentType,
    ContextType,
    RequireFields<QueryAssetsUnitsOfUseArgs, 'input'>
  >
  attachmentPresignedURL?: Resolver<
    Maybe<ResolversTypes['PresignedUrlResponse']>,
    ParentType,
    ContextType,
    RequireFields<QueryAttachmentPresignedUrlArgs, 'input'>
  >
  authActorDelegations?: Resolver<
    Array<ResolversTypes['AuthMergedDelegation']>,
    ParentType,
    ContextType,
    Partial<QueryAuthActorDelegationsArgs>
  >
  authAdminClient?: Resolver<
    Maybe<ResolversTypes['AuthAdminClient']>,
    ParentType,
    ContextType,
    RequireFields<QueryAuthAdminClientArgs, 'input'>
  >
  authAdminClients?: Resolver<
    ResolversTypes['AuthAdminClientsPayload'],
    ParentType,
    ContextType,
    RequireFields<QueryAuthAdminClientsArgs, 'input'>
  >
  authAdminDelegationAdmin?: Resolver<
    ResolversTypes['DelegationAdminCustomModel'],
    ParentType,
    ContextType,
    RequireFields<QueryAuthAdminDelegationAdminArgs, 'nationalId'>
  >
  authAdminScope?: Resolver<
    ResolversTypes['AuthAdminScope'],
    ParentType,
    ContextType,
    RequireFields<QueryAuthAdminScopeArgs, 'input'>
  >
  authAdminScopes?: Resolver<
    ResolversTypes['AuthAdminScopesPayload'],
    ParentType,
    ContextType,
    RequireFields<QueryAuthAdminScopesArgs, 'input'>
  >
  authAdminTenant?: Resolver<
    ResolversTypes['AuthAdminTenant'],
    ParentType,
    ContextType,
    RequireFields<QueryAuthAdminTenantArgs, 'id'>
  >
  authAdminTenants?: Resolver<
    ResolversTypes['AuthAdminTenantsPayload'],
    ParentType,
    ContextType
  >
  authApiScopes?: Resolver<
    Array<ResolversTypes['AuthApiScope']>,
    ParentType,
    ContextType,
    RequireFields<QueryAuthApiScopesArgs, 'input'>
  >
  authDelegation?: Resolver<
    Maybe<ResolversTypes['AuthDelegation']>,
    ParentType,
    ContextType,
    RequireFields<QueryAuthDelegationArgs, 'input'>
  >
  authDelegationProviders?: Resolver<
    ResolversTypes['AuthDelegationProviderPayload'],
    ParentType,
    ContextType
  >
  authDelegations?: Resolver<
    Array<ResolversTypes['AuthDelegation']>,
    ParentType,
    ContextType,
    Partial<QueryAuthDelegationsArgs>
  >
  authDomains?: Resolver<
    Array<ResolversTypes['AuthDomain']>,
    ParentType,
    ContextType,
    RequireFields<QueryAuthDomainsArgs, 'input'>
  >
  authLoginRestriction?: Resolver<
    ResolversTypes['AuthLoginRestriction'],
    ParentType,
    ContextType
  >
  authPasskeyAuthenticationOptions?: Resolver<
    ResolversTypes['AuthPasskeyAuthenticationOptions'],
    ParentType,
    ContextType
  >
  authPasskeyRegistrationOptions?: Resolver<
    ResolversTypes['AuthPasskeyRegistrationOptions'],
    ParentType,
    ContextType
  >
  authScopeTree?: Resolver<
    Array<ResolversTypes['AuthScopeTreeNode']>,
    ParentType,
    ContextType,
    RequireFields<QueryAuthScopeTreeArgs, 'input'>
  >
  companyRegistryCompanies?: Resolver<
    ResolversTypes['RskCompanySearchItems'],
    ParentType,
    ContextType,
    RequireFields<QueryCompanyRegistryCompaniesArgs, 'input'>
  >
  companyRegistryCompany?: Resolver<
    Maybe<ResolversTypes['RskCompany']>,
    ParentType,
    ContextType,
    Partial<QueryCompanyRegistryCompanyArgs>
  >
  consentsList?: Resolver<
    ResolversTypes['AuthConsentsPaginated'],
    ParentType,
    ContextType
  >
  consultationPortalAdviceByCaseId?: Resolver<
    Array<ResolversTypes['ConsultationPortalAdviceResult']>,
    ParentType,
    ContextType,
    RequireFields<QueryConsultationPortalAdviceByCaseIdArgs, 'input'>
  >
  consultationPortalAllTypes?: Resolver<
    ResolversTypes['ConsultationPortalAllTypesResult'],
    ParentType,
    ContextType
  >
  consultationPortalAllUserAdvices?: Resolver<
    ResolversTypes['ConsultationPortalUserAdviceAggregate'],
    ParentType,
    ContextType,
    RequireFields<QueryConsultationPortalAllUserAdvicesArgs, 'input'>
  >
  consultationPortalCaseById?: Resolver<
    ResolversTypes['ConsultationPortalCaseResult'],
    ParentType,
    ContextType,
    RequireFields<QueryConsultationPortalCaseByIdArgs, 'input'>
  >
  consultationPortalDocument?: Resolver<
    Array<ResolversTypes['ConsultationPortalDocumentInfoResult']>,
    ParentType,
    ContextType,
    RequireFields<QueryConsultationPortalDocumentArgs, 'documentId'>
  >
  consultationPortalGetCases?: Resolver<
    ResolversTypes['ConsultationPortalCasesAggregateResult'],
    ParentType,
    ContextType,
    RequireFields<QueryConsultationPortalGetCasesArgs, 'input'>
  >
  consultationPortalStatistics?: Resolver<
    ResolversTypes['ConsultationPortalStatisticsResult'],
    ParentType,
    ContextType
  >
  consultationPortalSubscriptionType?: Resolver<
    ResolversTypes['ConsultationPortalCaseSubscriptionResult'],
    ParentType,
    ContextType,
    RequireFields<QueryConsultationPortalSubscriptionTypeArgs, 'input'>
  >
  consultationPortalUserEmail?: Resolver<
    ResolversTypes['ConsultationPortalUserEmailResult'],
    ParentType,
    ContextType
  >
  consultationPortalUserSubscriptions?: Resolver<
    ResolversTypes['ConsultationPortalUserSubscriptionsAggregate'],
    ParentType,
    ContextType
  >
  costOfLivingCalculator?: Resolver<
    Maybe<ResolversTypes['CostOfLivingCalculatorResponseModel']>,
    ParentType,
    ContextType
  >
  digitalTachographTachoNetExists?: Resolver<
    ResolversTypes['CheckTachoNetExists'],
    ParentType,
    ContextType,
    RequireFields<QueryDigitalTachographTachoNetExistsArgs, 'input'>
  >
  documentPageNumber?: Resolver<
    Maybe<ResolversTypes['DocumentPageNumber']>,
    ParentType,
    ContextType,
    RequireFields<QueryDocumentPageNumberArgs, 'input'>
  >
  documentProviderPaperMailList?: Resolver<
    ResolversTypes['DocumentProviderPaperMailResponse'],
    ParentType,
    ContextType,
    Partial<QueryDocumentProviderPaperMailListArgs>
  >
  documentProviderProvidedCategories?: Resolver<
    Array<ResolversTypes['DocumentProviderCategory']>,
    ParentType,
    ContextType
  >
  documentProviderProvidedTypes?: Resolver<
    Array<ResolversTypes['DocumentProviderType']>,
    ParentType,
    ContextType
  >
  documentV2?: Resolver<
    Maybe<ResolversTypes['DocumentV2']>,
    ParentType,
    ContextType,
    RequireFields<QueryDocumentV2Args, 'input'>
  >
  documentV2ConfirmActions?: Resolver<
    Maybe<ResolversTypes['DocumentConfirmActions']>,
    ParentType,
    ContextType,
    RequireFields<QueryDocumentV2ConfirmActionsArgs, 'input'>
  >
  documentV2PdfRenderer?: Resolver<
    Maybe<ResolversTypes['DocumentPdfRenderer']>,
    ParentType,
    ContextType,
    RequireFields<QueryDocumentV2PdfRendererArgs, 'input'>
  >
  documentsV2?: Resolver<
    Maybe<ResolversTypes['DocumentsV2']>,
    ParentType,
    ContextType,
    RequireFields<QueryDocumentsV2Args, 'input'>
  >
  drivingLicense?: Resolver<
    Maybe<ResolversTypes['DrivingLicense']>,
    ParentType,
    ContextType
  >
  drivingLicenseApplicationEligibility?: Resolver<
    ResolversTypes['ApplicationEligibility'],
    ParentType,
    ContextType,
    RequireFields<QueryDrivingLicenseApplicationEligibilityArgs, 'input'>
  >
  drivingLicenseBookFindStudent?: Resolver<
    Array<ResolversTypes['DrivingLicenseBookStudent']>,
    ParentType,
    ContextType,
    RequireFields<QueryDrivingLicenseBookFindStudentArgs, 'input'>
  >
  drivingLicenseBookFindStudentForTeacher?: Resolver<
    Array<ResolversTypes['DrivingLicenseBookStudent']>,
    ParentType,
    ContextType,
    RequireFields<QueryDrivingLicenseBookFindStudentForTeacherArgs, 'input'>
  >
  drivingLicenseBookPracticalDrivingLessons?: Resolver<
    Array<ResolversTypes['PracticalDrivingLesson']>,
    ParentType,
    ContextType,
    RequireFields<QueryDrivingLicenseBookPracticalDrivingLessonsArgs, 'input'>
  >
  drivingLicenseBookSchoolForEmployee?: Resolver<
    ResolversTypes['DrivingLicenseBookSchool'],
    ParentType,
    ContextType
  >
  drivingLicenseBookSchoolTypes?: Resolver<
    Array<ResolversTypes['DrivingSchoolType']>,
    ParentType,
    ContextType
  >
  drivingLicenseBookStudent?: Resolver<
    ResolversTypes['DrivingLicenseBookStudentOverview'],
    ParentType,
    ContextType,
    RequireFields<QueryDrivingLicenseBookStudentArgs, 'input'>
  >
  drivingLicenseBookStudentForTeacher?: Resolver<
    ResolversTypes['DrivingLicenseBookStudentOverview'],
    ParentType,
    ContextType,
    RequireFields<QueryDrivingLicenseBookStudentForTeacherArgs, 'input'>
  >
  drivingLicenseBookStudentsForTeacher?: Resolver<
    Array<ResolversTypes['DrivingLicenseBookStudentForTeacher']>,
    ParentType,
    ContextType,
    RequireFields<
      QueryDrivingLicenseBookStudentsForTeacherArgs,
      'licenseCategory'
    >
  >
  drivingLicenseBookUserBook?: Resolver<
    Maybe<ResolversTypes['DrivingLicenseBookStudentOverview']>,
    ParentType,
    ContextType
  >
  drivingLicenseQualityPhoto?: Resolver<
    ResolversTypes['DrivingLicenseQualityPhoto'],
    ParentType,
    ContextType
  >
  drivingLicenseQualitySignature?: Resolver<
    ResolversTypes['DrivingLicenseQualitySignature'],
    ParentType,
    ContextType
  >
  drivingLicenseStudentAssessment?: Resolver<
    Maybe<ResolversTypes['StudentAssessment']>,
    ParentType,
    ContextType
  >
  drivingLicenseStudentCanGetPracticePermit?: Resolver<
    Maybe<ResolversTypes['StudentCanGetPracticePermit']>,
    ParentType,
    ContextType,
    RequireFields<QueryDrivingLicenseStudentCanGetPracticePermitArgs, 'input'>
  >
  drivingLicenseStudentInformation?: Resolver<
    ResolversTypes['StudentInformationResult'],
    ParentType,
    ContextType,
    RequireFields<QueryDrivingLicenseStudentInformationArgs, 'nationalId'>
  >
  drivingLicenseTeachersV4?: Resolver<
    Array<ResolversTypes['TeacherV4']>,
    ParentType,
    ContextType
  >
  drivingLicenseTeachingRights?: Resolver<
    ResolversTypes['HasTeachingRights'],
    ParentType,
    ContextType
  >
  educationExamFamilyOverviews?: Resolver<
    Array<ResolversTypes['EducationExamFamilyOverview']>,
    ParentType,
    ContextType
  >
  educationExamResult?: Resolver<
    ResolversTypes['EducationExamResult'],
    ParentType,
    ContextType,
    RequireFields<QueryEducationExamResultArgs, 'familyIndex'>
  >
  educationLicense?: Resolver<
    Array<ResolversTypes['EducationLicense']>,
    ParentType,
    ContextType
  >
  endorsementSystemFindEndorsementLists?: Resolver<
    ResolversTypes['PaginatedEndorsementListResponse'],
    ParentType,
    ContextType,
    RequireFields<QueryEndorsementSystemFindEndorsementListsArgs, 'input'>
  >
  endorsementSystemGetEndorsements?: Resolver<
    Maybe<ResolversTypes['PaginatedEndorsementResponse']>,
    ParentType,
    ContextType,
    RequireFields<QueryEndorsementSystemGetEndorsementsArgs, 'input'>
  >
  endorsementSystemGetGeneralPetitionEndorsements?: Resolver<
    Maybe<ResolversTypes['PaginatedEndorsementResponse']>,
    ParentType,
    ContextType,
    RequireFields<
      QueryEndorsementSystemGetGeneralPetitionEndorsementsArgs,
      'input'
    >
  >
  endorsementSystemGetGeneralPetitionList?: Resolver<
    ResolversTypes['EndorsementList'],
    ParentType,
    ContextType,
    RequireFields<QueryEndorsementSystemGetGeneralPetitionListArgs, 'input'>
  >
  endorsementSystemGetGeneralPetitionLists?: Resolver<
    ResolversTypes['PaginatedEndorsementListResponse'],
    ParentType,
    ContextType,
    RequireFields<QueryEndorsementSystemGetGeneralPetitionListsArgs, 'input'>
  >
  endorsementSystemGetSingleEndorsement?: Resolver<
    ResolversTypes['ExistsEndorsementResponse'],
    ParentType,
    ContextType,
    RequireFields<QueryEndorsementSystemGetSingleEndorsementArgs, 'input'>
  >
  endorsementSystemGetSingleEndorsementList?: Resolver<
    Maybe<ResolversTypes['EndorsementList']>,
    ParentType,
    ContextType,
    RequireFields<QueryEndorsementSystemGetSingleEndorsementListArgs, 'input'>
  >
  endorsementSystemUserEndorsementLists?: Resolver<
    ResolversTypes['PaginatedEndorsementListResponse'],
    ParentType,
    ContextType,
    RequireFields<QueryEndorsementSystemUserEndorsementListsArgs, 'input'>
  >
  endorsementSystemUserEndorsements?: Resolver<
    ResolversTypes['PaginatedEndorsementResponse'],
    ParentType,
    ContextType,
    RequireFields<QueryEndorsementSystemUserEndorsementsArgs, 'input'>
  >
  energyFundVehicleDetailsWithGrant?: Resolver<
    Maybe<ResolversTypes['EnergyFundVehicleDetailsWithGrant']>,
    ParentType,
    ContextType,
    RequireFields<QueryEnergyFundVehicleDetailsWithGrantArgs, 'permno'>
  >
  energyFundVehicleGrant?: Resolver<
    Maybe<ResolversTypes['EnergyFundVehicleGrant']>,
    ParentType,
    ContextType,
    RequireFields<QueryEnergyFundVehicleGrantArgs, 'vin'>
  >
  financialStatementsInaoClientFinancialLimit?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType,
    RequireFields<QueryFinancialStatementsInaoClientFinancialLimitArgs, 'input'>
  >
  financialStatementsInaoClientTypes?: Resolver<
    Maybe<Array<ResolversTypes['FinancialStatementsInaoClientType']>>,
    ParentType,
    ContextType
  >
  financialStatementsInaoConfig?: Resolver<
    Array<ResolversTypes['FinancialStatementsInaoConfig']>,
    ParentType,
    ContextType
  >
  financialStatementsInaoCurrentUserClientType?: Resolver<
    Maybe<ResolversTypes['FinancialStatementsInaoClientType']>,
    ParentType,
    ContextType
  >
  financialStatementsInaoElections?: Resolver<
    Maybe<Array<ResolversTypes['FinancialStatementsInaoElection']>>,
    ParentType,
    ContextType
  >
  financialStatementsInaoTaxInfo?: Resolver<
    Array<ResolversTypes['FinancialStatementsInaoTaxInfo']>,
    ParentType,
    ContextType,
    RequireFields<QueryFinancialStatementsInaoTaxInfoArgs, 'year'>
  >
  fishingLicenseShips?: Resolver<
    Maybe<Array<ResolversTypes['FishingLicenseShip']>>,
    ParentType,
    ContextType
  >
  fishingLicenses?: Resolver<
    Array<ResolversTypes['FishingLicenseLicense']>,
    ParentType,
    ContextType,
    RequireFields<QueryFishingLicensesArgs, 'registrationNumber'>
  >
  fiskistofaGetQuotaTypesForCalendarYear?: Resolver<
    ResolversTypes['FiskistofaQuotaTypeResponse'],
    ParentType,
    ContextType,
    RequireFields<QueryFiskistofaGetQuotaTypesForCalendarYearArgs, 'input'>
  >
  fiskistofaGetQuotaTypesForTimePeriod?: Resolver<
    ResolversTypes['FiskistofaQuotaTypeResponse'],
    ParentType,
    ContextType,
    RequireFields<QueryFiskistofaGetQuotaTypesForTimePeriodArgs, 'input'>
  >
  fiskistofaGetShipStatusForCalendarYear?: Resolver<
    ResolversTypes['FiskistofaShipStatusInformationResponse'],
    ParentType,
    ContextType,
    RequireFields<QueryFiskistofaGetShipStatusForCalendarYearArgs, 'input'>
  >
  fiskistofaGetShipStatusForTimePeriod?: Resolver<
    ResolversTypes['FiskistofaExtendedShipStatusInformationResponse'],
    ParentType,
    ContextType,
    RequireFields<QueryFiskistofaGetShipStatusForTimePeriodArgs, 'input'>
  >
  fiskistofaGetShips?: Resolver<
    ResolversTypes['FiskistofaShipBasicInfoResponse'],
    ParentType,
    ContextType,
    RequireFields<QueryFiskistofaGetShipsArgs, 'input'>
  >
  fiskistofaGetSingleShip?: Resolver<
    ResolversTypes['FiskistofaSingleShipResponse'],
    ParentType,
    ContextType,
    RequireFields<QueryFiskistofaGetSingleShipArgs, 'input'>
  >
  fiskistofaUpdateShipQuotaStatusForTimePeriod?: Resolver<
    ResolversTypes['FiskistofaQuotaStatusResponse'],
    ParentType,
    ContextType,
    RequireFields<
      QueryFiskistofaUpdateShipQuotaStatusForTimePeriodArgs,
      'input'
    >
  >
  fiskistofaUpdateShipStatusForCalendarYear?: Resolver<
    ResolversTypes['FiskistofaShipStatusInformationResponse'],
    ParentType,
    ContextType,
    RequireFields<QueryFiskistofaUpdateShipStatusForCalendarYearArgs, 'input'>
  >
  fiskistofaUpdateShipStatusForTimePeriod?: Resolver<
    ResolversTypes['FiskistofaExtendedShipStatusInformationUpdateResponse'],
    ParentType,
    ContextType,
    RequireFields<QueryFiskistofaUpdateShipStatusForTimePeriodArgs, 'input'>
  >
  formSystemApplication?: Resolver<
    ResolversTypes['FormSystemApplication'],
    ParentType,
    ContextType,
    RequireFields<QueryFormSystemApplicationArgs, 'input'>
  >
  formSystemForm?: Resolver<
    ResolversTypes['FormSystemFormResponse'],
    ParentType,
    ContextType,
    RequireFields<QueryFormSystemFormArgs, 'input'>
  >
  formSystemForms?: Resolver<
    ResolversTypes['FormSystemFormResponse'],
    ParentType,
    ContextType,
    RequireFields<QueryFormSystemFormsArgs, 'input'>
  >
  formSystemOrganization?: Resolver<
    ResolversTypes['FormSystemOrganization'],
    ParentType,
    ContextType,
    RequireFields<QueryFormSystemOrganizationArgs, 'input'>
  >
  formSystemOrganizationAdmin?: Resolver<
    ResolversTypes['FormSystemOrganizationAdmin'],
    ParentType,
    ContextType,
    RequireFields<QueryFormSystemOrganizationAdminArgs, 'input'>
  >
  friggOptions?: Resolver<
    Maybe<Array<ResolversTypes['EducationFriggKeyOptionModel']>>,
    ParentType,
    ContextType,
    RequireFields<QueryFriggOptionsArgs, 'input'>
  >
  friggSchoolsByMunicipality?: Resolver<
    Maybe<Array<ResolversTypes['EducationFriggOrganizationModel']>>,
    ParentType,
    ContextType
  >
  genericLicense?: Resolver<
    Maybe<ResolversTypes['GenericUserLicense']>,
    ParentType,
    ContextType,
    RequireFields<QueryGenericLicenseArgs, 'input'>
  >
  genericLicenseCollection?: Resolver<
    ResolversTypes['GenericLicenseCollection'],
    ParentType,
    ContextType,
    RequireFields<QueryGenericLicenseCollectionArgs, 'input'>
  >
  genericLicenses?: Resolver<
    Array<ResolversTypes['GenericUserLicense']>,
    ParentType,
    ContextType,
    Partial<QueryGenericLicensesArgs>
  >
  getAlcoholLicences?: Resolver<
    Array<ResolversTypes['AlcoholLicence']>,
    ParentType,
    ContextType
  >
  getAlertBanner?: Resolver<
    Maybe<ResolversTypes['AlertBanner']>,
    ParentType,
    ContextType,
    RequireFields<QueryGetAlertBannerArgs, 'input'>
  >
  getAllIcelandicNames?: Resolver<
    Array<ResolversTypes['IcelandicName']>,
    ParentType,
    ContextType
  >
  getAnchorPage?: Resolver<
    Maybe<ResolversTypes['AnchorPage']>,
    ParentType,
    ContextType,
    RequireFields<QueryGetAnchorPageArgs, 'input'>
  >
  getAnchorPages?: Resolver<
    Array<ResolversTypes['AnchorPage']>,
    ParentType,
    ContextType,
    RequireFields<QueryGetAnchorPagesArgs, 'input'>
  >
  getAnnualStatusDocument?: Resolver<
    Maybe<ResolversTypes['FinanceDocumentModel']>,
    ParentType,
    ContextType,
    RequireFields<QueryGetAnnualStatusDocumentArgs, 'input'>
  >
  getApiCatalogue?: Resolver<
    ResolversTypes['ApiCatalogue'],
    ParentType,
    ContextType,
    RequireFields<QueryGetApiCatalogueArgs, 'input'>
  >
  getApiServiceById?: Resolver<
    Maybe<ResolversTypes['Service']>,
    ParentType,
    ContextType,
    RequireFields<QueryGetApiServiceByIdArgs, 'input'>
  >
  getApplicationInformation?: Resolver<
    ResolversTypes['ApplicationInformation'],
    ParentType,
    ContextType,
    RequireFields<
      QueryGetApplicationInformationArgs,
      'applicationId' | 'nationalId'
    >
  >
  getArticleCategories?: Resolver<
    Array<ResolversTypes['ArticleCategory']>,
    ParentType,
    ContextType,
    RequireFields<QueryGetArticleCategoriesArgs, 'input'>
  >
  getArticles?: Resolver<
    Array<ResolversTypes['Article']>,
    ParentType,
    ContextType,
    RequireFields<QueryGetArticlesArgs, 'input'>
  >
  getAssessmentYears?: Resolver<
    ResolversTypes['FinanceAssessmentYears'],
    ParentType,
    ContextType
  >
  getAuction?: Resolver<
    ResolversTypes['Auction'],
    ParentType,
    ContextType,
    RequireFields<QueryGetAuctionArgs, 'input'>
  >
  getAuctions?: Resolver<
    Array<ResolversTypes['Auction']>,
    ParentType,
    ContextType,
    RequireFields<QueryGetAuctionsArgs, 'input'>
  >
  getBloodDonationRestrictionDetails?: Resolver<
    Maybe<ResolversTypes['BloodDonationRestrictionDetails']>,
    ParentType,
    ContextType,
    RequireFields<QueryGetBloodDonationRestrictionDetailsArgs, 'input'>
  >
  getBloodDonationRestrictionGenericTags?: Resolver<
    ResolversTypes['BloodDonationRestrictionGenericTagList'],
    ParentType,
    ContextType,
    RequireFields<QueryGetBloodDonationRestrictionGenericTagsArgs, 'input'>
  >
  getBloodDonationRestrictions?: Resolver<
    ResolversTypes['BloodDonationRestrictionList'],
    ParentType,
    ContextType,
    RequireFields<QueryGetBloodDonationRestrictionsArgs, 'input'>
  >
  getBrokers?: Resolver<
    Array<ResolversTypes['Broker']>,
    ParentType,
    ContextType
  >
  getBurningPermits?: Resolver<
    ResolversTypes['BurningPermitsResponse'],
    ParentType,
    ContextType
  >
  getCategoryPages?: Resolver<
    Maybe<Array<ResolversTypes['CategoryPage']>>,
    ParentType,
    ContextType,
    RequireFields<QueryGetCategoryPagesArgs, 'input'>
  >
  getChargeItemSubjectsByYear?: Resolver<
    ResolversTypes['FinanceChargeItemSubjectsByYear'],
    ParentType,
    ContextType,
    RequireFields<QueryGetChargeItemSubjectsByYearArgs, 'input'>
  >
  getChargeTypePeriodSubject?: Resolver<
    ResolversTypes['FinanceChargeTypePeriodSubject'],
    ParentType,
    ContextType,
    RequireFields<QueryGetChargeTypePeriodSubjectArgs, 'input'>
  >
  getChargeTypesByYear?: Resolver<
    Maybe<ResolversTypes['FinanceChargeTypesByYear']>,
    ParentType,
    ContextType,
    RequireFields<QueryGetChargeTypesByYearArgs, 'input'>
  >
  getChargeTypesDetailsByYear?: Resolver<
    ResolversTypes['FinanceChargeTypeDetails'],
    ParentType,
    ContextType,
    RequireFields<QueryGetChargeTypesDetailsByYearArgs, 'input'>
  >
  getContentSlug?: Resolver<
    Maybe<ResolversTypes['ContentSlug']>,
    ParentType,
    ContextType,
    RequireFields<QueryGetContentSlugArgs, 'input'>
  >
  getCustomPage?: Resolver<
    Maybe<ResolversTypes['CustomPage']>,
    ParentType,
    ContextType,
    RequireFields<QueryGetCustomPageArgs, 'input'>
  >
  getCustomSubpage?: Resolver<
    Maybe<ResolversTypes['CustomPage']>,
    ParentType,
    ContextType,
    RequireFields<QueryGetCustomSubpageArgs, 'input'>
  >
  getCustomerChargeType?: Resolver<
    Maybe<ResolversTypes['FinanceCustomerChargeType']>,
    ParentType,
    ContextType
  >
  getCustomerRecords?: Resolver<
    Maybe<ResolversTypes['FinanceCustomerRecords']>,
    ParentType,
    ContextType,
    RequireFields<QueryGetCustomerRecordsArgs, 'input'>
  >
  getCustomerTapControl?: Resolver<
    Maybe<ResolversTypes['FinanceCustomerTapsControlModel']>,
    ParentType,
    ContextType
  >
  getDebtStatus?: Resolver<
    ResolversTypes['FinanceDebtStatusModel'],
    ParentType,
    ContextType
  >
  getDocument?: Resolver<
    Maybe<ResolversTypes['DocumentDetails']>,
    ParentType,
    ContextType,
    RequireFields<QueryGetDocumentArgs, 'input'>
  >
  getDocumentCategories?: Resolver<
    Maybe<Array<ResolversTypes['DocumentCategory']>>,
    ParentType,
    ContextType
  >
  getDocumentPageNumber?: Resolver<
    ResolversTypes['DocumentPageResponse'],
    ParentType,
    ContextType,
    RequireFields<QueryGetDocumentPageNumberArgs, 'input'>
  >
  getDocumentSenders?: Resolver<
    Maybe<Array<ResolversTypes['DocumentSender']>>,
    ParentType,
    ContextType
  >
  getDocumentTypes?: Resolver<
    Maybe<Array<ResolversTypes['DocumentType']>>,
    ParentType,
    ContextType
  >
  getDocumentsList?: Resolver<
    ResolversTypes['FinanceDocumentsListModel'],
    ParentType,
    ContextType,
    RequireFields<QueryGetDocumentsListArgs, 'input'>
  >
  getDraftRegulation?: Resolver<
    ResolversTypes['JSON'],
    ParentType,
    ContextType,
    RequireFields<QueryGetDraftRegulationArgs, 'input'>
  >
  getDraftRegulationPdfDownload?: Resolver<
    ResolversTypes['DraftRegulationPdfDownloadModel'],
    ParentType,
    ContextType,
    RequireFields<QueryGetDraftRegulationPdfDownloadArgs, 'input'>
  >
  getDraftRegulations?: Resolver<
    ResolversTypes['JSON'],
    ParentType,
    ContextType,
    RequireFields<QueryGetDraftRegulationsArgs, 'input'>
  >
  getDraftRegulationsLawChapters?: Resolver<
    ResolversTypes['JSON'],
    ParentType,
    ContextType
  >
  getDraftRegulationsMinistries?: Resolver<
    ResolversTypes['JSON'],
    ParentType,
    ContextType
  >
  getErrorPage?: Resolver<
    Maybe<ResolversTypes['ErrorPage']>,
    ParentType,
    ContextType,
    RequireFields<QueryGetErrorPageArgs, 'input'>
  >
  getEvents?: Resolver<
    ResolversTypes['EventList'],
    ParentType,
    ContextType,
    RequireFields<QueryGetEventsArgs, 'input'>
  >
  getExcelVehicles?: Resolver<
    Maybe<ResolversTypes['VehiclesExcel']>,
    ParentType,
    ContextType
  >
  getFeaturedSupportQNAs?: Resolver<
    Array<ResolversTypes['SupportQNA']>,
    ParentType,
    ContextType,
    RequireFields<QueryGetFeaturedSupportQnAsArgs, 'input'>
  >
  getFinanceDocument?: Resolver<
    Maybe<ResolversTypes['FinanceDocumentModel']>,
    ParentType,
    ContextType,
    RequireFields<QueryGetFinanceDocumentArgs, 'input'>
  >
  getFinanceStatus?: Resolver<ResolversTypes['JSON'], ParentType, ContextType>
  getFinanceStatusDetails?: Resolver<
    Maybe<ResolversTypes['JSON']>,
    ParentType,
    ContextType,
    RequireFields<QueryGetFinanceStatusDetailsArgs, 'input'>
  >
  getFrontpage?: Resolver<
    Maybe<ResolversTypes['Frontpage']>,
    ParentType,
    ContextType,
    RequireFields<QueryGetFrontpageArgs, 'input'>
  >
  getGenericListItemBySlug?: Resolver<
    Maybe<ResolversTypes['GenericListItem']>,
    ParentType,
    ContextType,
    RequireFields<QueryGetGenericListItemBySlugArgs, 'input'>
  >
  getGenericListItems?: Resolver<
    Maybe<ResolversTypes['GenericListItemResponse']>,
    ParentType,
    ContextType,
    RequireFields<QueryGetGenericListItemsArgs, 'input'>
  >
  getGenericOverviewPage?: Resolver<
    Maybe<ResolversTypes['GenericOverviewPage']>,
    ParentType,
    ContextType,
    RequireFields<QueryGetGenericOverviewPageArgs, 'input'>
  >
  getGenericPage?: Resolver<
    Maybe<ResolversTypes['GenericPage']>,
    ParentType,
    ContextType,
    RequireFields<QueryGetGenericPageArgs, 'input'>
  >
  getGenericTagBySlug?: Resolver<
    Maybe<ResolversTypes['GenericTag']>,
    ParentType,
    ContextType,
    RequireFields<QueryGetGenericTagBySlugArgs, 'input'>
  >
  getGenericTagsInTagGroups?: Resolver<
    Maybe<Array<ResolversTypes['GenericTag']>>,
    ParentType,
    ContextType,
    RequireFields<QueryGetGenericTagsInTagGroupsArgs, 'input'>
  >
  getGrants?: Resolver<
    ResolversTypes['GrantList'],
    ParentType,
    ContextType,
    RequireFields<QueryGetGrantsArgs, 'input'>
  >
  getGroupedMenu?: Resolver<
    Maybe<ResolversTypes['GroupedMenu']>,
    ParentType,
    ContextType,
    RequireFields<QueryGetGroupedMenuArgs, 'input'>
  >
  getHomestays?: Resolver<
    Array<ResolversTypes['Homestay']>,
    ParentType,
    ContextType,
    RequireFields<QueryGetHomestaysArgs, 'input'>
  >
  getIcelandicNameById?: Resolver<
    ResolversTypes['IcelandicName'],
    ParentType,
    ContextType,
    RequireFields<QueryGetIcelandicNameByIdArgs, 'input'>
  >
  getIcelandicNameByInitialLetter?: Resolver<
    Array<ResolversTypes['IcelandicName']>,
    ParentType,
    ContextType,
    RequireFields<QueryGetIcelandicNameByInitialLetterArgs, 'input'>
  >
  getIcelandicNameBySearch?: Resolver<
    Array<ResolversTypes['IcelandicName']>,
    ParentType,
    ContextType,
    RequireFields<QueryGetIcelandicNameBySearchArgs, 'input'>
  >
  getIdentityDocument?: Resolver<
    Maybe<Array<ResolversTypes['IdentityDocumentModel']>>,
    ParentType,
    ContextType
  >
  getIdentityDocumentChildren?: Resolver<
    Maybe<Array<ResolversTypes['IdentityDocumentModelChild']>>,
    ParentType,
    ContextType
  >
  getJourneymanLicences?: Resolver<
    ResolversTypes['JourneymanLicencesResponse'],
    ParentType,
    ContextType
  >
  getLawyers?: Resolver<
    Array<ResolversTypes['Lawyer']>,
    ParentType,
    ContextType
  >
  getLifeEventPage?: Resolver<
    Maybe<ResolversTypes['LifeEventPage']>,
    ParentType,
    ContextType,
    RequireFields<QueryGetLifeEventPageArgs, 'input'>
  >
  getLifeEventsForOverview?: Resolver<
    Array<ResolversTypes['LifeEventPage']>,
    ParentType,
    ContextType,
    RequireFields<QueryGetLifeEventsForOverviewArgs, 'input'>
  >
  getLifeEventsInCategory?: Resolver<
    Array<ResolversTypes['LifeEventPage']>,
    ParentType,
    ContextType,
    RequireFields<QueryGetLifeEventsInCategoryArgs, 'input'>
  >
  getMachineModels?: Resolver<
    Array<ResolversTypes['WorkMachinesModel']>,
    ParentType,
    ContextType,
    RequireFields<QueryGetMachineModelsArgs, 'type'>
  >
  getMachineParentCategoryByTypeAndModel?: Resolver<
    Array<ResolversTypes['WorkMachinesCategory']>,
    ParentType,
    ContextType,
    RequireFields<QueryGetMachineParentCategoryByTypeAndModelArgs, 'input'>
  >
  getMachineSubCategories?: Resolver<
    Array<ResolversTypes['WorkMachinesSubCategory']>,
    ParentType,
    ContextType,
    RequireFields<QueryGetMachineSubCategoriesArgs, 'parentCategory'>
  >
  getMasterLicences?: Resolver<
    ResolversTypes['MasterLicencesResponse'],
    ParentType,
    ContextType
  >
  getMenu?: Resolver<
    Maybe<ResolversTypes['Menu']>,
    ParentType,
    ContextType,
    RequireFields<QueryGetMenuArgs, 'input'>
  >
  getNamespace?: Resolver<
    Maybe<ResolversTypes['Namespace']>,
    ParentType,
    ContextType,
    RequireFields<QueryGetNamespaceArgs, 'input'>
  >
  getNews?: Resolver<
    ResolversTypes['NewsList'],
    ParentType,
    ContextType,
    RequireFields<QueryGetNewsArgs, 'input'>
  >
  getNewsDates?: Resolver<
    Array<ResolversTypes['String']>,
    ParentType,
    ContextType,
    RequireFields<QueryGetNewsDatesArgs, 'input'>
  >
  getOpenApi?: Resolver<
    ResolversTypes['OpenApi'],
    ParentType,
    ContextType,
    RequireFields<QueryGetOpenApiArgs, 'input'>
  >
  getOpenDataPage?: Resolver<
    ResolversTypes['OpenDataPage'],
    ParentType,
    ContextType,
    RequireFields<QueryGetOpenDataPageArgs, 'input'>
  >
  getOpenDataSubpage?: Resolver<
    ResolversTypes['OpenDataSubpage'],
    ParentType,
    ContextType,
    RequireFields<QueryGetOpenDataSubpageArgs, 'input'>
  >
  getOperatingLicenses?: Resolver<
    ResolversTypes['PaginatedOperatingLicenses'],
    ParentType,
    ContextType,
    RequireFields<QueryGetOperatingLicensesArgs, 'input'>
  >
  getOperatingLicensesCSV?: Resolver<
    ResolversTypes['OperatingLicensesCSV'],
    ParentType,
    ContextType
  >
  getOrganization?: Resolver<
    Maybe<ResolversTypes['Organization']>,
    ParentType,
    ContextType,
    RequireFields<QueryGetOrganizationArgs, 'input'>
  >
  getOrganizationByNationalId?: Resolver<
    Maybe<ResolversTypes['Organization']>,
    ParentType,
    ContextType,
    RequireFields<QueryGetOrganizationByNationalIdArgs, 'input'>
  >
  getOrganizationByTitle?: Resolver<
    Maybe<ResolversTypes['Organization']>,
    ParentType,
    ContextType,
    RequireFields<QueryGetOrganizationByTitleArgs, 'input'>
  >
  getOrganizationPage?: Resolver<
    Maybe<ResolversTypes['OrganizationPage']>,
    ParentType,
    ContextType,
    RequireFields<QueryGetOrganizationPageArgs, 'input'>
  >
  getOrganizationPageStandaloneSitemapLevel1?: Resolver<
    Maybe<ResolversTypes['OrganizationPageStandaloneSitemap']>,
    ParentType,
    ContextType,
    RequireFields<QueryGetOrganizationPageStandaloneSitemapLevel1Args, 'input'>
  >
  getOrganizationPageStandaloneSitemapLevel2?: Resolver<
    Maybe<ResolversTypes['OrganizationPageStandaloneSitemapLevel2']>,
    ParentType,
    ContextType,
    RequireFields<QueryGetOrganizationPageStandaloneSitemapLevel2Args, 'input'>
  >
  getOrganizationParentSubpage?: Resolver<
    Maybe<ResolversTypes['OrganizationParentSubpage']>,
    ParentType,
    ContextType,
    RequireFields<QueryGetOrganizationParentSubpageArgs, 'input'>
  >
  getOrganizationSubpage?: Resolver<
    Maybe<ResolversTypes['OrganizationSubpage']>,
    ParentType,
    ContextType,
    RequireFields<QueryGetOrganizationSubpageArgs, 'input'>
  >
  getOrganizationSubpageById?: Resolver<
    Maybe<ResolversTypes['OrganizationSubpage']>,
    ParentType,
    ContextType,
    RequireFields<QueryGetOrganizationSubpageByIdArgs, 'input'>
  >
  getOrganizationTags?: Resolver<
    Maybe<ResolversTypes['OrganizationTags']>,
    ParentType,
    ContextType,
    RequireFields<QueryGetOrganizationTagsArgs, 'input'>
  >
  getOrganizations?: Resolver<
    ResolversTypes['Organizations'],
    ParentType,
    ContextType,
    Partial<QueryGetOrganizationsArgs>
  >
  getPaperMailInfo?: Resolver<
    Maybe<ResolversTypes['PaperMailBody']>,
    ParentType,
    ContextType
  >
  getParentalLeaves?: Resolver<
    Maybe<Array<ResolversTypes['ParentalLeave']>>,
    ParentType,
    ContextType
  >
  getParentalLeavesApplicationPaymentPlan?: Resolver<
    Maybe<Array<ResolversTypes['ParentalLeavePaymentPlan']>>,
    ParentType,
    ContextType,
    RequireFields<QueryGetParentalLeavesApplicationPaymentPlanArgs, 'input'>
  >
  getParentalLeavesEntitlements?: Resolver<
    Maybe<ResolversTypes['ParentalLeaveEntitlement']>,
    ParentType,
    ContextType,
    RequireFields<QueryGetParentalLeavesEntitlementsArgs, 'input'>
  >
  getParentalLeavesEstimatedPaymentPlan?: Resolver<
    Maybe<Array<ResolversTypes['ParentalLeavePaymentPlan']>>,
    ParentType,
    ContextType,
    RequireFields<QueryGetParentalLeavesEstimatedPaymentPlanArgs, 'input'>
  >
  getParentalLeavesPeriodEndDate?: Resolver<
    ResolversTypes['ParentalLeavePeriodEndDate'],
    ParentType,
    ContextType,
    RequireFields<QueryGetParentalLeavesPeriodEndDateArgs, 'input'>
  >
  getParentalLeavesPeriodLength?: Resolver<
    ResolversTypes['ParentalLeavePeriodLength'],
    ParentType,
    ContextType,
    RequireFields<QueryGetParentalLeavesPeriodLengthArgs, 'input'>
  >
  getPassport?: Resolver<ResolversTypes['Passport'], ParentType, ContextType>
  getPaymentSchedule?: Resolver<
    Maybe<ResolversTypes['PaymentScheduleModel']>,
    ParentType,
    ContextType
  >
  getPaymentScheduleById?: Resolver<
    ResolversTypes['PaymentScheduleDetailModel'],
    ParentType,
    ContextType,
    RequireFields<QueryGetPaymentScheduleByIdArgs, 'input'>
  >
  getPensionCalculation?: Resolver<
    ResolversTypes['SocialInsurancePensionCalculationResponse'],
    ParentType,
    ContextType,
    RequireFields<QueryGetPensionCalculationArgs, 'input'>
  >
  getPensionFunds?: Resolver<
    Maybe<Array<ResolversTypes['PensionFund']>>,
    ParentType,
    ContextType
  >
  getPregnancyStatus?: Resolver<
    Maybe<ResolversTypes['PregnancyStatus']>,
    ParentType,
    ContextType
  >
  getPrivatePensionFunds?: Resolver<
    Maybe<Array<ResolversTypes['PensionFund']>>,
    ParentType,
    ContextType
  >
  getProfessionRights?: Resolver<
    ResolversTypes['ProfessionRightsResponse'],
    ParentType,
    ContextType
  >
  getProjectPage?: Resolver<
    Maybe<ResolversTypes['ProjectPage']>,
    ParentType,
    ContextType,
    RequireFields<QueryGetProjectPageArgs, 'input'>
  >
  getProviderOrganisation?: Resolver<
    ResolversTypes['Organisation'],
    ParentType,
    ContextType,
    RequireFields<QueryGetProviderOrganisationArgs, 'nationalId'>
  >
  getProviderOrganisations?: Resolver<
    Array<ResolversTypes['Organisation']>,
    ParentType,
    ContextType
  >
  getPublicVehicleSearch?: Resolver<
    Maybe<ResolversTypes['VehiclesPublicVehicleSearch']>,
    ParentType,
    ContextType,
    RequireFields<QueryGetPublicVehicleSearchArgs, 'input'>
  >
  getPublishedMaterial?: Resolver<
    ResolversTypes['EnhancedAssetSearchResult'],
    ParentType,
    ContextType,
    RequireFields<QueryGetPublishedMaterialArgs, 'input'>
  >
  getRealEstateAddress?: Resolver<
    Array<ResolversTypes['AssetName']>,
    ParentType,
    ContextType,
    RequireFields<QueryGetRealEstateAddressArgs, 'input'>
  >
  getRealEstateAgents?: Resolver<
    Array<ResolversTypes['RealEstateAgent']>,
    ParentType,
    ContextType
  >
  getRegulation?: Resolver<
    ResolversTypes['JSON'],
    ParentType,
    ContextType,
    RequireFields<QueryGetRegulationArgs, 'input'>
  >
  getRegulationFromApi?: Resolver<
    ResolversTypes['JSON'],
    ParentType,
    ContextType,
    RequireFields<QueryGetRegulationFromApiArgs, 'input'>
  >
  getRegulationImpactsByName?: Resolver<
    ResolversTypes['JSON'],
    ParentType,
    ContextType,
    RequireFields<QueryGetRegulationImpactsByNameArgs, 'input'>
  >
  getRegulationOptionList?: Resolver<
    ResolversTypes['JSON'],
    ParentType,
    ContextType,
    RequireFields<QueryGetRegulationOptionListArgs, 'input'>
  >
  getRegulations?: Resolver<
    ResolversTypes['JSON'],
    ParentType,
    ContextType,
    RequireFields<QueryGetRegulationsArgs, 'input'>
  >
  getRegulationsLawChapters?: Resolver<
    ResolversTypes['JSON'],
    ParentType,
    ContextType,
    RequireFields<QueryGetRegulationsLawChaptersArgs, 'input'>
  >
  getRegulationsMinistries?: Resolver<
    ResolversTypes['JSON'],
    ParentType,
    ContextType,
    RequireFields<QueryGetRegulationsMinistriesArgs, 'input'>
  >
  getRegulationsOptionSearch?: Resolver<
    ResolversTypes['JSON'],
    ParentType,
    ContextType,
    RequireFields<QueryGetRegulationsOptionSearchArgs, 'input'>
  >
  getRegulationsSearch?: Resolver<
    ResolversTypes['JSON'],
    ParentType,
    ContextType,
    RequireFields<QueryGetRegulationsSearchArgs, 'input'>
  >
  getRegulationsYears?: Resolver<
    ResolversTypes['JSON'],
    ParentType,
    ContextType
  >
  getReligiousOrganizations?: Resolver<
    ResolversTypes['ReligiousOrganizationsResponse'],
    ParentType,
    ContextType
  >
  getServicePortalAlertBanners?: Resolver<
    Maybe<Array<ResolversTypes['AlertBanner']>>,
    ParentType,
    ContextType,
    RequireFields<QueryGetServicePortalAlertBannersArgs, 'input'>
  >
  getServiceWebPage?: Resolver<
    Maybe<ResolversTypes['ServiceWebPage']>,
    ParentType,
    ContextType,
    RequireFields<QueryGetServiceWebPageArgs, 'input'>
  >
  getShippedRegulations?: Resolver<
    Array<ResolversTypes['DraftRegulationShippedModel']>,
    ParentType,
    ContextType
  >
  getSingleArticle?: Resolver<
    Maybe<ResolversTypes['Article']>,
    ParentType,
    ContextType,
    RequireFields<QueryGetSingleArticleArgs, 'input'>
  >
  getSingleEntryTitleById?: Resolver<
    Maybe<ResolversTypes['EntryTitle']>,
    ParentType,
    ContextType,
    RequireFields<QueryGetSingleEntryTitleByIdArgs, 'input'>
  >
  getSingleEvent?: Resolver<
    Maybe<ResolversTypes['Event']>,
    ParentType,
    ContextType,
    RequireFields<QueryGetSingleEventArgs, 'input'>
  >
  getSingleGrant?: Resolver<
    Maybe<ResolversTypes['Grant']>,
    ParentType,
    ContextType,
    RequireFields<QueryGetSingleGrantArgs, 'input'>
  >
  getSingleManual?: Resolver<
    Maybe<ResolversTypes['Manual']>,
    ParentType,
    ContextType,
    RequireFields<QueryGetSingleManualArgs, 'input'>
  >
  getSingleNews?: Resolver<
    Maybe<ResolversTypes['News']>,
    ParentType,
    ContextType,
    RequireFields<QueryGetSingleNewsArgs, 'input'>
  >
  getSingleSupportQNA?: Resolver<
    Maybe<ResolversTypes['SupportQNA']>,
    ParentType,
    ContextType,
    RequireFields<QueryGetSingleSupportQnaArgs, 'input'>
  >
  getStatisticsByKeys?: Resolver<
    ResolversTypes['StatisticsQueryResponse'],
    ParentType,
    ContextType,
    RequireFields<QueryGetStatisticsByKeysArgs, 'input'>
  >
  getStatisticsTotal?: Resolver<
    ResolversTypes['ProviderStatistics'],
    ParentType,
    ContextType,
    Partial<QueryGetStatisticsTotalArgs>
  >
  getSubpageHeader?: Resolver<
    Maybe<ResolversTypes['SubpageHeader']>,
    ParentType,
    ContextType,
    RequireFields<QueryGetSubpageHeaderArgs, 'input'>
  >
  getSupportCategories?: Resolver<
    Array<ResolversTypes['SupportCategory']>,
    ParentType,
    ContextType,
    RequireFields<QueryGetSupportCategoriesArgs, 'input'>
  >
  getSupportCategoriesInOrganization?: Resolver<
    Array<ResolversTypes['SupportCategory']>,
    ParentType,
    ContextType,
    RequireFields<QueryGetSupportCategoriesInOrganizationArgs, 'input'>
  >
  getSupportCategory?: Resolver<
    Maybe<ResolversTypes['SupportCategory']>,
    ParentType,
    ContextType,
    RequireFields<QueryGetSupportCategoryArgs, 'input'>
  >
  getSupportQNAs?: Resolver<
    Array<ResolversTypes['SupportQNA']>,
    ParentType,
    ContextType,
    RequireFields<QueryGetSupportQnAsArgs, 'input'>
  >
  getSupportQNAsInCategory?: Resolver<
    Array<ResolversTypes['SupportQNA']>,
    ParentType,
    ContextType,
    RequireFields<QueryGetSupportQnAsInCategoryArgs, 'input'>
  >
  getSyslumennAuctions?: Resolver<
    Array<ResolversTypes['SyslumennAuction']>,
    ParentType,
    ContextType
  >
  getSyslumennCertificateInfo?: Resolver<
    ResolversTypes['CertificateInfoResponse'],
    ParentType,
    ContextType
  >
  getSyslumennDistrictCommissionersAgencies?: Resolver<
    Array<ResolversTypes['DistrictCommissionerAgencies']>,
    ParentType,
    ContextType
  >
  getSyslumennElectronicIDStatus?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType,
    RequireFields<QueryGetSyslumennElectronicIdStatusArgs, 'input'>
  >
  getSyslumennEstateRelations?: Resolver<
    ResolversTypes['EstateRelations'],
    ParentType,
    ContextType
  >
  getTabSection?: Resolver<
    Maybe<ResolversTypes['TabSection']>,
    ParentType,
    ContextType,
    RequireFields<QueryGetTabSectionArgs, 'input'>
  >
  getTeamMembers?: Resolver<
    Maybe<ResolversTypes['TeamMemberResponse']>,
    ParentType,
    ContextType,
    RequireFields<QueryGetTeamMembersArgs, 'input'>
  >
  getTechnicalInfoInputs?: Resolver<
    Array<ResolversTypes['WorkMachinesTechInfoItem']>,
    ParentType,
    ContextType,
    RequireFields<
      QueryGetTechnicalInfoInputsArgs,
      'parentCategory' | 'subCategory'
    >
  >
  getTemporaryCalculations?: Resolver<
    ResolversTypes['SocialInsuranceTemporaryCalculation'],
    ParentType,
    ContextType,
    RequireFields<QueryGetTemporaryCalculationsArgs, 'input'>
  >
  getTemporaryEventLicences?: Resolver<
    Array<ResolversTypes['TemporaryEventLicence']>,
    ParentType,
    ContextType
  >
  getTranslations?: Resolver<
    Maybe<ResolversTypes['JSON']>,
    ParentType,
    ContextType,
    RequireFields<QueryGetTranslationsArgs, 'input'>
  >
  getTypeByRegistrationNumber?: Resolver<
    ResolversTypes['WorkMachinesMachineType'],
    ParentType,
    ContextType,
    RequireFields<
      QueryGetTypeByRegistrationNumberArgs,
      'applicationId' | 'registrationNumber'
    >
  >
  getUnions?: Resolver<
    Maybe<Array<ResolversTypes['Union']>>,
    ParentType,
    ContextType
  >
  getUrl?: Resolver<
    Maybe<ResolversTypes['Url']>,
    ParentType,
    ContextType,
    RequireFields<QueryGetUrlArgs, 'input'>
  >
  getUserProfile?: Resolver<
    Maybe<ResolversTypes['UserProfile']>,
    ParentType,
    ContextType
  >
  getUserProfileLocale?: Resolver<
    Maybe<ResolversTypes['UserProfileLocale']>,
    ParentType,
    ContextType
  >
  getVehicleType?: Resolver<
    Array<ResolversTypes['AssetName']>,
    ParentType,
    ContextType,
    RequireFields<QueryGetVehicleTypeArgs, 'input'>
  >
  getWorkerMachineByRegno?: Resolver<
    ResolversTypes['MachineDetails'],
    ParentType,
    ContextType,
    RequireFields<QueryGetWorkerMachineByRegnoArgs, 'regno' | 'rel'>
  >
  getWorkerMachineDetails?: Resolver<
    ResolversTypes['MachineDetails'],
    ParentType,
    ContextType,
    RequireFields<QueryGetWorkerMachineDetailsArgs, 'id' | 'rel'>
  >
  getWorkerMachinePaymentRequired?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType,
    RequireFields<QueryGetWorkerMachinePaymentRequiredArgs, 'regNumber'>
  >
  hasDisabilityLicense?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType
  >
  healthDirectorateOrganDonation?: Resolver<
    ResolversTypes['HealthDirectorateOrganDonation'],
    ParentType,
    ContextType,
    Partial<QueryHealthDirectorateOrganDonationArgs>
  >
  healthDirectoratePrescriptions?: Resolver<
    ResolversTypes['HealthDirectoratePrescriptions'],
    ParentType,
    ContextType,
    Partial<QueryHealthDirectoratePrescriptionsArgs>
  >
  healthDirectorateReferrals?: Resolver<
    ResolversTypes['HealthDirectorateReferrals'],
    ParentType,
    ContextType,
    Partial<QueryHealthDirectorateReferralsArgs>
  >
  healthDirectorateVaccinations?: Resolver<
    ResolversTypes['HealthDirectorateVaccinations'],
    ParentType,
    ContextType,
    Partial<QueryHealthDirectorateVaccinationsArgs>
  >
  healthDirectorateWaitlists?: Resolver<
    ResolversTypes['HealthDirectorateWaitlists'],
    ParentType,
    ContextType,
    Partial<QueryHealthDirectorateWaitlistsArgs>
  >
  healthInsuranceIsHealthInsured?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType,
    Partial<QueryHealthInsuranceIsHealthInsuredArgs>
  >
  hmsLoansHistory?: Resolver<
    Maybe<Array<ResolversTypes['HmsLoansHistory']>>,
    ParentType,
    ContextType
  >
  hmsLoansHistoryPdf?: Resolver<
    Maybe<ResolversTypes['HmsLoansHistoryPdf']>,
    ParentType,
    ContextType
  >
  hmsLoansPaymentHistory?: Resolver<
    Maybe<Array<ResolversTypes['HmsLoansPaymentHistory']>>,
    ParentType,
    ContextType,
    RequireFields<QueryHmsLoansPaymentHistoryArgs, 'input'>
  >
  housingBenefitCalculatorCalculation?: Resolver<
    ResolversTypes['HousingBenefitCalculationModel'],
    ParentType,
    ContextType,
    RequireFields<QueryHousingBenefitCalculatorCalculationArgs, 'input'>
  >
  housingBenefitCalculatorSpecificSupportCalculation?: Resolver<
    ResolversTypes['HousingBenefitCalculationModel'],
    ParentType,
    ContextType,
    RequireFields<
      QueryHousingBenefitCalculatorSpecificSupportCalculationArgs,
      'input'
    >
  >
  housingBenefitsPayments?: Resolver<
    Maybe<ResolversTypes['HousingBenefitsPayments']>,
    ParentType,
    ContextType,
    RequireFields<QueryHousingBenefitsPaymentsArgs, 'input'>
  >
  icelandicGovernmentInstitutionVacancies?: Resolver<
    ResolversTypes['IcelandicGovernmentInstitutionVacanciesResponse'],
    ParentType,
    ContextType,
    RequireFields<QueryIcelandicGovernmentInstitutionVacanciesArgs, 'input'>
  >
  icelandicGovernmentInstitutionVacancyById?: Resolver<
    ResolversTypes['IcelandicGovernmentInstitutionVacancyByIdResponse'],
    ParentType,
    ContextType,
    RequireFields<QueryIcelandicGovernmentInstitutionVacancyByIdArgs, 'input'>
  >
  identity?: Resolver<
    Maybe<ResolversTypes['Identity']>,
    ParentType,
    ContextType,
    Partial<QueryIdentityArgs>
  >
  innaDiplomas?: Resolver<
    ResolversTypes['DiplomaModel'],
    ParentType,
    ContextType
  >
  innaPeriods?: Resolver<
    ResolversTypes['PeriodsModel'],
    ParentType,
    ContextType
  >
  intellectualProperties?: Resolver<
    Maybe<ResolversTypes['IntellectualPropertiesResponse']>,
    ParentType,
    ContextType
  >
  intellectualPropertiesDesign?: Resolver<
    Maybe<ResolversTypes['IntellectualPropertiesDesign']>,
    ParentType,
    ContextType,
    RequireFields<QueryIntellectualPropertiesDesignArgs, 'input'>
  >
  intellectualPropertiesDesignImage?: Resolver<
    Maybe<ResolversTypes['IntellectualPropertiesImage']>,
    ParentType,
    ContextType,
    RequireFields<QueryIntellectualPropertiesDesignImageArgs, 'input'>
  >
  intellectualPropertiesDesignImageList?: Resolver<
    Maybe<ResolversTypes['IntellectualPropertiesImageList']>,
    ParentType,
    ContextType,
    RequireFields<QueryIntellectualPropertiesDesignImageListArgs, 'input'>
  >
  intellectualPropertiesPatent?: Resolver<
    Maybe<ResolversTypes['IntellectualPropertiesPatent']>,
    ParentType,
    ContextType,
    RequireFields<QueryIntellectualPropertiesPatentArgs, 'input'>
  >
  intellectualPropertiesTrademark?: Resolver<
    Maybe<ResolversTypes['IntellectualPropertiesTrademark']>,
    ParentType,
    ContextType,
    RequireFields<QueryIntellectualPropertiesTrademarkArgs, 'input'>
  >
  intellectualPropertiesTrademarks?: Resolver<
    Maybe<Array<ResolversTypes['IntellectualPropertiesTrademark']>>,
    ParentType,
    ContextType
  >
  isEmployerValid?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType,
    RequireFields<QueryIsEmployerValidArgs, 'input'>
  >
  lawAndOrderCourtCaseDetail?: Resolver<
    Maybe<ResolversTypes['LawAndOrderCourtCase']>,
    ParentType,
    ContextType,
    RequireFields<QueryLawAndOrderCourtCaseDetailArgs, 'input'>
  >
  lawAndOrderCourtCasesList?: Resolver<
    Maybe<ResolversTypes['LawAndOrderCourtCases']>,
    ParentType,
    ContextType,
    Partial<QueryLawAndOrderCourtCasesListArgs>
  >
  lawAndOrderLawyers?: Resolver<
    Maybe<ResolversTypes['LawAndOrderLawyers']>,
    ParentType,
    ContextType,
    Partial<QueryLawAndOrderLawyersArgs>
  >
  lawAndOrderSubpoena?: Resolver<
    Maybe<ResolversTypes['LawAndOrderSubpoena']>,
    ParentType,
    ContextType,
    RequireFields<QueryLawAndOrderSubpoenaArgs, 'input'>
  >
  learnerMentorEligibility?: Resolver<
    ResolversTypes['ApplicationEligibility'],
    ParentType,
    ContextType
  >
  legacyDrivingLicense?: Resolver<
    Maybe<ResolversTypes['DrivingLicense']>,
    ParentType,
    ContextType
  >
  listDocuments?: Resolver<
    Maybe<Array<ResolversTypes['Document']>>,
    ParentType,
    ContextType
  >
  listDocumentsV2?: Resolver<
    Maybe<ResolversTypes['DocumentListResponse']>,
    ParentType,
    ContextType,
    RequireFields<QueryListDocumentsV2Args, 'input'>
  >
  malwareScanStatus?: Resolver<
    ResolversTypes['MalwareScanStatus'],
    ParentType,
    ContextType,
    RequireFields<QueryMalwareScanStatusArgs, 'filename'>
  >
  municipalitiesFinancialAidApplication?: Resolver<
    Maybe<ResolversTypes['MunicipalitiesFinancialAidApplicationModel']>,
    ParentType,
    ContextType,
    RequireFields<QueryMunicipalitiesFinancialAidApplicationArgs, 'input'>
  >
  municipalitiesFinancialAidApplicationSignedUrl?: Resolver<
    ResolversTypes['MunicipalitiesFinancialAidSignedUrlModel'],
    ParentType,
    ContextType,
    RequireFields<
      QueryMunicipalitiesFinancialAidApplicationSignedUrlArgs,
      'input'
    >
  >
  myPlateOwnershipChecksByRegno?: Resolver<
    Maybe<ResolversTypes['MyPlateOwnershipChecksByRegno']>,
    ParentType,
    ContextType,
    RequireFields<QueryMyPlateOwnershipChecksByRegnoArgs, 'regno'>
  >
  nationalRegistryChildren?: Resolver<
    Maybe<Array<ResolversTypes['NationalRegistryChild']>>,
    ParentType,
    ContextType
  >
  nationalRegistryPerson?: Resolver<
    Maybe<ResolversTypes['NationalRegistryPerson']>,
    ParentType,
    ContextType,
    Partial<QueryNationalRegistryPersonArgs>
  >
  nationalRegistryReligions?: Resolver<
    Maybe<Array<ResolversTypes['NationalRegistryReligion']>>,
    ParentType,
    ContextType
  >
  nationalRegistryUser?: Resolver<
    Maybe<ResolversTypes['NationalRegistryUser']>,
    ParentType,
    ContextType
  >
  nationalRegistryUserV2?: Resolver<
    Maybe<ResolversTypes['NationalRegistryXRoadPerson']>,
    ParentType,
    ContextType
  >
  nationalRegistryUserV2ChildGuardianship?: Resolver<
    Maybe<ResolversTypes['NationalRegistryXRoadChildGuardianship']>,
    ParentType,
    ContextType,
    RequireFields<QueryNationalRegistryUserV2ChildGuardianshipArgs, 'input'>
  >
  occupationalLicense?: Resolver<
    Maybe<ResolversTypes['OccupationalLicensesLicenseResponse']>,
    ParentType,
    ContextType,
    RequireFields<QueryOccupationalLicenseArgs, 'input'>
  >
  occupationalLicenses?: Resolver<
    Maybe<ResolversTypes['OccupationalLicensesLicenses']>,
    ParentType,
    ContextType
  >
  officialJournalOfIcelandAdvert?: Resolver<
    ResolversTypes['OfficialJournalOfIcelandAdvertResponse'],
    ParentType,
    ContextType,
    RequireFields<QueryOfficialJournalOfIcelandAdvertArgs, 'params'>
  >
  officialJournalOfIcelandAdverts?: Resolver<
    ResolversTypes['OfficialJournalOfIcelandAdvertsResponse'],
    ParentType,
    ContextType,
    RequireFields<QueryOfficialJournalOfIcelandAdvertsArgs, 'input'>
  >
  officialJournalOfIcelandAdvertsSimilar?: Resolver<
    ResolversTypes['OfficialJournalOfIcelandAdvertSimilarResponse'],
    ParentType,
    ContextType,
    RequireFields<QueryOfficialJournalOfIcelandAdvertsSimilarArgs, 'params'>
  >
  officialJournalOfIcelandApplicationAdvertTemplate?: Resolver<
    ResolversTypes['officialJournalOfIcelandApplicationAdvertTemplateResponse'],
    ParentType,
    ContextType,
    RequireFields<
      QueryOfficialJournalOfIcelandApplicationAdvertTemplateArgs,
      'input'
    >
  >
  officialJournalOfIcelandApplicationAdvertTemplateTypes?: Resolver<
    ResolversTypes['officialJournalOfIcelandApplicationAdvertTemplateTypesResponse'],
    ParentType,
    ContextType
  >
  officialJournalOfIcelandApplicationGetAttachments?: Resolver<
    ResolversTypes['OfficialJournalOfIcelandApplicationGetApplicationAttachments'],
    ParentType,
    ContextType,
    RequireFields<
      QueryOfficialJournalOfIcelandApplicationGetAttachmentsArgs,
      'input'
    >
  >
  officialJournalOfIcelandApplicationGetMyUserInfo?: Resolver<
    ResolversTypes['OfficialJournalOfIcelandApplicationGetMyUserInfoResponse'],
    ParentType,
    ContextType
  >
  officialJournalOfIcelandApplicationGetPdfUrl?: Resolver<
    ResolversTypes['OfficialJournalOfIcelandApplicationGetPdfUrlResponse'],
    ParentType,
    ContextType,
    RequireFields<QueryOfficialJournalOfIcelandApplicationGetPdfUrlArgs, 'id'>
  >
  officialJournalOfIcelandApplicationGetPrice?: Resolver<
    ResolversTypes['OfficialJournalOfIcelandApplicationGetPriceResponse'],
    ParentType,
    ContextType,
    RequireFields<QueryOfficialJournalOfIcelandApplicationGetPriceArgs, 'id'>
  >
  officialJournalOfIcelandApplicationGetUserInvolvedParties?: Resolver<
    ResolversTypes['OfficialJournalOfIcelandApplicationGetUserInvolvedPartiesResponse'],
    ParentType,
    ContextType,
    RequireFields<
      QueryOfficialJournalOfIcelandApplicationGetUserInvolvedPartiesArgs,
      'input'
    >
  >
  officialJournalOfIcelandApplicationInvolvedPartySignature?: Resolver<
    ResolversTypes['OfficialJournalOfIcelandApplicationInvolvedPartySignatureResponse'],
    ParentType,
    ContextType,
    RequireFields<
      QueryOfficialJournalOfIcelandApplicationInvolvedPartySignatureArgs,
      'input'
    >
  >
  officialJournalOfIcelandCasesInProgress?: Resolver<
    ResolversTypes['OfficialJournalOfIcelandCasesInProgressResponse'],
    ParentType,
    ContextType,
    RequireFields<QueryOfficialJournalOfIcelandCasesInProgressArgs, 'params'>
  >
  officialJournalOfIcelandCategories?: Resolver<
    ResolversTypes['OfficialJournalOfIcelandAdvertsCategoryResponse'],
    ParentType,
    ContextType,
    RequireFields<QueryOfficialJournalOfIcelandCategoriesArgs, 'params'>
  >
  officialJournalOfIcelandDepartment?: Resolver<
    ResolversTypes['OfficialJournalOfIcelandAdvertsDepartmentResponse'],
    ParentType,
    ContextType,
    RequireFields<QueryOfficialJournalOfIcelandDepartmentArgs, 'params'>
  >
  officialJournalOfIcelandDepartments?: Resolver<
    ResolversTypes['OfficialJournalOfIcelandAdvertsDepartmentsResponse'],
    ParentType,
    ContextType,
    RequireFields<QueryOfficialJournalOfIcelandDepartmentsArgs, 'params'>
  >
  officialJournalOfIcelandInstitutions?: Resolver<
    ResolversTypes['OfficialJournalOfIcelandAdvertsInstitutionsResponse'],
    ParentType,
    ContextType,
    RequireFields<QueryOfficialJournalOfIcelandInstitutionsArgs, 'params'>
  >
  officialJournalOfIcelandMainCategories?: Resolver<
    ResolversTypes['OfficialJournalOfIcelandAdvertsMainCategoriesResponse'],
    ParentType,
    ContextType,
    RequireFields<QueryOfficialJournalOfIcelandMainCategoriesArgs, 'params'>
  >
  officialJournalOfIcelandMainTypes?: Resolver<
    ResolversTypes['OfficialJournalOfIcelandMainTypesResponse'],
    ParentType,
    ContextType,
    RequireFields<QueryOfficialJournalOfIcelandMainTypesArgs, 'params'>
  >
  officialJournalOfIcelandType?: Resolver<
    ResolversTypes['OfficialJournalOfIcelandAdvertsTypeResponse'],
    ParentType,
    ContextType,
    RequireFields<QueryOfficialJournalOfIcelandTypeArgs, 'params'>
  >
  officialJournalOfIcelandTypes?: Resolver<
    ResolversTypes['OfficialJournalOfIcelandAdvertsTypesResponse'],
    ParentType,
    ContextType,
    RequireFields<QueryOfficialJournalOfIcelandTypesArgs, 'params'>
  >
  paymentCatalog?: Resolver<
    ResolversTypes['PaymentCatalogResponse'],
    ParentType,
    ContextType,
    RequireFields<QueryPaymentCatalogArgs, 'input'>
  >
  paymentScheduleCompanyConditions?: Resolver<
    Maybe<ResolversTypes['PaymentScheduleCompanyConditions']>,
    ParentType,
    ContextType
  >
  paymentScheduleConditions?: Resolver<
    Maybe<ResolversTypes['PaymentScheduleConditions']>,
    ParentType,
    ContextType
  >
  paymentScheduleDebts?: Resolver<
    Maybe<Array<ResolversTypes['PaymentScheduleDebts']>>,
    ParentType,
    ContextType
  >
  paymentScheduleDistribution?: Resolver<
    Maybe<ResolversTypes['PaymentScheduleDistribution']>,
    ParentType,
    ContextType,
    RequireFields<QueryPaymentScheduleDistributionArgs, 'input'>
  >
  paymentScheduleEmployer?: Resolver<
    Maybe<ResolversTypes['PaymentScheduleEmployer']>,
    ParentType,
    ContextType
  >
  paymentScheduleInitialSchedule?: Resolver<
    Maybe<ResolversTypes['PaymentScheduleInitialSchedule']>,
    ParentType,
    ContextType,
    RequireFields<QueryPaymentScheduleInitialScheduleArgs, 'input'>
  >
  paymentsGetFlow?: Resolver<
    ResolversTypes['PaymentsGetPaymentFlowResponse'],
    ParentType,
    ContextType,
    RequireFields<QueryPaymentsGetFlowArgs, 'input'>
  >
  paymentsGetVerificationStatus?: Resolver<
    ResolversTypes['PaymentsGetVerificationStatus'],
    ParentType,
    ContextType,
    RequireFields<QueryPaymentsGetVerificationStatusArgs, 'input'>
  >
  plateAvailable?: Resolver<
    ResolversTypes['PlateAvailability'],
    ParentType,
    ContextType,
    RequireFields<QueryPlateAvailableArgs, 'input'>
  >
  requestCorrectionOnMortgageCertificate?: Resolver<
    ResolversTypes['RequestCorrectionOnMortgageCertificateModel'],
    ParentType,
    ContextType,
    RequireFields<QueryRequestCorrectionOnMortgageCertificateArgs, 'input'>
  >
  rightsPortalCopaymentBills?: Resolver<
    ResolversTypes['RightsPortalCopaymentBillResponse'],
    ParentType,
    ContextType,
    RequireFields<QueryRightsPortalCopaymentBillsArgs, 'input'>
  >
  rightsPortalCopaymentPeriods?: Resolver<
    ResolversTypes['RightsPortalCopaymentPeriodResponse'],
    ParentType,
    ContextType,
    RequireFields<QueryRightsPortalCopaymentPeriodsArgs, 'input'>
  >
  rightsPortalCopaymentStatus?: Resolver<
    Maybe<ResolversTypes['RightsPortalCopaymentStatus']>,
    ParentType,
    ContextType
  >
  rightsPortalCurrentDentist?: Resolver<
    Maybe<ResolversTypes['RightsPortalDentistStatus']>,
    ParentType,
    ContextType
  >
  rightsPortalDentistStatus?: Resolver<
    Maybe<ResolversTypes['RightsPortalDentistStatus']>,
    ParentType,
    ContextType
  >
  rightsPortalDrugBillLines?: Resolver<
    Array<ResolversTypes['RightsPortalDrugBillLine']>,
    ParentType,
    ContextType,
    RequireFields<QueryRightsPortalDrugBillLinesArgs, 'input'>
  >
  rightsPortalDrugBills?: Resolver<
    Array<ResolversTypes['RightsPortalDrugBill']>,
    ParentType,
    ContextType,
    RequireFields<QueryRightsPortalDrugBillsArgs, 'input'>
  >
  rightsPortalDrugCertificates?: Resolver<
    Array<ResolversTypes['RightsPortalDrugCertificate']>,
    ParentType,
    ContextType
  >
  rightsPortalDrugPeriods?: Resolver<
    Array<ResolversTypes['RightsPortalDrugPeriod']>,
    ParentType,
    ContextType
  >
  rightsPortalDrugs?: Resolver<
    ResolversTypes['RightsPortalPaginatedDrug'],
    ParentType,
    ContextType,
    RequireFields<QueryRightsPortalDrugsArgs, 'input'>
  >
  rightsPortalGetCertificateById?: Resolver<
    ResolversTypes['RightsPortalDrugCertificate'],
    ParentType,
    ContextType,
    RequireFields<QueryRightsPortalGetCertificateByIdArgs, 'input'>
  >
  rightsPortalHealthCenterDoctors?: Resolver<
    Maybe<Array<ResolversTypes['RightsPortalHealthCenterDoctors']>>,
    ParentType,
    ContextType,
    RequireFields<QueryRightsPortalHealthCenterDoctorsArgs, 'input'>
  >
  rightsPortalHealthCenterRegistrationHistory?: Resolver<
    Maybe<ResolversTypes['RightsPortalHealthCenterRegistrationHistory']>,
    ParentType,
    ContextType,
    Partial<QueryRightsPortalHealthCenterRegistrationHistoryArgs>
  >
  rightsPortalInsuranceConfirmation?: Resolver<
    Maybe<ResolversTypes['RightsPortalInsuranceConfirmation']>,
    ParentType,
    ContextType
  >
  rightsPortalInsuranceOverview?: Resolver<
    Maybe<ResolversTypes['RightsPortalInsuranceOverview']>,
    ParentType,
    ContextType
  >
  rightsPortalPaginatedAidOrNutrition?: Resolver<
    Maybe<ResolversTypes['RightsPortalPaginatedAidsOrNutrition']>,
    ParentType,
    ContextType
  >
  rightsPortalPaginatedDentists?: Resolver<
    Maybe<ResolversTypes['RightsPortalPaginatedDentists']>,
    ParentType,
    ContextType,
    RequireFields<QueryRightsPortalPaginatedDentistsArgs, 'input'>
  >
  rightsPortalPaginatedHealthCenters?: Resolver<
    Maybe<ResolversTypes['RightsPortalPaginatedHealthCenters']>,
    ParentType,
    ContextType
  >
  rightsPortalPaginatedTherapies?: Resolver<
    Maybe<ResolversTypes['RightsPortalPaginatedTherapies']>,
    ParentType,
    ContextType
  >
  rightsPortalPaymentOverview?: Resolver<
    ResolversTypes['RightsPortalPaymentOverviewResponse'],
    ParentType,
    ContextType,
    RequireFields<QueryRightsPortalPaymentOverviewArgs, 'input'>
  >
  rightsPortalPaymentOverviewDocument?: Resolver<
    ResolversTypes['RightsPortalPaymentOverviewDocumentResponse'],
    ParentType,
    ContextType,
    RequireFields<QueryRightsPortalPaymentOverviewDocumentArgs, 'input'>
  >
  rightsPortalPaymentOverviewServiceTypes?: Resolver<
    ResolversTypes['RightsPortalPaymentOverviewServiceTypeResponse'],
    ParentType,
    ContextType
  >
  rightsPortalUserDentistRegistration?: Resolver<
    Maybe<ResolversTypes['RightsPortalUserDentistRegistration']>,
    ParentType,
    ContextType,
    Partial<QueryRightsPortalUserDentistRegistrationArgs>
  >
  searchForAllProperties?: Resolver<
    Maybe<ResolversTypes['ManyPropertyDetail']>,
    ParentType,
    ContextType,
    RequireFields<QuerySearchForAllPropertiesArgs, 'input'>
  >
  searchForProperty?: Resolver<
    Maybe<ResolversTypes['PropertyDetail']>,
    ParentType,
    ContextType,
    RequireFields<QuerySearchForPropertyArgs, 'input'>
  >
  searchResults?: Resolver<
    ResolversTypes['SearchResult'],
    ParentType,
    ContextType,
    RequireFields<QuerySearchResultsArgs, 'query'>
  >
  secondarySchoolProgramsBySchoolId?: Resolver<
    Array<ResolversTypes['SecondarySchoolProgram']>,
    ParentType,
    ContextType,
    RequireFields<
      QuerySecondarySchoolProgramsBySchoolIdArgs,
      'isFreshman' | 'schoolId'
    >
  >
  seminarsVerIsCompanyValid?: Resolver<
    ResolversTypes['SeminarsCompanyValidationItem'],
    ParentType,
    ContextType,
    RequireFields<QuerySeminarsVerIsCompanyValidArgs, 'nationalId'>
  >
  sessionsList?: Resolver<
    ResolversTypes['SessionsPaginatedSessionResponse'],
    ParentType,
    ContextType,
    RequireFields<QuerySessionsListArgs, 'input'>
  >
  shipRegistryShipSearch?: Resolver<
    ResolversTypes['ShipRegistryShipSearch'],
    ParentType,
    ContextType,
    RequireFields<QueryShipRegistryShipSearchArgs, 'input'>
  >
  signatureCollectionAdminCanSignInfo?: Resolver<
    ResolversTypes['SignatureCollectionSuccess'],
    ParentType,
    ContextType,
    RequireFields<QuerySignatureCollectionAdminCanSignInfoArgs, 'input'>
  >
  signatureCollectionAdminCandidateLookup?: Resolver<
    ResolversTypes['SignatureCollectionCandidateLookUp'],
    ParentType,
    ContextType,
    RequireFields<QuerySignatureCollectionAdminCandidateLookupArgs, 'input'>
  >
  signatureCollectionAdminCurrent?: Resolver<
    ResolversTypes['SignatureCollection'],
    ParentType,
    ContextType
  >
  signatureCollectionAdminList?: Resolver<
    ResolversTypes['SignatureCollectionList'],
    ParentType,
    ContextType,
    RequireFields<QuerySignatureCollectionAdminListArgs, 'input'>
  >
  signatureCollectionAdminListStatus?: Resolver<
    ResolversTypes['SignatureCollectionListStatus'],
    ParentType,
    ContextType,
    RequireFields<QuerySignatureCollectionAdminListStatusArgs, 'input'>
  >
  signatureCollectionAdminLists?: Resolver<
    Array<ResolversTypes['SignatureCollectionList']>,
    ParentType,
    ContextType,
    RequireFields<QuerySignatureCollectionAdminListsArgs, 'input'>
  >
  signatureCollectionAdminSignatures?: Resolver<
    Maybe<Array<ResolversTypes['SignatureCollectionSignature']>>,
    ParentType,
    ContextType,
    RequireFields<QuerySignatureCollectionAdminSignaturesArgs, 'input'>
  >
  signatureCollectionAllOpenLists?: Resolver<
    Array<ResolversTypes['SignatureCollectionListBase']>,
    ParentType,
    ContextType,
    RequireFields<QuerySignatureCollectionAllOpenListsArgs, 'input'>
  >
  signatureCollectionAreaSummaryReport?: Resolver<
    ResolversTypes['SignatureCollectionAreaSummaryReport'],
    ParentType,
    ContextType,
    RequireFields<QuerySignatureCollectionAreaSummaryReportArgs, 'input'>
  >
  signatureCollectionCanSignFromPaper?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType,
    RequireFields<QuerySignatureCollectionCanSignFromPaperArgs, 'input'>
  >
  signatureCollectionCollectors?: Resolver<
    Array<ResolversTypes['SignatureCollectionCollector']>,
    ParentType,
    ContextType
  >
  signatureCollectionCurrent?: Resolver<
    ResolversTypes['SignatureCollection'],
    ParentType,
    ContextType
  >
  signatureCollectionIsOwner?: Resolver<
    ResolversTypes['SignatureCollectionSuccess'],
    ParentType,
    ContextType
  >
  signatureCollectionList?: Resolver<
    ResolversTypes['SignatureCollectionList'],
    ParentType,
    ContextType,
    RequireFields<QuerySignatureCollectionListArgs, 'input'>
  >
  signatureCollectionListOverview?: Resolver<
    ResolversTypes['SignatureCollectionListSummary'],
    ParentType,
    ContextType,
    RequireFields<QuerySignatureCollectionListOverviewArgs, 'input'>
  >
  signatureCollectionListsForOwner?: Resolver<
    Array<ResolversTypes['SignatureCollectionList']>,
    ParentType,
    ContextType,
    RequireFields<QuerySignatureCollectionListsForOwnerArgs, 'input'>
  >
  signatureCollectionListsForUser?: Resolver<
    Array<ResolversTypes['SignatureCollectionListBase']>,
    ParentType,
    ContextType,
    RequireFields<QuerySignatureCollectionListsForUserArgs, 'input'>
  >
  signatureCollectionSignatureLookup?: Resolver<
    Array<ResolversTypes['SignatureCollectionSignature']>,
    ParentType,
    ContextType,
    RequireFields<QuerySignatureCollectionSignatureLookupArgs, 'input'>
  >
  signatureCollectionSignatures?: Resolver<
    Maybe<Array<ResolversTypes['SignatureCollectionSignature']>>,
    ParentType,
    ContextType,
    RequireFields<QuerySignatureCollectionSignaturesArgs, 'input'>
  >
  signatureCollectionSignedList?: Resolver<
    Maybe<Array<ResolversTypes['SignatureCollectionSignedList']>>,
    ParentType,
    ContextType
  >
  signatureCollectionSignee?: Resolver<
    ResolversTypes['SignatureCollectionSignee'],
    ParentType,
    ContextType
  >
  socialInsuranceIncomePlan?: Resolver<
    Maybe<ResolversTypes['SocialInsuranceIncomePlan']>,
    ParentType,
    ContextType
  >
  socialInsurancePaymentPlan?: Resolver<
    Maybe<ResolversTypes['SocialInsurancePaymentPlan']>,
    ParentType,
    ContextType
  >
  socialInsurancePayments?: Resolver<
    Maybe<ResolversTypes['SocialInsurancePayments']>,
    ParentType,
    ContextType
  >
  syslumennGetRegistryPerson?: Resolver<
    ResolversTypes['RegistryPerson'],
    ParentType,
    ContextType,
    RequireFields<QuerySyslumennGetRegistryPersonArgs, 'input'>
  >
  syslumennGetVehicle?: Resolver<
    ResolversTypes['VehicleRegistration'],
    ParentType,
    ContextType,
    RequireFields<QuerySyslumennGetVehicleArgs, 'input'>
  >
  universityCareersStudentTrack?: Resolver<
    Maybe<ResolversTypes['UniversityCareersStudentTrack']>,
    ParentType,
    ContextType,
    RequireFields<QueryUniversityCareersStudentTrackArgs, 'input'>
  >
  universityCareersStudentTrackHistory?: Resolver<
    ResolversTypes['UniversityCareersStudentTrackHistory'],
    ParentType,
    ContextType,
    RequireFields<QueryUniversityCareersStudentTrackHistoryArgs, 'input'>
  >
  universityGatewayApplicationById?: Resolver<
    Array<ResolversTypes['UniversityGatewayApplication']>,
    ParentType,
    ContextType,
    RequireFields<QueryUniversityGatewayApplicationByIdArgs, 'id'>
  >
  universityGatewayProgram?: Resolver<
    ResolversTypes['UniversityGatewayProgramDetails'],
    ParentType,
    ContextType,
    RequireFields<QueryUniversityGatewayProgramArgs, 'input'>
  >
  universityGatewayProgramFilters?: Resolver<
    Array<ResolversTypes['UniversityGatewayProgramFilter']>,
    ParentType,
    ContextType
  >
  universityGatewayPrograms?: Resolver<
    ResolversTypes['UniversityGatewayProgramsPaginated'],
    ParentType,
    ContextType
  >
  universityGatewayUniversities?: Resolver<
    Array<ResolversTypes['UniversityGatewayUniversity']>,
    ParentType,
    ContextType
  >
  userFamilyExamResults?: Resolver<
    ResolversTypes['EducationUserFamilyCompulsorySchoolCareer'],
    ParentType,
    ContextType
  >
  userNotification?: Resolver<
    Maybe<ResolversTypes['NotificationResponse']>,
    ParentType,
    ContextType,
    RequireFields<QueryUserNotificationArgs, 'id'>
  >
  userNotifications?: Resolver<
    Maybe<ResolversTypes['Notifications']>,
    ParentType,
    ContextType,
    Partial<QueryUserNotificationsArgs>
  >
  userProfileActorProfiles?: Resolver<
    ResolversTypes['UserProfileActorProfileResponse'],
    ParentType,
    ContextType
  >
  validateMortgageCertificate?: Resolver<
    Array<ResolversTypes['MortgageCertificateValidationModel']>,
    ParentType,
    ContextType,
    RequireFields<QueryValidateMortgageCertificateArgs, 'input'>
  >
  vehicleBasicInfoByPermno?: Resolver<
    Maybe<ResolversTypes['BasicVehicleInformation']>,
    ParentType,
    ContextType,
    RequireFields<QueryVehicleBasicInfoByPermnoArgs, 'permno'>
  >
  vehicleBulkMileageRegistrationJobHistory?: Resolver<
    Maybe<ResolversTypes['VehiclesBulkMileageRegistrationJobHistory']>,
    ParentType,
    ContextType
  >
  vehicleBulkMileageRegistrationRequestOverview?: Resolver<
    Maybe<ResolversTypes['VehiclesBulkMileageRegistrationRequestOverview']>,
    ParentType,
    ContextType,
    RequireFields<
      QueryVehicleBulkMileageRegistrationRequestOverviewArgs,
      'input'
    >
  >
  vehicleBulkMileageRegistrationRequestStatus?: Resolver<
    Maybe<ResolversTypes['VehiclesBulkMileageRegistrationRequestStatus']>,
    ParentType,
    ContextType,
    RequireFields<QueryVehicleBulkMileageRegistrationRequestStatusArgs, 'input'>
  >
  vehicleCoOwnerChangeValidation?: Resolver<
    Maybe<ResolversTypes['OwnerChangeValidation']>,
    ParentType,
    ContextType,
    RequireFields<QueryVehicleCoOwnerChangeValidationArgs, 'answers'>
  >
  vehicleMileageDetails?: Resolver<
    Maybe<ResolversTypes['VehicleMileageOverview']>,
    ParentType,
    ContextType,
    RequireFields<QueryVehicleMileageDetailsArgs, 'input'>
  >
  vehicleOperatorChangeChecksByPermno?: Resolver<
    Maybe<ResolversTypes['VehicleOperatorChangeChecksByPermno']>,
    ParentType,
    ContextType,
    RequireFields<QueryVehicleOperatorChangeChecksByPermnoArgs, 'permno'>
  >
  vehicleOperatorChangeValidation?: Resolver<
    Maybe<ResolversTypes['OperatorChangeValidation']>,
    ParentType,
    ContextType,
    RequireFields<QueryVehicleOperatorChangeValidationArgs, 'answers'>
  >
  vehicleOwnerChangeValidation?: Resolver<
    Maybe<ResolversTypes['OwnerChangeValidation']>,
    ParentType,
    ContextType,
    RequireFields<QueryVehicleOwnerChangeValidationArgs, 'answers'>
  >
  vehicleOwnerchangeChecksByPermno?: Resolver<
    Maybe<ResolversTypes['VehicleOwnerchangeChecksByPermno']>,
    ParentType,
    ContextType,
    RequireFields<QueryVehicleOwnerchangeChecksByPermnoArgs, 'permno'>
  >
  vehiclePlateOrderChecksByPermno?: Resolver<
    Maybe<ResolversTypes['VehiclePlateOrderChecksByPermno']>,
    ParentType,
    ContextType,
    RequireFields<QueryVehiclePlateOrderChecksByPermnoArgs, 'permno'>
  >
  vehiclePlateOrderValidation?: Resolver<
    Maybe<ResolversTypes['PlateOrderValidation']>,
    ParentType,
    ContextType,
    RequireFields<QueryVehiclePlateOrderValidationArgs, 'answers'>
  >
  vehiclesDetail?: Resolver<
    Maybe<ResolversTypes['VehiclesDetail']>,
    ParentType,
    ContextType,
    RequireFields<QueryVehiclesDetailArgs, 'input'>
  >
  vehiclesList?: Resolver<
    Maybe<ResolversTypes['VehiclesList']>,
    ParentType,
    ContextType,
    Partial<QueryVehiclesListArgs>
  >
  vehiclesListV2?: Resolver<
    Maybe<ResolversTypes['VehiclesListV2']>,
    ParentType,
    ContextType,
    Partial<QueryVehiclesListV2Args>
  >
  vehiclesListV3?: Resolver<
    Maybe<ResolversTypes['VehiclesCurrentListResponse']>,
    ParentType,
    ContextType,
    Partial<QueryVehiclesListV3Args>
  >
  vehiclesMileageRegistrationHistory?: Resolver<
    Maybe<ResolversTypes['VehiclesMileageRegistrationHistory']>,
    ParentType,
    ContextType,
    Partial<QueryVehiclesMileageRegistrationHistoryArgs>
  >
  vehiclesSearch?: Resolver<
    Maybe<ResolversTypes['VehiclesVehicleSearch']>,
    ParentType,
    ContextType,
    RequireFields<QueryVehiclesSearchArgs, 'input'>
  >
  vehiclesSearchLimit?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  watsonAssistantChatIdentityToken?: Resolver<
    ResolversTypes['WatsonAssistantChatIdentityTokenResponse'],
    ParentType,
    ContextType,
    RequireFields<QueryWatsonAssistantChatIdentityTokenArgs, 'input'>
  >
  webSearchAutocomplete?: Resolver<
    ResolversTypes['WebSearchAutocomplete'],
    ParentType,
    ContextType,
    RequireFields<QueryWebSearchAutocompleteArgs, 'input'>
  >
  webVerdictById?: Resolver<
    Maybe<ResolversTypes['WebVerdictByIdResponse']>,
    ParentType,
    ContextType,
    RequireFields<QueryWebVerdictByIdArgs, 'input'>
  >
  webVerdictCaseCategories?: Resolver<
    ResolversTypes['WebVerdictCaseCategoriesResponse'],
    ParentType,
    ContextType
  >
  webVerdictCaseTypes?: Resolver<
    ResolversTypes['WebVerdictCaseTypesResponse'],
    ParentType,
    ContextType
  >
  webVerdictKeywords?: Resolver<
    ResolversTypes['WebVerdictKeywordsResponse'],
    ParentType,
    ContextType
  >
  webVerdicts?: Resolver<
    ResolversTypes['WebVerdictsResponse'],
    ParentType,
    ContextType,
    RequireFields<QueryWebVerdictsArgs, 'input'>
  >
  workMachine?: Resolver<
    Maybe<ResolversTypes['WorkMachine']>,
    ParentType,
    ContextType,
    RequireFields<QueryWorkMachineArgs, 'input'>
  >
  workMachinesCollectionDocument?: Resolver<
    Maybe<ResolversTypes['WorkMachinesCollectionDocument']>,
    ParentType,
    ContextType,
    Partial<QueryWorkMachinesCollectionDocumentArgs>
  >
  workMachinesPaginatedCollection?: Resolver<
    Maybe<ResolversTypes['WorkMachinesPaginatedCollection']>,
    ParentType,
    ContextType,
    Partial<QueryWorkMachinesPaginatedCollectionArgs>
  >
}

export type QuestionAndAnswerResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['QuestionAndAnswer'] = ResolversParentTypes['QuestionAndAnswer']
> = {
  answer?: Resolver<Array<ResolversTypes['Slice']>, ParentType, ContextType>
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  publishDate?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  question?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type RealEstateAgentResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['RealEstateAgent'] = ResolversParentTypes['RealEstateAgent']
> = {
  location?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type RealEstateDetailResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['RealEstateDetail'] = ResolversParentTypes['RealEstateDetail']
> = {
  defaultAddress?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  propertyNumber?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  usage?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ReferenceLinkResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ReferenceLink'] = ResolversParentTypes['ReferenceLink']
> = {
  slug?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  type?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type RegistryPersonResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['RegistryPerson'] = ResolversParentTypes['RegistryPerson']
> = {
  address?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  city?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  nationalId?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  postalCode?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type RegulationAuthorResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['RegulationAuthor'] = ResolversParentTypes['RegulationAuthor']
> = {
  authorId?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type RegulationShippedAuthorResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['RegulationShippedAuthor'] = ResolversParentTypes['RegulationShippedAuthor']
> = {
  authorId?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type RegulationSummaryAuthorResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['RegulationSummaryAuthor'] = ResolversParentTypes['RegulationSummaryAuthor']
> = {
  authorId?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ReligiousOrganizationResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ReligiousOrganization'] = ResolversParentTypes['ReligiousOrganization']
> = {
  director?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  homeAddress?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  municipality?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  postalCode?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ReligiousOrganizationsResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ReligiousOrganizationsResponse'] = ResolversParentTypes['ReligiousOrganizationsResponse']
> = {
  list?: Resolver<
    Array<ResolversTypes['ReligiousOrganization']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type RequestCorrectionOnMortgageCertificateModelResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['RequestCorrectionOnMortgageCertificateModel'] = ResolversParentTypes['RequestCorrectionOnMortgageCertificateModel']
> = {
  hasSentRequest?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Response'] = ResolversParentTypes['Response']
> = {
  created?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type RightsPortalAddressResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['RightsPortalAddress'] = ResolversParentTypes['RightsPortalAddress']
> = {
  municipality?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  postalCode?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  streetAddress?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type RightsPortalAidOrNutritionResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['RightsPortalAidOrNutrition'] = ResolversParentTypes['RightsPortalAidOrNutrition']
> = {
  allowed12MonthPeriod?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  available?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  expiring?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  explanation?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  iso?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  location?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  maxMonthlyAmount?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  maxUnitRefund?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  nextAllowedMonth?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  refund?: Resolver<
    ResolversTypes['RightsPortalAidOrNutritionRefund'],
    ParentType,
    ContextType
  >
  renewalStatus?: Resolver<
    Maybe<ResolversTypes['RightsPortalAidOrNutritionRenewalStatus']>,
    ParentType,
    ContextType
  >
  type?: Resolver<
    ResolversTypes['RightsPortalAidOrNutritionType'],
    ParentType,
    ContextType
  >
  validUntil?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type RightsPortalAidOrNutritionRefundResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['RightsPortalAidOrNutritionRefund'] = ResolversParentTypes['RightsPortalAidOrNutritionRefund']
> = {
  type?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  value?: Resolver<ResolversTypes['Int'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type RightsPortalCopaymentBillResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['RightsPortalCopaymentBill'] = ResolversParentTypes['RightsPortalCopaymentBill']
> = {
  date?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>
  id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>
  insuranceAmount?: Resolver<
    Maybe<ResolversTypes['Int']>,
    ParentType,
    ContextType
  >
  overpaid?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>
  ownAmount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>
  serviceType?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  totalAmount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type RightsPortalCopaymentBillResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['RightsPortalCopaymentBillResponse'] = ResolversParentTypes['RightsPortalCopaymentBillResponse']
> = {
  errors?: Resolver<
    Array<ResolversTypes['RightsPortalPaymentError']>,
    ParentType,
    ContextType
  >
  items?: Resolver<
    Array<ResolversTypes['RightsPortalCopaymentBill']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type RightsPortalCopaymentInsuranceStatusResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['RightsPortalCopaymentInsuranceStatus'] = ResolversParentTypes['RightsPortalCopaymentInsuranceStatus']
> = {
  code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  display?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type RightsPortalCopaymentPeriodResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['RightsPortalCopaymentPeriod'] = ResolversParentTypes['RightsPortalCopaymentPeriod']
> = {
  id?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  maximumPayment?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  month?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  monthPayment?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  overpaid?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  repaid?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  status?: Resolver<
    Maybe<ResolversTypes['RightsPortalCopaymentInsuranceStatus']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type RightsPortalCopaymentPeriodResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['RightsPortalCopaymentPeriodResponse'] = ResolversParentTypes['RightsPortalCopaymentPeriodResponse']
> = {
  errors?: Resolver<
    Array<ResolversTypes['RightsPortalPaymentError']>,
    ParentType,
    ContextType
  >
  items?: Resolver<
    Array<ResolversTypes['RightsPortalCopaymentPeriod']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type RightsPortalCopaymentStatusResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['RightsPortalCopaymentStatus'] = ResolversParentTypes['RightsPortalCopaymentStatus']
> = {
  basePayment?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  insuranceStatus?: Resolver<
    Maybe<ResolversTypes['RightsPortalCopaymentInsuranceStatus']>,
    ParentType,
    ContextType
  >
  maximumMonthlyPayment?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  maximumPayment?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type RightsPortalDentistResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['RightsPortalDentist'] = ResolversParentTypes['RightsPortalDentist']
> = {
  id?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  practices?: Resolver<
    Maybe<Array<ResolversTypes['RightsPortalDentistPractice']>>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type RightsPortalDentistBillResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['RightsPortalDentistBill'] = ResolversParentTypes['RightsPortalDentistBill']
> = {
  amount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>
  coveredAmount?: Resolver<
    Maybe<ResolversTypes['Int']>,
    ParentType,
    ContextType
  >
  date?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>
  number?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>
  refundDate?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type RightsPortalDentistPracticeResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['RightsPortalDentistPractice'] = ResolversParentTypes['RightsPortalDentistPractice']
> = {
  address?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  postalCode?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  practice?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  region?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type RightsPortalDentistRegisterResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['RightsPortalDentistRegisterResponse'] = ResolversParentTypes['RightsPortalDentistRegisterResponse']
> = {
  success?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type RightsPortalDentistStatusResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['RightsPortalDentistStatus'] = ResolversParentTypes['RightsPortalDentistStatus']
> = {
  canRegister?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  contractType?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  isInsured?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type RightsPortalDrugResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['RightsPortalDrug'] = ResolversParentTypes['RightsPortalDrug']
> = {
  atcCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  form?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  nordicCode?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  packaging?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  strength?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type RightsPortalDrugBillResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['RightsPortalDrugBill'] = ResolversParentTypes['RightsPortalDrugBill']
> = {
  date?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>
  description?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  id?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>
  totalCalculatedForPaymentStepAmount?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  totalCopaymentAmount?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  totalCustomerAmount?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  totalExcessAmount?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  totalInsuranceAmount?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type RightsPortalDrugBillLineResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['RightsPortalDrugBillLine'] = ResolversParentTypes['RightsPortalDrugBillLine']
> = {
  billId?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>
  calculatedForPaymentStepAmount?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  copaymentAmount?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  customerAmount?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  drugName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  excessAmount?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  insuranceAmount?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  quantity?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  salesPrice?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  strength?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  units?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type RightsPortalDrugCalculationResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['RightsPortalDrugCalculation'] = ResolversParentTypes['RightsPortalDrugCalculation']
> = {
  calculatedCustomerPrice?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  comment?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  customerPrice?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  excessPrice?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  fullPrice?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  insurancePrice?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  lineNumber?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  referencePrice?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type RightsPortalDrugCalculatorResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['RightsPortalDrugCalculatorResponse'] = ResolversParentTypes['RightsPortalDrugCalculatorResponse']
> = {
  drugs?: Resolver<
    Maybe<Array<ResolversTypes['RightsPortalDrugCalculation']>>,
    ParentType,
    ContextType
  >
  totalCustomerPrice?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  totalPrice?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  totalUnits?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type RightsPortalDrugCertificateResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['RightsPortalDrugCertificate'] = ResolversParentTypes['RightsPortalDrugCertificate']
> = {
  approved?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>
  atcCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  atcName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  comment?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  date?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>
  doctor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  documentId?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  drugName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  expired?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>
  id?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  methylDoctors?: Resolver<
    Maybe<Array<ResolversTypes['RightsPortalMethylDoctor']>>,
    ParentType,
    ContextType
  >
  processed?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  rejected?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>
  valid?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>
  validFrom?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  validTo?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type RightsPortalDrugPeriodResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['RightsPortalDrugPeriod'] = ResolversParentTypes['RightsPortalDrugPeriod']
> = {
  active?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>
  dateFrom?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  dateTo?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>
  id?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>
  levelNumber?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  levelPercentage?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  numberOfBills?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  paidAmount?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  paymentStatus?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type RightsPortalHealthCenterResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['RightsPortalHealthCenter'] = ResolversParentTypes['RightsPortalHealthCenter']
> = {
  address?: Resolver<
    Maybe<ResolversTypes['RightsPortalAddress']>,
    ParentType,
    ContextType
  >
  canRegister?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  region?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  waitListRegistration?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type RightsPortalHealthCenterDoctorsResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['RightsPortalHealthCenterDoctors'] = ResolversParentTypes['RightsPortalHealthCenterDoctors']
> = {
  availableFrom?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  availableTo?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  id?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type RightsPortalHealthCenterRecordResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['RightsPortalHealthCenterRecord'] = ResolversParentTypes['RightsPortalHealthCenterRecord']
> = {
  dateFrom?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  dateTo?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>
  doctor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  healthCenterName?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type RightsPortalHealthCenterRegisterResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['RightsPortalHealthCenterRegisterResponse'] = ResolversParentTypes['RightsPortalHealthCenterRegisterResponse']
> = {
  success?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type RightsPortalHealthCenterRegistrationHistoryResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['RightsPortalHealthCenterRegistrationHistory'] = ResolversParentTypes['RightsPortalHealthCenterRegistrationHistory']
> = {
  canRegister?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  current?: Resolver<
    Maybe<ResolversTypes['RightsPortalHealthCenterRecord']>,
    ParentType,
    ContextType
  >
  history?: Resolver<
    Maybe<Array<ResolversTypes['RightsPortalHealthCenterRecord']>>,
    ParentType,
    ContextType
  >
  neighborhoodCenter?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type RightsPortalInsuranceConfirmationResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['RightsPortalInsuranceConfirmation'] = ResolversParentTypes['RightsPortalInsuranceConfirmation']
> = {
  contentType?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  data?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  fileName?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type RightsPortalInsuranceOverviewResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['RightsPortalInsuranceOverview'] = ResolversParentTypes['RightsPortalInsuranceOverview']
> = {
  ehicCardExpiryDate?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  explanation?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  from?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>
  isInsured?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  maximumPayment?: Resolver<
    Maybe<ResolversTypes['Int']>,
    ParentType,
    ContextType
  >
  status?: Resolver<
    Maybe<ResolversTypes['RightsPortalInsuranceStatus']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type RightsPortalInsuranceStatusResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['RightsPortalInsuranceStatus'] = ResolversParentTypes['RightsPortalInsuranceStatus']
> = {
  code?: Resolver<
    Maybe<ResolversTypes['RightsPortalInsuranceStatusType']>,
    ParentType,
    ContextType
  >
  display?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type RightsPortalMethylDoctorResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['RightsPortalMethylDoctor'] = ResolversParentTypes['RightsPortalMethylDoctor']
> = {
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type RightsPortalPaginatedAidsOrNutritionResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['RightsPortalPaginatedAidsOrNutrition'] = ResolversParentTypes['RightsPortalPaginatedAidsOrNutrition']
> = {
  data?: Resolver<
    Array<ResolversTypes['RightsPortalAidOrNutrition']>,
    ParentType,
    ContextType
  >
  pageInfo?: Resolver<ResolversTypes['PageInfoDto'], ParentType, ContextType>
  totalCount?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type RightsPortalPaginatedDentistsResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['RightsPortalPaginatedDentists'] = ResolversParentTypes['RightsPortalPaginatedDentists']
> = {
  data?: Resolver<
    Array<ResolversTypes['RightsPortalDentist']>,
    ParentType,
    ContextType
  >
  pageInfo?: Resolver<ResolversTypes['PageInfoDto'], ParentType, ContextType>
  totalCount?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type RightsPortalPaginatedDrugResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['RightsPortalPaginatedDrug'] = ResolversParentTypes['RightsPortalPaginatedDrug']
> = {
  data?: Resolver<
    Array<ResolversTypes['RightsPortalDrug']>,
    ParentType,
    ContextType
  >
  pageInfo?: Resolver<ResolversTypes['PageInfoDto'], ParentType, ContextType>
  totalCount?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type RightsPortalPaginatedHealthCentersResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['RightsPortalPaginatedHealthCenters'] = ResolversParentTypes['RightsPortalPaginatedHealthCenters']
> = {
  data?: Resolver<
    Array<ResolversTypes['RightsPortalHealthCenter']>,
    ParentType,
    ContextType
  >
  pageInfo?: Resolver<ResolversTypes['PageInfoDto'], ParentType, ContextType>
  totalCount?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type RightsPortalPaginatedTherapiesResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['RightsPortalPaginatedTherapies'] = ResolversParentTypes['RightsPortalPaginatedTherapies']
> = {
  data?: Resolver<
    Array<ResolversTypes['RightsPortalTherapy']>,
    ParentType,
    ContextType
  >
  pageInfo?: Resolver<ResolversTypes['PageInfoDto'], ParentType, ContextType>
  totalCount?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type RightsPortalPaymentErrorResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['RightsPortalPaymentError'] = ResolversParentTypes['RightsPortalPaymentError']
> = {
  status?: Resolver<
    ResolversTypes['RightsPortalPaymentErrorStatus'],
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type RightsPortalPaymentOverviewResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['RightsPortalPaymentOverview'] = ResolversParentTypes['RightsPortalPaymentOverview']
> = {
  bills?: Resolver<
    Maybe<Array<ResolversTypes['RightsPortalPaymentOverviewBill']>>,
    ParentType,
    ContextType
  >
  credit?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  debt?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type RightsPortalPaymentOverviewBillResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['RightsPortalPaymentOverviewBill'] = ResolversParentTypes['RightsPortalPaymentOverviewBill']
> = {
  date?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>
  documentId?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  downloadUrl?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  insuranceAmount?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  serviceType?: Resolver<
    Maybe<ResolversTypes['RightsPortalPaymentOverviewServiceType']>,
    ParentType,
    ContextType
  >
  totalAmount?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type RightsPortalPaymentOverviewDocumentResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['RightsPortalPaymentOverviewDocument'] = ResolversParentTypes['RightsPortalPaymentOverviewDocument']
> = {
  contentType?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  data?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  fileName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type RightsPortalPaymentOverviewDocumentResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['RightsPortalPaymentOverviewDocumentResponse'] = ResolversParentTypes['RightsPortalPaymentOverviewDocumentResponse']
> = {
  errors?: Resolver<
    Array<ResolversTypes['RightsPortalPaymentError']>,
    ParentType,
    ContextType
  >
  items?: Resolver<
    Array<ResolversTypes['RightsPortalPaymentOverviewDocument']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type RightsPortalPaymentOverviewResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['RightsPortalPaymentOverviewResponse'] = ResolversParentTypes['RightsPortalPaymentOverviewResponse']
> = {
  errors?: Resolver<
    Array<ResolversTypes['RightsPortalPaymentError']>,
    ParentType,
    ContextType
  >
  items?: Resolver<
    Array<ResolversTypes['RightsPortalPaymentOverview']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type RightsPortalPaymentOverviewServiceTypeResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['RightsPortalPaymentOverviewServiceType'] = ResolversParentTypes['RightsPortalPaymentOverviewServiceType']
> = {
  code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type RightsPortalPaymentOverviewServiceTypeResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['RightsPortalPaymentOverviewServiceTypeResponse'] = ResolversParentTypes['RightsPortalPaymentOverviewServiceTypeResponse']
> = {
  errors?: Resolver<
    Array<ResolversTypes['RightsPortalPaymentError']>,
    ParentType,
    ContextType
  >
  items?: Resolver<
    Array<ResolversTypes['RightsPortalPaymentOverviewServiceType']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type RightsPortalTherapyResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['RightsPortalTherapy'] = ResolversParentTypes['RightsPortalTherapy']
> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  periods?: Resolver<
    Maybe<Array<ResolversTypes['RightsPortalTherapyPeriod']>>,
    ParentType,
    ContextType
  >
  postStation?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  state?: Resolver<
    Maybe<ResolversTypes['RightsPortalTherapyState']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type RightsPortalTherapyPeriodResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['RightsPortalTherapyPeriod'] = ResolversParentTypes['RightsPortalTherapyPeriod']
> = {
  from?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>
  sessions?: Resolver<
    Maybe<ResolversTypes['RightsPortalTherapySession']>,
    ParentType,
    ContextType
  >
  to?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type RightsPortalTherapySessionResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['RightsPortalTherapySession'] = ResolversParentTypes['RightsPortalTherapySession']
> = {
  available?: Resolver<ResolversTypes['Int'], ParentType, ContextType>
  used?: Resolver<ResolversTypes['Int'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type RightsPortalTherapyStateResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['RightsPortalTherapyState'] = ResolversParentTypes['RightsPortalTherapyState']
> = {
  code?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  display?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type RightsPortalUserDentistInformationResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['RightsPortalUserDentistInformation'] = ResolversParentTypes['RightsPortalUserDentistInformation']
> = {
  id?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  status?: Resolver<
    Maybe<ResolversTypes['RightsPortalDentistStatus']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type RightsPortalUserDentistRegistrationResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['RightsPortalUserDentistRegistration'] = ResolversParentTypes['RightsPortalUserDentistRegistration']
> = {
  dentist?: Resolver<
    Maybe<ResolversTypes['RightsPortalUserDentistInformation']>,
    ParentType,
    ContextType
  >
  history?: Resolver<
    Maybe<Array<ResolversTypes['RightsPortalDentistBill']>>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type RskCompanyResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['RskCompany'] = ResolversParentTypes['RskCompany']
> = {
  companyInfo?: Resolver<
    Maybe<ResolversTypes['RskCompanyInfo']>,
    ParentType,
    ContextType
  >
  dateOfRegistration?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  lastUpdated?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  nationalId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  status?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  vatNumber?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type RskCompanyAddressResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['RskCompanyAddress'] = ResolversParentTypes['RskCompanyAddress']
> = {
  country?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  locality?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  municipalityNumber?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  postalCode?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  streetAddress?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type RskCompanyClassificationResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['RskCompanyClassification'] = ResolversParentTypes['RskCompanyClassification']
> = {
  classificationSystem?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  number?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  type?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type RskCompanyFormOfOperationResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['RskCompanyFormOfOperation'] = ResolversParentTypes['RskCompanyFormOfOperation']
> = {
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  type?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type RskCompanyInfoResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['RskCompanyInfo'] = ResolversParentTypes['RskCompanyInfo']
> = {
  address?: Resolver<
    Maybe<ResolversTypes['RskCompanyAddress']>,
    ParentType,
    ContextType
  >
  formOfOperation?: Resolver<
    Array<ResolversTypes['RskCompanyFormOfOperation']>,
    ParentType,
    ContextType
  >
  legalDomicile?: Resolver<
    Maybe<ResolversTypes['RskCompanyAddress']>,
    ParentType,
    ContextType
  >
  relatedParty?: Resolver<
    Array<ResolversTypes['RskCompanyRelatedParty']>,
    ParentType,
    ContextType
  >
  relationships?: Resolver<
    Maybe<Array<ResolversTypes['RskCompanyRelatedParty']>>,
    ParentType,
    ContextType
  >
  vat?: Resolver<
    Array<ResolversTypes['RskCompanyVat']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type RskCompanyRelatedPartyResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['RskCompanyRelatedParty'] = ResolversParentTypes['RskCompanyRelatedParty']
> = {
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  nationalId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  type?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type RskCompanySearchItemsResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['RskCompanySearchItems'] = ResolversParentTypes['RskCompanySearchItems']
> = {
  data?: Resolver<Array<ResolversTypes['RskCompany']>, ParentType, ContextType>
  pageInfo?: Resolver<ResolversTypes['PageInfoDto'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type RskCompanyVatResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['RskCompanyVat'] = ResolversParentTypes['RskCompanyVat']
> = {
  classification?: Resolver<
    Maybe<Array<ResolversTypes['RskCompanyClassification']>>,
    ParentType,
    ContextType
  >
  dateOfDeregistration?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  dateOfRegistration?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  vatNumber?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type SearchResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['SearchResult'] = ResolversParentTypes['SearchResult']
> = {
  items?: Resolver<Array<ResolversTypes['Items']>, ParentType, ContextType>
  processEntryCount?: Resolver<
    Maybe<ResolversTypes['Int']>,
    ParentType,
    ContextType
  >
  tagCounts?: Resolver<
    Maybe<Array<ResolversTypes['TagCount']>>,
    ParentType,
    ContextType
  >
  total?: Resolver<ResolversTypes['Int'], ParentType, ContextType>
  typesCount?: Resolver<
    Maybe<Array<ResolversTypes['TypeCount']>>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type SecondarySchoolProgramResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['SecondarySchoolProgram'] = ResolversParentTypes['SecondarySchoolProgram']
> = {
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  isSpecialNeedsProgram?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType
  >
  nameEn?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  nameIs?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  registrationEndDate?: Resolver<
    ResolversTypes['DateTime'],
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type SectionWithImageResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['SectionWithImage'] = ResolversParentTypes['SectionWithImage']
> = {
  content?: Resolver<
    Maybe<Array<ResolversTypes['Slice']>>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  image?: Resolver<Maybe<ResolversTypes['Image']>, ParentType, ContextType>
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type SectionWithVideoResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['SectionWithVideo'] = ResolversParentTypes['SectionWithVideo']
> = {
  html?: Resolver<Maybe<ResolversTypes['Html']>, ParentType, ContextType>
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  link?: Resolver<Maybe<ResolversTypes['Link']>, ParentType, ContextType>
  locale?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  showDividerOnTop?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  showTitle?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  video?: Resolver<
    Maybe<ResolversTypes['EmbeddedVideo']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type SeminarsCompanyValidationItemResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['SeminarsCompanyValidationItem'] = ResolversParentTypes['SeminarsCompanyValidationItem']
> = {
  mayPayWithAnAccount?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  nationalId?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type SeminarsIndividualValidationItemResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['SeminarsIndividualValidationItem'] = ResolversParentTypes['SeminarsIndividualValidationItem']
> = {
  errorCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  errorMessage?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  errorMessageEn?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  mayTakeCourse?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  nationalID?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ServiceResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Service'] = ResolversParentTypes['Service']
> = {
  access?: Resolver<
    Array<ResolversTypes['AccessCategory']>,
    ParentType,
    ContextType
  >
  data?: Resolver<
    Array<ResolversTypes['DataCategory']>,
    ParentType,
    ContextType
  >
  description?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  environments?: Resolver<
    Array<ResolversTypes['ServiceEnvironment']>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  owner?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  pricing?: Resolver<
    Array<ResolversTypes['PricingCategory']>,
    ParentType,
    ContextType
  >
  summary?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  type?: Resolver<
    Array<ResolversTypes['TypeCategory']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ServiceDetailResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ServiceDetail'] = ResolversParentTypes['ServiceDetail']
> = {
  data?: Resolver<
    Array<ResolversTypes['DataCategory']>,
    ParentType,
    ContextType
  >
  description?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  links?: Resolver<ResolversTypes['ExternalLinks'], ParentType, ContextType>
  pricing?: Resolver<
    Array<ResolversTypes['PricingCategory']>,
    ParentType,
    ContextType
  >
  summary?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  type?: Resolver<ResolversTypes['TypeCategory'], ParentType, ContextType>
  version?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  xroadIdentifier?: Resolver<
    ResolversTypes['XroadIdentifier'],
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ServiceEnvironmentResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ServiceEnvironment'] = ResolversParentTypes['ServiceEnvironment']
> = {
  details?: Resolver<
    Array<ResolversTypes['ServiceDetail']>,
    ParentType,
    ContextType
  >
  environment?: Resolver<ResolversTypes['Environment'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ServiceWebPageResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ServiceWebPage'] = ResolversParentTypes['ServiceWebPage']
> = {
  alertBanner?: Resolver<
    Maybe<ResolversTypes['AlertBanner']>,
    ParentType,
    ContextType
  >
  contactFormDisclaimer?: Resolver<
    Maybe<Array<ResolversTypes['Slice']>>,
    ParentType,
    ContextType
  >
  emailConfig?: Resolver<
    Maybe<ResolversTypes['ServiceWebPageEmailConfig']>,
    ParentType,
    ContextType
  >
  footerItems?: Resolver<
    Maybe<Array<ResolversTypes['FooterItem']>>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  organization?: Resolver<
    Maybe<ResolversTypes['Organization']>,
    ParentType,
    ContextType
  >
  slices?: Resolver<Array<ResolversTypes['Slice']>, ParentType, ContextType>
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ServiceWebPageEmailConfigResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ServiceWebPageEmailConfig'] = ResolversParentTypes['ServiceWebPageEmailConfig']
> = {
  emails?: Resolver<
    Array<ResolversTypes['ServiceWebPageEmailConfigItem']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ServiceWebPageEmailConfigItemResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ServiceWebPageEmailConfigItem'] = ResolversParentTypes['ServiceWebPageEmailConfigItem']
> = {
  emailList?: Resolver<Array<ResolversTypes['String']>, ParentType, ContextType>
  supportCategoryId?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type SessionsPaginatedSessionResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['SessionsPaginatedSessionResponse'] = ResolversParentTypes['SessionsPaginatedSessionResponse']
> = {
  data?: Resolver<
    Array<ResolversTypes['SessionsSession']>,
    ParentType,
    ContextType
  >
  pageInfo?: Resolver<ResolversTypes['PageInfoDto'], ParentType, ContextType>
  totalCount?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type SessionsSessionResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['SessionsSession'] = ResolversParentTypes['SessionsSession']
> = {
  actor?: Resolver<ResolversTypes['Identity'], ParentType, ContextType>
  client?: Resolver<
    ResolversTypes['AuthClient'],
    ParentType,
    ContextType,
    RequireFields<SessionsSessionClientArgs, 'lang'>
  >
  device?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  ip?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  ipLocation?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  subject?: Resolver<ResolversTypes['Identity'], ParentType, ContextType>
  timestamp?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>
  userAgent?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ShipDetailResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ShipDetail'] = ResolversParentTypes['ShipDetail']
> = {
  initialRegistrationDate?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  mainMeasurements?: Resolver<
    Maybe<ResolversTypes['ShipMeasurements']>,
    ParentType,
    ContextType
  >
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  shipRegistrationNumber?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  usageType?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ShipMeasurementsResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ShipMeasurements'] = ResolversParentTypes['ShipMeasurements']
> = {
  bruttoWeightTons?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  length?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ShipRegistryShipResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ShipRegistryShip'] = ResolversParentTypes['ShipRegistryShip']
> = {
  grossTonnage?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  length?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  manufactionYear?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  manufacturer?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  owners?: Resolver<
    Maybe<Array<ResolversTypes['ShipRegistryShipOwner']>>,
    ParentType,
    ContextType
  >
  portOfRegistry?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  regStatus?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  region?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  regno?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  shipName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  shipType?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ShipRegistryShipOwnerResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ShipRegistryShipOwner'] = ResolversParentTypes['ShipRegistryShipOwner']
> = {
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  nationalId?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  sharePercentage?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type ShipRegistryShipSearchResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['ShipRegistryShipSearch'] = ResolversParentTypes['ShipRegistryShipSearch']
> = {
  ships?: Resolver<
    Array<ResolversTypes['ShipRegistryShip']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type SidebarCardResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['SidebarCard'] = ResolversParentTypes['SidebarCard']
> = {
  contentString?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  image?: Resolver<Maybe<ResolversTypes['Image']>, ParentType, ContextType>
  link?: Resolver<Maybe<ResolversTypes['Link']>, ParentType, ContextType>
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  type?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type SignatureCollectionResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['SignatureCollection'] = ResolversParentTypes['SignatureCollection']
> = {
  areas?: Resolver<
    Array<ResolversTypes['SignatureCollectionArea']>,
    ParentType,
    ContextType
  >
  candidates?: Resolver<
    Array<ResolversTypes['SignatureCollectionCandidate']>,
    ParentType,
    ContextType
  >
  collectionType?: Resolver<
    ResolversTypes['SignatureCollectionCollectionType'],
    ParentType,
    ContextType
  >
  endTime?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  isActive?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  startTime?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>
  status?: Resolver<ResolversTypes['CollectionStatus'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type SignatureCollectionAreaResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['SignatureCollectionArea'] = ResolversParentTypes['SignatureCollectionArea']
> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  max?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  min?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type SignatureCollectionAreaBaseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['SignatureCollectionAreaBase'] = ResolversParentTypes['SignatureCollectionAreaBase']
> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type SignatureCollectionAreaSummaryReportResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['SignatureCollectionAreaSummaryReport'] = ResolversParentTypes['SignatureCollectionAreaSummaryReport']
> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  lists?: Resolver<
    Array<ResolversTypes['SignatureCollectionListSummary']>,
    ParentType,
    ContextType
  >
  max?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  min?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type SignatureCollectionBulkResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['SignatureCollectionBulk'] = ResolversParentTypes['SignatureCollectionBulk']
> = {
  failed?: Resolver<
    Array<ResolversTypes['SignatureCollectionNationalIds']>,
    ParentType,
    ContextType
  >
  success?: Resolver<
    Array<ResolversTypes['SignatureCollectionNationalIds']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type SignatureCollectionCandidateResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['SignatureCollectionCandidate'] = ResolversParentTypes['SignatureCollectionCandidate']
> = {
  collectionId?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  email?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  nationalId?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  partyBallotLetter?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  phone?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type SignatureCollectionCandidateLookUpResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['SignatureCollectionCandidateLookUp'] = ResolversParentTypes['SignatureCollectionCandidateLookUp']
> = {
  address?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  canCreate?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  canCreateInfo?: Resolver<
    Maybe<Array<ResolversTypes['String']>>,
    ParentType,
    ContextType
  >
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  nationalId?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type SignatureCollectionCollectorResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['SignatureCollectionCollector'] = ResolversParentTypes['SignatureCollectionCollector']
> = {
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  nationalId?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type SignatureCollectionListResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['SignatureCollectionList'] = ResolversParentTypes['SignatureCollectionList']
> = {
  active?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>
  area?: Resolver<
    ResolversTypes['SignatureCollectionArea'],
    ParentType,
    ContextType
  >
  candidate?: Resolver<
    ResolversTypes['SignatureCollectionCandidate'],
    ParentType,
    ContextType
  >
  collectionId?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  collectors?: Resolver<
    Maybe<Array<ResolversTypes['SignatureCollectionCollector']>>,
    ParentType,
    ContextType
  >
  endTime?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  maxReached?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  numberOfSignatures?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  reviewed?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  slug?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  startTime?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type SignatureCollectionListBaseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['SignatureCollectionListBase'] = ResolversParentTypes['SignatureCollectionListBase']
> = {
  active?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>
  area?: Resolver<
    ResolversTypes['SignatureCollectionArea'],
    ParentType,
    ContextType
  >
  collectionId?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  endTime?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  maxReached?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  numberOfSignatures?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  reviewed?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  slug?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  startTime?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type SignatureCollectionListStatusResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['SignatureCollectionListStatus'] = ResolversParentTypes['SignatureCollectionListStatus']
> = {
  status?: Resolver<ResolversTypes['ListStatus'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type SignatureCollectionListSummaryResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['SignatureCollectionListSummary'] = ResolversParentTypes['SignatureCollectionListSummary']
> = {
  candidateName?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  listName?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  nrOfDigitalSignatures?: Resolver<
    ResolversTypes['Float'],
    ParentType,
    ContextType
  >
  nrOfPaperSignatures?: Resolver<
    ResolversTypes['Float'],
    ParentType,
    ContextType
  >
  nrOfSignatures?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  partyBallotLetter?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type SignatureCollectionNationalIdsResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['SignatureCollectionNationalIds'] = ResolversParentTypes['SignatureCollectionNationalIds']
> = {
  nationalId?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  reason?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type SignatureCollectionOwnedListResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['SignatureCollectionOwnedList'] = ResolversParentTypes['SignatureCollectionOwnedList']
> = {
  area?: Resolver<
    ResolversTypes['SignatureCollectionArea'],
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type SignatureCollectionSignatureResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['SignatureCollectionSignature'] = ResolversParentTypes['SignatureCollectionSignature']
> = {
  created?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  isDigital?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  listId?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  listTitle?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  pageNumber?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  signee?: Resolver<
    ResolversTypes['SignatureCollectionSigneeBase'],
    ParentType,
    ContextType
  >
  valid?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type SignatureCollectionSignedListResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['SignatureCollectionSignedList'] = ResolversParentTypes['SignatureCollectionSignedList']
> = {
  active?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>
  area?: Resolver<
    ResolversTypes['SignatureCollectionArea'],
    ParentType,
    ContextType
  >
  canUnsign?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  collectionId?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  endTime?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  isDigital?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  isValid?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  maxReached?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  numberOfSignatures?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  pageNumber?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  reviewed?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  signedDate?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>
  slug?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  startTime?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type SignatureCollectionSigneeResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['SignatureCollectionSignee'] = ResolversParentTypes['SignatureCollectionSignee']
> = {
  address?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  area?: Resolver<
    Maybe<ResolversTypes['SignatureCollectionAreaBase']>,
    ParentType,
    ContextType
  >
  canCreate?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  canCreateInfo?: Resolver<
    Maybe<Array<ResolversTypes['String']>>,
    ParentType,
    ContextType
  >
  canSign?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>
  canSignInfo?: Resolver<
    Maybe<Array<ResolversTypes['String']>>,
    ParentType,
    ContextType
  >
  candidate?: Resolver<
    Maybe<ResolversTypes['SignatureCollectionCandidate']>,
    ParentType,
    ContextType
  >
  isOwner?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  nationalId?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  ownedLists?: Resolver<
    Maybe<Array<ResolversTypes['SignatureCollectionOwnedList']>>,
    ParentType,
    ContextType
  >
  signature?: Resolver<
    Maybe<ResolversTypes['SignatureCollectionSignature']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type SignatureCollectionSigneeBaseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['SignatureCollectionSigneeBase'] = ResolversParentTypes['SignatureCollectionSigneeBase']
> = {
  address?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  nationalId?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type SignatureCollectionSlugResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['SignatureCollectionSlug'] = ResolversParentTypes['SignatureCollectionSlug']
> = {
  slug?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type SignatureCollectionSuccessResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['SignatureCollectionSuccess'] = ResolversParentTypes['SignatureCollectionSuccess']
> = {
  reasons?: Resolver<
    Maybe<Array<ResolversTypes['String']>>,
    ParentType,
    ContextType
  >
  success?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type SimplePropertiesResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['SimpleProperties'] = ResolversParentTypes['SimpleProperties']
> = {
  defaultAddress?: Resolver<
    Maybe<ResolversTypes['PropertyLocation']>,
    ParentType,
    ContextType
  >
  propertyNumber?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type SliceResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Slice'] = ResolversParentTypes['Slice']
> = {
  __resolveType: TypeResolveFn<
    | 'AccordionSlice'
    | 'AnchorPageListSlice'
    | 'Asset'
    | 'BulletListSlice'
    | 'Chart'
    | 'ChartComponent'
    | 'ChartNumberBox'
    | 'ConnectedComponent'
    | 'ContactUs'
    | 'Districts'
    | 'EmailSignup'
    | 'Embed'
    | 'EmbeddedVideo'
    | 'EventSlice'
    | 'FaqList'
    | 'FeaturedArticles'
    | 'FeaturedEvents'
    | 'FeaturedLinks'
    | 'FeaturedSupportQNAs'
    | 'Form'
    | 'GenericList'
    | 'GrantCardsList'
    | 'GraphCard'
    | 'HeadingSlice'
    | 'Html'
    | 'Image'
    | 'IntroLinkImage'
    | 'LatestEventsSlice'
    | 'LatestGenericListItems'
    | 'LatestNewsSlice'
    | 'LinkCard'
    | 'LinkCardSection'
    | 'LogoListSlice'
    | 'MultipleStatistics'
    | 'OneColumnText'
    | 'OrganizationParentSubpageList'
    | 'OverviewLinks'
    | 'PowerBiSlice'
    | 'ProcessEntry'
    | 'SectionWithImage'
    | 'SectionWithVideo'
    | 'SidebarCard'
    | 'SliceDropdown'
    | 'Statistics'
    | 'Stepper'
    | 'StorySlice'
    | 'TabSection'
    | 'TableSlice'
    | 'TeamList'
    | 'TellUsAStory'
    | 'TimelineSlice'
    | 'TwoColumnText',
    ParentType,
    ContextType
  >
}

export type SliceDropdownResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['SliceDropdown'] = ResolversParentTypes['SliceDropdown']
> = {
  alphabeticallyOrdered?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  dropdownLabel?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  slices?: Resolver<
    Array<ResolversTypes['OneColumnText']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type SocialInsuranceIncomePlanResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['SocialInsuranceIncomePlan'] = ResolversParentTypes['SocialInsuranceIncomePlan']
> = {
  incomeCategories?: Resolver<
    Array<ResolversTypes['SocialInsuranceIncomePlanIncomeCategory']>,
    ParentType,
    ContextType
  >
  isEligibleForChange?: Resolver<
    ResolversTypes['SocialInsuranceIncomePlanEligbility'],
    ParentType,
    ContextType
  >
  registrationDate?: Resolver<
    ResolversTypes['DateTime'],
    ParentType,
    ContextType
  >
  status?: Resolver<
    ResolversTypes['SocialInsuranceIncomePlanStatus'],
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type SocialInsuranceIncomePlanEligbilityResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['SocialInsuranceIncomePlanEligbility'] = ResolversParentTypes['SocialInsuranceIncomePlanEligbility']
> = {
  isEligible?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  reason?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type SocialInsuranceIncomePlanIncomeCategoryResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['SocialInsuranceIncomePlanIncomeCategory'] = ResolversParentTypes['SocialInsuranceIncomePlanIncomeCategory']
> = {
  annualSum?: Resolver<ResolversTypes['Int'], ParentType, ContextType>
  currency?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  typeName?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type SocialInsurancePaymentResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['SocialInsurancePayment'] = ResolversParentTypes['SocialInsurancePayment']
> = {
  markWithAsterisk?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  monthlyPaymentHistory?: Resolver<
    Array<ResolversTypes['SocialInsurancePaymentMonth']>,
    ParentType,
    ContextType
  >
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  totalYearCumulativeAmount?: Resolver<
    ResolversTypes['Int'],
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type SocialInsurancePaymentGroupResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['SocialInsurancePaymentGroup'] = ResolversParentTypes['SocialInsurancePaymentGroup']
> = {
  monthlyPaymentHistory?: Resolver<
    Array<ResolversTypes['SocialInsurancePaymentMonth']>,
    ParentType,
    ContextType
  >
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  payments?: Resolver<
    Array<ResolversTypes['SocialInsurancePayment']>,
    ParentType,
    ContextType
  >
  totalYearCumulativeAmount?: Resolver<
    ResolversTypes['Int'],
    ParentType,
    ContextType
  >
  type?: Resolver<
    ResolversTypes['SocialInsurancePaymentGroupType'],
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type SocialInsurancePaymentMonthResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['SocialInsurancePaymentMonth'] = ResolversParentTypes['SocialInsurancePaymentMonth']
> = {
  amount?: Resolver<ResolversTypes['Int'], ParentType, ContextType>
  monthIndex?: Resolver<ResolversTypes['Int'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type SocialInsurancePaymentPlanResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['SocialInsurancePaymentPlan'] = ResolversParentTypes['SocialInsurancePaymentPlan']
> = {
  paymentGroups?: Resolver<
    Maybe<Array<ResolversTypes['SocialInsurancePaymentGroup']>>,
    ParentType,
    ContextType
  >
  totalPayments?: Resolver<
    Maybe<ResolversTypes['Int']>,
    ParentType,
    ContextType
  >
  totalPaymentsReceived?: Resolver<
    Maybe<ResolversTypes['Int']>,
    ParentType,
    ContextType
  >
  totalPaymentsSubtraction?: Resolver<
    Maybe<ResolversTypes['Int']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type SocialInsurancePaymentsResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['SocialInsurancePayments'] = ResolversParentTypes['SocialInsurancePayments']
> = {
  nextPayment?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>
  previousPayment?: Resolver<
    Maybe<ResolversTypes['Int']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type SocialInsurancePensionCalculationResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['SocialInsurancePensionCalculationResponse'] = ResolversParentTypes['SocialInsurancePensionCalculationResponse']
> = {
  groups?: Resolver<
    Maybe<
      Array<
        ResolversTypes['SocialInsurancePensionCalculationResponseItemGroup']
      >
    >,
    ParentType,
    ContextType
  >
  highlightedItems?: Resolver<
    Maybe<
      Array<ResolversTypes['SocialInsurancePensionCalculationResponseItem']>
    >,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type SocialInsurancePensionCalculationResponseItemResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['SocialInsurancePensionCalculationResponseItem'] = ResolversParentTypes['SocialInsurancePensionCalculationResponseItem']
> = {
  monthlyAmount?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  yearlyAmount?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type SocialInsurancePensionCalculationResponseItemGroupResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['SocialInsurancePensionCalculationResponseItemGroup'] = ResolversParentTypes['SocialInsurancePensionCalculationResponseItemGroup']
> = {
  items?: Resolver<
    Array<ResolversTypes['SocialInsurancePensionCalculationResponseItem']>,
    ParentType,
    ContextType
  >
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type SocialInsuranceTemporaryCalculationResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['SocialInsuranceTemporaryCalculation'] = ResolversParentTypes['SocialInsuranceTemporaryCalculation']
> = {
  groups?: Resolver<
    Maybe<Array<ResolversTypes['SocialInsuranceTemporaryCalculationGroup']>>,
    ParentType,
    ContextType
  >
  paidOut?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>
  subtracted?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>
  totalPayment?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type SocialInsuranceTemporaryCalculationGroupResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['SocialInsuranceTemporaryCalculationGroup'] = ResolversParentTypes['SocialInsuranceTemporaryCalculationGroup']
> = {
  group?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  groupId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>
  monthTotals?: Resolver<
    Maybe<Array<ResolversTypes['SocialInsuranceTemporaryCalculationMonth']>>,
    ParentType,
    ContextType
  >
  rows?: Resolver<
    Maybe<Array<ResolversTypes['SocialInsuranceTemporaryCalculationRow']>>,
    ParentType,
    ContextType
  >
  total?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type SocialInsuranceTemporaryCalculationMonthResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['SocialInsuranceTemporaryCalculationMonth'] = ResolversParentTypes['SocialInsuranceTemporaryCalculationMonth']
> = {
  amount?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>
  month?: Resolver<ResolversTypes['Int'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type SocialInsuranceTemporaryCalculationRowResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['SocialInsuranceTemporaryCalculationRow'] = ResolversParentTypes['SocialInsuranceTemporaryCalculationRow']
> = {
  months?: Resolver<
    Maybe<Array<ResolversTypes['SocialInsuranceTemporaryCalculationMonth']>>,
    ParentType,
    ContextType
  >
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  total?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type StatisticResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Statistic'] = ResolversParentTypes['Statistic']
> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  label?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  value?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type StatisticKeyValueResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['StatisticKeyValue'] = ResolversParentTypes['StatisticKeyValue']
> = {
  key?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  value?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type StatisticsResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Statistics'] = ResolversParentTypes['Statistics']
> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  statistics?: Resolver<
    Array<ResolversTypes['Statistic']>,
    ParentType,
    ContextType
  >
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type StatisticsCardResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['StatisticsCard'] = ResolversParentTypes['StatisticsCard']
> = {
  image?: Resolver<Maybe<ResolversTypes['Image']>, ParentType, ContextType>
  statistic?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type StatisticsForHeaderResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['StatisticsForHeader'] = ResolversParentTypes['StatisticsForHeader']
> = {
  header?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  headerType?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  statisticsForHeader?: Resolver<
    Array<ResolversTypes['StatisticKeyValue']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type StatisticsQueryResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['StatisticsQueryResponse'] = ResolversParentTypes['StatisticsQueryResponse']
> = {
  statistics?: Resolver<
    Array<ResolversTypes['StatisticsForHeader']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type StepResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Step'] = ResolversParentTypes['Step']
> = {
  config?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  slug?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  stepType?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  subtitle?: Resolver<
    Maybe<Array<ResolversTypes['Slice']>>,
    ParentType,
    ContextType
  >
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type StepperResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Stepper'] = ResolversParentTypes['Stepper']
> = {
  config?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  steps?: Resolver<
    Maybe<Array<ResolversTypes['Step']>>,
    ParentType,
    ContextType
  >
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type StoryResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Story'] = ResolversParentTypes['Story']
> = {
  body?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  date?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  intro?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  label?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  link?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  linkedPage?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  logo?: Resolver<ResolversTypes['Image'], ParentType, ContextType>
  readMoreText?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type StorySliceResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['StorySlice'] = ResolversParentTypes['StorySlice']
> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  readMoreText?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  stories?: Resolver<Array<ResolversTypes['Story']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type StudentAssessmentResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['StudentAssessment'] = ResolversParentTypes['StudentAssessment']
> = {
  studentNationalId?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  teacherName?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  teacherNationalId?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type StudentCanGetPracticePermitResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['StudentCanGetPracticePermit'] = ResolversParentTypes['StudentCanGetPracticePermit']
> = {
  errorCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  instructor?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  isOk?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>
  student?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type StudentInformationResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['StudentInformation'] = ResolversParentTypes['StudentInformation']
> = {
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type StudentInformationResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['StudentInformationResult'] = ResolversParentTypes['StudentInformationResult']
> = {
  student?: Resolver<
    Maybe<ResolversTypes['StudentInformation']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type SubArticleResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['SubArticle'] = ResolversParentTypes['SubArticle']
> = {
  body?: Resolver<Array<ResolversTypes['Slice']>, ParentType, ContextType>
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  parent?: Resolver<
    Maybe<ResolversTypes['ArticleReference']>,
    ParentType,
    ContextType
  >
  showTableOfContents?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  signLanguageVideo?: Resolver<
    Maybe<ResolversTypes['EmbeddedVideo']>,
    ParentType,
    ContextType
  >
  slug?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  stepper?: Resolver<Maybe<ResolversTypes['Stepper']>, ParentType, ContextType>
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type SubpageHeaderResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['SubpageHeader'] = ResolversParentTypes['SubpageHeader']
> = {
  body?: Resolver<
    Maybe<Array<ResolversTypes['Slice']>>,
    ParentType,
    ContextType
  >
  featuredImage?: Resolver<
    Maybe<ResolversTypes['Image']>,
    ParentType,
    ContextType
  >
  subpageId?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  summary?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type SupportCategoryResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['SupportCategory'] = ResolversParentTypes['SupportCategory']
> = {
  description?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  importance?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  organization?: Resolver<
    Maybe<ResolversTypes['Organization']>,
    ParentType,
    ContextType
  >
  slug?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type SupportQnaResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['SupportQNA'] = ResolversParentTypes['SupportQNA']
> = {
  answer?: Resolver<Array<ResolversTypes['Slice']>, ParentType, ContextType>
  category?: Resolver<
    Maybe<ResolversTypes['SupportCategory']>,
    ParentType,
    ContextType
  >
  contactLink?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  importance?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  organization?: Resolver<
    Maybe<ResolversTypes['Organization']>,
    ParentType,
    ContextType
  >
  relatedLinks?: Resolver<
    Array<ResolversTypes['Link']>,
    ParentType,
    ContextType
  >
  slug?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  subCategory?: Resolver<
    Maybe<ResolversTypes['SupportSubCategory']>,
    ParentType,
    ContextType
  >
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type SupportSubCategoryResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['SupportSubCategory'] = ResolversParentTypes['SupportSubCategory']
> = {
  description?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  importance?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  slug?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type SyslumennAuctionResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['SyslumennAuction'] = ResolversParentTypes['SyslumennAuction']
> = {
  auctionDate?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  auctionTakesPlaceAt?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  auctionTime?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  auctionType?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  location?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  lotId?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  lotItems?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  lotName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  lotType?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  office?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  petitioners?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  publishText?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  respondent?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type TabContentResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['TabContent'] = ResolversParentTypes['TabContent']
> = {
  body?: Resolver<
    Maybe<Array<ResolversTypes['Slice']>>,
    ParentType,
    ContextType
  >
  contentTitle?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  image?: Resolver<Maybe<ResolversTypes['Image']>, ParentType, ContextType>
  tabTitle?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type TabSectionResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['TabSection'] = ResolversParentTypes['TabSection']
> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  tabs?: Resolver<Array<ResolversTypes['TabContent']>, ParentType, ContextType>
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type TableSliceResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['TableSlice'] = ResolversParentTypes['TableSlice']
> = {
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  tableContent?: Resolver<
    Maybe<ResolversTypes['JSON']>,
    ParentType,
    ContextType
  >
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type TagCountResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['TagCount'] = ResolversParentTypes['TagCount']
> = {
  count?: Resolver<ResolversTypes['Int'], ParentType, ContextType>
  key?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  value?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type TeacherV4Resolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['TeacherV4'] = ResolversParentTypes['TeacherV4']
> = {
  driverLicenseId?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  nationalId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type TeamListResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['TeamList'] = ResolversParentTypes['TeamList']
> = {
  filterTags?: Resolver<
    Maybe<Array<ResolversTypes['GenericTag']>>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  showSearchInput?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  teamMemberOrder?: Resolver<
    Maybe<ResolversTypes['GetTeamMembersInputOrderBy']>,
    ParentType,
    ContextType
  >
  teamMembers?: Resolver<
    Array<ResolversTypes['TeamMember']>,
    ParentType,
    ContextType
  >
  variant?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type TeamMemberResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['TeamMember'] = ResolversParentTypes['TeamMember']
> = {
  createdAt?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  email?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  filterTags?: Resolver<
    Maybe<Array<ResolversTypes['GenericTag']>>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  image?: Resolver<Maybe<ResolversTypes['Image']>, ParentType, ContextType>
  imageOnSelect?: Resolver<
    Maybe<ResolversTypes['Image']>,
    ParentType,
    ContextType
  >
  intro?: Resolver<
    Maybe<Array<ResolversTypes['Slice']>>,
    ParentType,
    ContextType
  >
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  phone?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  tagGroups?: Resolver<
    Maybe<Array<ResolversTypes['TeamMemberTagGroup']>>,
    ParentType,
    ContextType
  >
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type TeamMemberResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['TeamMemberResponse'] = ResolversParentTypes['TeamMemberResponse']
> = {
  input?: Resolver<
    ResolversTypes['TeamMemberResponseInput'],
    ParentType,
    ContextType
  >
  items?: Resolver<Array<ResolversTypes['TeamMember']>, ParentType, ContextType>
  total?: Resolver<ResolversTypes['Int'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type TeamMemberResponseInputResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['TeamMemberResponseInput'] = ResolversParentTypes['TeamMemberResponseInput']
> = {
  lang?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  orderBy?: Resolver<
    Maybe<ResolversTypes['GetTeamMembersInputOrderBy']>,
    ParentType,
    ContextType
  >
  page?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>
  queryString?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  size?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>
  tagGroups?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>
  tags?: Resolver<
    Maybe<Array<ResolversTypes['String']>>,
    ParentType,
    ContextType
  >
  teamListId?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type TeamMemberTagGroupResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['TeamMemberTagGroup'] = ResolversParentTypes['TeamMemberTagGroup']
> = {
  groupId?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  groupLabel?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  tagLabels?: Resolver<Array<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type TellUsAStoryResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['TellUsAStory'] = ResolversParentTypes['TellUsAStory']
> = {
  SuccessMessageTitle?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >
  dateOfStoryInputErrorMessage?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >
  dateOfStoryLabel?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  dateOfStoryPlaceholder?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >
  emailInputErrorMessage?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >
  emailLabel?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  emailPlaceholder?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  errorMessage?: Resolver<
    Maybe<ResolversTypes['Html']>,
    ParentType,
    ContextType
  >
  errorMessageTitle?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >
  firstSectionTitle?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  instructionsDescription?: Resolver<
    Maybe<ResolversTypes['Html']>,
    ParentType,
    ContextType
  >
  instructionsImage?: Resolver<ResolversTypes['Image'], ParentType, ContextType>
  instructionsTitle?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >
  introDescription?: Resolver<
    Maybe<ResolversTypes['Html']>,
    ParentType,
    ContextType
  >
  introImage?: Resolver<Maybe<ResolversTypes['Image']>, ParentType, ContextType>
  introTitle?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  messageInputErrorMessage?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >
  messageLabel?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  messagePlaceholder?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >
  nameInputErrorMessage?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >
  nameLabel?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  namePlaceholder?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  organizationInputErrorMessage?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >
  organizationLabel?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >
  organizationPlaceholder?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >
  publicationAllowedLabel?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >
  secondSectionTitle?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >
  subjectInputErrorMessage?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  subjectLabel?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  subjectPlaceholder?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >
  submitButtonTitle?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >
  successMessage?: Resolver<
    Maybe<ResolversTypes['Html']>,
    ParentType,
    ContextType
  >
  thirdSectionTitle?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type TemporaryEventLicenceResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['TemporaryEventLicence'] = ResolversParentTypes['TemporaryEventLicence']
> = {
  estimatedNumberOfGuests?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  issuedBy?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  licenceSubType?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  licenceType?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  licenseHolder?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  licenseNumber?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  licenseResponsible?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  location?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  maximumNumberOfGuests?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  validFrom?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  validTo?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>
  year?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type TestResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['TestResult'] = ResolversParentTypes['TestResult']
> = {
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  isValid?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  message?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type TextFieldLocalesResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['TextFieldLocales'] = ResolversParentTypes['TextFieldLocales']
> = {
  en?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  is?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type TimelineEventResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['TimelineEvent'] = ResolversParentTypes['TimelineEvent']
> = {
  body?: Resolver<Maybe<ResolversTypes['Html']>, ParentType, ContextType>
  date?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  denominator?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  label?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  link?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  numerator?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>
  tags?: Resolver<
    Maybe<Array<ResolversTypes['String']>>,
    ParentType,
    ContextType
  >
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type TimelineSliceResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['TimelineSlice'] = ResolversParentTypes['TimelineSlice']
> = {
  events?: Resolver<
    Array<ResolversTypes['TimelineEvent']>,
    ParentType,
    ContextType
  >
  hasBorderAbove?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  intro?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type TwoColumnTextResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['TwoColumnText'] = ResolversParentTypes['TwoColumnText']
> = {
  dividerOnTop?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  leftContent?: Resolver<
    Maybe<Array<ResolversTypes['Slice']>>,
    ParentType,
    ContextType
  >
  leftLink?: Resolver<Maybe<ResolversTypes['Link']>, ParentType, ContextType>
  leftTitle?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  onlyUseOneTitle?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  rightContent?: Resolver<
    Maybe<Array<ResolversTypes['Slice']>>,
    ParentType,
    ContextType
  >
  rightLink?: Resolver<Maybe<ResolversTypes['Link']>, ParentType, ContextType>
  rightTitle?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type TypeCountResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['TypeCount'] = ResolversParentTypes['TypeCount']
> = {
  count?: Resolver<ResolversTypes['Int'], ParentType, ContextType>
  key?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type TyresResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Tyres'] = ResolversParentTypes['Tyres']
> = {
  axle1?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  axle2?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  axle3?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  axle4?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  axle5?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type UnionResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Union'] = ResolversParentTypes['Union']
> = {
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type UnitOfUseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['UnitOfUse'] = ResolversParentTypes['UnitOfUse']
> = {
  address?: Resolver<
    Maybe<ResolversTypes['PropertyLocation']>,
    ParentType,
    ContextType
  >
  appraisal?: Resolver<
    Maybe<ResolversTypes['Appraisal']>,
    ParentType,
    ContextType
  >
  buildYearDisplay?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  displaySize?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  explanation?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  fireAssessment?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  marking?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  propertyNumber?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  unitOfUseNumber?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  usageDisplay?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type UnitsOfUseModelResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['UnitsOfUseModel'] = ResolversParentTypes['UnitsOfUseModel']
> = {
  paging?: Resolver<
    Maybe<ResolversTypes['PagingData']>,
    ParentType,
    ContextType
  >
  unitsOfUse?: Resolver<
    Maybe<Array<ResolversTypes['UnitOfUse']>>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type UniversityCareersInstitutionResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['UniversityCareersInstitution'] = ResolversParentTypes['UniversityCareersInstitution']
> = {
  displayName?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  id?: Resolver<
    ResolversTypes['UniversityCareersUniversityId'],
    ParentType,
    ContextType
  >
  logoUrl?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  shortId?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type UniversityCareersStudentFileResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['UniversityCareersStudentFile'] = ResolversParentTypes['UniversityCareersStudentFile']
> = {
  displayName?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  fileName?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  locale?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  type?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type UniversityCareersStudentTrackResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['UniversityCareersStudentTrack'] = ResolversParentTypes['UniversityCareersStudentTrack']
> = {
  downloadServiceURL?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  files?: Resolver<
    Array<ResolversTypes['UniversityCareersStudentFile']>,
    ParentType,
    ContextType
  >
  metadata?: Resolver<
    ResolversTypes['UniversityCareersStudentTrackMetadata'],
    ParentType,
    ContextType
  >
  transcript?: Resolver<
    ResolversTypes['UniversityCareersStudentTrackTranscript'],
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type UniversityCareersStudentTrackHistoryResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['UniversityCareersStudentTrackHistory'] = ResolversParentTypes['UniversityCareersStudentTrackHistory']
> = {
  errors?: Resolver<
    Maybe<
      Array<ResolversTypes['UniversityCareersStudentTrackTranscriptError']>
    >,
    ParentType,
    ContextType
  >
  transcripts?: Resolver<
    Array<ResolversTypes['UniversityCareersStudentTrackTranscript']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type UniversityCareersStudentTrackMetadataResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['UniversityCareersStudentTrackMetadata'] = ResolversParentTypes['UniversityCareersStudentTrackMetadata']
> = {
  description?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  footer?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  unconfirmedData?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type UniversityCareersStudentTrackTranscriptResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['UniversityCareersStudentTrackTranscript'] = ResolversParentTypes['UniversityCareersStudentTrackTranscript']
> = {
  degree?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  faculty?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  graduationDate?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  institution?: Resolver<
    ResolversTypes['UniversityCareersInstitution'],
    ParentType,
    ContextType
  >
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  nationalId?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  school?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  studyProgram?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  trackNumber?: Resolver<ResolversTypes['Int'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type UniversityCareersStudentTrackTranscriptErrorResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['UniversityCareersStudentTrackTranscriptError'] = ResolversParentTypes['UniversityCareersStudentTrackTranscriptError']
> = {
  error?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  institution?: Resolver<
    ResolversTypes['UniversityCareersInstitution'],
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type UniversityGatewayApplicationResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['UniversityGatewayApplication'] = ResolversParentTypes['UniversityGatewayApplication']
> = {
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  nationalId?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type UniversityGatewayProgramResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['UniversityGatewayProgram'] = ResolversParentTypes['UniversityGatewayProgram']
> = {
  active?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  applicationEndDate?: Resolver<
    ResolversTypes['DateTime'],
    ParentType,
    ContextType
  >
  applicationInUniversityGateway?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType
  >
  applicationPeriodOpen?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType
  >
  applicationStartDate?: Resolver<
    ResolversTypes['DateTime'],
    ParentType,
    ContextType
  >
  costPerYear?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  credits?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  degreeAbbreviation?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >
  degreeType?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  departmentNameEn?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  departmentNameIs?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  descriptionEn?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  descriptionIs?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  durationInYears?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  externalId?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  iscedCode?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  modeOfDelivery?: Resolver<
    Array<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  nameEn?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  nameIs?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  schoolAnswerDate?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  specializationExternalId?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  specializationNameEn?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  specializationNameIs?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  startingSemesterSeason?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >
  startingSemesterYear?: Resolver<
    ResolversTypes['Float'],
    ParentType,
    ContextType
  >
  studentAnswerDate?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  universityContentfulKey?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >
  universityId?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type UniversityGatewayProgramDetailsResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['UniversityGatewayProgramDetails'] = ResolversParentTypes['UniversityGatewayProgramDetails']
> = {
  active?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  admissionRequirementsEn?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  admissionRequirementsIs?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  allowException?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  allowThirdLevelQualification?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType
  >
  applicationEndDate?: Resolver<
    ResolversTypes['DateTime'],
    ParentType,
    ContextType
  >
  applicationInUniversityGateway?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType
  >
  applicationPeriodOpen?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType
  >
  applicationStartDate?: Resolver<
    ResolversTypes['DateTime'],
    ParentType,
    ContextType
  >
  arrangementEn?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  arrangementIs?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  costInformationEn?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  costInformationIs?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  costPerYear?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  credits?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  degreeAbbreviation?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >
  degreeType?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  departmentNameEn?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  departmentNameIs?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  descriptionEn?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  descriptionHtmlEn?: Resolver<
    Maybe<ResolversTypes['JSON']>,
    ParentType,
    ContextType
  >
  descriptionHtmlIs?: Resolver<
    Maybe<ResolversTypes['JSON']>,
    ParentType,
    ContextType
  >
  descriptionIs?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  durationInYears?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  externalId?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  externalUrlEn?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  externalUrlIs?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  extraApplicationFields?: Resolver<
    Array<ResolversTypes['UniversityGatewayProgramExtraApplicationField']>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  iscedCode?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  modeOfDelivery?: Resolver<
    Array<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  nameEn?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  nameIs?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  schoolAnswerDate?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  specializationExternalId?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  specializationNameEn?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  specializationNameIs?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  startingSemesterSeason?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >
  startingSemesterYear?: Resolver<
    ResolversTypes['Float'],
    ParentType,
    ContextType
  >
  studentAnswerDate?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  studyRequirementsEn?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  studyRequirementsIs?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  universityContentfulKey?: Resolver<
    ResolversTypes['String'],
    ParentType,
    ContextType
  >
  universityId?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type UniversityGatewayProgramExtraApplicationFieldResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['UniversityGatewayProgramExtraApplicationField'] = ResolversParentTypes['UniversityGatewayProgramExtraApplicationField']
> = {
  descriptionEn?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  descriptionIs?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  externalKey?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  fieldType?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  nameEn?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  nameIs?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  options?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  required?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  uploadAcceptedFileType?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type UniversityGatewayProgramFilterResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['UniversityGatewayProgramFilter'] = ResolversParentTypes['UniversityGatewayProgramFilter']
> = {
  field?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  options?: Resolver<Array<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type UniversityGatewayProgramsPaginatedResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['UniversityGatewayProgramsPaginated'] = ResolversParentTypes['UniversityGatewayProgramsPaginated']
> = {
  data?: Resolver<
    Array<ResolversTypes['UniversityGatewayProgram']>,
    ParentType,
    ContextType
  >
  pageInfo?: Resolver<ResolversTypes['PageInfoDto'], ParentType, ContextType>
  totalCount?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type UniversityGatewayUniversityResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['UniversityGatewayUniversity'] = ResolversParentTypes['UniversityGatewayUniversity']
> = {
  contentfulKey?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  contentfulLink?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  contentfulLinkEn?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  contentfulLogoUrl?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  contentfulTitle?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  contentfulTitleEn?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  nationalId?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type UpdateCurrentEmployerResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['UpdateCurrentEmployerResponse'] = ResolversParentTypes['UpdateCurrentEmployerResponse']
> = {
  success?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type UrlResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['Url'] = ResolversParentTypes['Url']
> = {
  explicitRedirect?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  page?: Resolver<
    Maybe<ResolversTypes['ReferenceLink']>,
    ParentType,
    ContextType
  >
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  urlsList?: Resolver<Array<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type UserDeviceTokenResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['UserDeviceToken'] = ResolversParentTypes['UserDeviceToken']
> = {
  created?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>
  deviceToken?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  modified?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>
  nationalId?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type UserProfileResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['UserProfile'] = ResolversParentTypes['UserProfile']
> = {
  bankInfo?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  canNudge?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>
  documentNotifications?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType
  >
  email?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  emailNotifications?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  emailStatus?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  emailVerified?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  locale?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  mobilePhoneNumber?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  mobilePhoneNumberVerified?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType
  >
  mobileStatus?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  modified?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  nationalId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  needsNudge?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type UserProfileActorProfileResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['UserProfileActorProfile'] = ResolversParentTypes['UserProfileActorProfile']
> = {
  emailNotifications?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType
  >
  fromName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  fromNationalId?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type UserProfileActorProfileResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['UserProfileActorProfileResponse'] = ResolversParentTypes['UserProfileActorProfileResponse']
> = {
  data?: Resolver<
    Array<ResolversTypes['UserProfileActorProfile']>,
    ParentType,
    ContextType
  >
  pageInfo?: Resolver<ResolversTypes['PageInfoDto'], ParentType, ContextType>
  totalCount?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type UserProfileAdminProfileResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['UserProfileAdminProfile'] = ResolversParentTypes['UserProfileAdminProfile']
> = {
  bankInfo?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  canNudge?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>
  documentNotifications?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType
  >
  email?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  emailNotifications?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  emailStatus?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  emailVerified?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  fullName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  lastNudge?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  locale?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  mobilePhoneNumber?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  mobilePhoneNumberVerified?: Resolver<
    ResolversTypes['Boolean'],
    ParentType,
    ContextType
  >
  mobileStatus?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  modified?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  nationalId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  needsNudge?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  nextNudge?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type UserProfileAdminProfilesResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['UserProfileAdminProfilesResponse'] = ResolversParentTypes['UserProfileAdminProfilesResponse']
> = {
  data?: Resolver<
    Array<ResolversTypes['UserProfileAdminProfile']>,
    ParentType,
    ContextType
  >
  pageInfo?: Resolver<ResolversTypes['PageInfoDto'], ParentType, ContextType>
  totalCount?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type UserProfileLocaleResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['UserProfileLocale'] = ResolversParentTypes['UserProfileLocale']
> = {
  locale?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  nationalId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type VehicleCurrentWithMileageResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['VehicleCurrentWithMileage'] = ResolversParentTypes['VehicleCurrentWithMileage']
> = {
  color?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  mileageDetails?: Resolver<
    Maybe<ResolversTypes['VehiclesMileageDetails']>,
    ParentType,
    ContextType
  >
  registrationNumber?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  userRole?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  vehicleId?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type VehicleDetailResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['VehicleDetail'] = ResolversParentTypes['VehicleDetail']
> = {
  color?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  dateOfRegistration?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  licencePlate?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  manufacturer?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  manufacturerType?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  propertyNumber?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type VehicleListedResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['VehicleListed'] = ResolversParentTypes['VehicleListed']
> = {
  canRegisterMileage?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  colorCode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  colorName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  lastMileageRegistration?: Resolver<
    Maybe<ResolversTypes['VehicleMileageDetail']>,
    ParentType,
    ContextType
  >
  latestMileage?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  make?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  mileageRegistrationHistory?: Resolver<
    Maybe<Array<ResolversTypes['VehicleMileageDetail']>>,
    ParentType,
    ContextType
  >
  modelYear?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  nextMainInspection?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  permno?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  persidno?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  regTypeCode?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  regTypeName?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  regTypeSubName?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  regno?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  requiresMileageRegistration?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  role?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type VehicleMileageDetailResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['VehicleMileageDetail'] = ResolversParentTypes['VehicleMileageDetail']
> = {
  internalId?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>
  mileage?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  mileageNumber?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  originCode?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  permno?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  readDate?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type VehicleMileageOverviewResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['VehicleMileageOverview'] = ResolversParentTypes['VehicleMileageOverview']
> = {
  canRegisterMileage?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  canUserRegisterVehicleMileage?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  data?: Resolver<
    Maybe<Array<ResolversTypes['VehicleMileageDetail']>>,
    ParentType,
    ContextType
  >
  editing?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>
  permno?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  requiresMileageRegistration?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type VehicleMileagePostResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['VehicleMileagePostResponse'] = ResolversParentTypes['VehicleMileagePostResponse']
> = {
  __resolveType: TypeResolveFn<
    'VehicleMileageDetail' | 'VehiclesMileageUpdateError',
    ParentType,
    ContextType
  >
}

export type VehicleMileagePutModelResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['VehicleMileagePutModel'] = ResolversParentTypes['VehicleMileagePutModel']
> = {
  internalId?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>
  mileage?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  mileageNumber?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  permno?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type VehicleMileagePutResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['VehicleMileagePutResponse'] = ResolversParentTypes['VehicleMileagePutResponse']
> = {
  __resolveType: TypeResolveFn<
    'VehicleMileagePutModel' | 'VehiclesMileageUpdateError',
    ParentType,
    ContextType
  >
}

export type VehicleOperatorChangeChecksByPermnoResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['VehicleOperatorChangeChecksByPermno'] = ResolversParentTypes['VehicleOperatorChangeChecksByPermno']
> = {
  basicVehicleInformation?: Resolver<
    Maybe<ResolversTypes['BasicVehicleInformation']>,
    ParentType,
    ContextType
  >
  isDebtLess?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  validationErrorMessages?: Resolver<
    Maybe<Array<ResolversTypes['VehicleValidationErrorMessage']>>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type VehicleOwnerchangeChecksByPermnoResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['VehicleOwnerchangeChecksByPermno'] = ResolversParentTypes['VehicleOwnerchangeChecksByPermno']
> = {
  basicVehicleInformation?: Resolver<
    Maybe<ResolversTypes['BasicVehicleInformation']>,
    ParentType,
    ContextType
  >
  isDebtLess?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  validationErrorMessages?: Resolver<
    Maybe<Array<ResolversTypes['VehicleValidationErrorMessage']>>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type VehiclePagingResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['VehiclePaging'] = ResolversParentTypes['VehiclePaging']
> = {
  pageNumber?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  pageSize?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  totalPages?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  totalRecords?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type VehiclePlateOrderChecksByPermnoResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['VehiclePlateOrderChecksByPermno'] = ResolversParentTypes['VehiclePlateOrderChecksByPermno']
> = {
  basicVehicleInformation?: Resolver<
    Maybe<ResolversTypes['BasicVehicleInformation']>,
    ParentType,
    ContextType
  >
  validationErrorMessages?: Resolver<
    Maybe<Array<ResolversTypes['VehicleValidationErrorMessage']>>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type VehicleRegistrationResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['VehicleRegistration'] = ResolversParentTypes['VehicleRegistration']
> = {
  color?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  licensePlate?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  manufacturer?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  modelName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type VehicleValidationErrorMessageResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['VehicleValidationErrorMessage'] = ResolversParentTypes['VehicleValidationErrorMessage']
> = {
  defaultMessage?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  errorNo?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type VehiclesAxleResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['VehiclesAxle'] = ResolversParentTypes['VehiclesAxle']
> = {
  axleMaxWeight?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  wheelAxle?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type VehiclesBasicInfoResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['VehiclesBasicInfo'] = ResolversParentTypes['VehiclesBasicInfo']
> = {
  country?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  formerCountry?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  importStatus?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  model?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  permno?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  preregDateYear?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  regno?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  subModel?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  vehicleStatus?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  verno?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  year?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type VehiclesBulkMileageReadingResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['VehiclesBulkMileageReadingResponse'] = ResolversParentTypes['VehiclesBulkMileageReadingResponse']
> = {
  errorCode?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>
  errorMessage?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  requestId?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type VehiclesBulkMileageRegistrationJobResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['VehiclesBulkMileageRegistrationJob'] = ResolversParentTypes['VehiclesBulkMileageRegistrationJob']
> = {
  dateFinished?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  dateRequested?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  dateStarted?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  guid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  originCode?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  originName?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  reportingPersonName?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  reportingPersonNationalId?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type VehiclesBulkMileageRegistrationJobHistoryResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['VehiclesBulkMileageRegistrationJobHistory'] = ResolversParentTypes['VehiclesBulkMileageRegistrationJobHistory']
> = {
  history?: Resolver<
    Array<ResolversTypes['VehiclesBulkMileageRegistrationJob']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type VehiclesBulkMileageRegistrationRequestDetailResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['VehiclesBulkMileageRegistrationRequestDetail'] = ResolversParentTypes['VehiclesBulkMileageRegistrationRequestDetail']
> = {
  errors?: Resolver<
    Maybe<Array<ResolversTypes['VehiclesBulkMileageRegistrationRequestError']>>,
    ParentType,
    ContextType
  >
  guid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  mileage?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>
  returnCode?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  vehicleId?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type VehiclesBulkMileageRegistrationRequestErrorResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['VehiclesBulkMileageRegistrationRequestError'] = ResolversParentTypes['VehiclesBulkMileageRegistrationRequestError']
> = {
  code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  message?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  warningSerialCode?: Resolver<
    Maybe<ResolversTypes['Int']>,
    ParentType,
    ContextType
  >
  warningText?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type VehiclesBulkMileageRegistrationRequestOverviewResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['VehiclesBulkMileageRegistrationRequestOverview'] = ResolversParentTypes['VehiclesBulkMileageRegistrationRequestOverview']
> = {
  requests?: Resolver<
    Array<ResolversTypes['VehiclesBulkMileageRegistrationRequestDetail']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type VehiclesBulkMileageRegistrationRequestStatusResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['VehiclesBulkMileageRegistrationRequestStatus'] = ResolversParentTypes['VehiclesBulkMileageRegistrationRequestStatus']
> = {
  jobsErrored?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>
  jobsFinished?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>
  jobsRemaining?: Resolver<
    Maybe<ResolversTypes['Int']>,
    ParentType,
    ContextType
  >
  jobsSubmitted?: Resolver<
    Maybe<ResolversTypes['Int']>,
    ParentType,
    ContextType
  >
  jobsValid?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>
  requestId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type VehiclesCurrentListResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['VehiclesCurrentListResponse'] = ResolversParentTypes['VehiclesCurrentListResponse']
> = {
  data?: Resolver<
    Maybe<Array<ResolversTypes['VehicleCurrentWithMileage']>>,
    ParentType,
    ContextType
  >
  pageNumber?: Resolver<ResolversTypes['Int'], ParentType, ContextType>
  pageSize?: Resolver<ResolversTypes['Int'], ParentType, ContextType>
  totalPages?: Resolver<ResolversTypes['Int'], ParentType, ContextType>
  totalRecords?: Resolver<ResolversTypes['Int'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type VehiclesCurrentOwnerInfoResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['VehiclesCurrentOwnerInfo'] = ResolversParentTypes['VehiclesCurrentOwnerInfo']
> = {
  address?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  city?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  dateOfPurchase?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  nationalId?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  owner?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  postalcode?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type VehiclesDetailResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['VehiclesDetail'] = ResolversParentTypes['VehiclesDetail']
> = {
  basicInfo?: Resolver<
    Maybe<ResolversTypes['VehiclesBasicInfo']>,
    ParentType,
    ContextType
  >
  coOwners?: Resolver<
    Maybe<Array<ResolversTypes['VehiclesCurrentOwnerInfo']>>,
    ParentType,
    ContextType
  >
  currentOwnerInfo?: Resolver<
    Maybe<ResolversTypes['VehiclesCurrentOwnerInfo']>,
    ParentType,
    ContextType
  >
  downloadServiceURL?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  inspectionInfo?: Resolver<
    Maybe<ResolversTypes['VehiclesInspectionInfo']>,
    ParentType,
    ContextType
  >
  isDebtLess?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  isOutOfCommission?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  lastMileage?: Resolver<
    Maybe<ResolversTypes['VehicleMileageDetail']>,
    ParentType,
    ContextType
  >
  mainInfo?: Resolver<
    Maybe<ResolversTypes['VehiclesMainInfo']>,
    ParentType,
    ContextType
  >
  operators?: Resolver<
    Maybe<Array<ResolversTypes['VehiclesOperator']>>,
    ParentType,
    ContextType
  >
  ownersInfo?: Resolver<
    Maybe<Array<ResolversTypes['VehiclesOwners']>>,
    ParentType,
    ContextType
  >
  registrationInfo?: Resolver<
    Maybe<ResolversTypes['VehiclesRegistrationInfo']>,
    ParentType,
    ContextType
  >
  technicalInfo?: Resolver<
    Maybe<ResolversTypes['VehiclesTechnicalInfo']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type VehiclesExcelResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['VehiclesExcel'] = ResolversParentTypes['VehiclesExcel']
> = {
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  persidno?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  vehicles?: Resolver<
    Maybe<Array<ResolversTypes['VehiclesDetail']>>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type VehiclesInspectionInfoResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['VehiclesInspectionInfo'] = ResolversParentTypes['VehiclesInspectionInfo']
> = {
  carTax?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  date?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>
  inspectionFine?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  insuranceStatus?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  lastInspectionDate?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  mortages?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  nextInspectionDate?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  odometer?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  result?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type VehiclesListResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['VehiclesList'] = ResolversParentTypes['VehiclesList']
> = {
  address?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  createdTimestamp?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  downloadServiceURL?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  paging?: Resolver<
    Maybe<ResolversTypes['VehiclePaging']>,
    ParentType,
    ContextType
  >
  persidno?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  postStation?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  vehicleList?: Resolver<
    Maybe<Array<ResolversTypes['VehiclesVehicle']>>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type VehiclesListV2Resolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['VehiclesListV2'] = ResolversParentTypes['VehiclesListV2']
> = {
  downloadServiceURL?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  paging?: Resolver<
    Maybe<ResolversTypes['VehiclePaging']>,
    ParentType,
    ContextType
  >
  vehicleList?: Resolver<
    Maybe<Array<ResolversTypes['VehicleListed']>>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type VehiclesMainInfoResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['VehiclesMainInfo'] = ResolversParentTypes['VehiclesMainInfo']
> = {
  canRegisterMileage?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  co2?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  co2Wltp?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  cubicCapacity?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  model?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  nextAvailableMileageReadDate?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  regno?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  requiresMileageRegistration?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  subModel?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  trailerWithBrakesWeight?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  trailerWithoutBrakesWeight?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  weightedCo2?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  weightedCo2Wltp?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  year?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type VehiclesMileageDetailsResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['VehiclesMileageDetails'] = ResolversParentTypes['VehiclesMileageDetails']
> = {
  canRegisterMileage?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  lastMileageRegistration?: Resolver<
    Maybe<ResolversTypes['VehiclesMileageRegistration']>,
    ParentType,
    ContextType
  >
  mileageRegistrations?: Resolver<
    Maybe<ResolversTypes['VehiclesMileageRegistrationHistory']>,
    ParentType,
    ContextType
  >
  requiresMileageRegistration?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type VehiclesMileageRegistrationResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['VehiclesMileageRegistration'] = ResolversParentTypes['VehiclesMileageRegistration']
> = {
  date?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>
  internalId?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>
  mileage?: Resolver<ResolversTypes['Int'], ParentType, ContextType>
  originCode?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type VehiclesMileageRegistrationHistoryResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['VehiclesMileageRegistrationHistory'] = ResolversParentTypes['VehiclesMileageRegistrationHistory']
> = {
  mileageRegistrationHistory?: Resolver<
    Maybe<Array<ResolversTypes['VehiclesMileageRegistration']>>,
    ParentType,
    ContextType
  >
  vehicleId?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type VehiclesMileageUpdateErrorResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['VehiclesMileageUpdateError'] = ResolversParentTypes['VehiclesMileageUpdateError']
> = {
  code?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>
  error?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>
  message?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type VehiclesOperatorResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['VehiclesOperator'] = ResolversParentTypes['VehiclesOperator']
> = {
  address?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  city?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  endDate?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>
  mainOperator?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  mainoperator?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  nationalId?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  postalcode?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  serial?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  startDate?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type VehiclesOwnersResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['VehiclesOwners'] = ResolversParentTypes['VehiclesOwners']
> = {
  address?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  current?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>
  dateOfPurchase?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  nationalId?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type VehiclesPublicVehicleSearchResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['VehiclesPublicVehicleSearch'] = ResolversParentTypes['VehiclesPublicVehicleSearch']
> = {
  co?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  co2?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  co2WLTP?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  color?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  firstRegDate?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  make?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  mass?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  massLaden?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  newRegDate?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  nextVehicleMainInspection?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  permno?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  regno?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  typeNumber?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  vehicleCommercialName?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  vehicleStatus?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  vin?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  weightedCo2?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  weightedCo2WLTP?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type VehiclesRegistrationInfoResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['VehiclesRegistrationInfo'] = ResolversParentTypes['VehiclesRegistrationInfo']
> = {
  color?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  driversPassengers?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  firstRegistrationDate?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  newRegistrationDate?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  passengers?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  plateLocation?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  plateStatus?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  plateTypeFront?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  plateTypeRear?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  preRegistrationDate?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  reggroup?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  reggroupName?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  specialName?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  standingPassengers?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  useGroup?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  vehicleGroup?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type VehiclesTechnicalInfoResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['VehiclesTechnicalInfo'] = ResolversParentTypes['VehiclesTechnicalInfo']
> = {
  axleTotalWeight?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  axles?: Resolver<
    Maybe<Array<ResolversTypes['VehiclesAxle']>>,
    ParentType,
    ContextType
  >
  capacityWeight?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  carryingCapacity?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  cubicCapacity?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  engine?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  horsepower?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  length?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  totalWeight?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  trailerWithBrakesWeight?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  trailerWithoutBrakesWeight?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  tyres?: Resolver<Maybe<ResolversTypes['Tyres']>, ParentType, ContextType>
  vehicleWeight?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  width?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type VehiclesVehicleResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['VehiclesVehicle'] = ResolversParentTypes['VehiclesVehicle']
> = {
  buyerPersidno?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  canRegisterMileage?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  color?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  deregistrationDate?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  firstRegDate?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  isCurrent?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  lastInspectionDate?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  lastInspectionResult?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  lastInspectionType?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  modelYear?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  nextAvailableMileageReadDate?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  nextInspection?: Resolver<
    Maybe<ResolversTypes['NextInspection']>,
    ParentType,
    ContextType
  >
  nextInspectionDate?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  operatorEndDate?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  operatorNumber?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  operatorStartDate?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  otherOwners?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  outOfUse?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>
  ownerName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  ownerPersidno?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  ownerSsid?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  permno?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  plateStatus?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  primaryOperator?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  productYear?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  registrationType?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  regno?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  requiresMileageRegistration?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  role?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  termination?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  useGroup?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  vehGroup?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  vehicleStatus?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  vin?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type VehiclesVehicleSearchResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['VehiclesVehicleSearch'] = ResolversParentTypes['VehiclesVehicleSearch']
> = {
  canRegisterMileage?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  co?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  co2Wltp?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  color?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  currentOwner?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  currentOwnerAddress?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  currentOwnerIsAnonymous?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  engine?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  firstregdate?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  latestregistration?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  mass?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  massLaden?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>
  nextAvailableMileageReadDate?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  nextInspection?: Resolver<
    Maybe<ResolversTypes['VehiclesVehicleSearchNextInspection']>,
    ParentType,
    ContextType
  >
  operatorAnonymityStatus?: Resolver<
    ResolversTypes['OperatorAnonymityStatus'],
    ParentType,
    ContextType
  >
  operatorNames?: Resolver<
    Maybe<Array<ResolversTypes['String']>>,
    ParentType,
    ContextType
  >
  permno?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  regno?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  regtype?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  requiresMileageRegistration?: Resolver<
    Maybe<ResolversTypes['Boolean']>,
    ParentType,
    ContextType
  >
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  useGroup?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  vehicleStatus?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  vin?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  weightedco2Wltp?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type VehiclesVehicleSearchNextInspectionResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['VehiclesVehicleSearchNextInspection'] = ResolversParentTypes['VehiclesVehicleSearchNextInspection']
> = {
  nextinspectiondate?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  nextinspectiondateIfPassedInspectionToday?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type VerifyLicenseBarcodeDataUnionResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['VerifyLicenseBarcodeDataUnion'] = ResolversParentTypes['VerifyLicenseBarcodeDataUnion']
> = {
  __resolveType: TypeResolveFn<
    'LicenseDriverLicenseData',
    ParentType,
    ContextType
  >
}

export type VerifyLicenseBarcodeResultResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['VerifyLicenseBarcodeResult'] = ResolversParentTypes['VerifyLicenseBarcodeResult']
> = {
  barcodeType?: Resolver<
    ResolversTypes['VerifyLicenseBarcodeType'],
    ParentType,
    ContextType
  >
  data?: Resolver<
    Maybe<ResolversTypes['VerifyLicenseBarcodeDataUnion']>,
    ParentType,
    ContextType
  >
  error?: Resolver<
    Maybe<ResolversTypes['VerifyLicenseBarcodeError']>,
    ParentType,
    ContextType
  >
  licenseType?: Resolver<
    Maybe<ResolversTypes['GenericLicenseType']>,
    ParentType,
    ContextType
  >
  valid?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type WatsonAssistantChatIdentityTokenResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['WatsonAssistantChatIdentityTokenResponse'] = ResolversParentTypes['WatsonAssistantChatIdentityTokenResponse']
> = {
  token?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type WatsonAssistantChatSubmitFeedbackResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['WatsonAssistantChatSubmitFeedbackResponse'] = ResolversParentTypes['WatsonAssistantChatSubmitFeedbackResponse']
> = {
  success?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type WebSearchAutocompleteResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['WebSearchAutocomplete'] = ResolversParentTypes['WebSearchAutocomplete']
> = {
  completions?: Resolver<
    Array<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  total?: Resolver<ResolversTypes['Int'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type WebVerdictByIdItemResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['WebVerdictByIdItem'] = ResolversParentTypes['WebVerdictByIdItem']
> = {
  caseNumber?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  court?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  keywords?: Resolver<Array<ResolversTypes['String']>, ParentType, ContextType>
  pdfString?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  presentings?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  richText?: Resolver<Maybe<ResolversTypes['JSON']>, ParentType, ContextType>
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  verdictDate?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type WebVerdictByIdResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['WebVerdictByIdResponse'] = ResolversParentTypes['WebVerdictByIdResponse']
> = {
  item?: Resolver<ResolversTypes['WebVerdictByIdItem'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type WebVerdictCaseCategoriesResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['WebVerdictCaseCategoriesResponse'] = ResolversParentTypes['WebVerdictCaseCategoriesResponse']
> = {
  caseCategories?: Resolver<
    Array<ResolversTypes['WebVerdictCaseCategory']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type WebVerdictCaseCategoryResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['WebVerdictCaseCategory'] = ResolversParentTypes['WebVerdictCaseCategory']
> = {
  label?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type WebVerdictCaseTypeResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['WebVerdictCaseType'] = ResolversParentTypes['WebVerdictCaseType']
> = {
  label?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type WebVerdictCaseTypesResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['WebVerdictCaseTypesResponse'] = ResolversParentTypes['WebVerdictCaseTypesResponse']
> = {
  caseTypes?: Resolver<
    Array<ResolversTypes['WebVerdictCaseType']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type WebVerdictItemResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['WebVerdictItem'] = ResolversParentTypes['WebVerdictItem']
> = {
  caseNumber?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  court?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  keywords?: Resolver<Array<ResolversTypes['String']>, ParentType, ContextType>
  presentings?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  presidentJudge?: Resolver<
    Maybe<ResolversTypes['WebVerdictJudge']>,
    ParentType,
    ContextType
  >
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  verdictDate?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type WebVerdictJudgeResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['WebVerdictJudge'] = ResolversParentTypes['WebVerdictJudge']
> = {
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type WebVerdictKeywordResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['WebVerdictKeyword'] = ResolversParentTypes['WebVerdictKeyword']
> = {
  label?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type WebVerdictKeywordsResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['WebVerdictKeywordsResponse'] = ResolversParentTypes['WebVerdictKeywordsResponse']
> = {
  keywords?: Resolver<
    Array<ResolversTypes['WebVerdictKeyword']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type WebVerdictsInputResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['WebVerdictsInputResponse'] = ResolversParentTypes['WebVerdictsInputResponse']
> = {
  caseCategories?: Resolver<
    Maybe<Array<ResolversTypes['String']>>,
    ParentType,
    ContextType
  >
  caseNumber?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  caseTypes?: Resolver<
    Maybe<Array<ResolversTypes['String']>>,
    ParentType,
    ContextType
  >
  courtLevel?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  dateFrom?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  dateTo?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  keywords?: Resolver<
    Maybe<Array<ResolversTypes['String']>>,
    ParentType,
    ContextType
  >
  laws?: Resolver<
    Maybe<Array<ResolversTypes['String']>>,
    ParentType,
    ContextType
  >
  page?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>
  searchTerm?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type WebVerdictsResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['WebVerdictsResponse'] = ResolversParentTypes['WebVerdictsResponse']
> = {
  input?: Resolver<
    ResolversTypes['WebVerdictsInputResponse'],
    ParentType,
    ContextType
  >
  items?: Resolver<
    Array<ResolversTypes['WebVerdictItem']>,
    ParentType,
    ContextType
  >
  total?: Resolver<ResolversTypes['Int'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type WorkMachineResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['WorkMachine'] = ResolversParentTypes['WorkMachine']
> = {
  category?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  dateLastInspection?: Resolver<
    Maybe<ResolversTypes['DateTime']>,
    ParentType,
    ContextType
  >
  id?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>
  importer?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  insurer?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  labels?: Resolver<
    Maybe<Array<ResolversTypes['WorkMachinesLabel']>>,
    ParentType,
    ContextType
  >
  licensePlateNumber?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  links?: Resolver<
    Maybe<Array<ResolversTypes['WorkMachinesLink']>>,
    ParentType,
    ContextType
  >
  ownerAddress?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  ownerName?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  ownerNationalId?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  ownerNumber?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  ownerPostcode?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  productionCountry?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  productionNumber?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  productionYear?: Resolver<
    Maybe<ResolversTypes['Float']>,
    ParentType,
    ContextType
  >
  registrationDate?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  registrationNumber?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  status?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  subCategory?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  supervisorAddress?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  supervisorName?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  supervisorNationalId?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  supervisorPostcode?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type WorkMachinesCategoryResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['WorkMachinesCategory'] = ResolversParentTypes['WorkMachinesCategory']
> = {
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  nameEn?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  registrationNumberPrefix?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  subCategoryName?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  subCategoryNameEn?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type WorkMachinesCollectionDocumentResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['WorkMachinesCollectionDocument'] = ResolversParentTypes['WorkMachinesCollectionDocument']
> = {
  downloadUrl?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type WorkMachinesCollectionLinkResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['WorkMachinesCollectionLink'] = ResolversParentTypes['WorkMachinesCollectionLink']
> = {
  displayTitle?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  href?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  method?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  rel?: Resolver<
    Maybe<ResolversTypes['WorkMachinesExternalLink']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type WorkMachinesLabelResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['WorkMachinesLabel'] = ResolversParentTypes['WorkMachinesLabel']
> = {
  columnName?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  displayTitle?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  tooltip?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type WorkMachinesLinkResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['WorkMachinesLink'] = ResolversParentTypes['WorkMachinesLink']
> = {
  displayTitle?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  href?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  method?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  rel?: Resolver<
    Maybe<ResolversTypes['WorkMachinesAction']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type WorkMachinesMachineTypeResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['WorkMachinesMachineType'] = ResolversParentTypes['WorkMachinesMachineType']
> = {
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type WorkMachinesModelResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['WorkMachinesModel'] = ResolversParentTypes['WorkMachinesModel']
> = {
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type WorkMachinesPaginatedCollectionResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['WorkMachinesPaginatedCollection'] = ResolversParentTypes['WorkMachinesPaginatedCollection']
> = {
  data?: Resolver<Array<ResolversTypes['WorkMachine']>, ParentType, ContextType>
  labels?: Resolver<
    Maybe<Array<ResolversTypes['WorkMachinesLabel']>>,
    ParentType,
    ContextType
  >
  links?: Resolver<
    Maybe<Array<ResolversTypes['WorkMachinesCollectionLink']>>,
    ParentType,
    ContextType
  >
  pageInfo?: Resolver<ResolversTypes['PageInfoDto'], ParentType, ContextType>
  totalCount?: Resolver<ResolversTypes['Float'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type WorkMachinesSubCategoryResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['WorkMachinesSubCategory'] = ResolversParentTypes['WorkMachinesSubCategory']
> = {
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  nameEn?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  parentCategoryName?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  parentCategoryNameEn?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  registrationNumberPrefix?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type WorkMachinesTechInfoItemResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['WorkMachinesTechInfoItem'] = ResolversParentTypes['WorkMachinesTechInfoItem']
> = {
  label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  labelEn?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  maxLength?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  required?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  values?: Resolver<
    Maybe<Array<ResolversTypes['WorkMachinesTechInfoListItem']>>,
    ParentType,
    ContextType
  >
  variableName?: Resolver<
    Maybe<ResolversTypes['String']>,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type WorkMachinesTechInfoListItemResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['WorkMachinesTechInfoListItem'] = ResolversParentTypes['WorkMachinesTechInfoListItem']
> = {
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  nameEn?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type XroadIdentifierResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['XroadIdentifier'] = ResolversParentTypes['XroadIdentifier']
> = {
  instance?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  memberClass?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  memberCode?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  serviceCode?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  subsystemCode?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type OfficialJournalOfIcelandApplicationAdvertTemplateResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['officialJournalOfIcelandApplicationAdvertTemplateResponse'] = ResolversParentTypes['officialJournalOfIcelandApplicationAdvertTemplateResponse']
> = {
  html?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  type?: Resolver<
    ResolversTypes['officialJournalOfIcelandApplicationAdvertTemplateTypeEnum'],
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type OfficialJournalOfIcelandApplicationAdvertTemplateTypeResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['officialJournalOfIcelandApplicationAdvertTemplateType'] = ResolversParentTypes['officialJournalOfIcelandApplicationAdvertTemplateType']
> = {
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>
  type?: Resolver<
    ResolversTypes['officialJournalOfIcelandApplicationAdvertTemplateTypeEnum'],
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type OfficialJournalOfIcelandApplicationAdvertTemplateTypesResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['officialJournalOfIcelandApplicationAdvertTemplateTypesResponse'] = ResolversParentTypes['officialJournalOfIcelandApplicationAdvertTemplateTypesResponse']
> = {
  types?: Resolver<
    Array<
      ResolversTypes['officialJournalOfIcelandApplicationAdvertTemplateType']
    >,
    ParentType,
    ContextType
  >
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type SendPdfEmailResponseResolvers<
  ContextType = any,
  ParentType extends ResolversParentTypes['sendPdfEmailResponse'] = ResolversParentTypes['sendPdfEmailResponse']
> = {
  success?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>
}

export type Resolvers<ContextType = any> = {
  AccidentNotificationAttachment?: AccidentNotificationAttachmentResolvers<ContextType>
  AccidentNotificationConfirmation?: AccidentNotificationConfirmationResolvers<ContextType>
  AccidentNotificationStatus?: AccidentNotificationStatusResolvers<ContextType>
  AccordionSlice?: AccordionSliceResolvers<ContextType>
  ActionCardMetaData?: ActionCardMetaDataResolvers<ContextType>
  ActionCardTag?: ActionCardTagResolvers<ContextType>
  ActionMailBody?: ActionMailBodyResolvers<ContextType>
  AdminNotification?: AdminNotificationResolvers<ContextType>
  AdminNotifications?: AdminNotificationsResolvers<ContextType>
  AdministrationofOccupationalSafetyandHealthCourseModel?: AdministrationofOccupationalSafetyandHealthCourseModelResolvers<ContextType>
  AdministrationofOccupationalSafetyandHealthCoursesResponseModel?: AdministrationofOccupationalSafetyandHealthCoursesResponseModelResolvers<ContextType>
  AirDiscountSchemeConnectionDiscountCode?: AirDiscountSchemeConnectionDiscountCodeResolvers<ContextType>
  AirDiscountSchemeDiscount?: AirDiscountSchemeDiscountResolvers<ContextType>
  AirDiscountSchemeFlight?: AirDiscountSchemeFlightResolvers<ContextType>
  AirDiscountSchemeFlightLeg?: AirDiscountSchemeFlightLegResolvers<ContextType>
  AirDiscountSchemeFund?: AirDiscountSchemeFundResolvers<ContextType>
  AirDiscountSchemeUser?: AirDiscountSchemeUserResolvers<ContextType>
  AirDiscountSchemeUserInfo?: AirDiscountSchemeUserInfoResolvers<ContextType>
  AircraftRegistryAircraft?: AircraftRegistryAircraftResolvers<ContextType>
  AircraftRegistryAllAircraftsResponse?: AircraftRegistryAllAircraftsResponseResolvers<ContextType>
  AircraftRegistryPerson?: AircraftRegistryPersonResolvers<ContextType>
  AlcoholLicence?: AlcoholLicenceResolvers<ContextType>
  AlertBanner?: AlertBannerResolvers<ContextType>
  AnchorPage?: AnchorPageResolvers<ContextType>
  AnchorPageListSlice?: AnchorPageListSliceResolvers<ContextType>
  ApiCatalogue?: ApiCatalogueResolvers<ContextType>
  Appendix?: AppendixResolvers<ContextType>
  Application?: ApplicationResolvers<ContextType>
  ApplicationAdmin?: ApplicationAdminResolvers<ContextType>
  ApplicationAdminPaginatedResponse?: ApplicationAdminPaginatedResponseResolvers<ContextType>
  ApplicationEligibility?: ApplicationEligibilityResolvers<ContextType>
  ApplicationEligibilityRequirement?: ApplicationEligibilityRequirementResolvers<ContextType>
  ApplicationHistory?: ApplicationHistoryResolvers<ContextType>
  ApplicationInformation?: ApplicationInformationResolvers<ContextType>
  ApplicationInformationChildren?: ApplicationInformationChildrenResolvers<ContextType>
  ApplicationInformationEmployer?: ApplicationInformationEmployerResolvers<ContextType>
  ApplicationInformationPeriod?: ApplicationInformationPeriodResolvers<ContextType>
  ApplicationPayment?: ApplicationPaymentResolvers<ContextType>
  ApplicationRights?: ApplicationRightsResolvers<ContextType>
  ApplicationStatistics?: ApplicationStatisticsResolvers<ContextType>
  Appraisal?: AppraisalResolvers<ContextType>
  Article?: ArticleResolvers<ContextType>
  ArticleCategory?: ArticleCategoryResolvers<ContextType>
  ArticleGroup?: ArticleGroupResolvers<ContextType>
  ArticleReference?: ArticleReferenceResolvers<ContextType>
  ArticleSubgroup?: ArticleSubgroupResolvers<ContextType>
  Asset?: AssetResolvers<ContextType>
  AssetName?: AssetNameResolvers<ContextType>
  Auction?: AuctionResolvers<ContextType>
  AudienceAndScope?: AudienceAndScopeResolvers<ContextType>
  AuthAdminClient?: AuthAdminClientResolvers<ContextType>
  AuthAdminClientAllowedScope?: AuthAdminClientAllowedScopeResolvers<ContextType>
  AuthAdminClientClaim?: AuthAdminClientClaimResolvers<ContextType>
  AuthAdminClientEnvironment?: AuthAdminClientEnvironmentResolvers<ContextType>
  AuthAdminClientSecret?: AuthAdminClientSecretResolvers<ContextType>
  AuthAdminClientsPayload?: AuthAdminClientsPayloadResolvers<ContextType>
  AuthAdminCreateClientResponse?: AuthAdminCreateClientResponseResolvers<ContextType>
  AuthAdminCreateScopeResponse?: AuthAdminCreateScopeResponseResolvers<ContextType>
  AuthAdminDelegationProvider?: AuthAdminDelegationProviderResolvers<ContextType>
  AuthAdminDelegationType?: AuthAdminDelegationTypeResolvers<ContextType>
  AuthAdminScope?: AuthAdminScopeResolvers<ContextType>
  AuthAdminScopeEnvironment?: AuthAdminScopeEnvironmentResolvers<ContextType>
  AuthAdminScopesPayload?: AuthAdminScopesPayloadResolvers<ContextType>
  AuthAdminTenant?: AuthAdminTenantResolvers<ContextType>
  AuthAdminTenantEnvironment?: AuthAdminTenantEnvironmentResolvers<ContextType>
  AuthAdminTenantsPayload?: AuthAdminTenantsPayloadResolvers<ContextType>
  AuthAdminTranslatedValue?: AuthAdminTranslatedValueResolvers<ContextType>
  AuthApiScope?: AuthApiScopeResolvers<ContextType>
  AuthApiScopeGroup?: AuthApiScopeGroupResolvers<ContextType>
  AuthClient?: AuthClientResolvers<ContextType>
  AuthConsent?: AuthConsentResolvers<ContextType>
  AuthConsentScopeNode?: AuthConsentScopeNodeResolvers<ContextType>
  AuthConsentTenant?: AuthConsentTenantResolvers<ContextType>
  AuthConsentsPaginated?: AuthConsentsPaginatedResolvers<ContextType>
  AuthCustomDelegation?: AuthCustomDelegationResolvers<ContextType>
  AuthDelegation?: AuthDelegationResolvers<ContextType>
  AuthDelegationProviderEnvironment?: AuthDelegationProviderEnvironmentResolvers<ContextType>
  AuthDelegationProviderPayload?: AuthDelegationProviderPayloadResolvers<ContextType>
  AuthDelegationScope?: AuthDelegationScopeResolvers<ContextType>
  AuthDomain?: AuthDomainResolvers<ContextType>
  AuthGeneralMandate?: AuthGeneralMandateResolvers<ContextType>
  AuthLegalGuardianDelegation?: AuthLegalGuardianDelegationResolvers<ContextType>
  AuthLegalGuardianMinorDelegation?: AuthLegalGuardianMinorDelegationResolvers<ContextType>
  AuthLegalRepresentativeDelegation?: AuthLegalRepresentativeDelegationResolvers<ContextType>
  AuthLoginRestriction?: AuthLoginRestrictionResolvers<ContextType>
  AuthMergedDelegation?: AuthMergedDelegationResolvers<ContextType>
  AuthPasskeyAuthenticationOptions?: AuthPasskeyAuthenticationOptionsResolvers<ContextType>
  AuthPasskeyAuthenticationOptionsCredentials?: AuthPasskeyAuthenticationOptionsCredentialsResolvers<ContextType>
  AuthPasskeyRegistrationOptions?: AuthPasskeyRegistrationOptionsResolvers<ContextType>
  AuthPasskeyRegistrationVerification?: AuthPasskeyRegistrationVerificationResolvers<ContextType>
  AuthPersonalRepresentativeDelegation?: AuthPersonalRepresentativeDelegationResolvers<ContextType>
  AuthProcuringHolderDelegation?: AuthProcuringHolderDelegationResolvers<ContextType>
  AuthRegistrationOptionsAuthenticatorSelection?: AuthRegistrationOptionsAuthenticatorSelectionResolvers<ContextType>
  AuthRegistrationOptionsExtensions?: AuthRegistrationOptionsExtensionsResolvers<ContextType>
  AuthRegistrationOptionsPublicKeyCredentialDescriptorJSON?: AuthRegistrationOptionsPublicKeyCredentialDescriptorJsonResolvers<ContextType>
  AuthRegistrationOptionsPublicKeyCredentialOption?: AuthRegistrationOptionsPublicKeyCredentialOptionResolvers<ContextType>
  AuthRegistrationOptionsRp?: AuthRegistrationOptionsRpResolvers<ContextType>
  AuthRegistrationOptionsUser?: AuthRegistrationOptionsUserResolvers<ContextType>
  AuthScopeTreeNode?: AuthScopeTreeNodeResolvers<ContextType>
  BasicVehicleInformation?: BasicVehicleInformationResolvers<ContextType>
  BloodDonationRestrictionDetails?: BloodDonationRestrictionDetailsResolvers<ContextType>
  BloodDonationRestrictionGenericTag?: BloodDonationRestrictionGenericTagResolvers<ContextType>
  BloodDonationRestrictionGenericTagList?: BloodDonationRestrictionGenericTagListResolvers<ContextType>
  BloodDonationRestrictionList?: BloodDonationRestrictionListResolvers<ContextType>
  BloodDonationRestrictionListItem?: BloodDonationRestrictionListItemResolvers<ContextType>
  Broker?: BrokerResolvers<ContextType>
  BulkMailAction?: BulkMailActionResolvers<ContextType>
  BulletEntry?: BulletEntryResolvers<ContextType>
  BulletListSlice?: BulletListSliceResolvers<ContextType>
  BurningPermit?: BurningPermitResolvers<ContextType>
  BurningPermitsResponse?: BurningPermitsResponseResolvers<ContextType>
  CategoryPage?: CategoryPageResolvers<ContextType>
  CertificateInfoResponse?: CertificateInfoResponseResolvers<ContextType>
  ChangeAppendix?: ChangeAppendixResolvers<ContextType>
  Chart?: ChartResolvers<ContextType>
  ChartComponent?: ChartComponentResolvers<ContextType>
  ChartNumberBox?: ChartNumberBoxResolvers<ContextType>
  CheckTachoNetExists?: CheckTachoNetExistsResolvers<ContextType>
  ClientCredentials?: ClientCredentialsResolvers<ContextType>
  CommunicationResponse?: CommunicationResponseResolvers<ContextType>
  ConnectedComponent?: ConnectedComponentResolvers<ContextType>
  ConsultationPortalAdviceResult?: ConsultationPortalAdviceResultResolvers<ContextType>
  ConsultationPortalAllTypesResult?: ConsultationPortalAllTypesResultResolvers<ContextType>
  ConsultationPortalCaseItemResult?: ConsultationPortalCaseItemResultResolvers<ContextType>
  ConsultationPortalCaseResult?: ConsultationPortalCaseResultResolvers<ContextType>
  ConsultationPortalCaseStakeholderResult?: ConsultationPortalCaseStakeholderResultResolvers<ContextType>
  ConsultationPortalCaseSubscriptionResult?: ConsultationPortalCaseSubscriptionResultResolvers<ContextType>
  ConsultationPortalCasesAggregateResult?: ConsultationPortalCasesAggregateResultResolvers<ContextType>
  ConsultationPortalDocumentInfoResult?: ConsultationPortalDocumentInfoResultResolvers<ContextType>
  ConsultationPortalRelatedCaseResult?: ConsultationPortalRelatedCaseResultResolvers<ContextType>
  ConsultationPortalStatisticsResult?: ConsultationPortalStatisticsResultResolvers<ContextType>
  ConsultationPortalUserAdviceAggregate?: ConsultationPortalUserAdviceAggregateResolvers<ContextType>
  ConsultationPortalUserAdviceCaseResult?: ConsultationPortalUserAdviceCaseResultResolvers<ContextType>
  ConsultationPortalUserAdviceResult?: ConsultationPortalUserAdviceResultResolvers<ContextType>
  ConsultationPortalUserCaseSubscriptionResult?: ConsultationPortalUserCaseSubscriptionResultResolvers<ContextType>
  ConsultationPortalUserEmailResult?: ConsultationPortalUserEmailResultResolvers<ContextType>
  ConsultationPortalUserSubscriptionResult?: ConsultationPortalUserSubscriptionResultResolvers<ContextType>
  ConsultationPortalUserSubscriptionsAggregate?: ConsultationPortalUserSubscriptionsAggregateResolvers<ContextType>
  Contact?: ContactResolvers<ContextType>
  ContactUs?: ContactUsResolvers<ContextType>
  ContentSlug?: ContentSlugResolvers<ContextType>
  CostOfLivingCalculatorModel?: CostOfLivingCalculatorModelResolvers<ContextType>
  CostOfLivingCalculatorResponseModel?: CostOfLivingCalculatorResponseModelResolvers<ContextType>
  CoursesModel?: CoursesModelResolvers<ContextType>
  CreateBarcodeResult?: CreateBarcodeResultResolvers<ContextType>
  CustomPage?: CustomPageResolvers<ContextType>
  DateTime?: GraphQLScalarType
  DelegationAdminCustomModel?: DelegationAdminCustomModelResolvers<ContextType>
  DeleteDraftRegulationModel?: DeleteDraftRegulationModelResolvers<ContextType>
  DeleteNameResponse?: DeleteNameResponseResolvers<ContextType>
  DeleteTokenResponse?: DeleteTokenResponseResolvers<ContextType>
  DetailedSchedule?: DetailedScheduleResolvers<ContextType>
  DiplomaItems?: DiplomaItemsResolvers<ContextType>
  DiplomaModel?: DiplomaModelResolvers<ContextType>
  DirectTaxPaymentModel?: DirectTaxPaymentModelResolvers<ContextType>
  Disqualification?: DisqualificationResolvers<ContextType>
  DistrictCommissionerAgencies?: DistrictCommissionerAgenciesResolvers<ContextType>
  Districts?: DistrictsResolvers<ContextType>
  Document?: DocumentResolvers<ContextType>
  DocumentCategory?: DocumentCategoryResolvers<ContextType>
  DocumentConfirmActions?: DocumentConfirmActionsResolvers<ContextType>
  DocumentDetails?: DocumentDetailsResolvers<ContextType>
  DocumentListResponse?: DocumentListResponseResolvers<ContextType>
  DocumentMailAction?: DocumentMailActionResolvers<ContextType>
  DocumentPageNumber?: DocumentPageNumberResolvers<ContextType>
  DocumentPageResponse?: DocumentPageResponseResolvers<ContextType>
  DocumentPdfRenderer?: DocumentPdfRendererResolvers<ContextType>
  DocumentProviderCategory?: DocumentProviderCategoryResolvers<ContextType>
  DocumentProviderPaperMail?: DocumentProviderPaperMailResolvers<ContextType>
  DocumentProviderPaperMailResponse?: DocumentProviderPaperMailResponseResolvers<ContextType>
  DocumentProviderType?: DocumentProviderTypeResolvers<ContextType>
  DocumentSender?: DocumentSenderResolvers<ContextType>
  DocumentType?: DocumentTypeResolvers<ContextType>
  DocumentV2?: DocumentV2Resolvers<ContextType>
  DocumentV2Action?: DocumentV2ActionResolvers<ContextType>
  DocumentV2Content?: DocumentV2ContentResolvers<ContextType>
  DocumentV2MarkAllMailAsRead?: DocumentV2MarkAllMailAsReadResolvers<ContextType>
  DocumentV2PaperMailPreferences?: DocumentV2PaperMailPreferencesResolvers<ContextType>
  DocumentsV2?: DocumentsV2Resolvers<ContextType>
  DocumentsV2Base?: DocumentsV2BaseResolvers<ContextType>
  DocumentsV2Category?: DocumentsV2CategoryResolvers<ContextType>
  DocumentsV2Sender?: DocumentsV2SenderResolvers<ContextType>
  DocumentsV2Type?: DocumentsV2TypeResolvers<ContextType>
  DraftRegulationCancelModel?: DraftRegulationCancelModelResolvers<ContextType>
  DraftRegulationChangeModel?: DraftRegulationChangeModelResolvers<ContextType>
  DraftRegulationPagingModel?: DraftRegulationPagingModelResolvers<ContextType>
  DraftRegulationPdfDownloadModel?: DraftRegulationPdfDownloadModelResolvers<ContextType>
  DraftRegulationShippedModel?: DraftRegulationShippedModelResolvers<ContextType>
  DraftRegulationSummary?: DraftRegulationSummaryResolvers<ContextType>
  DrivingBookLesson?: DrivingBookLessonResolvers<ContextType>
  DrivingLicenceTestResult?: DrivingLicenceTestResultResolvers<ContextType>
  DrivingLicenceTestResultId?: DrivingLicenceTestResultIdResolvers<ContextType>
  DrivingLicense?: DrivingLicenseResolvers<ContextType>
  DrivingLicenseBook?: DrivingLicenseBookResolvers<ContextType>
  DrivingLicenseBookSchool?: DrivingLicenseBookSchoolResolvers<ContextType>
  DrivingLicenseBookStudent?: DrivingLicenseBookStudentResolvers<ContextType>
  DrivingLicenseBookStudentForTeacher?: DrivingLicenseBookStudentForTeacherResolvers<ContextType>
  DrivingLicenseBookStudentOverview?: DrivingLicenseBookStudentOverviewResolvers<ContextType>
  DrivingLicenseBookSuccess?: DrivingLicenseBookSuccessResolvers<ContextType>
  DrivingLicenseQualityPhoto?: DrivingLicenseQualityPhotoResolvers<ContextType>
  DrivingLicenseQualitySignature?: DrivingLicenseQualitySignatureResolvers<ContextType>
  DrivingSchoolExam?: DrivingSchoolExamResolvers<ContextType>
  DrivingSchoolType?: DrivingSchoolTypeResolvers<ContextType>
  EducationCompulsorySchoolCourse?: EducationCompulsorySchoolCourseResolvers<ContextType>
  EducationCompulsorySchoolCourseCompetence?: EducationCompulsorySchoolCourseCompetenceResolvers<ContextType>
  EducationCompulsorySchoolGrade?: EducationCompulsorySchoolGradeResolvers<ContextType>
  EducationCompulsorySchoolGradeCategory?: EducationCompulsorySchoolGradeCategoryResolvers<ContextType>
  EducationCompulsorySchoolGradeCategoryText?: EducationCompulsorySchoolGradeCategoryTextResolvers<ContextType>
  EducationCompulsorySchoolGradeCategoryWeighted?: EducationCompulsorySchoolGradeCategoryWeightedResolvers<ContextType>
  EducationCompulsorySchoolGradeDetail?: EducationCompulsorySchoolGradeDetailResolvers<ContextType>
  EducationCompulsorySchoolGradeLevelExamResults?: EducationCompulsorySchoolGradeLevelExamResultsResolvers<ContextType>
  EducationCompulsorySchoolStudentCareer?: EducationCompulsorySchoolStudentCareerResolvers<ContextType>
  EducationCourseGrade?: EducationCourseGradeResolvers<ContextType>
  EducationExamFamilyOverview?: EducationExamFamilyOverviewResolvers<ContextType>
  EducationExamResult?: EducationExamResultResolvers<ContextType>
  EducationFriggAddressModel?: EducationFriggAddressModelResolvers<ContextType>
  EducationFriggKeyOptionModel?: EducationFriggKeyOptionModelResolvers<ContextType>
  EducationFriggOptionModel?: EducationFriggOptionModelResolvers<ContextType>
  EducationFriggOrganizationModel?: EducationFriggOrganizationModelResolvers<ContextType>
  EducationFriggValueModel?: EducationFriggValueModelResolvers<ContextType>
  EducationGradeResult?: EducationGradeResultResolvers<ContextType>
  EducationLicense?: EducationLicenseResolvers<ContextType>
  EducationSignedLicense?: EducationSignedLicenseResolvers<ContextType>
  EducationUserFamilyCompulsorySchoolCareer?: EducationUserFamilyCompulsorySchoolCareerResolvers<ContextType>
  Eligibility?: EligibilityResolvers<ContextType>
  EmailSignup?: EmailSignupResolvers<ContextType>
  EmailSignupResponse?: EmailSignupResponseResolvers<ContextType>
  Embed?: EmbedResolvers<ContextType>
  EmbeddedVideo?: EmbeddedVideoResolvers<ContextType>
  Endorsement?: EndorsementResolvers<ContextType>
  EndorsementList?: EndorsementListResolvers<ContextType>
  EndorsementListOpen?: EndorsementListOpenResolvers<ContextType>
  EndorsementMetadata?: EndorsementMetadataResolvers<ContextType>
  EnergyFundVehicleDetailsWithGrant?: EnergyFundVehicleDetailsWithGrantResolvers<ContextType>
  EnergyFundVehicleGrant?: EnergyFundVehicleGrantResolvers<ContextType>
  EnhancedAsset?: EnhancedAssetResolvers<ContextType>
  EnhancedAssetSearchResult?: EnhancedAssetSearchResultResolvers<ContextType>
  EntryTitle?: EntryTitleResolvers<ContextType>
  ErrorPage?: ErrorPageResolvers<ContextType>
  EstateRelations?: EstateRelationsResolvers<ContextType>
  Event?: EventResolvers<ContextType>
  EventList?: EventListResolvers<ContextType>
  EventLocation?: EventLocationResolvers<ContextType>
  EventSlice?: EventSliceResolvers<ContextType>
  EventTime?: EventTimeResolvers<ContextType>
  ExistsEndorsementResponse?: ExistsEndorsementResponseResolvers<ContextType>
  ExportUrlResponse?: ExportUrlResponseResolvers<ContextType>
  ExternalLinks?: ExternalLinksResolvers<ContextType>
  FaqList?: FaqListResolvers<ContextType>
  Featured?: FeaturedResolvers<ContextType>
  FeaturedArticles?: FeaturedArticlesResolvers<ContextType>
  FeaturedEvents?: FeaturedEventsResolvers<ContextType>
  FeaturedLinks?: FeaturedLinksResolvers<ContextType>
  FeaturedSupportQNAs?: FeaturedSupportQnAsResolvers<ContextType>
  FinanceAssessmentYears?: FinanceAssessmentYearsResolvers<ContextType>
  FinanceChargeItemSubjectsByYear?: FinanceChargeItemSubjectsByYearResolvers<ContextType>
  FinanceChargeItemSubjectsByYearData?: FinanceChargeItemSubjectsByYearDataResolvers<ContextType>
  FinanceChargeItemSubjectsByYearPeriodData?: FinanceChargeItemSubjectsByYearPeriodDataResolvers<ContextType>
  FinanceChargeTypeDetails?: FinanceChargeTypeDetailsResolvers<ContextType>
  FinanceChargeTypeDetailsData?: FinanceChargeTypeDetailsDataResolvers<ContextType>
  FinanceChargeTypePeriodSubject?: FinanceChargeTypePeriodSubjectResolvers<ContextType>
  FinanceChargeTypePeriodSubjectData?: FinanceChargeTypePeriodSubjectDataResolvers<ContextType>
  FinanceChargeTypesByYear?: FinanceChargeTypesByYearResolvers<ContextType>
  FinanceChargeTypesByYearData?: FinanceChargeTypesByYearDataResolvers<ContextType>
  FinanceCustomerChargeType?: FinanceCustomerChargeTypeResolvers<ContextType>
  FinanceCustomerChargeTypeItem?: FinanceCustomerChargeTypeItemResolvers<ContextType>
  FinanceCustomerRecords?: FinanceCustomerRecordsResolvers<ContextType>
  FinanceCustomerRecordsItem?: FinanceCustomerRecordsItemResolvers<ContextType>
  FinanceCustomerTapsControlModel?: FinanceCustomerTapsControlModelResolvers<ContextType>
  FinanceDebtStatus?: FinanceDebtStatusResolvers<ContextType>
  FinanceDebtStatusModel?: FinanceDebtStatusModelResolvers<ContextType>
  FinanceDocumentData?: FinanceDocumentDataResolvers<ContextType>
  FinanceDocumentModel?: FinanceDocumentModelResolvers<ContextType>
  FinanceDocumentsListItem?: FinanceDocumentsListItemResolvers<ContextType>
  FinanceDocumentsListModel?: FinanceDocumentsListModelResolvers<ContextType>
  FinancialStatementsInaoClientType?: FinancialStatementsInaoClientTypeResolvers<ContextType>
  FinancialStatementsInaoConfig?: FinancialStatementsInaoConfigResolvers<ContextType>
  FinancialStatementsInaoElection?: FinancialStatementsInaoElectionResolvers<ContextType>
  FinancialStatementsInaoTaxInfo?: FinancialStatementsInaoTaxInfoResolvers<ContextType>
  FishingLicenseDateRestriction?: FishingLicenseDateRestrictionResolvers<ContextType>
  FishingLicenseDeprivation?: FishingLicenseDeprivationResolvers<ContextType>
  FishingLicenseInfo?: FishingLicenseInfoResolvers<ContextType>
  FishingLicenseLicense?: FishingLicenseLicenseResolvers<ContextType>
  FishingLicenseListOptions?: FishingLicenseListOptionsResolvers<ContextType>
  FishingLicenseReason?: FishingLicenseReasonResolvers<ContextType>
  FishingLicenseSeaworthiness?: FishingLicenseSeaworthinessResolvers<ContextType>
  FishingLicenseShip?: FishingLicenseShipResolvers<ContextType>
  FiskistofaCatchQuotaCategory?: FiskistofaCatchQuotaCategoryResolvers<ContextType>
  FiskistofaExtendedCatchQuotaCategory?: FiskistofaExtendedCatchQuotaCategoryResolvers<ContextType>
  FiskistofaExtendedShipStatusInformation?: FiskistofaExtendedShipStatusInformationResolvers<ContextType>
  FiskistofaExtendedShipStatusInformationResponse?: FiskistofaExtendedShipStatusInformationResponseResolvers<ContextType>
  FiskistofaExtendedShipStatusInformationUpdate?: FiskistofaExtendedShipStatusInformationUpdateResolvers<ContextType>
  FiskistofaExtendedShipStatusInformationUpdateResponse?: FiskistofaExtendedShipStatusInformationUpdateResponseResolvers<ContextType>
  FiskistofaQuotaStatus?: FiskistofaQuotaStatusResolvers<ContextType>
  FiskistofaQuotaStatusResponse?: FiskistofaQuotaStatusResponseResolvers<ContextType>
  FiskistofaQuotaType?: FiskistofaQuotaTypeResolvers<ContextType>
  FiskistofaQuotaTypeResponse?: FiskistofaQuotaTypeResponseResolvers<ContextType>
  FiskistofaShip?: FiskistofaShipResolvers<ContextType>
  FiskistofaShipBasicInfo?: FiskistofaShipBasicInfoResolvers<ContextType>
  FiskistofaShipBasicInfoResponse?: FiskistofaShipBasicInfoResponseResolvers<ContextType>
  FiskistofaShipStatusInformation?: FiskistofaShipStatusInformationResolvers<ContextType>
  FiskistofaShipStatusInformationResponse?: FiskistofaShipStatusInformationResponseResolvers<ContextType>
  FiskistofaSingleShip?: FiskistofaSingleShipResolvers<ContextType>
  FiskistofaSingleShipResponse?: FiskistofaSingleShipResponseResolvers<ContextType>
  FooterItem?: FooterItemResolvers<ContextType>
  Form?: FormResolvers<ContextType>
  FormField?: FormFieldResolvers<ContextType>
  FormSystemApplicant?: FormSystemApplicantResolvers<ContextType>
  FormSystemApplication?: FormSystemApplicationResolvers<ContextType>
  FormSystemApplicationEventDto?: FormSystemApplicationEventDtoResolvers<ContextType>
  FormSystemDependency?: FormSystemDependencyResolvers<ContextType>
  FormSystemField?: FormSystemFieldResolvers<ContextType>
  FormSystemFieldSettings?: FormSystemFieldSettingsResolvers<ContextType>
  FormSystemFieldType?: FormSystemFieldTypeResolvers<ContextType>
  FormSystemForm?: FormSystemFormResolvers<ContextType>
  FormSystemFormApplicant?: FormSystemFormApplicantResolvers<ContextType>
  FormSystemFormCertificationType?: FormSystemFormCertificationTypeResolvers<ContextType>
  FormSystemFormCertificationTypeDto?: FormSystemFormCertificationTypeDtoResolvers<ContextType>
  FormSystemFormResponse?: FormSystemFormResponseResolvers<ContextType>
  FormSystemFormUrl?: FormSystemFormUrlResolvers<ContextType>
  FormSystemLanguageType?: FormSystemLanguageTypeResolvers<ContextType>
  FormSystemListItem?: FormSystemListItemResolvers<ContextType>
  FormSystemListType?: FormSystemListTypeResolvers<ContextType>
  FormSystemMonth?: FormSystemMonthResolvers<ContextType>
  FormSystemOption?: FormSystemOptionResolvers<ContextType>
  FormSystemOrganization?: FormSystemOrganizationResolvers<ContextType>
  FormSystemOrganizationAdmin?: FormSystemOrganizationAdminResolvers<ContextType>
  FormSystemOrganizationPermissionDto?: FormSystemOrganizationPermissionDtoResolvers<ContextType>
  FormSystemOrganizationUrl?: FormSystemOrganizationUrlResolvers<ContextType>
  FormSystemPermissionType?: FormSystemPermissionTypeResolvers<ContextType>
  FormSystemScreen?: FormSystemScreenResolvers<ContextType>
  FormSystemSection?: FormSystemSectionResolvers<ContextType>
  FormSystemTranslation?: FormSystemTranslationResolvers<ContextType>
  FormSystemValue?: FormSystemValueResolvers<ContextType>
  FormSystemValueDto?: FormSystemValueDtoResolvers<ContextType>
  Frontpage?: FrontpageResolvers<ContextType>
  FrontpageSlider?: FrontpageSliderResolvers<ContextType>
  GenericLicense?: GenericLicenseResolvers<ContextType>
  GenericLicenseCollection?: GenericLicenseCollectionResolvers<ContextType>
  GenericLicenseDataField?: GenericLicenseDataFieldResolvers<ContextType>
  GenericLicenseError?: GenericLicenseErrorResolvers<ContextType>
  GenericLicenseFetch?: GenericLicenseFetchResolvers<ContextType>
  GenericLicenseProvider?: GenericLicenseProviderResolvers<ContextType>
  GenericList?: GenericListResolvers<ContextType>
  GenericListItem?: GenericListItemResolvers<ContextType>
  GenericListItemResponse?: GenericListItemResponseResolvers<ContextType>
  GenericListItemResponseInput?: GenericListItemResponseInputResolvers<ContextType>
  GenericOverviewPage?: GenericOverviewPageResolvers<ContextType>
  GenericPage?: GenericPageResolvers<ContextType>
  GenericPkPass?: GenericPkPassResolvers<ContextType>
  GenericPkPassQrCode?: GenericPkPassQrCodeResolvers<ContextType>
  GenericPkPassVerification?: GenericPkPassVerificationResolvers<ContextType>
  GenericPkPassVerificationError?: GenericPkPassVerificationErrorResolvers<ContextType>
  GenericTag?: GenericTagResolvers<ContextType>
  GenericTagGroup?: GenericTagGroupResolvers<ContextType>
  GenericUserLicense?: GenericUserLicenseResolvers<ContextType>
  GenericUserLicenseAlert?: GenericUserLicenseAlertResolvers<ContextType>
  GenericUserLicenseMetaLinks?: GenericUserLicenseMetaLinksResolvers<ContextType>
  GenericUserLicenseMetaTag?: GenericUserLicenseMetaTagResolvers<ContextType>
  GenericUserLicenseMetadata?: GenericUserLicenseMetadataResolvers<ContextType>
  GenericUserLicenseMetadataDescription?: GenericUserLicenseMetadataDescriptionResolvers<ContextType>
  GetBloodDonationRestrictionsInputModel?: GetBloodDonationRestrictionsInputModelResolvers<ContextType>
  GetPowerBiEmbedPropsFromServerResponse?: GetPowerBiEmbedPropsFromServerResponseResolvers<ContextType>
  Grade?: GradeResolvers<ContextType>
  GradeType?: GradeTypeResolvers<ContextType>
  Grant?: GrantResolvers<ContextType>
  GrantCardsList?: GrantCardsListResolvers<ContextType>
  GrantList?: GrantListResolvers<ContextType>
  GraphCard?: GraphCardResolvers<ContextType>
  GroupedMenu?: GroupedMenuResolvers<ContextType>
  HasTeachingRights?: HasTeachingRightsResolvers<ContextType>
  HeadingSlice?: HeadingSliceResolvers<ContextType>
  HealthDirectorateDispensation?: HealthDirectorateDispensationResolvers<ContextType>
  HealthDirectorateDispensedItem?: HealthDirectorateDispensedItemResolvers<ContextType>
  HealthDirectorateOrganDonation?: HealthDirectorateOrganDonationResolvers<ContextType>
  HealthDirectorateOrganDonationLimitations?: HealthDirectorateOrganDonationLimitationsResolvers<ContextType>
  HealthDirectorateOrganDonationOrgan?: HealthDirectorateOrganDonationOrganResolvers<ContextType>
  HealthDirectorateOrganDonor?: HealthDirectorateOrganDonorResolvers<ContextType>
  HealthDirectoratePrescription?: HealthDirectoratePrescriptionResolvers<ContextType>
  HealthDirectoratePrescriptions?: HealthDirectoratePrescriptionsResolvers<ContextType>
  HealthDirectorateReferral?: HealthDirectorateReferralResolvers<ContextType>
  HealthDirectorateReferralContact?: HealthDirectorateReferralContactResolvers<ContextType>
  HealthDirectorateReferrals?: HealthDirectorateReferralsResolvers<ContextType>
  HealthDirectorateVaccination?: HealthDirectorateVaccinationResolvers<ContextType>
  HealthDirectorateVaccinations?: HealthDirectorateVaccinationsResolvers<ContextType>
  HealthDirectorateVaccinationsAge?: HealthDirectorateVaccinationsAgeResolvers<ContextType>
  HealthDirectorateVaccinationsInfo?: HealthDirectorateVaccinationsInfoResolvers<ContextType>
  HealthDirectorateWaitlist?: HealthDirectorateWaitlistResolvers<ContextType>
  HealthDirectorateWaitlists?: HealthDirectorateWaitlistsResolvers<ContextType>
  Helpdesk?: HelpdeskResolvers<ContextType>
  HmsLoansCoPayer?: HmsLoansCoPayerResolvers<ContextType>
  HmsLoansHistory?: HmsLoansHistoryResolvers<ContextType>
  HmsLoansHistoryPdf?: HmsLoansHistoryPdfResolvers<ContextType>
  HmsLoansPaymentHistory?: HmsLoansPaymentHistoryResolvers<ContextType>
  HmsLoansProperty?: HmsLoansPropertyResolvers<ContextType>
  Homestay?: HomestayResolvers<ContextType>
  HousingBenefitCalculationModel?: HousingBenefitCalculationModelResolvers<ContextType>
  HousingBenefitsPageInfo?: HousingBenefitsPageInfoResolvers<ContextType>
  HousingBenefitsPayment?: HousingBenefitsPaymentResolvers<ContextType>
  HousingBenefitsPayments?: HousingBenefitsPaymentsResolvers<ContextType>
  Html?: HtmlResolvers<ContextType>
  IcelandicGovernmentInstitutionVacanciesResponse?: IcelandicGovernmentInstitutionVacanciesResponseResolvers<ContextType>
  IcelandicGovernmentInstitutionVacancy?: IcelandicGovernmentInstitutionVacancyResolvers<ContextType>
  IcelandicGovernmentInstitutionVacancyByIdResponse?: IcelandicGovernmentInstitutionVacancyByIdResponseResolvers<ContextType>
  IcelandicGovernmentInstitutionVacancyContact?: IcelandicGovernmentInstitutionVacancyContactResolvers<ContextType>
  IcelandicGovernmentInstitutionVacancyListItem?: IcelandicGovernmentInstitutionVacancyListItemResolvers<ContextType>
  IcelandicGovernmentInstitutionVacancyLocation?: IcelandicGovernmentInstitutionVacancyLocationResolvers<ContextType>
  IcelandicName?: IcelandicNameResolvers<ContextType>
  IconBullet?: IconBulletResolvers<ContextType>
  Identity?: IdentityResolvers<ContextType>
  IdentityAddress?: IdentityAddressResolvers<ContextType>
  IdentityCompany?: IdentityCompanyResolvers<ContextType>
  IdentityDocumentModel?: IdentityDocumentModelResolvers<ContextType>
  IdentityDocumentModelChild?: IdentityDocumentModelChildResolvers<ContextType>
  IdentityPerson?: IdentityPersonResolvers<ContextType>
  Image?: ImageResolvers<ContextType>
  IntellectualPropertiesAnnualFee?: IntellectualPropertiesAnnualFeeResolvers<ContextType>
  IntellectualPropertiesAnnualFeesInfo?: IntellectualPropertiesAnnualFeesInfoResolvers<ContextType>
  IntellectualPropertiesApplicationLifecycle?: IntellectualPropertiesApplicationLifecycleResolvers<ContextType>
  IntellectualPropertiesCategory?: IntellectualPropertiesCategoryResolvers<ContextType>
  IntellectualPropertiesClassification?: IntellectualPropertiesClassificationResolvers<ContextType>
  IntellectualPropertiesCountry?: IntellectualPropertiesCountryResolvers<ContextType>
  IntellectualPropertiesDesign?: IntellectualPropertiesDesignResolvers<ContextType>
  IntellectualPropertiesEPApplicationLifecycle?: IntellectualPropertiesEpApplicationLifecycleResolvers<ContextType>
  IntellectualPropertiesImage?: IntellectualPropertiesImageResolvers<ContextType>
  IntellectualPropertiesImageList?: IntellectualPropertiesImageListResolvers<ContextType>
  IntellectualPropertiesMarketingAuthorization?: IntellectualPropertiesMarketingAuthorizationResolvers<ContextType>
  IntellectualPropertiesMedia?: IntellectualPropertiesMediaResolvers<ContextType>
  IntellectualPropertiesPCT?: IntellectualPropertiesPctResolvers<ContextType>
  IntellectualPropertiesPatent?: IntellectualPropertiesPatentResolvers<ContextType>
  IntellectualPropertiesPatentEP?: IntellectualPropertiesPatentEpResolvers<ContextType>
  IntellectualPropertiesPatentIS?: IntellectualPropertiesPatentIsResolvers<ContextType>
  IntellectualPropertiesPerson?: IntellectualPropertiesPersonResolvers<ContextType>
  IntellectualPropertiesPriority?: IntellectualPropertiesPriorityResolvers<ContextType>
  IntellectualPropertiesResponse?: IntellectualPropertiesResponseResolvers<ContextType>
  IntellectualPropertiesSPC?: IntellectualPropertiesSpcResolvers<ContextType>
  IntellectualPropertiesSpecification?: IntellectualPropertiesSpecificationResolvers<ContextType>
  IntellectualPropertiesTrademark?: IntellectualPropertiesTrademarkResolvers<ContextType>
  IntellectualProperty?: IntellectualPropertyResolvers<ContextType>
  IntroLinkImage?: IntroLinkImageResolvers<ContextType>
  Items?: ItemsResolvers<ContextType>
  JSON?: GraphQLScalarType
  JSONObject?: GraphQLScalarType
  JourneymanLicence?: JourneymanLicenceResolvers<ContextType>
  JourneymanLicencesResponse?: JourneymanLicencesResponseResolvers<ContextType>
  LandModel?: LandModelResolvers<ContextType>
  LatestEventsSlice?: LatestEventsSliceResolvers<ContextType>
  LatestGenericListItems?: LatestGenericListItemsResolvers<ContextType>
  LatestNewsSlice?: LatestNewsSliceResolvers<ContextType>
  LawAndOrderAction?: LawAndOrderActionResolvers<ContextType>
  LawAndOrderCourtCase?: LawAndOrderCourtCaseResolvers<ContextType>
  LawAndOrderCourtCaseData?: LawAndOrderCourtCaseDataResolvers<ContextType>
  LawAndOrderCourtCaseText?: LawAndOrderCourtCaseTextResolvers<ContextType>
  LawAndOrderCourtCases?: LawAndOrderCourtCasesResolvers<ContextType>
  LawAndOrderCourtCasesCase?: LawAndOrderCourtCasesCaseResolvers<ContextType>
  LawAndOrderCourtCasesState?: LawAndOrderCourtCasesStateResolvers<ContextType>
  LawAndOrderDefenseChoice?: LawAndOrderDefenseChoiceResolvers<ContextType>
  LawAndOrderGroup?: LawAndOrderGroupResolvers<ContextType>
  LawAndOrderLawyer?: LawAndOrderLawyerResolvers<ContextType>
  LawAndOrderLawyerChoices?: LawAndOrderLawyerChoicesResolvers<ContextType>
  LawAndOrderLawyers?: LawAndOrderLawyersResolvers<ContextType>
  LawAndOrderSubpoena?: LawAndOrderSubpoenaResolvers<ContextType>
  LawAndOrderSubpoenaData?: LawAndOrderSubpoenaDataResolvers<ContextType>
  LawAndOrderSubpoenaItem?: LawAndOrderSubpoenaItemResolvers<ContextType>
  LawAndOrderSubpoenaTexts?: LawAndOrderSubpoenaTextsResolvers<ContextType>
  Lawyer?: LawyerResolvers<ContextType>
  LicenseDriverLicenseData?: LicenseDriverLicenseDataResolvers<ContextType>
  LifeEventPage?: LifeEventPageResolvers<ContextType>
  Link?: LinkResolvers<ContextType>
  LinkCard?: LinkCardResolvers<ContextType>
  LinkCardSection?: LinkCardSectionResolvers<ContextType>
  LinkGroup?: LinkGroupResolvers<ContextType>
  LinkList?: LinkListResolvers<ContextType>
  LogoListSlice?: LogoListSliceResolvers<ContextType>
  MachineDetails?: MachineDetailsResolvers<ContextType>
  Manual?: ManualResolvers<ContextType>
  ManualChapter?: ManualChapterResolvers<ContextType>
  ManualChapterChangelog?: ManualChapterChangelogResolvers<ContextType>
  ManualChapterChangelogItem?: ManualChapterChangelogItemResolvers<ContextType>
  ManualChapterItem?: ManualChapterItemResolvers<ContextType>
  ManualPageData?: ManualPageDataResolvers<ContextType>
  ManyPropertyDetail?: ManyPropertyDetailResolvers<ContextType>
  MarkNotificationReadResponse?: MarkNotificationReadResponseResolvers<ContextType>
  MasterLicence?: MasterLicenceResolvers<ContextType>
  MasterLicencesResponse?: MasterLicencesResponseResolvers<ContextType>
  Menu?: MenuResolvers<ContextType>
  MenuLink?: MenuLinkResolvers<ContextType>
  MenuLinkWithChildren?: MenuLinkWithChildrenResolvers<ContextType>
  MortgageCertificateValidationModel?: MortgageCertificateValidationModelResolvers<ContextType>
  MultipleStatistics?: MultipleStatisticsResolvers<ContextType>
  MunicipalitiesFinancialAidAmountModel?: MunicipalitiesFinancialAidAmountModelResolvers<ContextType>
  MunicipalitiesFinancialAidApplicationChildren?: MunicipalitiesFinancialAidApplicationChildrenResolvers<ContextType>
  MunicipalitiesFinancialAidApplicationEventModel?: MunicipalitiesFinancialAidApplicationEventModelResolvers<ContextType>
  MunicipalitiesFinancialAidApplicationFileModel?: MunicipalitiesFinancialAidApplicationFileModelResolvers<ContextType>
  MunicipalitiesFinancialAidApplicationModel?: MunicipalitiesFinancialAidApplicationModelResolvers<ContextType>
  MunicipalitiesFinancialAidCreateFilesModel?: MunicipalitiesFinancialAidCreateFilesModelResolvers<ContextType>
  MunicipalitiesFinancialAidDeductionFactorsModel?: MunicipalitiesFinancialAidDeductionFactorsModelResolvers<ContextType>
  MunicipalitiesFinancialAidSignedUrlModel?: MunicipalitiesFinancialAidSignedUrlModelResolvers<ContextType>
  Mutation?: MutationResolvers<ContextType>
  MyPlateOwnershipChecksByRegno?: MyPlateOwnershipChecksByRegnoResolvers<ContextType>
  Namespace?: NamespaceResolvers<ContextType>
  NationalRegistryAddress?: NationalRegistryAddressResolvers<ContextType>
  NationalRegistryBanMarking?: NationalRegistryBanMarkingResolvers<ContextType>
  NationalRegistryBirthplace?: NationalRegistryBirthplaceResolvers<ContextType>
  NationalRegistryChild?: NationalRegistryChildResolvers<ContextType>
  NationalRegistryChildCustody?: NationalRegistryChildCustodyResolvers<ContextType>
  NationalRegistryCitizenship?: NationalRegistryCitizenshipResolvers<ContextType>
  NationalRegistryCustodian?: NationalRegistryCustodianResolvers<ContextType>
  NationalRegistryHousing?: NationalRegistryHousingResolvers<ContextType>
  NationalRegistryName?: NationalRegistryNameResolvers<ContextType>
  NationalRegistryPerson?: NationalRegistryPersonResolvers<ContextType>
  NationalRegistryPersonBase?: NationalRegistryPersonBaseResolvers<ContextType>
  NationalRegistryReligion?: NationalRegistryReligionResolvers<ContextType>
  NationalRegistryResidence?: NationalRegistryResidenceResolvers<ContextType>
  NationalRegistrySpouse?: NationalRegistrySpouseResolvers<ContextType>
  NationalRegistryUser?: NationalRegistryUserResolvers<ContextType>
  NationalRegistryXRoadAddress?: NationalRegistryXRoadAddressResolvers<ContextType>
  NationalRegistryXRoadBirthplace?: NationalRegistryXRoadBirthplaceResolvers<ContextType>
  NationalRegistryXRoadChildGuardianship?: NationalRegistryXRoadChildGuardianshipResolvers<ContextType>
  NationalRegistryXRoadCitizenship?: NationalRegistryXRoadCitizenshipResolvers<ContextType>
  NationalRegistryXRoadPerson?: NationalRegistryXRoadPersonResolvers<ContextType>
  NationalRegistryXRoadSpouse?: NationalRegistryXRoadSpouseResolvers<ContextType>
  News?: NewsResolvers<ContextType>
  NewsList?: NewsListResolvers<ContextType>
  NextInspection?: NextInspectionResolvers<ContextType>
  Notification?: NotificationResolvers<ContextType>
  NotificationLink?: NotificationLinkResolvers<ContextType>
  NotificationMessage?: NotificationMessageResolvers<ContextType>
  NotificationMetadata?: NotificationMetadataResolvers<ContextType>
  NotificationRecipient?: NotificationRecipientResolvers<ContextType>
  NotificationResponse?: NotificationResponseResolvers<ContextType>
  NotificationSender?: NotificationSenderResolvers<ContextType>
  Notifications?: NotificationsResolvers<ContextType>
  NotificationsMarkAllAsReadResponse?: NotificationsMarkAllAsReadResponseResolvers<ContextType>
  NotificationsMarkAllAsSeenResponse?: NotificationsMarkAllAsSeenResponseResolvers<ContextType>
  NumberBullet?: NumberBulletResolvers<ContextType>
  NumberBulletGroup?: NumberBulletGroupResolvers<ContextType>
  OJOIAApplicationCaseResponse?: OjoiaApplicationCaseResponseResolvers<ContextType>
  OJOIAComment?: OjoiaCommentResolvers<ContextType>
  OJOIAGetCommentsResponse?: OjoiaGetCommentsResponseResolvers<ContextType>
  OJOIAGetPdfResponse?: OjoiaGetPdfResponseResolvers<ContextType>
  OccupationalLicense?: OccupationalLicenseResolvers<ContextType>
  OccupationalLicensesError?: OccupationalLicensesErrorResolvers<ContextType>
  OccupationalLicensesGenericField?: OccupationalLicensesGenericFieldResolvers<ContextType>
  OccupationalLicensesLicenseResponse?: OccupationalLicensesLicenseResponseResolvers<ContextType>
  OccupationalLicensesLicenseResult?: OccupationalLicensesLicenseResultResolvers<ContextType>
  OccupationalLicensesLicenses?: OccupationalLicensesLicensesResolvers<ContextType>
  OccupationalLicensesLink?: OccupationalLicensesLinkResolvers<ContextType>
  OfficialJournalOfIcelandAdvert?: OfficialJournalOfIcelandAdvertResolvers<ContextType>
  OfficialJournalOfIcelandAdvertCategory?: OfficialJournalOfIcelandAdvertCategoryResolvers<ContextType>
  OfficialJournalOfIcelandAdvertCorrections?: OfficialJournalOfIcelandAdvertCorrectionsResolvers<ContextType>
  OfficialJournalOfIcelandAdvertDocument?: OfficialJournalOfIcelandAdvertDocumentResolvers<ContextType>
  OfficialJournalOfIcelandAdvertEntity?: OfficialJournalOfIcelandAdvertEntityResolvers<ContextType>
  OfficialJournalOfIcelandAdvertMainCategory?: OfficialJournalOfIcelandAdvertMainCategoryResolvers<ContextType>
  OfficialJournalOfIcelandAdvertPublicationNumber?: OfficialJournalOfIcelandAdvertPublicationNumberResolvers<ContextType>
  OfficialJournalOfIcelandAdvertResponse?: OfficialJournalOfIcelandAdvertResponseResolvers<ContextType>
  OfficialJournalOfIcelandAdvertSimilar?: OfficialJournalOfIcelandAdvertSimilarResolvers<ContextType>
  OfficialJournalOfIcelandAdvertSimilarResponse?: OfficialJournalOfIcelandAdvertSimilarResponseResolvers<ContextType>
  OfficialJournalOfIcelandAdvertType?: OfficialJournalOfIcelandAdvertTypeResolvers<ContextType>
  OfficialJournalOfIcelandAdvertsCategoryResponse?: OfficialJournalOfIcelandAdvertsCategoryResponseResolvers<ContextType>
  OfficialJournalOfIcelandAdvertsDepartmentResponse?: OfficialJournalOfIcelandAdvertsDepartmentResponseResolvers<ContextType>
  OfficialJournalOfIcelandAdvertsDepartmentsResponse?: OfficialJournalOfIcelandAdvertsDepartmentsResponseResolvers<ContextType>
  OfficialJournalOfIcelandAdvertsInstitutionsResponse?: OfficialJournalOfIcelandAdvertsInstitutionsResponseResolvers<ContextType>
  OfficialJournalOfIcelandAdvertsMainCategoriesResponse?: OfficialJournalOfIcelandAdvertsMainCategoriesResponseResolvers<ContextType>
  OfficialJournalOfIcelandAdvertsMainType?: OfficialJournalOfIcelandAdvertsMainTypeResolvers<ContextType>
  OfficialJournalOfIcelandAdvertsResponse?: OfficialJournalOfIcelandAdvertsResponseResolvers<ContextType>
  OfficialJournalOfIcelandAdvertsTypeResponse?: OfficialJournalOfIcelandAdvertsTypeResponseResolvers<ContextType>
  OfficialJournalOfIcelandAdvertsTypesResponse?: OfficialJournalOfIcelandAdvertsTypesResponseResolvers<ContextType>
  OfficialJournalOfIcelandApplicationAddApplicationAttachmentResponse?: OfficialJournalOfIcelandApplicationAddApplicationAttachmentResponseResolvers<ContextType>
  OfficialJournalOfIcelandApplicationGetApplicationAttachmentResponse?: OfficialJournalOfIcelandApplicationGetApplicationAttachmentResponseResolvers<ContextType>
  OfficialJournalOfIcelandApplicationGetApplicationAttachments?: OfficialJournalOfIcelandApplicationGetApplicationAttachmentsResolvers<ContextType>
  OfficialJournalOfIcelandApplicationGetMyUserInfoResponse?: OfficialJournalOfIcelandApplicationGetMyUserInfoResponseResolvers<ContextType>
  OfficialJournalOfIcelandApplicationGetPdfUrlResponse?: OfficialJournalOfIcelandApplicationGetPdfUrlResponseResolvers<ContextType>
  OfficialJournalOfIcelandApplicationGetPresignedUrlResponse?: OfficialJournalOfIcelandApplicationGetPresignedUrlResponseResolvers<ContextType>
  OfficialJournalOfIcelandApplicationGetPriceResponse?: OfficialJournalOfIcelandApplicationGetPriceResponseResolvers<ContextType>
  OfficialJournalOfIcelandApplicationGetUserInvolvedPartiesResponse?: OfficialJournalOfIcelandApplicationGetUserInvolvedPartiesResponseResolvers<ContextType>
  OfficialJournalOfIcelandApplicationGetUserInvolvedParty?: OfficialJournalOfIcelandApplicationGetUserInvolvedPartyResolvers<ContextType>
  OfficialJournalOfIcelandApplicationInvolvedPartySignature?: OfficialJournalOfIcelandApplicationInvolvedPartySignatureResolvers<ContextType>
  OfficialJournalOfIcelandApplicationInvolvedPartySignatureResponse?: OfficialJournalOfIcelandApplicationInvolvedPartySignatureResponseResolvers<ContextType>
  OfficialJournalOfIcelandApplicationPostCommentResponse?: OfficialJournalOfIcelandApplicationPostCommentResponseResolvers<ContextType>
  OfficialJournalOfIcelandApplicationSignatureMember?: OfficialJournalOfIcelandApplicationSignatureMemberResolvers<ContextType>
  OfficialJournalOfIcelandCaseInProgress?: OfficialJournalOfIcelandCaseInProgressResolvers<ContextType>
  OfficialJournalOfIcelandCasesInProgressResponse?: OfficialJournalOfIcelandCasesInProgressResponseResolvers<ContextType>
  OfficialJournalOfIcelandMainTypesResponse?: OfficialJournalOfIcelandMainTypesResponseResolvers<ContextType>
  OfficialJournalOfIcelandPaging?: OfficialJournalOfIcelandPagingResolvers<ContextType>
  OneColumnText?: OneColumnTextResolvers<ContextType>
  OpenApi?: OpenApiResolvers<ContextType>
  OpenDataPage?: OpenDataPageResolvers<ContextType>
  OpenDataSubpage?: OpenDataSubpageResolvers<ContextType>
  OperatingLicense?: OperatingLicenseResolvers<ContextType>
  OperatingLicensesCSV?: OperatingLicensesCsvResolvers<ContextType>
  OperatorChangeValidation?: OperatorChangeValidationResolvers<ContextType>
  OperatorChangeValidationMessage?: OperatorChangeValidationMessageResolvers<ContextType>
  Organisation?: OrganisationResolvers<ContextType>
  Organization?: OrganizationResolvers<ContextType>
  OrganizationFund?: OrganizationFundResolvers<ContextType>
  OrganizationPage?: OrganizationPageResolvers<ContextType>
  OrganizationPageStandaloneSitemap?: OrganizationPageStandaloneSitemapResolvers<ContextType>
  OrganizationPageStandaloneSitemapLevel2?: OrganizationPageStandaloneSitemapLevel2Resolvers<ContextType>
  OrganizationPageStandaloneSitemapLevel2Category?: OrganizationPageStandaloneSitemapLevel2CategoryResolvers<ContextType>
  OrganizationPageStandaloneSitemapLevel2Link?: OrganizationPageStandaloneSitemapLevel2LinkResolvers<ContextType>
  OrganizationPageStandaloneSitemapLink?: OrganizationPageStandaloneSitemapLinkResolvers<ContextType>
  OrganizationPageTopLevelNavigation?: OrganizationPageTopLevelNavigationResolvers<ContextType>
  OrganizationPageTopLevelNavigationLink?: OrganizationPageTopLevelNavigationLinkResolvers<ContextType>
  OrganizationParentSubpage?: OrganizationParentSubpageResolvers<ContextType>
  OrganizationParentSubpageList?: OrganizationParentSubpageListResolvers<ContextType>
  OrganizationParentSubpageListPageLink?: OrganizationParentSubpageListPageLinkResolvers<ContextType>
  OrganizationSubpage?: OrganizationSubpageResolvers<ContextType>
  OrganizationSubpageLink?: OrganizationSubpageLinkResolvers<ContextType>
  OrganizationTag?: OrganizationTagResolvers<ContextType>
  OrganizationTags?: OrganizationTagsResolvers<ContextType>
  OrganizationTheme?: OrganizationThemeResolvers<ContextType>
  Organizations?: OrganizationsResolvers<ContextType>
  OverviewLinks?: OverviewLinksResolvers<ContextType>
  OverviewLinksLinkData?: OverviewLinksLinkDataResolvers<ContextType>
  OverviewLinksLinkDataCategoryCardItem?: OverviewLinksLinkDataCategoryCardItemResolvers<ContextType>
  OwnerChangeValidation?: OwnerChangeValidationResolvers<ContextType>
  OwnerChangeValidationMessage?: OwnerChangeValidationMessageResolvers<ContextType>
  Page?: PageResolvers<ContextType>
  PageInfo?: PageInfoResolvers<ContextType>
  PageInfoDto?: PageInfoDtoResolvers<ContextType>
  PageInfoResponse?: PageInfoResponseResolvers<ContextType>
  PaginatedEndorsementListResponse?: PaginatedEndorsementListResponseResolvers<ContextType>
  PaginatedEndorsementResponse?: PaginatedEndorsementResponseResolvers<ContextType>
  PaginatedOperatingLicenses?: PaginatedOperatingLicensesResolvers<ContextType>
  PaginationInfo?: PaginationInfoResolvers<ContextType>
  PagingData?: PagingDataResolvers<ContextType>
  PaperMailBody?: PaperMailBodyResolvers<ContextType>
  ParentalLeave?: ParentalLeaveResolvers<ContextType>
  ParentalLeaveAttachment?: ParentalLeaveAttachmentResolvers<ContextType>
  ParentalLeaveEmployer?: ParentalLeaveEmployerResolvers<ContextType>
  ParentalLeaveEntitlement?: ParentalLeaveEntitlementResolvers<ContextType>
  ParentalLeavePaymentInfo?: ParentalLeavePaymentInfoResolvers<ContextType>
  ParentalLeavePaymentPlan?: ParentalLeavePaymentPlanResolvers<ContextType>
  ParentalLeavePensionFund?: ParentalLeavePensionFundResolvers<ContextType>
  ParentalLeavePeriod?: ParentalLeavePeriodResolvers<ContextType>
  ParentalLeavePeriodEndDate?: ParentalLeavePeriodEndDateResolvers<ContextType>
  ParentalLeavePeriodLength?: ParentalLeavePeriodLengthResolvers<ContextType>
  ParentalLeaveUnion?: ParentalLeaveUnionResolvers<ContextType>
  Passport?: PassportResolvers<ContextType>
  Payload?: PayloadResolvers<ContextType>
  PaymentCatalogItem?: PaymentCatalogItemResolvers<ContextType>
  PaymentCatalogResponse?: PaymentCatalogResponseResolvers<ContextType>
  PaymentSchedule?: PaymentScheduleResolvers<ContextType>
  PaymentScheduleCharge?: PaymentScheduleChargeResolvers<ContextType>
  PaymentScheduleCompanyConditions?: PaymentScheduleCompanyConditionsResolvers<ContextType>
  PaymentScheduleConditions?: PaymentScheduleConditionsResolvers<ContextType>
  PaymentScheduleData?: PaymentScheduleDataResolvers<ContextType>
  PaymentScheduleDebts?: PaymentScheduleDebtsResolvers<ContextType>
  PaymentScheduleDetailData?: PaymentScheduleDetailDataResolvers<ContextType>
  PaymentScheduleDetailModel?: PaymentScheduleDetailModelResolvers<ContextType>
  PaymentScheduleDistribution?: PaymentScheduleDistributionResolvers<ContextType>
  PaymentScheduleEmployer?: PaymentScheduleEmployerResolvers<ContextType>
  PaymentScheduleInitialSchedule?: PaymentScheduleInitialScheduleResolvers<ContextType>
  PaymentScheduleModel?: PaymentScheduleModelResolvers<ContextType>
  PaymentSchedulePayment?: PaymentSchedulePaymentResolvers<ContextType>
  PaymentsCardInformation?: PaymentsCardInformationResolvers<ContextType>
  PaymentsCardVerificationField?: PaymentsCardVerificationFieldResolvers<ContextType>
  PaymentsCardVerificationResponse?: PaymentsCardVerificationResponseResolvers<ContextType>
  PaymentsChargeCardResponse?: PaymentsChargeCardResponseResolvers<ContextType>
  PaymentsCreateInvoiceResponse?: PaymentsCreateInvoiceResponseResolvers<ContextType>
  PaymentsGetPaymentFlowResponse?: PaymentsGetPaymentFlowResponseResolvers<ContextType>
  PaymentsGetVerificationStatus?: PaymentsGetVerificationStatusResolvers<ContextType>
  PaymentsVerifyCardResponse?: PaymentsVerifyCardResponseResolvers<ContextType>
  PendingAction?: PendingActionResolvers<ContextType>
  PensionFund?: PensionFundResolvers<ContextType>
  PeriodItems?: PeriodItemsResolvers<ContextType>
  PeriodsModel?: PeriodsModelResolvers<ContextType>
  PlateAvailability?: PlateAvailabilityResolvers<ContextType>
  PlateOrderValidation?: PlateOrderValidationResolvers<ContextType>
  PlateOrderValidationMessage?: PlateOrderValidationMessageResolvers<ContextType>
  PowerBiSlice?: PowerBiSliceResolvers<ContextType>
  PracticalDrivingLesson?: PracticalDrivingLessonResolvers<ContextType>
  PregnancyStatus?: PregnancyStatusResolvers<ContextType>
  PresignedPost?: PresignedPostResolvers<ContextType>
  PresignedUrlResponse?: PresignedUrlResponseResolvers<ContextType>
  ProcessEntry?: ProcessEntryResolvers<ContextType>
  ProfessionRight?: ProfessionRightResolvers<ContextType>
  ProfessionRightsResponse?: ProfessionRightsResponseResolvers<ContextType>
  ProjectPage?: ProjectPageResolvers<ContextType>
  ProjectPageThemeProperties?: ProjectPageThemePropertiesResolvers<ContextType>
  ProjectSubpage?: ProjectSubpageResolvers<ContextType>
  PropertyDetail?: PropertyDetailResolvers<ContextType>
  PropertyLocation?: PropertyLocationResolvers<ContextType>
  PropertyOverview?: PropertyOverviewResolvers<ContextType>
  PropertyOwner?: PropertyOwnerResolvers<ContextType>
  PropertyOwnersModel?: PropertyOwnersModelResolvers<ContextType>
  Provider?: ProviderResolvers<ContextType>
  ProviderStatistics?: ProviderStatisticsResolvers<ContextType>
  Query?: QueryResolvers<ContextType>
  QuestionAndAnswer?: QuestionAndAnswerResolvers<ContextType>
  RealEstateAgent?: RealEstateAgentResolvers<ContextType>
  RealEstateDetail?: RealEstateDetailResolvers<ContextType>
  ReferenceLink?: ReferenceLinkResolvers<ContextType>
  RegistryPerson?: RegistryPersonResolvers<ContextType>
  RegulationAuthor?: RegulationAuthorResolvers<ContextType>
  RegulationShippedAuthor?: RegulationShippedAuthorResolvers<ContextType>
  RegulationSummaryAuthor?: RegulationSummaryAuthorResolvers<ContextType>
  ReligiousOrganization?: ReligiousOrganizationResolvers<ContextType>
  ReligiousOrganizationsResponse?: ReligiousOrganizationsResponseResolvers<ContextType>
  RequestCorrectionOnMortgageCertificateModel?: RequestCorrectionOnMortgageCertificateModelResolvers<ContextType>
  Response?: ResponseResolvers<ContextType>
  RightsPortalAddress?: RightsPortalAddressResolvers<ContextType>
  RightsPortalAidOrNutrition?: RightsPortalAidOrNutritionResolvers<ContextType>
  RightsPortalAidOrNutritionRefund?: RightsPortalAidOrNutritionRefundResolvers<ContextType>
  RightsPortalCopaymentBill?: RightsPortalCopaymentBillResolvers<ContextType>
  RightsPortalCopaymentBillResponse?: RightsPortalCopaymentBillResponseResolvers<ContextType>
  RightsPortalCopaymentInsuranceStatus?: RightsPortalCopaymentInsuranceStatusResolvers<ContextType>
  RightsPortalCopaymentPeriod?: RightsPortalCopaymentPeriodResolvers<ContextType>
  RightsPortalCopaymentPeriodResponse?: RightsPortalCopaymentPeriodResponseResolvers<ContextType>
  RightsPortalCopaymentStatus?: RightsPortalCopaymentStatusResolvers<ContextType>
  RightsPortalDentist?: RightsPortalDentistResolvers<ContextType>
  RightsPortalDentistBill?: RightsPortalDentistBillResolvers<ContextType>
  RightsPortalDentistPractice?: RightsPortalDentistPracticeResolvers<ContextType>
  RightsPortalDentistRegisterResponse?: RightsPortalDentistRegisterResponseResolvers<ContextType>
  RightsPortalDentistStatus?: RightsPortalDentistStatusResolvers<ContextType>
  RightsPortalDrug?: RightsPortalDrugResolvers<ContextType>
  RightsPortalDrugBill?: RightsPortalDrugBillResolvers<ContextType>
  RightsPortalDrugBillLine?: RightsPortalDrugBillLineResolvers<ContextType>
  RightsPortalDrugCalculation?: RightsPortalDrugCalculationResolvers<ContextType>
  RightsPortalDrugCalculatorResponse?: RightsPortalDrugCalculatorResponseResolvers<ContextType>
  RightsPortalDrugCertificate?: RightsPortalDrugCertificateResolvers<ContextType>
  RightsPortalDrugPeriod?: RightsPortalDrugPeriodResolvers<ContextType>
  RightsPortalHealthCenter?: RightsPortalHealthCenterResolvers<ContextType>
  RightsPortalHealthCenterDoctors?: RightsPortalHealthCenterDoctorsResolvers<ContextType>
  RightsPortalHealthCenterRecord?: RightsPortalHealthCenterRecordResolvers<ContextType>
  RightsPortalHealthCenterRegisterResponse?: RightsPortalHealthCenterRegisterResponseResolvers<ContextType>
  RightsPortalHealthCenterRegistrationHistory?: RightsPortalHealthCenterRegistrationHistoryResolvers<ContextType>
  RightsPortalInsuranceConfirmation?: RightsPortalInsuranceConfirmationResolvers<ContextType>
  RightsPortalInsuranceOverview?: RightsPortalInsuranceOverviewResolvers<ContextType>
  RightsPortalInsuranceStatus?: RightsPortalInsuranceStatusResolvers<ContextType>
  RightsPortalMethylDoctor?: RightsPortalMethylDoctorResolvers<ContextType>
  RightsPortalPaginatedAidsOrNutrition?: RightsPortalPaginatedAidsOrNutritionResolvers<ContextType>
  RightsPortalPaginatedDentists?: RightsPortalPaginatedDentistsResolvers<ContextType>
  RightsPortalPaginatedDrug?: RightsPortalPaginatedDrugResolvers<ContextType>
  RightsPortalPaginatedHealthCenters?: RightsPortalPaginatedHealthCentersResolvers<ContextType>
  RightsPortalPaginatedTherapies?: RightsPortalPaginatedTherapiesResolvers<ContextType>
  RightsPortalPaymentError?: RightsPortalPaymentErrorResolvers<ContextType>
  RightsPortalPaymentOverview?: RightsPortalPaymentOverviewResolvers<ContextType>
  RightsPortalPaymentOverviewBill?: RightsPortalPaymentOverviewBillResolvers<ContextType>
  RightsPortalPaymentOverviewDocument?: RightsPortalPaymentOverviewDocumentResolvers<ContextType>
  RightsPortalPaymentOverviewDocumentResponse?: RightsPortalPaymentOverviewDocumentResponseResolvers<ContextType>
  RightsPortalPaymentOverviewResponse?: RightsPortalPaymentOverviewResponseResolvers<ContextType>
  RightsPortalPaymentOverviewServiceType?: RightsPortalPaymentOverviewServiceTypeResolvers<ContextType>
  RightsPortalPaymentOverviewServiceTypeResponse?: RightsPortalPaymentOverviewServiceTypeResponseResolvers<ContextType>
  RightsPortalTherapy?: RightsPortalTherapyResolvers<ContextType>
  RightsPortalTherapyPeriod?: RightsPortalTherapyPeriodResolvers<ContextType>
  RightsPortalTherapySession?: RightsPortalTherapySessionResolvers<ContextType>
  RightsPortalTherapyState?: RightsPortalTherapyStateResolvers<ContextType>
  RightsPortalUserDentistInformation?: RightsPortalUserDentistInformationResolvers<ContextType>
  RightsPortalUserDentistRegistration?: RightsPortalUserDentistRegistrationResolvers<ContextType>
  RskCompany?: RskCompanyResolvers<ContextType>
  RskCompanyAddress?: RskCompanyAddressResolvers<ContextType>
  RskCompanyClassification?: RskCompanyClassificationResolvers<ContextType>
  RskCompanyFormOfOperation?: RskCompanyFormOfOperationResolvers<ContextType>
  RskCompanyInfo?: RskCompanyInfoResolvers<ContextType>
  RskCompanyRelatedParty?: RskCompanyRelatedPartyResolvers<ContextType>
  RskCompanySearchItems?: RskCompanySearchItemsResolvers<ContextType>
  RskCompanyVat?: RskCompanyVatResolvers<ContextType>
  SearchResult?: SearchResultResolvers<ContextType>
  SecondarySchoolProgram?: SecondarySchoolProgramResolvers<ContextType>
  SectionWithImage?: SectionWithImageResolvers<ContextType>
  SectionWithVideo?: SectionWithVideoResolvers<ContextType>
  SeminarsCompanyValidationItem?: SeminarsCompanyValidationItemResolvers<ContextType>
  SeminarsIndividualValidationItem?: SeminarsIndividualValidationItemResolvers<ContextType>
  Service?: ServiceResolvers<ContextType>
  ServiceDetail?: ServiceDetailResolvers<ContextType>
  ServiceEnvironment?: ServiceEnvironmentResolvers<ContextType>
  ServiceWebPage?: ServiceWebPageResolvers<ContextType>
  ServiceWebPageEmailConfig?: ServiceWebPageEmailConfigResolvers<ContextType>
  ServiceWebPageEmailConfigItem?: ServiceWebPageEmailConfigItemResolvers<ContextType>
  SessionsPaginatedSessionResponse?: SessionsPaginatedSessionResponseResolvers<ContextType>
  SessionsSession?: SessionsSessionResolvers<ContextType>
  ShipDetail?: ShipDetailResolvers<ContextType>
  ShipMeasurements?: ShipMeasurementsResolvers<ContextType>
  ShipRegistryShip?: ShipRegistryShipResolvers<ContextType>
  ShipRegistryShipOwner?: ShipRegistryShipOwnerResolvers<ContextType>
  ShipRegistryShipSearch?: ShipRegistryShipSearchResolvers<ContextType>
  SidebarCard?: SidebarCardResolvers<ContextType>
  SignatureCollection?: SignatureCollectionResolvers<ContextType>
  SignatureCollectionArea?: SignatureCollectionAreaResolvers<ContextType>
  SignatureCollectionAreaBase?: SignatureCollectionAreaBaseResolvers<ContextType>
  SignatureCollectionAreaSummaryReport?: SignatureCollectionAreaSummaryReportResolvers<ContextType>
  SignatureCollectionBulk?: SignatureCollectionBulkResolvers<ContextType>
  SignatureCollectionCandidate?: SignatureCollectionCandidateResolvers<ContextType>
  SignatureCollectionCandidateLookUp?: SignatureCollectionCandidateLookUpResolvers<ContextType>
  SignatureCollectionCollector?: SignatureCollectionCollectorResolvers<ContextType>
  SignatureCollectionList?: SignatureCollectionListResolvers<ContextType>
  SignatureCollectionListBase?: SignatureCollectionListBaseResolvers<ContextType>
  SignatureCollectionListStatus?: SignatureCollectionListStatusResolvers<ContextType>
  SignatureCollectionListSummary?: SignatureCollectionListSummaryResolvers<ContextType>
  SignatureCollectionNationalIds?: SignatureCollectionNationalIdsResolvers<ContextType>
  SignatureCollectionOwnedList?: SignatureCollectionOwnedListResolvers<ContextType>
  SignatureCollectionSignature?: SignatureCollectionSignatureResolvers<ContextType>
  SignatureCollectionSignedList?: SignatureCollectionSignedListResolvers<ContextType>
  SignatureCollectionSignee?: SignatureCollectionSigneeResolvers<ContextType>
  SignatureCollectionSigneeBase?: SignatureCollectionSigneeBaseResolvers<ContextType>
  SignatureCollectionSlug?: SignatureCollectionSlugResolvers<ContextType>
  SignatureCollectionSuccess?: SignatureCollectionSuccessResolvers<ContextType>
  SimpleProperties?: SimplePropertiesResolvers<ContextType>
  Slice?: SliceResolvers<ContextType>
  SliceDropdown?: SliceDropdownResolvers<ContextType>
  SocialInsuranceIncomePlan?: SocialInsuranceIncomePlanResolvers<ContextType>
  SocialInsuranceIncomePlanEligbility?: SocialInsuranceIncomePlanEligbilityResolvers<ContextType>
  SocialInsuranceIncomePlanIncomeCategory?: SocialInsuranceIncomePlanIncomeCategoryResolvers<ContextType>
  SocialInsurancePayment?: SocialInsurancePaymentResolvers<ContextType>
  SocialInsurancePaymentGroup?: SocialInsurancePaymentGroupResolvers<ContextType>
  SocialInsurancePaymentMonth?: SocialInsurancePaymentMonthResolvers<ContextType>
  SocialInsurancePaymentPlan?: SocialInsurancePaymentPlanResolvers<ContextType>
  SocialInsurancePayments?: SocialInsurancePaymentsResolvers<ContextType>
  SocialInsurancePensionCalculationResponse?: SocialInsurancePensionCalculationResponseResolvers<ContextType>
  SocialInsurancePensionCalculationResponseItem?: SocialInsurancePensionCalculationResponseItemResolvers<ContextType>
  SocialInsurancePensionCalculationResponseItemGroup?: SocialInsurancePensionCalculationResponseItemGroupResolvers<ContextType>
  SocialInsuranceTemporaryCalculation?: SocialInsuranceTemporaryCalculationResolvers<ContextType>
  SocialInsuranceTemporaryCalculationGroup?: SocialInsuranceTemporaryCalculationGroupResolvers<ContextType>
  SocialInsuranceTemporaryCalculationMonth?: SocialInsuranceTemporaryCalculationMonthResolvers<ContextType>
  SocialInsuranceTemporaryCalculationRow?: SocialInsuranceTemporaryCalculationRowResolvers<ContextType>
  Statistic?: StatisticResolvers<ContextType>
  StatisticKeyValue?: StatisticKeyValueResolvers<ContextType>
  Statistics?: StatisticsResolvers<ContextType>
  StatisticsCard?: StatisticsCardResolvers<ContextType>
  StatisticsForHeader?: StatisticsForHeaderResolvers<ContextType>
  StatisticsQueryResponse?: StatisticsQueryResponseResolvers<ContextType>
  Step?: StepResolvers<ContextType>
  Stepper?: StepperResolvers<ContextType>
  Story?: StoryResolvers<ContextType>
  StorySlice?: StorySliceResolvers<ContextType>
  StudentAssessment?: StudentAssessmentResolvers<ContextType>
  StudentCanGetPracticePermit?: StudentCanGetPracticePermitResolvers<ContextType>
  StudentInformation?: StudentInformationResolvers<ContextType>
  StudentInformationResult?: StudentInformationResultResolvers<ContextType>
  SubArticle?: SubArticleResolvers<ContextType>
  SubpageHeader?: SubpageHeaderResolvers<ContextType>
  SupportCategory?: SupportCategoryResolvers<ContextType>
  SupportQNA?: SupportQnaResolvers<ContextType>
  SupportSubCategory?: SupportSubCategoryResolvers<ContextType>
  SyslumennAuction?: SyslumennAuctionResolvers<ContextType>
  TabContent?: TabContentResolvers<ContextType>
  TabSection?: TabSectionResolvers<ContextType>
  TableSlice?: TableSliceResolvers<ContextType>
  TagCount?: TagCountResolvers<ContextType>
  TeacherV4?: TeacherV4Resolvers<ContextType>
  TeamList?: TeamListResolvers<ContextType>
  TeamMember?: TeamMemberResolvers<ContextType>
  TeamMemberResponse?: TeamMemberResponseResolvers<ContextType>
  TeamMemberResponseInput?: TeamMemberResponseInputResolvers<ContextType>
  TeamMemberTagGroup?: TeamMemberTagGroupResolvers<ContextType>
  TellUsAStory?: TellUsAStoryResolvers<ContextType>
  TemporaryEventLicence?: TemporaryEventLicenceResolvers<ContextType>
  TestResult?: TestResultResolvers<ContextType>
  TextFieldLocales?: TextFieldLocalesResolvers<ContextType>
  TimelineEvent?: TimelineEventResolvers<ContextType>
  TimelineSlice?: TimelineSliceResolvers<ContextType>
  TwoColumnText?: TwoColumnTextResolvers<ContextType>
  TypeCount?: TypeCountResolvers<ContextType>
  Tyres?: TyresResolvers<ContextType>
  Union?: UnionResolvers<ContextType>
  UnitOfUse?: UnitOfUseResolvers<ContextType>
  UnitsOfUseModel?: UnitsOfUseModelResolvers<ContextType>
  UniversityCareersInstitution?: UniversityCareersInstitutionResolvers<ContextType>
  UniversityCareersStudentFile?: UniversityCareersStudentFileResolvers<ContextType>
  UniversityCareersStudentTrack?: UniversityCareersStudentTrackResolvers<ContextType>
  UniversityCareersStudentTrackHistory?: UniversityCareersStudentTrackHistoryResolvers<ContextType>
  UniversityCareersStudentTrackMetadata?: UniversityCareersStudentTrackMetadataResolvers<ContextType>
  UniversityCareersStudentTrackTranscript?: UniversityCareersStudentTrackTranscriptResolvers<ContextType>
  UniversityCareersStudentTrackTranscriptError?: UniversityCareersStudentTrackTranscriptErrorResolvers<ContextType>
  UniversityGatewayApplication?: UniversityGatewayApplicationResolvers<ContextType>
  UniversityGatewayProgram?: UniversityGatewayProgramResolvers<ContextType>
  UniversityGatewayProgramDetails?: UniversityGatewayProgramDetailsResolvers<ContextType>
  UniversityGatewayProgramExtraApplicationField?: UniversityGatewayProgramExtraApplicationFieldResolvers<ContextType>
  UniversityGatewayProgramFilter?: UniversityGatewayProgramFilterResolvers<ContextType>
  UniversityGatewayProgramsPaginated?: UniversityGatewayProgramsPaginatedResolvers<ContextType>
  UniversityGatewayUniversity?: UniversityGatewayUniversityResolvers<ContextType>
  UpdateCurrentEmployerResponse?: UpdateCurrentEmployerResponseResolvers<ContextType>
  Url?: UrlResolvers<ContextType>
  UserDeviceToken?: UserDeviceTokenResolvers<ContextType>
  UserProfile?: UserProfileResolvers<ContextType>
  UserProfileActorProfile?: UserProfileActorProfileResolvers<ContextType>
  UserProfileActorProfileResponse?: UserProfileActorProfileResponseResolvers<ContextType>
  UserProfileAdminProfile?: UserProfileAdminProfileResolvers<ContextType>
  UserProfileAdminProfilesResponse?: UserProfileAdminProfilesResponseResolvers<ContextType>
  UserProfileLocale?: UserProfileLocaleResolvers<ContextType>
  VehicleCurrentWithMileage?: VehicleCurrentWithMileageResolvers<ContextType>
  VehicleDetail?: VehicleDetailResolvers<ContextType>
  VehicleListed?: VehicleListedResolvers<ContextType>
  VehicleMileageDetail?: VehicleMileageDetailResolvers<ContextType>
  VehicleMileageOverview?: VehicleMileageOverviewResolvers<ContextType>
  VehicleMileagePostResponse?: VehicleMileagePostResponseResolvers<ContextType>
  VehicleMileagePutModel?: VehicleMileagePutModelResolvers<ContextType>
  VehicleMileagePutResponse?: VehicleMileagePutResponseResolvers<ContextType>
  VehicleOperatorChangeChecksByPermno?: VehicleOperatorChangeChecksByPermnoResolvers<ContextType>
  VehicleOwnerchangeChecksByPermno?: VehicleOwnerchangeChecksByPermnoResolvers<ContextType>
  VehiclePaging?: VehiclePagingResolvers<ContextType>
  VehiclePlateOrderChecksByPermno?: VehiclePlateOrderChecksByPermnoResolvers<ContextType>
  VehicleRegistration?: VehicleRegistrationResolvers<ContextType>
  VehicleValidationErrorMessage?: VehicleValidationErrorMessageResolvers<ContextType>
  VehiclesAxle?: VehiclesAxleResolvers<ContextType>
  VehiclesBasicInfo?: VehiclesBasicInfoResolvers<ContextType>
  VehiclesBulkMileageReadingResponse?: VehiclesBulkMileageReadingResponseResolvers<ContextType>
  VehiclesBulkMileageRegistrationJob?: VehiclesBulkMileageRegistrationJobResolvers<ContextType>
  VehiclesBulkMileageRegistrationJobHistory?: VehiclesBulkMileageRegistrationJobHistoryResolvers<ContextType>
  VehiclesBulkMileageRegistrationRequestDetail?: VehiclesBulkMileageRegistrationRequestDetailResolvers<ContextType>
  VehiclesBulkMileageRegistrationRequestError?: VehiclesBulkMileageRegistrationRequestErrorResolvers<ContextType>
  VehiclesBulkMileageRegistrationRequestOverview?: VehiclesBulkMileageRegistrationRequestOverviewResolvers<ContextType>
  VehiclesBulkMileageRegistrationRequestStatus?: VehiclesBulkMileageRegistrationRequestStatusResolvers<ContextType>
  VehiclesCurrentListResponse?: VehiclesCurrentListResponseResolvers<ContextType>
  VehiclesCurrentOwnerInfo?: VehiclesCurrentOwnerInfoResolvers<ContextType>
  VehiclesDetail?: VehiclesDetailResolvers<ContextType>
  VehiclesExcel?: VehiclesExcelResolvers<ContextType>
  VehiclesInspectionInfo?: VehiclesInspectionInfoResolvers<ContextType>
  VehiclesList?: VehiclesListResolvers<ContextType>
  VehiclesListV2?: VehiclesListV2Resolvers<ContextType>
  VehiclesMainInfo?: VehiclesMainInfoResolvers<ContextType>
  VehiclesMileageDetails?: VehiclesMileageDetailsResolvers<ContextType>
  VehiclesMileageRegistration?: VehiclesMileageRegistrationResolvers<ContextType>
  VehiclesMileageRegistrationHistory?: VehiclesMileageRegistrationHistoryResolvers<ContextType>
  VehiclesMileageUpdateError?: VehiclesMileageUpdateErrorResolvers<ContextType>
  VehiclesOperator?: VehiclesOperatorResolvers<ContextType>
  VehiclesOwners?: VehiclesOwnersResolvers<ContextType>
  VehiclesPublicVehicleSearch?: VehiclesPublicVehicleSearchResolvers<ContextType>
  VehiclesRegistrationInfo?: VehiclesRegistrationInfoResolvers<ContextType>
  VehiclesTechnicalInfo?: VehiclesTechnicalInfoResolvers<ContextType>
  VehiclesVehicle?: VehiclesVehicleResolvers<ContextType>
  VehiclesVehicleSearch?: VehiclesVehicleSearchResolvers<ContextType>
  VehiclesVehicleSearchNextInspection?: VehiclesVehicleSearchNextInspectionResolvers<ContextType>
  VerifyLicenseBarcodeDataUnion?: VerifyLicenseBarcodeDataUnionResolvers<ContextType>
  VerifyLicenseBarcodeResult?: VerifyLicenseBarcodeResultResolvers<ContextType>
  WatsonAssistantChatIdentityTokenResponse?: WatsonAssistantChatIdentityTokenResponseResolvers<ContextType>
  WatsonAssistantChatSubmitFeedbackResponse?: WatsonAssistantChatSubmitFeedbackResponseResolvers<ContextType>
  WebSearchAutocomplete?: WebSearchAutocompleteResolvers<ContextType>
  WebVerdictByIdItem?: WebVerdictByIdItemResolvers<ContextType>
  WebVerdictByIdResponse?: WebVerdictByIdResponseResolvers<ContextType>
  WebVerdictCaseCategoriesResponse?: WebVerdictCaseCategoriesResponseResolvers<ContextType>
  WebVerdictCaseCategory?: WebVerdictCaseCategoryResolvers<ContextType>
  WebVerdictCaseType?: WebVerdictCaseTypeResolvers<ContextType>
  WebVerdictCaseTypesResponse?: WebVerdictCaseTypesResponseResolvers<ContextType>
  WebVerdictItem?: WebVerdictItemResolvers<ContextType>
  WebVerdictJudge?: WebVerdictJudgeResolvers<ContextType>
  WebVerdictKeyword?: WebVerdictKeywordResolvers<ContextType>
  WebVerdictKeywordsResponse?: WebVerdictKeywordsResponseResolvers<ContextType>
  WebVerdictsInputResponse?: WebVerdictsInputResponseResolvers<ContextType>
  WebVerdictsResponse?: WebVerdictsResponseResolvers<ContextType>
  WorkMachine?: WorkMachineResolvers<ContextType>
  WorkMachinesCategory?: WorkMachinesCategoryResolvers<ContextType>
  WorkMachinesCollectionDocument?: WorkMachinesCollectionDocumentResolvers<ContextType>
  WorkMachinesCollectionLink?: WorkMachinesCollectionLinkResolvers<ContextType>
  WorkMachinesLabel?: WorkMachinesLabelResolvers<ContextType>
  WorkMachinesLink?: WorkMachinesLinkResolvers<ContextType>
  WorkMachinesMachineType?: WorkMachinesMachineTypeResolvers<ContextType>
  WorkMachinesModel?: WorkMachinesModelResolvers<ContextType>
  WorkMachinesPaginatedCollection?: WorkMachinesPaginatedCollectionResolvers<ContextType>
  WorkMachinesSubCategory?: WorkMachinesSubCategoryResolvers<ContextType>
  WorkMachinesTechInfoItem?: WorkMachinesTechInfoItemResolvers<ContextType>
  WorkMachinesTechInfoListItem?: WorkMachinesTechInfoListItemResolvers<ContextType>
  XroadIdentifier?: XroadIdentifierResolvers<ContextType>
  officialJournalOfIcelandApplicationAdvertTemplateResponse?: OfficialJournalOfIcelandApplicationAdvertTemplateResponseResolvers<ContextType>
  officialJournalOfIcelandApplicationAdvertTemplateType?: OfficialJournalOfIcelandApplicationAdvertTemplateTypeResolvers<ContextType>
  officialJournalOfIcelandApplicationAdvertTemplateTypesResponse?: OfficialJournalOfIcelandApplicationAdvertTemplateTypesResponseResolvers<ContextType>
  sendPdfEmailResponse?: SendPdfEmailResponseResolvers<ContextType>
}
