/* tslint:disable */
/* eslint-disable */
/**
 * EndorsementSystem
 * This API manages endorsement lists and associated endorsements collected by systems within island.is.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Endorsement,
    EndorsementFromJSON,
    EndorsementFromJSONTyped,
    EndorsementToJSON,
    EndorsementMetadataDto,
    EndorsementMetadataDtoFromJSON,
    EndorsementMetadataDtoFromJSONTyped,
    EndorsementMetadataDtoToJSON,
} from './';

/**
 * 
 * @export
 * @interface EndorsementList
 */
export interface EndorsementList {
    /**
     * 
     * @type {string}
     * @memberof EndorsementList
     */
    id: string;
    /**
     * 
     * @type {number}
     * @memberof EndorsementList
     */
    counter: number;
    /**
     * 
     * @type {string}
     * @memberof EndorsementList
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof EndorsementList
     */
    description: string | null;
    /**
     * 
     * @type {Date}
     * @memberof EndorsementList
     */
    openedDate: Date;
    /**
     * 
     * @type {Date}
     * @memberof EndorsementList
     */
    closedDate: Date;
    /**
     * 
     * @type {Array<EndorsementMetadataDto>}
     * @memberof EndorsementList
     */
    endorsementMetadata: Array<EndorsementMetadataDto>;
    /**
     * 
     * @type {Array<string>}
     * @memberof EndorsementList
     */
    tags: Array<EndorsementListTagsEnum>;
    /**
     * 
     * @type {string}
     * @memberof EndorsementList
     */
    owner: string;
    /**
     * 
     * @type {string}
     * @memberof EndorsementList
     */
    ownerName: string;
    /**
     * 
     * @type {boolean}
     * @memberof EndorsementList
     */
    adminLock: boolean;
    /**
     * 
     * @type {Array<Endorsement>}
     * @memberof EndorsementList
     */
    endorsements?: Array<Endorsement>;
    /**
     * 
     * @type {number}
     * @memberof EndorsementList
     */
    endorsementCounter: number;
    /**
     * 
     * @type {object}
     * @memberof EndorsementList
     */
    meta: object;
    /**
     * 
     * @type {string}
     * @memberof EndorsementList
     */
    created: string;
    /**
     * 
     * @type {string}
     * @memberof EndorsementList
     */
    modified: string;
    /**
     * The number of endorsements in the list
     * @type {number}
     * @memberof EndorsementList
     */
    endorsementCount: number;
}

export function EndorsementListFromJSON(json: any): EndorsementList {
    return EndorsementListFromJSONTyped(json, false);
}

export function EndorsementListFromJSONTyped(json: any, ignoreDiscriminator: boolean): EndorsementList {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'counter': json['counter'],
        'title': json['title'],
        'description': json['description'],
        'openedDate': (new Date(json['openedDate'])),
        'closedDate': (new Date(json['closedDate'])),
        'endorsementMetadata': ((json['endorsementMetadata'] as Array<any>).map(EndorsementMetadataDtoFromJSON)),
        'tags': json['tags'],
        'owner': json['owner'],
        'ownerName': json['ownerName'],
        'adminLock': json['adminLock'],
        'endorsements': !exists(json, 'endorsements') ? undefined : ((json['endorsements'] as Array<any>).map(EndorsementFromJSON)),
        'endorsementCounter': json['endorsementCounter'],
        'meta': json['meta'],
        'created': json['created'],
        'modified': json['modified'],
        'endorsementCount': json['endorsementCount'],
    };
}

export function EndorsementListToJSON(value?: EndorsementList | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'counter': value.counter,
        'title': value.title,
        'description': value.description,
        'openedDate': (value.openedDate.toISOString()),
        'closedDate': (value.closedDate.toISOString()),
        'endorsementMetadata': ((value.endorsementMetadata as Array<any>).map(EndorsementMetadataDtoToJSON)),
        'tags': value.tags,
        'owner': value.owner,
        'ownerName': value.ownerName,
        'adminLock': value.adminLock,
        'endorsements': value.endorsements === undefined ? undefined : ((value.endorsements as Array<any>).map(EndorsementToJSON)),
        'endorsementCounter': value.endorsementCounter,
        'meta': value.meta,
        'created': value.created,
        'modified': value.modified,
        'endorsementCount': value.endorsementCount,
    };
}

/**
* @export
* @enum {string}
*/
export enum EndorsementListTagsEnum {
    generalPetition = 'generalPetition'
}


