# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Image {
  id: ID!
  url: String!
  title: String!
  description: String
  contentType: String!
  width: Int!
  height: Int!
}

type Link {
  id: ID!
  text: String!
  url: String!
  intro: String
  labels: [String!]
  date: String!
}

type ArticleCategory {
  id: ID!
  title: String!
  slug: String!
  description: String
}

type ArticleGroup {
  title: String!
  slug: String!
  description: String
  importance: Float
}

type ArticleSubgroup {
  title: String!
  importance: Float
  slug: String!
}

type OrganizationTag {
  id: ID!
  title: String!
}

type Asset {
  typename: String!
  id: ID!
  url: String!
  title: String!
  contentType: String!
}

type Html {
  typename: String!
  id: ID!
  document: JSON!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type TimelineEvent {
  id: ID!
  title: String!
  date: String!
  numerator: Int
  denominator: Int
  label: String!
  body: Html
  tags: [String!]
  link: String!
}

type Story {
  label: String!
  title: String!
  logo: Image!
  readMoreText: String!
  date: String!
  intro: String!
  link: String!
  linkedPage: String
  body: String
}

type LinkCard {
  id: ID!
  title: String!
  body: String!
  linkUrl: String!
  linkText: String
}

type LinkCardSection {
  id: ID!
  title: String!
  cards: [LinkCard!]!
}

type GenericTagGroup {
  id: ID!
  title: String!
  slug: String!
}

type GenericTag {
  id: ID!
  title: String!
  slug: String!
  genericTagGroup: GenericTagGroup
}

type EmbeddedVideo {
  id: ID!
  title: String!
  url: String!
  thumbnailImageUrl: String
}

type News {
  id: ID!
  slug: String!
  title: String!
  subtitle: String!
  intro: String
  image: Image
  featuredImage: Image
  date: String!
  content: [Slice!]
  genericTags: [GenericTag!]!
  fullWidthImageInContent: Boolean
  initialPublishDate: String
  organization: Organization
  signLanguageVideo: EmbeddedVideo
}

union Slice = TimelineSlice | HeadingSlice | LinkCard | LinkCardSection | StorySlice | LogoListSlice | LatestNewsSlice | BulletListSlice | Statistics | ProcessEntry | FaqList | ConnectedComponent | EmbeddedVideo | SectionWithImage | SectionWithVideo | TabSection | TeamList | ContactUs | TellUsAStory | Html | Image | Asset | Districts | FeaturedArticles | OneColumnText | TwoColumnText | MultipleStatistics | AccordionSlice | OverviewLinks | EventSlice | Form | Stepper | GraphCard | AnchorPageListSlice | SidebarCard | PowerBiSlice | TableSlice | EmailSignup | FeaturedSupportQNAs | SliceDropdown | Embed | LatestEventsSlice | Chart | ChartComponent | ChartNumberBox | FeaturedEvents | GenericList | LatestGenericListItems | FeaturedLinks | GrantCardsList | OrganizationParentSubpageList | IntroLinkImage

type TimelineSlice {
  id: ID!
  title: String!
  intro: String!
  events: [TimelineEvent!]!
  hasBorderAbove: Boolean
}

type HeadingSlice {
  id: ID!
  title: String!
  body: String!
}

type StorySlice {
  id: ID!
  readMoreText: String!
  stories: [Story!]!
}

type LogoListSlice {
  id: ID!
  title: String!
  body: String!
  images: [Image!]!
}

type LatestNewsSlice {
  id: ID!
  title: String!
  tag: String!
  readMoreText: String!
  news: [News!]!
  readMoreLink: Link
}

type BulletListSlice {
  id: ID!
  bullets: [BulletEntry!]!
  dividerOnTop: Boolean
}

union BulletEntry = IconBullet | NumberBulletGroup

type IconBullet {
  id: ID!
  title: String!
  body: String!
  icon: Image!
  url: String
  linkText: String
}

type NumberBulletGroup {
  id: ID!
  defaultVisible: Int!
  bullets: [NumberBullet!]!
}

type FaqList {
  id: ID!
  title: String!
  questions: [QuestionAndAnswer!]!
  showTitle: Boolean
}

type ConnectedComponent {
  id: ID!
  title: String!
  type: String
  json: JSON
  configJson: JSON
  translationStrings: JSONObject
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

type SectionWithImage {
  id: ID!
  title: String!
  image: Image
  content: [Slice!]
}

type SectionWithVideo {
  id: ID!
  title: String!
  showTitle: Boolean
  video: EmbeddedVideo
  html: Html
  locale: String!
  link: Link
  showDividerOnTop: Boolean
}

type TeamList {
  id: ID!
  teamMembers: [TeamMember!]!
  variant: String
  filterTags: [GenericTag!]
  teamMemberOrder: GetTeamMembersInputOrderBy
  showSearchInput: Boolean
}

enum GetTeamMembersInputOrderBy {
  Name
  Manual
}

type ContactUs {
  id: ID!
  title: String!
  required: String!
  invalidPhone: String!
  invalidEmail: String!
  labelName: String!
  labelPhone: String!
  labelEmail: String!
  labelSubject: String!
  labelMessage: String!
  submitButtonText: String!
  successMessage: String!
  errorMessage: String!
}

type TellUsAStory {
  id: ID!
  introTitle: String!
  introDescription: Html
  introImage: Image
  firstSectionTitle: String!
  organizationLabel: String!
  organizationPlaceholder: String!
  organizationInputErrorMessage: String!
  dateOfStoryLabel: String!
  dateOfStoryPlaceholder: String!
  dateOfStoryInputErrorMessage: String!
  secondSectionTitle: String!
  subjectLabel: String!
  subjectPlaceholder: String!
  subjectInputErrorMessage: String
  messageLabel: String!
  messagePlaceholder: String!
  messageInputErrorMessage: String!
  thirdSectionTitle: String!
  instructionsDescription: Html
  instructionsImage: Image!
  instructionsTitle: String!
  nameLabel: String!
  namePlaceholder: String!
  nameInputErrorMessage: String!
  emailLabel: String!
  emailPlaceholder: String!
  emailInputErrorMessage: String!
  publicationAllowedLabel: String!
  submitButtonTitle: String!
  SuccessMessageTitle: String!
  successMessage: Html
  errorMessageTitle: String!
  errorMessage: Html
}

type Districts {
  id: ID!
  title: String!
  description: String
  image: Image
  links: [Link!]!
  hasBorderAbove: Boolean
}

type FeaturedArticles {
  id: ID!
  title: String!
  image: Image
  articles: [ArticleReference!]!
  automaticallyFetchArticles: Boolean
  sortBy: String!
  resolvedArticles: [Article!]!
  link: Link
  hasBorderAbove: Boolean
  introText: [Slice!]
}

type TwoColumnText {
  id: ID!
  rightTitle: String
  rightContent: [Slice!]
  rightLink: Link
  leftTitle: String
  leftContent: [Slice!]
  leftLink: Link
  dividerOnTop: Boolean
  onlyUseOneTitle: Boolean
}

type MultipleStatistics {
  id: ID!
  title: String!
  statistics: [Statistics!]!
  link: Link
  hasBorderAbove: Boolean
}

type AccordionSlice {
  id: ID!
  title: String!
  type: String!
  accordionItems: [OneColumnText!]
  hasBorderAbove: Boolean
  showTitle: Boolean
  titleHeadingLevel: String
}

type OverviewLinks {
  id: ID!
  titleAbove: String
  overviewLinks: [IntroLinkImage!]!
  link: Link
  hasBorderAbove: Boolean
  linkData: OverviewLinksLinkData
}

type EventSlice {
  id: ID!
  title: String!
  subtitle: String!
  date: String!
  link: Link
  backgroundImage: Image
}

type Form {
  id: ID!
  title: String!
  intro: String!
  defaultFieldNamespace: JSON
  fields: [FormField!]!
  successText: String!
  aboutYouHeadingText: String!
  questionsHeadingText: String!
  recipientFormFieldDecider: FormField
  recipientList: [String!]
}

type AnchorPageListSlice {
  id: ID!
  title: String!
  pages: [AnchorPage!]!
}

type SidebarCard {
  id: ID!
  type: String!
  title: String!
  contentString: String!
  link: Link
  image: Image
}

type PowerBiSlice {
  id: ID!
  title: String!
  powerBiEmbedProps: JSON
  workspaceId: String
  reportId: String
  owner: String
  powerBiEmbedPropsFromServer: GetPowerBiEmbedPropsFromServerResponse
}

type TableSlice {
  id: ID!
  title: String!
  tableContent: JSON
}

type FeaturedSupportQNAs {
  id: ID!
  renderedTitle: String
  link: Link
  supportQNAs: [SupportQNA!]
  resolvedSupportQNAs: [SupportQNA!]!
  automaticallyFetchSupportQNAs: Boolean
}

type SliceDropdown {
  id: ID!
  dropdownLabel: String
  slices: [OneColumnText!]!
  alphabeticallyOrdered: Boolean
}

type Embed {
  id: ID!
  title: String!
  embedUrl: String
  altText: String
  aspectRatio: String
}

type LatestEventsSlice {
  id: ID!
  title: String!
  events: [Event!]!
}

type Chart {
  id: ID!
  title: String!
  chartDescription: String!
  alternativeDescription: String!
  displayAsCard: Boolean!
  startExpanded: Boolean!
  components: [ChartComponent!]!
  dateFrom: String
  dateTo: String
  numberOfDataPoints: Float
  sourceData: String
  flipAxis: Boolean
  xAxisKey: String
  xAxisFormat: String
  xAxisValueType: String
  customStyleConfig: String
  reduceAndRoundValue: Boolean
  yAxisLabel: String
}

type ChartNumberBox {
  id: ID!
  title: String!
  numberBoxDescription: String!
  sourceDataKey: String!
  valueType: String!
  displayChangeMonthOverMonth: Boolean!
  displayChangeYearOverYear: Boolean!
  numberBoxDate: String
  reduceAndRoundValue: Boolean
  displayTimestamp: Boolean
}

type FeaturedEvents {
  id: ID!
  organization: String
  resolvedEventList: EventList!
  namespace: JSONObject!
  noEventsFoundText: [Slice!]
}

type LatestGenericListItems {
  id: ID!
  title: String!
  genericList: GenericList
  seeMorePage: Page
  seeMoreLinkText: String!
  itemResponse: GenericListItemResponse
}

union Page = Article | SubArticle | AnchorPage | LifeEventPage | News | ArticleCategory | OrganizationPage | OrganizationSubpage | ProjectPage

type FeaturedLinks {
  id: ID!
  title: String!
  featuredLinks: [Featured!]
}

type GrantCardsList {
  id: ID!
  title: String!
  displayTitle: Boolean
  resolvedGrantsList: GrantList
  namespace: JSONObject!
  maxNumberOfCards: Int
  sorting: GrantCardsListSorting
}

enum GrantCardsListSorting {
  ALPHABETICAL
  MOST_RECENTLY_UPDATED_FIRST
}

type OrganizationParentSubpageList {
  id: ID!
  title: String!
  pageLinkVariant: OrganizationParentSubpageListVariant!
  pageLinks: [OrganizationParentSubpageListPageLink!]!
  seeMoreLink: Link
}

enum OrganizationParentSubpageListVariant {
  ServiceCard
  ProfileCardWithTitleAbove
}

type NumberBullet {
  id: ID!
  title: String!
  body: String!
}

type Statistic {
  id: ID!
  value: String!
  label: String!
}

type Statistics {
  id: ID!
  title: String!
  statistics: [Statistic!]!
}

type ProcessEntry {
  id: ID!
  processTitle: String!
  processLink: String!
  openLinkInModal: Boolean
  buttonText: String!
}

type QuestionAndAnswer {
  id: ID!
  question: String!
  answer: [Slice!]!
  publishDate: String
}

type TabContent {
  tabTitle: String!
  contentTitle: String
  image: Image
  body: [Slice!]
}

type TabSection {
  id: ID!
  title: String!
  tabs: [TabContent!]!
}

type TeamMemberTagGroup {
  groupId: String!
  groupLabel: String!
  tagLabels: [String!]!
}

type TeamMember {
  id: ID!
  name: String!
  title: String!
  email: String
  phone: String
  image: Image
  imageOnSelect: Image
  filterTags: [GenericTag!]
  intro: [Slice!]
  tagGroups: [TeamMemberTagGroup!]
  createdAt: String
}

type TeamMemberResponseInput {
  teamListId: String!
  lang: String!
  page: Int
  size: Int
  queryString: String
  tags: [String!]
  tagGroups: JSON
  orderBy: GetTeamMembersInputOrderBy
}

type ArticleReference {
  id: ID!
  title: String!
  slug: String!
  intro: String!
  group: ArticleGroup
  category: ArticleCategory
  organization: [Organization!]
  processEntry: ProcessEntry
  processEntryButtonText: String!
}

type OneColumnText {
  id: ID!
  title: String!
  link: Link
  content: [Slice!]
  dividerOnTop: Boolean
  showTitle: Boolean
}

type ReferenceLink {
  slug: String!
  type: String!
}

type IntroLinkImage {
  id: ID!
  title: String!
  intro: Html
  introHtml: Html
  image: Image
  leftImage: Boolean!
  linkTitle: String!
  link: ReferenceLink
  openLinkInNewTab: Boolean!
}

type OverviewLinksLinkDataCategoryCardItem {
  title: String!
  description: String!
  href: String!
}

type OverviewLinksLinkData {
  variant: OverviewLinksLinkDataVariant!
  categoryCardItems: [OverviewLinksLinkDataCategoryCardItem!]!
}

enum OverviewLinksLinkDataVariant {
  IntroLinkImage
  CategoryCard
}

type FormField {
  id: ID!
  title: String!
  name: String
  placeholder: String!
  type: String!
  required: Boolean!
  options: [String!]!
  emailConfig: JSON
  informationText: String
}

type Step {
  id: ID!
  title: String!
  slug: String!
  stepType: String
  subtitle: [Slice!]
  config: String
}

type Stepper {
  id: ID!
  title: String!
  steps: [Step!]
  config: String
}

type GraphCard {
  id: ID!
  graphTitle: String!
  graphDescription: String!
  organization: String
  data: String!
  datakeys: String!
  type: String!
  displayAsCard: Boolean!
  organizationLogo: Image
}

type AnchorPage {
  id: ID!
  title: String!
  shortTitle: String
  slug: String!
  intro: String
  shortIntro: String
  image: Image
  thumbnail: Image
  tinyThumbnail: Image
  content: [Slice!]!
  category: ArticleCategory
  seeMoreText: String
  pageType: String
  featuredImage: Image
}

type GetPowerBiEmbedPropsFromServerResponse {
  accessToken: String
  embedUrl: String
}

type EmailSignup {
  id: ID!
  title: String!
  description: String
  formFields: [FormField!]
  signupType: String
  configuration: JSON
  translations: JSON
}

type SupportCategory {
  id: ID!
  title: String
  description: String
  organization: Organization
  slug: String
  importance: Float!
}

type SupportSubCategory {
  title: String!
  description: String
  slug: String
  importance: Float!
}

type SupportQNA {
  id: ID!
  title: String!
  answer: [Slice!]!
  slug: String!
  organization: Organization
  category: SupportCategory
  subCategory: SupportSubCategory
  importance: Float!
  relatedLinks: [Link!]!
  contactLink: String!
}

type EventLocation {
  streetAddress: String
  floor: String
  postalCode: String
  useFreeText: Boolean
  freeText: String
}

type EventTime {
  startTime: String
  endTime: String
}

type Event {
  id: ID!
  organization: Organization
  title: String!
  slug: String!
  startDate: String!
  endDate: String!
  time: EventTime!
  location: EventLocation!
  content: [Slice!]
  video: EmbeddedVideo
  thumbnailImage: Image
  contentImage: Image
  fullWidthImageInContent: Boolean
  featuredImage: Image
  firstPublishedAt: String
}

type ChartComponent {
  id: ID!
  label: String!
  type: String!
  sourceDataKey: String!
  interval: Float
  stackId: String
  values: String
}

type EventList {
  total: Int!
  items: [Event!]!
}

type GenericListItemResponseInput {
  genericListId: String!
  lang: String!
  page: Int
  size: Int
  queryString: String
  tags: [String!]
  tagGroups: JSON
  orderBy: GetGenericListItemsInputOrderBy
}

enum GetGenericListItemsInputOrderBy {
  DATE
  TITLE
  PUBLISH_DATE
}

type GenericList {
  id: ID!
  searchInputPlaceholder: String
  itemType: GenericListItemType
  filterTags: [GenericTag!]
  defaultOrder: GetGenericListItemsInputOrderBy
  showSearchInput: Boolean
}

enum GenericListItemType {
  NonClickable
  Clickable
}

type SubArticle {
  id: ID!
  title: String!
  slug: String!
  parent: ArticleReference
  body: [Slice!]!
  showTableOfContents: Boolean
  signLanguageVideo: EmbeddedVideo
  stepper: Stepper
}

type LinkGroup {
  id: ID!
  name: String!
  primaryLink: Link
  childrenLinks: [Link!]!
}

type OrganizationTheme {
  gradientStartColor: String!
  gradientEndColor: String!
  useGradientColor: Boolean
  backgroundColor: String
  mobileBackgroundColor: String
  fullWidth: Boolean
  textColor: String
  imagePadding: String
  imageIsFullHeight: Boolean
  imageObjectFit: String
  imageObjectPosition: String
  titleSectionPaddingLeft: Int
}

type AlertBanner {
  id: ID!
  showAlertBanner: Boolean!
  bannerVariant: String!
  title: String
  description: String
  linkTitle: String
  link: ReferenceLink
  isDismissable: Boolean!
  dismissedForDays: Int!
  servicePortalPaths: [String!]
}

type OrganizationPageTopLevelNavigationLink {
  label: String!
  href: String!
}

type OrganizationPageTopLevelNavigation {
  links: [OrganizationPageTopLevelNavigationLink!]!
}

type OrganizationPage {
  id: ID!
  title: String!
  slug: String!
  description: String!
  theme: String!
  themeProperties: OrganizationTheme!
  slices: [Slice!]!
  bottomSlices: [Slice!]!
  secondaryNewsTags: [GenericTag!]
  menuLinks: [LinkGroup!]!
  secondaryMenu: LinkGroup
  organization: Organization
  featuredImage: Image
  sidebarCards: [Slice!]
  externalLinks: [Link!]
  alertBanner: AlertBanner
  defaultHeaderImage: Image
  topLevelNavigation: OrganizationPageTopLevelNavigation
  canBeFoundInSearchResults: Boolean
  showPastEventsOption: Boolean
}

type OrganizationSubpage {
  id: ID!
  title: String!
  shortTitle: String
  slug: String!
  url: [String!]!
  intro: String
  description: [Slice!]
  links: [Link!]
  slices: [Slice!]
  showTableOfContents: Boolean!
  sliceCustomRenderer: String
  sliceExtraText: String
  organizationPage: OrganizationPage!
  featuredImage: Image
  signLanguageVideo: EmbeddedVideo
  bottomSlices: [Slice!]
}

type ProjectSubpage {
  id: ID!
  title: String!
  shortTitle: String
  slug: String!
  content: [Slice!]
  renderSlicesAsTabs: Boolean!
  slices: [Slice!]!
  showTableOfContents: Boolean!
  bottomSlices: [Slice!]
}

type Namespace {
  namespace: String!
  fields: String!
}

type ProjectPageThemeProperties {
  gradientStartColor: String!
  gradientEndColor: String!
  useGradientColor: Boolean
  backgroundColor: String
  mobileBackgroundColor: String
  fullWidth: Boolean
  textColor: String
  imagePadding: String
  imageIsFullHeight: Boolean
  imageObjectFit: String
  imageObjectPosition: String
  titleSectionPaddingLeft: Int
}

type ProjectPage {
  id: ID!
  title: String!
  slug: String!
  theme: String!
  sidebar: Boolean!
  sidebarLinks: [LinkGroup!]!
  secondarySidebar: LinkGroup
  subtitle: String!
  intro: String!
  content: [Slice!]
  stepper: Stepper
  slices: [Slice!]!
  bottomSlices: [Slice!]!
  newsTag: GenericTag
  projectSubpages: [ProjectSubpage!]!
  featuredImage: Image
  defaultHeaderImage: Image
  defaultHeaderBackgroundColor: String!
  themeProperties: ProjectPageThemeProperties
  featuredDescription: String!
  footerConfig: JSON
  footerItems: [FooterItem!]
  backLink: Link
  contentIsFullWidth: Boolean
  namespace: Namespace
  alertBanner: AlertBanner
}

type Featured {
  title: String!
  attention: Boolean!
  thing: ReferenceLink
}

type LifeEventPage {
  id: ID!
  title: String!
  shortTitle: String
  slug: String!
  intro: String
  shortIntro: String
  image: Image
  thumbnail: Image
  tinyThumbnail: Image
  featuredImage: Image
  content: [Slice!]!
  featured: [Featured!]!
  organizations: [Organization!]!
  category: ArticleCategory
  relatedLifeEvents: [LifeEventPage!]!
  seeMoreText: String
}

type GenericListItem {
  id: ID!
  genericList: GenericList
  title: String!
  date: String
  cardIntro: [Slice!]!
  content: [Slice!]
  slug: String
  assetUrl: String
  externalUrl: String
  filterTags: [GenericTag!]
  image: Image
  fullWidthImageInContent: Boolean
}

type GenericListItemResponse {
  input: GenericListItemResponseInput!
  items: [GenericListItem!]!
  total: Int!
}

type OrganizationFund {
  id: ID!
  title: String!
  link: ReferenceLink
  featuredImage: Image
  parentOrganization: Organization!
}

type Grant {
  id: ID!
  name: String!
  lastUpdateTimestamp: String!
  description: String
  applicationId: String
  applicationUrl: ReferenceLink
  applicationButtonLabel: String
  specialEmphasis: [Slice!]!
  whoCanApply: [Slice!]!
  howToApply: [Slice!]!
  answeringQuestions: [Slice!]!
  applicationHints: [Slice!]!
  dateFrom: String
  dateTo: String
  status: GrantStatus
  statusText: String
  files: [Asset!]
  supportLinks: [Link!]
  categoryTags: [GenericTag!]
  typeTag: GenericTag
  fund: OrganizationFund
}

enum GrantStatus {
  CLOSED
  CLOSED_OPENING_SOON
  CLOSED_OPENING_SOON_WITH_ESTIMATION
  CLOSED_WITH_NOTE
  OPEN
  OPEN_WITH_NOTE
  ALWAYS_OPEN
  INVALID
  UNKNOWN
}

type GrantList {
  total: Int!
  items: [Grant!]!
}

type OrganizationParentSubpageListPageLink {
  id: ID!
  label: String!
  href: String!
  thumbnailImageHref: String
  tinyThumbnailImageHref: String
  pageLinkIntro: String!
}

type FooterItem {
  id: ID!
  title: String!
  link: Link
  content: [Slice!]
  serviceWebContent: [Slice!]
}

type Organization {
  id: ID!
  title: String!
  shortTitle: String!
  description: String
  slug: String!
  tag: [OrganizationTag!]!
  logo: Image
  link: String
  footerConfig: JSON
  footerItems: [FooterItem!]!
  phone: String!
  email: String!
  serviceWebTitle: String
  serviceWebEnabled: Boolean
  serviceWebPopularQuestionCount: Float
  namespace: Namespace
  serviceWebFeaturedImage: Image
  publishedMaterialSearchFilterGenericTags: [GenericTag!]!
  showsUpOnTheOrganizationsPage: Boolean
  hasALandingPage: Boolean
  trackingDomain: String
  referenceIdentifier: String
  newsBottomSlices: [EmailSignup!]
}

type Article {
  id: ID!
  title: String!
  slug: String!
  shortTitle: String
  intro: String
  importance: Float
  body: [Slice!]!
  processEntry: ProcessEntry
  category: ArticleCategory
  otherCategories: [ArticleCategory!]
  group: ArticleGroup
  otherGroups: [ArticleGroup!]
  subgroup: ArticleSubgroup
  otherSubgroups: [ArticleSubgroup!]
  organization: [Organization!]
  relatedOrganization: [Organization!]
  responsibleParty: [Organization!]
  subArticles: [SubArticle!]!
  relatedArticles: [Article!]
  relatedContent: [Link!]
  featuredImage: Image
  showTableOfContents: Boolean
  stepper: Stepper
  processEntryButtonText: String
  alertBanner: AlertBanner
  activeTranslations: JSON
  signLanguageVideo: EmbeddedVideo
  keywords: [String!]
}

type TextFieldLocales {
  is: String!
  en: String!
}

type ContentSlug {
  id: ID!
  slug: TextFieldLocales
  title: TextFieldLocales
  url: TextFieldLocales
  type: String!
  activeTranslations: JSON
}

type Organizations {
  items: [Organization!]!
}

type GenericPage {
  title: String!
  slug: String!
  intro: String
  mainContent: String
  sidebar: String
  misc: String
}

type MenuLink {
  title: String!
  link: ReferenceLink!
}

type MenuLinkWithChildren {
  title: String!
  link: ReferenceLink
  childLinks: [MenuLink!]!
}

type Menu {
  id: ID!
  title: String!
  links: [Link!]!
  menuLinks: [MenuLinkWithChildren!]!
}

type GenericOverviewPage {
  id: ID!
  title: String!
  pageIdentifier: String!
  intro: Html
  navigation: Menu!
  overviewLinks: [IntroLinkImage!]!
}

type OrganizationTags {
  items: [OrganizationTag!]!
}

type Url {
  id: ID!
  title: String
  page: ReferenceLink
  urlsList: [String!]!
  explicitRedirect: String
}

type SubpageHeader {
  subpageId: String!
  title: String!
  summary: String!
  featuredImage: Image
  body: [Slice!]
}

type ErrorPage {
  id: ID!
  errorCode: String!
  title: String!
  description: Html
}

type Auction {
  id: ID!
  title: String!
  updatedAt: String!
  date: String!
  type: String!
  content: [Slice!]
  organization: Organization!
}

type FrontpageSlider {
  title: String!
  subtitle: String!
  intro: Html
  content: String!
  link: String
  animationJsonAsset: Asset
}

type LinkList {
  title: String!
  links: [Link!]!
}

type Frontpage {
  id: ID!
  title: String
  heading: String
  imageAlternativeText: String
  image: Image
  videos: [Image!]
  imageMobile: Image
  videosMobile: [Image!]
  featured: [Featured!]!
  slides: [FrontpageSlider!]!
  namespace: Namespace
  lifeEvents: [LifeEventPage!]!
  linkList: LinkList
}

type StatisticsCard {
  title: String!
  statistic: String!
  image: Image
}

type OpenDataPage {
  id: ID!
  pageTitle: String!
  pageDescription: String!
  pageHeaderGraph: GraphCard!
  link: String!
  linkTitle: String!
  statisticsCardsSection: [StatisticsCard!]!
  chartSectionTitle: String!
  graphCards: [GraphCard!]!
  externalLinkCardSelection: LinkCardSection!
  externalLinkSectionTitle: String!
  externalLinkSectionDescription: String!
  externalLinkSectionImage: Image
}

type OpenDataSubpage {
  id: ID!
  pageTitle: String!
  fundTitle: String!
  fundDescription: String!
  statisticsCards: [StatisticsCard!]!
  graphCards: [GraphCard!]!
  organizationLogo: Image
}

type ManualPageData {
  id: ID!
  title: String!
  slug: String!
}

type ManualChapterItem {
  id: ID!
  title: String!
  content: [Slice!]
  manual: ManualPageData!
  manualChapter: ManualPageData!
}

type ManualChapterChangelog {
  items: [ManualChapterChangelogItem!]!
}

type ManualChapterChangelogItem {
  dateOfChange: String!
  textualDescription: String!
}

type ManualChapter {
  id: ID!
  title: String!
  slug: String!
  intro: String
  description: [Slice!]
  chapterItems: [ManualChapterItem!]!
  changelog: ManualChapterChangelog
}

type Manual {
  id: ID!
  organization: Organization
  title: String!
  slug: String!
  info: [Slice!]
  description: [Slice!]
  chapters: [ManualChapter!]!
  category: ArticleCategory
  otherCategories: [ArticleCategory!]
  group: ArticleGroup
  otherGroups: [ArticleGroup!]
  subgroup: ArticleSubgroup
  otherSubgroups: [ArticleSubgroup!]
  importance: Float
}

type ServiceWebPageEmailConfigItem {
  supportCategoryId: String!
  emailList: [String!]!
}

type ServiceWebPageEmailConfig {
  emails: [ServiceWebPageEmailConfigItem!]!
}

type ServiceWebPage {
  id: ID!
  title: String!
  organization: Organization
  slices: [Slice!]!
  footerItems: [FooterItem!]
  emailConfig: ServiceWebPageEmailConfig
  contactFormDisclaimer: [Slice!]
  alertBanner: AlertBanner
}

type OrganizationSubpageLink {
  id: String
  label: String!
  href: String!
}

type OrganizationParentSubpage {
  id: ID!
  title: String!
  childLinks: [OrganizationSubpageLink!]!
}

type GetBloodDonationRestrictionsInputModel {
  page: Int
  queryString: String
  tagKeys: [String!]
  lang: String!
}

type BloodDonationRestrictionListItem {
  id: ID!
  title: String!
  hasCardText: Boolean!
  cardText: [Slice!]!
  description: String!
  hasDetailedText: Boolean!
  keywordsText: String!
}

type BloodDonationRestrictionList {
  total: Int!
  items: [BloodDonationRestrictionListItem!]!
  input: GetBloodDonationRestrictionsInputModel!
}

type BloodDonationRestrictionDetails {
  id: ID!
  title: String!
  description: String!
  hasCardText: Boolean!
  cardText: [Slice!]!
  detailedText: [Slice!]!
  hasDetailedText: Boolean!
  keywordsText: String!
}

type BloodDonationRestrictionGenericTag {
  key: ID!
  label: String!
}

type BloodDonationRestrictionGenericTagList {
  total: Int!
  items: [BloodDonationRestrictionGenericTag!]!
}

type NewsList {
  total: Int!
  items: [News!]!
}

type GroupedMenu {
  id: ID!
  title: String!
  menus: [Menu!]!
}

type EnhancedAsset {
  id: ID!
  title: String!
  file: Asset
  genericTags: [GenericTag!]!
  releaseDate: String
  organization: Organization!
  description: String!
}

type EnhancedAssetSearchResult {
  items: [EnhancedAsset!]!
  total: Float!
}

type EntryTitle {
  title: String!
}

type CustomPage {
  id: ID!
  uniqueIdentifier: String!
  configJson: JSONObject
  alertBanner: AlertBanner
  translationStrings: JSONObject!
  content: [Slice!]
  ogTitle: String
  ogDescription: String
  ogImage: Image
}

type TeamMemberResponse {
  input: TeamMemberResponseInput!
  items: [TeamMember!]!
  total: Int!
}

type OrganizationPageStandaloneSitemapLink {
  label: String!
  href: String!
  description: String
}

type OrganizationPageStandaloneSitemap {
  childLinks: [OrganizationPageStandaloneSitemapLink!]!
}

type OrganizationPageStandaloneSitemapLevel2Link {
  label: String!
  href: String!
}

type OrganizationPageStandaloneSitemapLevel2Category {
  label: String!
  href: String
  childLinks: [OrganizationPageStandaloneSitemapLevel2Link!]!
}

type OrganizationPageStandaloneSitemapLevel2 {
  label: String!
  childCategories: [OrganizationPageStandaloneSitemapLevel2Category!]!
}

type Fund {
  credit: Float!
  used: Float!
  total: Float!
}

type UserInfo {
  gender: String!
  age: Float!
  postalCode: Float!
}

type Flight {
  id: ID!
  bookingDate: String!
  flightLegs: [FlightLeg!]!
  user: User!
  userInfo: UserInfo!
}

type FlightLeg {
  id: ID!
  airline: String!
  cooperation: String
  financialState: String!
  travel: String!
  originalPrice: Float!
  discountPrice: Float!
  flight: Flight!
}

type User {
  nationalId: ID!
  name: String!
  mobile: String
  role: String!
  fund: Fund
  meetsADSRequirements: Boolean!
  flightLegs: [FlightLeg!]!
}

type ConnectionDiscountCode {
  code: ID!
  flightId: String!
  flightDesc: String!
  validUntil: String!
}

type Discount {
  nationalId: ID!
  discountCode: String!
  connectionDiscountCodes: [ConnectionDiscountCode!]!
  expiresIn: Float!
  user: User!
}

input GetTeamMembersInput {
  teamListId: String!
  lang: String = "is"
  page: Int
  size: Int
  queryString: String
  tags: [String!]
  tagGroups: JSON
  orderBy: GetTeamMembersInputOrderBy
}

input GetGenericListItemsInput {
  genericListId: String!
  lang: String = "is"
  page: Int
  size: Int
  queryString: String
  tags: [String!]
  tagGroups: JSON
  orderBy: GetGenericListItemsInputOrderBy
}

input GetBloodDonationRestrictionsInput {
  page: Int
  queryString: String
  tagKeys: [String!]
  lang: String = "is"
}

type Query {
  user: User
  discounts: [Discount!]
  flightLegs(input: FlightLegsInput!): [FlightLeg!]!
  getNamespace(input: GetNamespaceInput!): Namespace
  getContentSlug(input: GetContentSlugInput!): ContentSlug
  getAlertBanner(input: GetAlertBannerInput!): AlertBanner
  getServicePortalAlertBanners(input: GetServicePortalAlertBannersInput!): [AlertBanner!]
  getGenericPage(input: GetGenericPageInput!): GenericPage
  getGenericOverviewPage(input: GetGenericOverviewPageInput!): GenericOverviewPage
  getErrorPage(input: GetErrorPageInput!): ErrorPage
  getOpenDataPage(input: GetOpenDataPageInput!): OpenDataPage!
  getOpenDataSubpage(input: GetOpenDataSubpageInput!): OpenDataSubpage!
  getOrganization(input: GetOrganizationInput!): Organization
  getOrganizationByTitle(input: GetOrganizationByTitleInput!): Organization
  getOrganizationByNationalId(input: GetOrganizationByNationalIdInput!): Organization
  getOrganizationPage(input: GetOrganizationPageInput!): OrganizationPage
  getOrganizationSubpage(input: GetOrganizationSubpageInput!): OrganizationSubpage
  getOrganizationSubpageById(input: GetOrganizationSubpageByIdInput!): OrganizationSubpage
  getServiceWebPage(input: GetServiceWebPageInput!): ServiceWebPage
  getAuctions(input: GetAuctionsInput!): [Auction!]!
  getAuction(input: GetAuctionInput!): Auction!
  getProjectPage(input: GetProjectPageInput!): ProjectPage
  getOrganizations(input: GetOrganizationsInput): Organizations!
  getOrganizationTags(input: GetOrganizationTagsInput!): OrganizationTags
  getAnchorPage(input: GetAnchorPageInput!): AnchorPage
  getAnchorPages(input: GetAnchorPagesInput!): [AnchorPage!]!
  getLifeEventPage(input: GetLifeEventPageInput!): LifeEventPage
  getLifeEventsForOverview(input: GetLifeEventsInput!): [LifeEventPage!]!
  getLifeEventsInCategory(input: GetLifeEventsInCategoryInput!): [LifeEventPage!]!
  getUrl(input: GetUrlInput!): Url
  getFrontpage(input: GetFrontpageInput!): Frontpage
  getArticleCategories(input: GetArticleCategoriesInput!): [ArticleCategory!]!
  getSingleArticle(input: GetSingleArticleInput!): Article
  getArticles(input: GetArticlesInput!): [Article!]!
  getGrants(input: GetGrantsInput!): GrantList!
  getSingleGrant(input: GetSingleGrantInput!): Grant
  getSingleNews(input: GetSingleNewsInput!): News
  getSingleEvent(input: GetSingleEventInput!): Event
  getEvents(input: GetEventsInput!): EventList!
  getNewsDates(input: GetNewsDatesInput!): [String!]!
  getNews(input: GetNewsInput!): NewsList!
  getMenu(input: GetMenuInput!): Menu
  getGroupedMenu(input: GetSingleMenuInput!): GroupedMenu
  getSubpageHeader(input: GetSubpageHeaderInput!): SubpageHeader
  getSingleSupportQNA(input: GetSingleSupportQNAInput!): SupportQNA
  getFeaturedSupportQNAs(input: GetFeaturedSupportQNAsInput!): [SupportQNA!]!
  getSupportQNAs(input: GetSupportQNAsInput!): [SupportQNA!]!
  getSupportQNAsInCategory(input: GetSupportQNAsInCategoryInput!): [SupportQNA!]!
  getSupportCategory(input: GetSupportCategoryInput!): SupportCategory
  getSupportCategories(input: GetSupportCategoriesInput!): [SupportCategory!]!
  getSupportCategoriesInOrganization(input: GetSupportCategoriesInOrganizationInput!): [SupportCategory!]!
  getPublishedMaterial(input: GetPublishedMaterialInput!): EnhancedAssetSearchResult!
  getTabSection(input: GetTabSectionInput!): TabSection
  getGenericTagBySlug(input: GetGenericTagBySlugInput!): GenericTag
  getGenericTagsInTagGroups(input: GetGenericTagsInTagGroupsInput!): [GenericTag!]
  getSingleManual(input: GetSingleManualInput!): Manual
  getCategoryPages(input: GetCategoryPagesInput!): [CategoryPage!]
  getSingleEntryTitleById(input: GetSingleEntryTitleByIdInput!): EntryTitle
  getCustomPage(input: GetCustomPageInput!): CustomPage
  getCustomSubpage(input: GetCustomSubpageInput!): CustomPage
  getGenericListItems(input: GetGenericListItemsInput!): GenericListItemResponse
  getGenericListItemBySlug(input: GetGenericListItemBySlugInput!): GenericListItem
  getTeamMembers(input: GetTeamMembersInput!): TeamMemberResponse
  getOrganizationParentSubpage(input: GetOrganizationParentSubpageInput!): OrganizationParentSubpage
  getOrganizationPageStandaloneSitemapLevel1(input: GetOrganizationPageStandaloneSitemapLevel1Input!): OrganizationPageStandaloneSitemap
  getOrganizationPageStandaloneSitemapLevel2(input: GetOrganizationPageStandaloneSitemapLevel2Input!): OrganizationPageStandaloneSitemapLevel2
  getBloodDonationRestrictionGenericTags(input: GetBloodDonationRestrictionGenericTagsInput!): BloodDonationRestrictionGenericTagList!
  getBloodDonationRestrictions(input: GetBloodDonationRestrictionsInput!): BloodDonationRestrictionList!
  getBloodDonationRestrictionDetails(input: GetBloodDonationRestrictionDetailsInput!): BloodDonationRestrictionDetails
}

input FlightLegsInput {
  airline: String
  flightLeg: Travel
  period: Period
  state: [String!]
  age: Range
  gender: String
  postalCode: Int
  nationalId: String
  isExplicit: Boolean
}

input Travel {
  from: String
  to: String
}

input Period {
  from: DateTime!
  to: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input Range {
  from: Int
  to: Int
}

input GetNamespaceInput {
  namespace: String
  lang: String = "is-IS"
}

input GetContentSlugInput {
  id: String!
}

input GetAlertBannerInput {
  id: String!
  lang: String = "is-IS"
}

input GetServicePortalAlertBannersInput {
  lang: String = "is-IS"
}

input GetGenericPageInput {
  slug: String!
  lang: String = "is-IS"
}

input GetGenericOverviewPageInput {
  pageIdentifier: String!
  lang: String = "is-IS"
}

input GetErrorPageInput {
  errorCode: String!
  lang: String = "is-IS"
}

input GetOpenDataPageInput {
  lang: String = "is"
}

input GetOpenDataSubpageInput {
  lang: String = "is"
}

input GetOrganizationInput {
  slug: String
  lang: String = "is-IS"
}

input GetOrganizationByTitleInput {
  title: String!
  lang: String = "is-IS"
}

input GetOrganizationByNationalIdInput {
  nationalId: String!
  lang: String = "is-IS"
}

input GetOrganizationPageInput {
  slug: String!
  lang: String = "is"
}

input GetOrganizationSubpageInput {
  organizationSlug: String!
  slug: String!
  lang: String = "is"
}

input GetOrganizationSubpageByIdInput {
  id: String!
  lang: String = "is"
}

input GetServiceWebPageInput {
  slug: String!
  lang: String = "is"
}

input GetAuctionsInput {
  lang: String = "is-IS"
  organization: String
  year: Float
  month: Float
}

input GetAuctionInput {
  id: String!
  lang: String = "is-IS"
}

input GetProjectPageInput {
  slug: String!
  lang: String = "is-IS"
}

input GetOrganizationsInput {
  lang: String
  perPage: Int
  organizationTitles: [String!]
  referenceIdentifiers: [String!]
}

input GetOrganizationTagsInput {
  lang: String
}

input GetAnchorPageInput {
  slug: String!
  lang: String = "is-IS"
}

input GetAnchorPagesInput {
  lang: String = "is-IS"
}

input GetLifeEventPageInput {
  slug: String!
  lang: String = "is-IS"
}

input GetLifeEventsInput {
  lang: String = "is-IS"
}

input GetLifeEventsInCategoryInput {
  slug: String!
  lang: String = "is-IS"
}

input GetUrlInput {
  slug: String!
  lang: String = "is-IS"
}

input GetFrontpageInput {
  pageIdentifier: String!
  lang: String = "is"
}

input GetArticleCategoriesInput {
  lang: String = "is"
  size: Int = 100
}

input GetSingleArticleInput {
  slug: String!
  lang: String = "is"
}

input GetArticlesInput {
  lang: String = "is"
  category: String
  group: String
  subgroup: String
  organization: String
  size: Int = 100
  sort: SortField = TITLE
}

enum SortField {
  TITLE
  POPULAR
  RELEASE_DATE
}

input GetGrantsInput {
  search: String
  lang: String = "is"
  page: Int = 1
  size: Int = 8
  sort: GetGrantsInputSortByEnum
  status: GetGrantsInputAvailabilityStatusEnum
  categories: [String!]
  types: [String!]
  organizations: [String!]
  funds: [String!]
}

enum GetGrantsInputSortByEnum {
  ALPHABETICAL
  RECENTLY_UPDATED
}

enum GetGrantsInputAvailabilityStatusEnum {
  OPEN
  CLOSED
}

input GetSingleGrantInput {
  id: String!
  lang: String = "is"
}

input GetSingleNewsInput {
  slug: String!
  lang: String = "is"
}

input GetSingleEventInput {
  slug: String!
  lang: String = "is"
}

input GetEventsInput {
  lang: String = "is"
  order: String = "desc"
  page: Int = 1
  size: Int = 10
  organization: String
  onlyIncludePastEvents: Boolean
}

input GetNewsDatesInput {
  lang: String = "is"
  order: String = "desc"
  tags: [String!]
  organization: String
}

input GetNewsInput {
  lang: String = "is"
  year: Int
  month: Int
  order: String = "desc"
  page: Int = 1
  size: Int = 10
  tags: [String!]
  organization: String
}

input GetMenuInput {
  name: String!
  lang: String = "is"
}

input GetSingleMenuInput {
  id: String!
  lang: String = "is"
}

input GetSubpageHeaderInput {
  id: String!
  lang: String = "is-IS"
}

input GetSingleSupportQNAInput {
  slug: String!
  lang: String = "is"
}

input GetFeaturedSupportQNAsInput {
  organization: String
  lang: String = "is"
  size: Int = 10
  category: String
  subCategory: String
}

input GetSupportQNAsInput {
  lang: String = "is-IS"
}

input GetSupportQNAsInCategoryInput {
  lang: String = "is-IS"
  slug: String!
}

input GetSupportCategoryInput {
  lang: String = "is-IS"
  slug: String!
}

input GetSupportCategoriesInput {
  lang: String = "is-IS"
}

input GetSupportCategoriesInOrganizationInput {
  lang: String = "is-IS"
  slug: String!
}

input GetPublishedMaterialInput {
  lang: String = "is"
  size: Int
  page: Int
  organizationSlug: String
  searchString: String = ""
  tags: [String!]!
  tagGroups: JSON!
  sort: JSON!
}

input GetTabSectionInput {
  lang: String = "is-IS"
  id: String!
}

input GetGenericTagBySlugInput {
  slug: String!
  lang: String = "is-IS"
}

input GetGenericTagsInTagGroupsInput {
  lang: String = "is-IS"
  tagGroupSlugs: [String!]
}

input GetSingleManualInput {
  slug: String!
  lang: String = "is"
}

union CategoryPage = Article | Manual

input GetCategoryPagesInput {
  lang: String = "is"
  category: String
  group: String
  subgroup: String
  organization: String
  size: Int = 100
  sort: SortField = TITLE
}

input GetSingleEntryTitleByIdInput {
  id: String!
  lang: String = "is"
}

input GetCustomPageInput {
  uniqueIdentifier: CustomPageUniqueIdentifier!
  lang: String = "is"
}

enum CustomPageUniqueIdentifier {
  PensionCalculator
  OfficialJournalOfIceland
  OfficialJournalOfIcelandHelp
  Vacancies
  Grants
  DirectorateOfLabourMyPages
  Verdicts
  BloodDonationRestrictions
}

input GetCustomSubpageInput {
  parentPageId: String!
  lang: String = "is"
  slug: String!
}

input GetGenericListItemBySlugInput {
  slug: String!
  lang: String = "is"
}

input GetOrganizationParentSubpageInput {
  slug: String!
  organizationPageSlug: String!
  lang: String = "is"
}

input GetOrganizationPageStandaloneSitemapLevel1Input {
  organizationPageSlug: String!
  categorySlug: String!
  lang: String = "is"
}

input GetOrganizationPageStandaloneSitemapLevel2Input {
  organizationPageSlug: String!
  categorySlug: String!
  lang: String = "is"
  subcategorySlug: String!
}

input GetBloodDonationRestrictionGenericTagsInput {
  lang: String = "is"
}

input GetBloodDonationRestrictionDetailsInput {
  id: String!
  lang: String = "is-IS"
}

type Mutation {
  createExplicitDiscountCode(input: CreateExplicitDiscountCodeInput!): [Discount!]
  confirmInvoice(input: ConfirmInvoiceInput!): [FlightLeg!]!
}

input CreateExplicitDiscountCodeInput {
  nationalId: String!
  postalcode: Int!
  comment: String!
}

input ConfirmInvoiceInput {
  airline: String
  flightLeg: Travel
  period: Period
  state: [String!]
  age: Range
  gender: String
  postalCode: Int
  nationalId: String
  isExplicit: Boolean
}