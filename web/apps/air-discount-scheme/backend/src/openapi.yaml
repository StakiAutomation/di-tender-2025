openapi: 3.0.0
paths:
  /liveness:
    get:
      operationId: InfraController_liveness
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Liveness'
      tags:
        - internal
  /version:
    get:
      operationId: InfraController_version
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Version'
      tags:
        - internal
  /health/check:
    get:
      operationId: HealthController_check
      parameters: []
      responses:
        '200':
          description: The Health Check is successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
                  info:
                    type: object
                    example:
                      database:
                        status: up
                    additionalProperties:
                      type: object
                      properties:
                        status:
                          type: string
                      additionalProperties:
                        type: string
                    nullable: true
                  error:
                    type: object
                    example: {}
                    additionalProperties:
                      type: object
                      properties:
                        status:
                          type: string
                      additionalProperties:
                        type: string
                    nullable: true
                  details:
                    type: object
                    example:
                      database:
                        status: up
                    additionalProperties:
                      type: object
                      properties:
                        status:
                          type: string
                      additionalProperties:
                        type: string
        '503':
          description: The Health Check is not successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  info:
                    type: object
                    example:
                      database:
                        status: up
                    additionalProperties:
                      type: object
                      properties:
                        status:
                          type: string
                      additionalProperties:
                        type: string
                    nullable: true
                  error:
                    type: object
                    example:
                      redis:
                        status: down
                        message: Could not connect
                    additionalProperties:
                      type: object
                      properties:
                        status:
                          type: string
                      additionalProperties:
                        type: string
                    nullable: true
                  details:
                    type: object
                    example:
                      database:
                        status: up
                      redis:
                        status: down
                        message: Could not connect
                    additionalProperties:
                      type: object
                      properties:
                        status:
                          type: string
                      additionalProperties:
                        type: string
  /api/public/discounts/{discountCode}/user:
    get:
      operationId: PublicDiscountController_getUserByDiscountCode
      parameters:
        - name: discountCode
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AirlineUser'
      tags:
        - Users
      security:
        - bearer: []
  /api/public/discounts/{discountCode}/isValidConnectionFlight:
    post:
      operationId: PublicFlightController_checkFlightStatus
      parameters:
        - name: discountCode
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckFlightBody'
      responses:
        '200':
          description: Input flight is eligible for discount as a connection flight
        '400':
          description: >-
            User does not have any flights that may correspond to connection
            flight
        '403':
          description: >-
            The provided discount code is either not intended for connecting
            flights or is expired
      tags:
        - Flights
      security:
        - bearer: []
  /api/public/discounts/{discountCode}/flights:
    post:
      operationId: PublicFlightController_create
      parameters:
        - name: discountCode
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFlightBody'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlightViewModel'
      tags:
        - Flights
      security:
        - bearer: []
  /api/public/flights/{flightId}:
    get:
      operationId: PublicFlightController_getFlightById
      parameters:
        - name: flightId
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlightViewModel'
      tags:
        - Flights
      security:
        - bearer: []
    delete:
      operationId: PublicFlightController_delete
      parameters:
        - name: flightId
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: ''
      tags:
        - Flights
      security:
        - bearer: []
  /api/public/flights/{flightId}/flightLegs/{flightLegId}:
    delete:
      operationId: PublicFlightController_deleteFlightLeg
      parameters:
        - name: flightId
          required: true
          in: path
          schema:
            type: string
        - name: flightLegId
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: ''
      tags:
        - Flights
      security:
        - bearer: []
info:
  title: Air Discount Scheme
  description: |2

      This documentation is provided to airline booking sites for
      integration purposes.

      If there exists an ID attribute on any object, that ID refers
      to a unique identifier of the object it is in. If the object
      has an additional ID, something like flightId that refers to
      an unique identifier of an object that is related to the
      current one.

      DEV:     https://loftbru.dev01.devland.is/min-rettindi

      STAGING: https://loftbru.staging01.devland.is/min-rettindi

      PROD:    https://loftbru.island.is/min-rettindi

      The flow is like this:

        1.  Contact anyone at Stafrænt Ísland about access to our Github
            organization and credentials for Gervimadur. Then navigate to
            min-rettindi on dev or staging, there you will be able to access
            the discountCodes and use them in the next steps.


        2.  Use the discount to book a flight on your end:

          2a. First you need to fetch the user that is registered to this
              discountCode by calling
              GET /api/public/discounts/{discountCode}/user.
              This endpoint will return user specific information that
              should be populated on your booking page and made readonly
              so the user can not change it.

          2b. Then you can create a flight. A flight contains all the
              relevant information about the booking from the customer.
              Use POST /api/public/discounts/{discountCode}/flights.
              When this endpoint is used the discountCode is
              invalidated, so the user can not use it and needs
              to generate a new discountCode (step 1).


        3.  When you have created a flight you have the possibility
            to delete it. For example if a payment failure has
            occurred. You can use the ID that you received when
            creating the flight to delete it. You have two possibilities:

          3a. You can either delete all related flightLegs that were
              booked by calling
              DELETE /api/public/flights/{flightId}

          3b. Or delete specific flightLegs within the booking by:

            3ba. First fetching the related flightLegs by calling
                 GET /api/public/flights/{flightId}

            3bb. Then use the flightLeg IDs from "3ba." result
                 to delete the desired flightLegs by calling
                 DELETE /api/public/flights/{flightId}/flightLegs/{flightLegId}
  version: '1.0'
  contact: {}
tags: []
servers: []
components:
  securitySchemes:
    bearer:
      scheme: bearer
      bearerFormat: JWT
      type: http
  schemas:
    Liveness:
      type: object
      properties:
        ok:
          type: boolean
      required:
        - ok
    Version:
      type: object
      properties:
        version:
          type: string
      required:
        - version
    Fund:
      type: object
      properties:
        credit:
          type: number
          description: Determines if the user has any discount credits left
        used:
          type: number
        total:
          type: number
      required:
        - credit
        - used
        - total
    AirlineUser:
      type: object
      properties:
        firstName:
          type: string
        middleName:
          type: string
        lastName:
          type: string
        gender:
          type: string
          enum:
            - kk
            - kvk
            - x
            - manneskja
        nationalId:
          type: string
        fund:
          $ref: '#/components/schemas/Fund'
      required:
        - firstName
        - middleName
        - lastName
        - gender
        - nationalId
        - fund
    CheckFlightLegBody:
      type: object
      properties:
        origin:
          type: string
        destination:
          type: string
        date:
          format: date-time
          type: string
      required:
        - origin
        - destination
        - date
    CheckFlightBody:
      type: object
      properties:
        flightLegs:
          type: array
          items:
            $ref: '#/components/schemas/CheckFlightLegBody'
      required:
        - flightLegs
    CreateFlightLegBody:
      type: object
      properties:
        origin:
          type: string
        destination:
          type: string
        originalPrice:
          type: number
        discountPrice:
          type: number
        date:
          format: date-time
          type: string
        cooperation:
          type: string
          enum:
            - norlandair
            - myflug
      required:
        - origin
        - destination
        - originalPrice
        - discountPrice
        - date
        - cooperation
    CreateFlightBody:
      type: object
      properties:
        bookingDate:
          format: date-time
          type: string
        flightLegs:
          type: array
          items:
            $ref: '#/components/schemas/CreateFlightLegBody'
      required:
        - bookingDate
        - flightLegs
    FlightLegViewModel:
      type: object
      properties:
        id:
          type: string
        origin:
          type: string
        destination:
          type: string
        originalPrice:
          type: number
        discountPrice:
          type: number
        date:
          format: date-time
          type: string
      required:
        - id
        - origin
        - destination
        - originalPrice
        - discountPrice
        - date
    FlightViewModel:
      type: object
      properties:
        id:
          type: string
        nationalId:
          type: string
        bookingDate:
          format: date-time
          type: string
        flightLegs:
          type: array
          items:
            $ref: '#/components/schemas/FlightLegViewModel'
      required:
        - id
        - nationalId
        - bookingDate
        - flightLegs
