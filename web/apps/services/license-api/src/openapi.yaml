openapi: 3.0.0
paths:
  /liveness:
    get:
      operationId: InfraController_liveness
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Liveness'
      tags:
        - internal
  /version:
    get:
      operationId: InfraController_version
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Version'
      tags:
        - internal
  /health/check:
    get:
      operationId: HealthController_check
      parameters: []
      responses:
        '200':
          description: The Health Check is successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
                  info:
                    type: object
                    example:
                      database:
                        status: up
                    additionalProperties:
                      type: object
                      properties:
                        status:
                          type: string
                      additionalProperties:
                        type: string
                    nullable: true
                  error:
                    type: object
                    example: {}
                    additionalProperties:
                      type: object
                      properties:
                        status:
                          type: string
                      additionalProperties:
                        type: string
                    nullable: true
                  details:
                    type: object
                    example:
                      database:
                        status: up
                    additionalProperties:
                      type: object
                      properties:
                        status:
                          type: string
                      additionalProperties:
                        type: string
        '503':
          description: The Health Check is not successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  info:
                    type: object
                    example:
                      database:
                        status: up
                    additionalProperties:
                      type: object
                      properties:
                        status:
                          type: string
                      additionalProperties:
                        type: string
                    nullable: true
                  error:
                    type: object
                    example:
                      redis:
                        status: down
                        message: Could not connect
                    additionalProperties:
                      type: object
                      properties:
                        status:
                          type: string
                      additionalProperties:
                        type: string
                    nullable: true
                  details:
                    type: object
                    example:
                      database:
                        status: up
                      redis:
                        status: down
                        message: Could not connect
                    additionalProperties:
                      type: object
                      properties:
                        status:
                          type: string
                      additionalProperties:
                        type: string
  /v1/licenses/verify:
    post:
      operationId: LicensesControllerV1_verify
      description: >-
        This endpoint verifies a user's license. Which means that the digital
        license and the actual license held by the
            relevant institution are compared. If everything adds up, the license is verified.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyLicenseRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyLicenseResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpProblemResponse'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpProblemResponse'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpProblemResponse'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpProblemResponse'
      tags:
        - licenses
  /v2/licenses/verify:
    post:
      operationId: LicensesControllerV2_verify
      description: >-
        This endpoint verifies a user's license. Which means that the digital
        license and the actual license held by the
            relevant institution are compared. If everything adds up, the license is verified.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyLicenseRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyLicenseResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpProblemResponse'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpProblemResponse'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpProblemResponse'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpProblemResponse'
      tags:
        - licenses
  /v1/users/.nationalId/licenses/{licenseId}:
    put:
      operationId: UserLicensesControllerV1_update
      description: >-
        The endpoint updates a single user's license. The method of update is
        according to the LicenseUpdateType parameter
            If Push: The license is updated with the data provided in the payload. If Pull: The license data is pulled and used to update
            the digital license
      parameters:
        - name: X-Param-NationalId
          in: header
          description: The user's national id
          schema:
            type: string
        - name: licenseId
          required: true
          in: path
          description: The license type
          schema:
            type: string
            enum:
              - firearm
              - disability
              - driving
              - hunting
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateLicenseRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateLicenseResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpProblemResponse'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpProblemResponse'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpProblemResponse'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpProblemResponse'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpProblemResponse'
      tags:
        - users-licenses
    delete:
      operationId: UserLicensesControllerV1_revoke
      description: This endpoint revokes a user's license
      parameters:
        - name: X-Param-NationalId
          in: header
          description: The user's national id
          schema:
            type: string
        - name: licenseId
          required: true
          in: path
          description: The license type
          schema:
            type: string
            enum:
              - firearm
              - disability
              - driving
              - hunting
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RevokeLicenseRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RevokeLicenseResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpProblemResponse'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpProblemResponse'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpProblemResponse'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpProblemResponse'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpProblemResponse'
      tags:
        - users-licenses
  /v2/users/.nationalId/licenses/{licenseId}:
    put:
      operationId: UserLicensesControllerV2_update
      description: >-
        The endpoint updates a single user's license. The method of update is
        according to the LicenseUpdateType parameter
            If Push: The license is updated with the data provided in the payload. If Pull: The license data is pulled and used to update
            the digital license
      parameters:
        - name: X-Param-NationalId
          in: header
          description: The user's national id
          schema:
            type: string
        - name: licenseId
          required: true
          in: path
          description: The license type
          schema:
            type: string
            enum:
              - firearm
              - disability
              - driving
              - hunting
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateLicenseRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateLicenseResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpProblemResponse'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpProblemResponse'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpProblemResponse'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpProblemResponse'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpProblemResponse'
      tags:
        - users-licenses
    delete:
      operationId: UserLicensesControllerV2_revoke
      description: This endpoint revokes a user's license
      parameters:
        - name: X-Param-NationalId
          in: header
          description: The user's national id
          schema:
            type: string
        - name: licenseId
          required: true
          in: path
          description: The license type
          schema:
            type: string
            enum:
              - firearm
              - disability
              - driving
              - hunting
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RevokeLicenseRequest'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RevokeLicenseResponse'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpProblemResponse'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpProblemResponse'
        '403':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpProblemResponse'
        '404':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpProblemResponse'
        '500':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpProblemResponse'
      tags:
        - users-licenses
info:
  title: License API
  description: Protected API to update license information
  version: '1.0'
  contact: {}
tags:
  - name: license-api
    description: ''
servers: []
components:
  schemas:
    Liveness:
      type: object
      properties:
        ok:
          type: boolean
      required:
        - ok
    Version:
      type: object
      properties:
        version:
          type: string
      required:
        - version
    VerifyLicenseRequest:
      type: object
      properties:
        barcodeData:
          type: string
          description: PDF417 barcode scanner data
        requestId:
          type: string
          description: Optional request id for logging purposes
      required:
        - barcodeData
        - requestId
    PassIdentity:
      type: object
      properties:
        name:
          type: string
          description: The scanned user's name
        nationalId:
          type: string
          description: The scanned user's national id
        picture:
          type: string
          description: Picture of scanned user
      required:
        - name
        - nationalId
    VerifyLicenseResponse:
      type: object
      properties:
        valid:
          type: boolean
          description: Is the license verified?
        passIdentity:
          description: Verification identity data
          allOf:
            - $ref: '#/components/schemas/PassIdentity'
      required:
        - valid
    HttpProblemResponse:
      type: object
      properties:
        type:
          type: string
          description: A URI reference that identifies the problem type
        title:
          type: string
          description: A short, human-readable summary of the problem type
        status:
          type: number
          description: The HTTP status code
        detail:
          type: string
          description: >-
            A human-readable explanation specific to this occurrence of the
            problem
        instance:
          type: string
          description: >-
            A URI reference that identifies the specific occurrence of the
            problem.
      required:
        - type
        - title
    UpdateLicenseRequest:
      type: object
      properties:
        licenseUpdateType:
          type: string
          enum:
            - push
            - pull
          description: The update action
        expiryDate:
          type: string
          description: The expiration date of the license
        payload:
          type: string
          description: Data to be updated
        requestId:
          type: string
          description: Optional request id for logging purposes
      required:
        - licenseUpdateType
        - requestId
    UpdateLicenseResponse:
      type: object
      properties:
        updateSuccess:
          type: boolean
        data:
          type: object
      required:
        - updateSuccess
    RevokeLicenseRequest:
      type: object
      properties:
        requestId:
          type: string
          description: Optional request id for logging purposes
      required:
        - requestId
    RevokeLicenseResponse:
      type: object
      properties:
        revokeSuccess:
          type: boolean
          description: Has the license been revoked?
      required:
        - revokeSuccess
